name: "Release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release"
        required: true
        type: string
      dryrun:
        description: "Dry run"
        required: false
        type: boolean
        default: false

jobs:
  build-app:
    name: "Build App (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14
            artifact_name: darwin-arm64
            version_file: visivo/version.py
          - os: macos-13
            artifact_name: darwin-x86
            version_file: visivo/version.py
          - os: windows-latest
            artifact_name: windows-x86
            version_file: visivo\\version.py
            shell: bash
          - os: ubuntu-22.04
            artifact_name: linux-x86
            version_file: visivo/version.py

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v9

      - name: Build App
        run: |
          cd viewer && yarn install --network-timeout 600000 && yarn deploy && cd ..
          poetry install
          poetry run write-schema-json
          poetry run copy-install-script
          poetry version ${{ inputs.version }}
          ls 
          echo "VISIVO_VERSION = \"${{ inputs.version }}\"" > ${{ matrix.version_file }}

      - name: Build Artifact
        run: poetry run build

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: visivo-${{ matrix.artifact_name }}
          path: dist/visivo

  create-release:
    name: "Create release v${{ inputs.version }}"
    runs-on: ubuntu-latest
    needs: build-app

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BYPASS_RULES_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v9

      - name: Build App
        run: |
          cd viewer && yarn install && yarn deploy && cd ..
          poetry install
          poetry run write-schema-json
          poetry run copy-install-script
          poetry version ${{ inputs.version }}
          echo "VISIVO_VERSION = \"${{ inputs.version }}\"" > visivo/version.py

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        if: ${{ inputs.dryrun == false }}
        with:
          author_name: Visivo
          author_email: info@visivo.io
          message: "Build viewer for Python package"

      - name: Add and push version tag
        if: ${{ inputs.dryrun == false }}
        run: |
          git config --global user.email "info@visivo.io"
          git config --global user.name "Visivo"
          git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"
          git push origin tag v${{ inputs.version }}

      - name: Add and push latest tag
        if: ${{ inputs.dryrun == false }}
        run: |
          git config --global user.email "info@visivo.io"
          git config --global user.name "Visivo"
          git tag -d latest || true
          git push origin :refs/tags/latest || true
          git tag -a latest -m "Latest versioned release"
          git push origin tag latest

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Zip artifacts
        run: |
          mkdir -p ./dists
          for dir in ./artifacts/*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              zip -r "../../dists/$(basename $dir).zip" ./*
              cd ../..
            fi
          done

      - name: Create version release
        run: |
          gh release create "v${{ inputs.version }}" -t "Release v${{ inputs.version }}" --generate-notes ./dists/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish
        id: publish
        if: ${{ inputs.dryrun == false }}
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry build
          poetry publish

      - name: Trigger Core Deployment
        if: ${{ inputs.dryrun == false }}
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CORE_DEPLOY_TOKEN }}
          repository: visivo-io/core
          event-type: visivo-release

  test-linux-installers:
    name: "Test Linux Installers"
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{ inputs.dryrun == false }}
    strategy:
      fail-fast: false
      matrix:
        distro:
          - ubuntu:22.04      # Most popular Linux distro
          - ubuntu:20.04      # LTS version still widely used
          - debian:12         # Stable base for many distros
          - fedora:39         # Red Hat family
          - centos:stream9    # Enterprise Linux
          - alpine:3.19       # Lightweight/container-focused

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: visivo-linux-x86
          path: ./linux-artifact

      - name: Test artifact installation on ${{ matrix.distro }}
        run: |
          echo "Testing Visivo artifact installation on ${{ matrix.distro }}"

          # Run the installation test in the specified distro container
          docker run --rm -v "$PWD:/workspace" -w /workspace ${{ matrix.distro }} /bin/bash -c "
            set -e

            # Update package manager and install required tools
            if command -v apt-get >/dev/null 2>&1; then
              apt-get update
              apt-get install -y unzip
            elif command -v yum >/dev/null 2>&1; then
              yum update -y
              yum install -y unzip
            elif command -v dnf >/dev/null 2>&1; then
              dnf update -y
              dnf install -y unzip
            elif command -v apk >/dev/null 2>&1; then
              apk update
              apk add unzip bash
            elif command -v pacman >/dev/null 2>&1; then
              pacman -Syu --noconfirm
              pacman -S --noconfirm unzip
            elif command -v zypper >/dev/null 2>&1; then
              zypper refresh
              zypper install -y unzip
            fi

            # Set up environment
            export HOME=/tmp/test-home
            mkdir -p \$HOME/.visivo/bin

            # Manually install the artifact (simulating what the installer script does)
            echo 'Installing Visivo artifact...'
            cp /workspace/linux-artifact/visivo \$HOME/.visivo/bin/visivo
            chmod +x \$HOME/.visivo/bin/visivo

            # Add Visivo to PATH for this session
            export PATH=\"\$HOME/.visivo/bin:\$PATH\"

            # Test that visivo command works
            echo 'Testing visivo --version...'
            visivo --version

            # Verify the version matches
            INSTALLED_VERSION=\$(visivo --version 2>&1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
            EXPECTED_VERSION='${{ inputs.version }}'

            echo \"Installed version: \$INSTALLED_VERSION\"
            echo \"Expected version: \$EXPECTED_VERSION\"

            if [ \"\$INSTALLED_VERSION\" = \"\$EXPECTED_VERSION\" ]; then
              echo '✅ Version verification passed'
            else
              echo '❌ Version verification failed'
              exit 1
            fi

            # Test basic functionality
            echo 'Testing visivo --help...'
            visivo --help

            echo '✅ Artifact installation test passed for ${{ matrix.distro }}'
          "
