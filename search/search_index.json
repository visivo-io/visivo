{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>There's a few things that you will need to get configured to get started with your visivo project. We will walk through those together in this article to help get you up and running fast!  </p> <p>Still have questions after reading? Reach out to jared@visivo.io and we'd be happy to help.</p>"},{"location":"#install-visivo-python-package","title":"Install Visivo Python Package","text":"<p>You can easily install visivo via <code>pip</code>: </p><pre><code>pip install visivo\n</code></pre> <p>or a specific version:</p> <p></p><pre><code>pip install visivo==1.0.26\n</code></pre> Now you have access to the <code>visivo</code> CLI!   <p>Note</p> <p>Visivo requires Python 3.10+ You may need to create a virtual environment using Python 3.10+ to run visivo.</p>"},{"location":"#get-a-visivo-api-key","title":"Get a Visivo API Key","text":"<p>If you want to deploy your Visivo project to the Visivo cloud (recommended), you will need an API key. Here's how you can get one: </p> <ol> <li>Visit app.visivo.io and register or login. There's a free trial with no credit card required. </li> <li>On login you will be routed to the profile page. </li> <li>Create a new token &amp; copy the value down! You will need that value in the next section. </li> </ol>"},{"location":"#setup-using-visivo-init","title":"Setup using <code>visivo init</code>","text":"<p>To quickly get up and running, you can run <code>visivo init</code> and that will create a <code>project folder</code>, <code>project.visivo.yml</code>, and <code>profile.yml</code> with a project skeleton. </p> <p>When prompted enter in the API key value that you jotted down.</p> <p>You can manually edit everything that Visivo created (more on that in the Manual Setup section). </p> Tip <p>Want to get started quickly with dummy data? </p> <p>Run <code>visivo init</code> and choose <code>sqlite</code> when prompted:</p> <p>? Database type (postgresql, sqlite, snowflake, mysql): sqlite</p> <p>Then you're good to go! </p> <p>Run <code>visivo serve</code>, checkout your dashboard and start playing around with it. </p> <p>You can always add a source with another connection later.</p>"},{"location":"#run-your-project-locally-with-visivo-serve","title":"Run Your Project Locally With <code>visivo serve</code>","text":"<p>Visivo gives you the ability to run your project locally and view dashboards on local host using the command <code>visivo serve</code>. </p> <p>Once you run that command you should see something similar to this: </p> <p>Click through the the link after <code>Serving project at</code>, which in the example above was <code>http://localhost:8000</code></p> <p>every time you change your configurations in your project, Visivo will automatically update impacted items with a live reload. </p>"},{"location":"#deploy-your-project-to-remote-with-visivo-deploy","title":"Deploy your Project to Remote With <code>visivo deploy</code>","text":"<p>Now that you have a project that you are happy with, you can push it to a deployment where you will be able to share these insights with your team. </p> <p>We recommend setting up a CI process that performs production deploys after your transformations run and performs deploys for pull requests. However you can also deploy from local if you want to share development version of your work.</p> <p>To deploy all you have to do is run <code>visivo deploy -s a-name-of-your-choice</code>. </p> <p>The <code>-s</code> flag tells Visivo which stage you want to deploy to. You can think of stages like environments where you house different versions of your project remotely. </p>"},{"location":"#manual-setup","title":"Manual setup","text":""},{"location":"#create-a-projectvisivoyml-file","title":"Create a <code>project.visivo.yml</code> file","text":"<p>The <code>project.visivo.yml</code> is a special file that visivo uses for your project configurations. You will want to put the file at the root directory where you want your project to live. If you are using dbt, this will likely in the same folder as the <code>dbt_project.yml</code> file. </p> <p>The <code>project.visivo.yml</code> only requires that the name attribute is filled out however below is a taste of where we are heading to get a full project set up. Don't worry we will walk through all of these configurations one by one. </p>project_dir/project.visivo.yml<pre><code>name: awesome-project\ndefaults:\n  source_name: local-sqlite\n  alert_name: slack\n\nalerts:\n  - name: slack\n    type: slack\n    webhook_url: https://hooks.slack.com/services/your-slack-webhook-key\n\nsources:\n  - name: local-sqlite\n    database: target/local.db\n    type: sqlite\n  - name: local-postgres\n    database: postgres\n    type: postgresql\n    username: postgres\n    password: postgres\n    port: 5434\n  - name: remote-snowflake\n    type: snowflake\n    database: {{ env_var('DEV_DB') }}\n    account: {{ env_var('SNOWFLAKE_ACCOUNT') }}\n    db_schema: DEFAULT\n    username: {{ env_var('SNOWFLAKE_USER') }}\n    warehouse: DEV\n    password: {{ env_var('SNOWFLAKE_PASSWORD') }}\n\nmodels:\n  - name: widget_sales\n    sql: select * from widget_fact_table\ntraces:\n  - name: simple_trace\n    model: ${ref(widget_sales)}\n    cohort_on: widget\n    props:\n      x: ?{ date_trunc('week', completed_at) }\n      y: ?{ sum(amount) }\n      marker: \n        color: ?{ case sum(amount) &gt; 200 then 'green' else 'blue' end }\n        shape: square\n      mode: 'lines'\ncharts:\n  - name: simple_chart\n    traces:\n      - ${ref(simple_trace)}\n    layout:\n      - title: Widget Sales by Week\n\ndashboards:\n  - name: simple_dashboard\n    rows:\n      - height: medium\n        items:\n          - width: 5\n            chart: ${ref(simple_chart)}\n          - width: 2\n            markdown: |\n              # Here is the first\n              1. Numbered\n              1. List\n</code></pre>"},{"location":"#set-up-a-source-store-secrets-safely","title":"Set up a Source &amp; store secrets safely","text":"<p>Sources are connections to your data warehouses and databases that Visivo will run queries against. You can set up sources by configuring them in your <code>project.visivo.yml</code>.  </p>project_dir/project.visivo.yml<pre><code>sources:\n  - name: local-sqlite\n    database: target/local.db\n    type: sqlite\n  - name: local-postgres\n    database: postgres\n    type: postgresql\n    username: postgres\n    password: postgres\n    host: localhost\n    port: 5434\n  - name: remote-snowflake\n    type: snowflake\n    database: {{ env_var('DEV_DB') }}\n    account: {{ env_var('SNOWFLAKE_ACCOUNT') }}\n    db_schema: DEFAULT\n    username: {{ env_var('SNOWFLAKE_USER') }}\n    warehouse: DEV\n    password: {{ env_var('SNOWFLAKE_PASSWORD') }}\n</code></pre> For some sources like the <code>local-sqlite</code> and <code>local-postgres</code> you may not need to store any secrets since they are just running locally. However remote connections like the <code>remote-snowflake</code> target, you will definitely want to make sure that you are not storing these attributes in plain text.  <p>This is where the <code>env_var()</code> jinja function comes in handy. You can use this jinja function to reference environment variables that are either stored on your machine or in a <code>.env</code> file. </p>"},{"location":"#configure-defaults","title":"Configure Defaults","text":"<p>Defaults are also optional, but highly recommended configurations to run Visivo. </p> <p>Without defaults you would need to specify the source and / or alert whenever you needed to use them. For example to run the <code>test</code> command you would need to pass the source and alert flag: <code>visivo test -t remote-snowflake -a slack</code></p> <p>However, if you have defaults set like this:  </p>project_dir/project.visivo.yml<pre><code>defaults:\n  source_name: remote-snowflake\n  alert_name: slack\n</code></pre> Then you can just run <code>visivo test</code> and Visivo will default to remote-snowflake for the source and slack for the destination."},{"location":"#create-a-trace","title":"Create a Trace","text":"<p>You can think of traces like lines on a chart with specific configurations. With Visivo you can configure pretty much anything from the curve of a line, to if data should be represented as a bar, line or area. Additionally you can set these configurations based on attributes of your underlying data. </p> <p>Here's a simple example of a trace: </p>project_dir/project.visivo.yml<pre><code>traces:\n  - name: simple_trace\n    model: ${ref(widget_sales)}\n    cohort_on: widget\n    props:\n      type: scatter\n      x: ?{ date_trunc('week', completed_at) }\n      y: ?{ sum(amount) }\n      marker: \n        color: ?{ case sum(amount) &gt; 200 then 'green' else 'blue' end }\n        shape: square\n      mode: 'lines'\n</code></pre> We won't go into all of the details of the trace here, but a few things to note:  <ul> <li><code>type</code> tells Visivo how to plot the data. Visivo utilizes plotly.js and you can use most plotly trace types for this attribute. </li> <li><code>cohort_on</code> let's Visivo know that you would like cut your chart by the <code>widget</code> column from the <code>widget_sales</code> table. Thus you will get as many lines as you have distinct <code>widget</code> types in the table from this trace. </li> <li><code>?{ }</code> is a special function that lets Visivo know that the statement contained within the function should be passed as part of the select statement to a query against your source. Visivo will compile the full query so you don't have to worry about building and maintaining boilerplate sql. </li> <li>When <code>?{}</code> is not used, Visivo knows that you are simply passing static configuration to trace. This might make more sense for configurations that you would want to stay consistent across the whole trace like font. </li> </ul> <p>Traces are able to be sourced from different sources. You can set the default source at the trace level by specifying a source name in the <code>source_name</code> attribute of the source. </p>"},{"location":"#create-a-chart","title":"Create a Chart","text":"<p>Charts are objects that can contain one to many traces and traces can be present on many charts. This allows both modularity, the ability to connect traces of different grains on the same chart, and the ability to connect traces from different data sources on the same chart. </p> <p>Here's a simple example of the chart configuration: </p>project_dir/project.visivo.yml<pre><code>charts:\n  - name: simple_chart\n    traces:\n      - ${ref(simple_trace)}\n    layout:\n      - title: Widget Sales by Week\n</code></pre>"},{"location":"#create-a-dashboard","title":"Create a Dashboard","text":"<p>Dashboards house <code>charts</code>, <code>tables</code> and <code>markdown</code>. They help you set up a highly flexible grid so that you can put all of your information exactly where you need it. </p> <p>You can structure the grid by specifying rows that house many items. Items have a particular width that is evaluated relative to the other item widths in the row. So if for example you had 3 items in a row with widths of 5, 2 and 3. The first item would take up 50% of the row, the second 20% and the third 30%.  </p><pre><code>Dashboard --&gt; row --&gt; item --&gt; chart/table/markdown\n                 |        |\n                 |         --&gt; width\n                  --&gt; height \n</code></pre> Here's how that looks in yaml: project_dir/project.visivo.yml<pre><code>dashboards:\n  - name: simple_dashboard\n    rows:\n      - height: medium\n        items:\n          - width: 5\n            chart: ${ref(simple_chart)}\n          - width: 2\n            markdown: |\n              # Here is the first\n              1. Numbered\n              1. List\n</code></pre>"},{"location":"#set-up-alerts-optional","title":"Set up Alerts - Optional","text":"<p>When you run <code>visivo test</code> you are able to validate assumptions that you have about your charts and traces. Sometimes you might want a notification about testing failures. This is where alerts come in! You can set up slack alerts using webhooks or email alerts. </p> <p>To set up a slack alert destination you will first need to configure an incoming webhook in slack. You can follow this guide to get started there</p> <p>Once you have your webhook key you can set up the alert like this: </p>project_dir/project.visivo.yml<pre><code>alerts:\n  - name: slack\n    type: slack\n    webhook_url: https://hooks.slack.com/services/your-slack-webhook-key\n</code></pre>"},{"location":"how_it_works/","title":"How It Works","text":""},{"location":"how_it_works/#how-visivo-works","title":"How Visivo Works","text":"<p>When working with Visivo, all you have to do is write yaml configurations &amp; CLI commands. Visivo handles everything else automatically so you and your team can focus on just the stuff that matters. While the example that we will go through here is not exactly how Visivo functions under the hood, it's a pretty nice approximation to give you an idea of how the sauce is made!</p> <p>Say you have a model called <code>widget_sales</code> that looks like this: </p> widget quantity completed_at Useful Widget 300 2023-01-01 Useful Widget 250 2023-01-07 Useful Widget 150 2023-01-08 Expensive Widget 900 2023-01-02 Expensive Widget 50 2023-01-03 Expensive Widget 50 2023-01-09 <p>You can write a trace in any yml file directly your project. The trace can be just a few lines or more complex if you want to customize it. Here's an example of a fairly simple trace that builds on the <code>widget_sales</code> model: </p> Relational Dbdbt project_dir/project.visivo.yml<pre><code>models:\n  - name: widget_sales\n    sql: select * from widget_sales\ntraces:\n  - name: simple_trace\n    model: ${ref(widget_sales)}\n    cohort_on: widget\n    props:\n      x: ?{ date_trunc('week', completed_at) }\n      y: ?{ sum(amount) }\n      marker: \n        color: ?{ case sum(amount) &gt; 200 then 'green' else 'blue' end }\n        shape: square\n      mode: 'lines'\ncharts:\n  - name: simple_chart\n    traces:\n      - ${ref(simple_trace)}\n    layout:\n      - title: Widget Sales by Week\n</code></pre> <p></p>project_dir/models/schema.yml<pre><code>traces:\n  - name: simple_trace\n    model: ${ref(widget_sales)}\n    cohort_on: ?{ widget }\n    props:\n      x: ?{ date_trunc('week', completed_at) }\n      y: ?{ sum(amount) }\n      marker: \n        color: ?{ case sum(amount) &gt; 200 then 'green' else 'blue' end }\n        shape: square\n      mode: 'lines'\ncharts:\n  - name: simple_chart\n    traces:\n      - ${ref(simple_trace)}\n    layout:\n      - title: Widget Sales by Week\nmodels:\n  - name: widget_sales\n    description: \"A table containing widgets sales sourced from the CRM\"\n    columns:\n      - name: widget\n        description: The type of widget sold\n      - name: quantity\n        description: The number of widgets sold\n      - name: completed_at\n        description: Timestamp of when the transaction occurred\n</code></pre> Where the dbt model is defined like this: project_dir/models/widget_sales.sql<pre><code>SELECT \n  widget, \n  quantity, \n  completed_at\nFROM {{ source('crm', 'sales_of_widgets') }}\n</code></pre> <p>Using that context, Visivo will produce this query and store it in your target directory: </p>project_dir/target/traces/simple_trace/query.sql<pre><code>WITH \nsql as (\nselect * from widget_sales --context set to target.database &amp; target.schema\n)\nselect \n  widget as \"cohort_on\",\n  date_trunc('week', completed_at) as \"x\", \n  sum(amount) as \"y\", \n  case sum(amount) &gt; 300 then 'green' else 'blue' end as \"marker.color\"\nfrom sql \nGROUP BY \n  \"cohort_on\",\n  \"x\"\n</code></pre> After small transformations on the output of the query you get this <code>data.json</code> which is stored in the target directly next to the query to enable debugging: project_dir/target/traces/simple_trace/data.json<pre><code>{\n\"Useful Widget\": {\n  \"x\": [\"2023-01-01\", \"2023-01-08\"],\n  \"y\": [300, 400],\n  \"marker.color\": [\"blue\", \"green\"]\n  },\n\"Expensive Widget\": {\n  \"x\": [\"2023-01-01\", \"2023-01-08\"],\n  \"y\": [950, 50],\n  \"marker.color\": [\"green\", \"blue\"]\n  }\n}\n</code></pre> Next Visivo generates the plotly chart configuration: project_dir/target/charts/simple_chart/chart.js<pre><code>...\n\nvar traces = [\n  {\n    name: \"Useful Widget\",\n    x: data[\"Useful Widget\"][\"x\"],\n    y: data[\"Useful Widget\"][\"y\"],\n    marker: {\n      color: data[\"Useful Widget\"][\"marker.color\"],\n      shape: \"square\"\n    },\n    mode: \"lines\"\n  },\n  {\n    name: \"Expensive Widget\",\n    x: data[\"Expensive Widget\"][\"x\"],\n    y: data[\"Expensive Widget\"][\"y\"],\n    marker: {\n      color: data[\"Expensive Widget\"][\"marker.color\"],\n      shape: \"square\"\n    },\n    mode: \"lines\"\n  },\n]\nvar layout = {title: \"Widget Sales by Week\" }\n\nPlotly.newPlot('aDiv', data, layout);\n</code></pre> The compiled JS produces a chart! Now you can mix and match traces with the one we outlined here or deploy this chart to 1 or more dashboards without having to do any duplicate work.   <p></p>"},{"location":"how_tos/","title":"Tutorials","text":""},{"location":"use_cases/","title":"Use cases","text":""},{"location":"use_cases/#for-engineers-visivo-as-a-devops-unlock","title":"For Engineers: Visivo as a DevOps Unlock","text":""},{"location":"use_cases/#for-analytics-visivo-as-a-bi-solution","title":"For Analytics: Visivo as a BI Solution","text":""},{"location":"viewpoint/","title":"Viewpoint","text":""},{"location":"viewpoint/#visivo","title":"Visivo","text":""},{"location":"viewpoint/#whats-up-with-data-visualization","title":"What's Up With Data visualization?","text":"<p>There's a number of code based frameworks for defining transformations and for creating charts, but... </p> <ol> <li>They are very difficult to use, requiring technical experience in 2-5 different programming languages.</li> <li>They require that you maintain infrastructure to support your internal BI product.</li> </ol> <p>There's also a number of BI tools that are easy to use and deploy, however... </p> <ol> <li>They are not version controlled meaning that they sit outside of your transformation stack. This causes bottle necks in improving and expanding the transformation layer since it's unclear which charts depend on which models. </li> <li>They are not testable. This makes exposures like dashboards and analyses very expensive for the team to maintain. It also means that breaking changes in production go undetected until someone stumbles across them... if your lucky enough for someone to find them. </li> </ol> <p>We think that having to choose between building custom software and high quality data visualization is a big problem.  </p> <p>We built visivo to bridge the gap between code based data visualization and usability. </p> <p>We firmly believe that to service modern data needs in both analytics and software engineering we need to have version control in BI. However that cannot come at the expense of moving quickly. In fact we think that a code base approach actually helps you move faster, lower maintenance costs, build more nuanced visualizations and unblock downstream engineering and data teams. </p>"},{"location":"viewpoint/#the-current-landscape","title":"The Current Landscape","text":"<p>Business intelligence is critical. These days the charts that executives, engineers, product managers, analysts and others look at on a day to day basis facilitate decision making, catch breaking bugs and even power entire operations teams. BI today acts more as an internal product than the nice to have tool it was 10-30 years go.</p> <p>Even so, BI has not changed much since tableau was released in 2005. It's largely the same product and newer companies like redash or mode have mostly copied the architecture.  </p> <ul> <li>Non-version controlled custom queries take an inefficient slice of the database and produce some charts using a GUI. </li> <li>Chart configurations are not version controllable, or if they are it's half baked. </li> <li>There's no testability and no way to deploy changes to different environments. </li> <li>Breaking changes in production are common. </li> <li>Changes to transformations blows up downstream charts and there's no way to know that ex-ante. <ul> <li>If you're lucky you will find out about these problems when your CEO goes looking for a chart to show to investors and then is confused when it \"looks off\". </li> <li>If you're unlucky your CEO unknowingly reports the untested &amp; incorrect data to investors. </li> </ul> </li> </ul> <p>Visivo solves these problems by sitting right in your stack dbt, django or rails project and builds visualizations &amp; dashboards right on top of your data. It's code and it's testable but it's no more complicated to use than popular BI tools. </p>"},{"location":"viewpoint/#the-modern-data-stack","title":"The Modern Data Stack","text":"<p>From first principles, data visualization has two fundamental components:</p> <ul> <li><code>Transformation</code> of a bigger data set into a thin compressed slice. ie. sum sales amount by week from a transaction model where the sale occurred in 2023.</li> <li><code>Configuration</code> that defines chart attributes and customization. ie. use bars vs. lines, line color equals blue ect.</li> </ul>"},{"location":"viewpoint/#our-guiding-values","title":"Our Guiding Values","text":"<p>We think that your data is important and data visualization is the last leg data pipeline. Dare we say that your data stack is as important as your product to sustaining long term repeatable success. It helps improve executive decisions, supports operations, bolsters engineer and enables a deep understanding of your customer, product, market and tech stack. </p> <p>With that in mind we think your data visualization should work like the rest of your stack. It should be:</p> <ol> <li><code>Testable</code> - It is code, and should be treated like it.</li> <li><code>Sharable</code> - Dashboards and config can be shared internally and externally.</li> <li><code>Adoptable</code> - We have a tool that fits into existing workflows.</li> <li><code>Scaleable</code> - Pricing and deployments are clear and predictable.</li> <li><code>Explainable</code> - It is easy to document and understand dependencies between transformations and visualizations.</li> </ol>"},{"location":"reference/cli/","title":"CLI","text":""},{"location":"reference/cli/#visivo","title":"visivo","text":"<p>Usage:</p> <pre><code>visivo [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -p, --profile\n  -e, --env-file TEXT\n  --version            Show the version and exit.\n  --help               Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#aggregate","title":"aggregate","text":"<p>Usage:</p> <pre><code>visivo aggregate [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -o, --output-dir TEXT  Directory to output results\n  -j, --json-file TEXT   The file with the raw json results from the query\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#archive","title":"archive","text":"<p>Archives a stage.  You must specify a stage when deploying a project.</p> <p>Usage:</p> <pre><code>visivo archive [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -s, --stage TEXT     The stage of the project to deploy i.e. staging\n                       [required]\n  -h, --host TEXT      Host to deploy to\n  -u, --user-dir TEXT  Directory containing profile\n  --help               Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#authorize","title":"authorize","text":"<p>Handles the authorization process.</p> <p>Checks for an existing token, and if the user chooses to add a new token, starts a Flask server (listening for a callback on http://localhost:5001/authorize-device-token). It then opens an external webapp (at /authorize-device) for testing. The external webapp should eventually send a callback to our Flask server.</p> <p>The process will wait for up to CALLBACK_RESPONSE_WAIT_TIME seconds for the callback. If the callback is not received, you will be prompted to cancel or continue waiting.</p> <p>Usage:</p> <pre><code>visivo authorize [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -h, --host TEXT  Host to deploy to\n  --help           Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#compile","title":"compile","text":"<p>Parses the files in your working directory, extracting visivo configurations and then using those configurations to build the trace queries and a project.json file in your source directory. Queries are not run on compile, just written.</p> <p>Usage:</p> <pre><code>visivo compile [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -s, --source TEXT        Name of the default source connection to use. This\n                           overrides the default source in the project.\n  -w, --working-dir TEXT   Directory to run the command\n  -o, --output-dir TEXT    Directory to output results\n  -dp, --dbt-profile TEXT  The dbt profile to use\n  -dt, --dbt-target TEXT   The dbt target to use\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#create","title":"create","text":"<p>Enables a quick set up by writing your source &amp; api credentials to an env file.</p> <p>Usage:</p> <pre><code>visivo create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --project-name TEXT  The name of the project to initialize\n  --help               Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#dbt","title":"dbt","text":"<p>Refreshes the dbt objects in the for use in Visivo.</p> <p>Usage:</p> <pre><code>visivo dbt [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -w, --working-dir TEXT   Directory to run the command\n  -o, --output-dir TEXT    Directory to output results\n  -dp, --dbt-profile TEXT  The dbt profile to use\n  -dt, --dbt-target TEXT   The dbt target to use\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#deploy","title":"deploy","text":"<p>Sends the current version of your project, traces &amp; data to app.visivo.io where it can be viewed by other users on your account. You must specify a stage when deploying a project. The stage allows multiple versions of your project to exist remotely. This is very useful for setting up different dev, CI and production environments.</p> <p>Usage:</p> <pre><code>visivo deploy [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -w, --working-dir TEXT  Directory to run the command\n  -o, --output-dir TEXT   Directory to output results\n  -s, --stage TEXT        The stage of the project to deploy i.e. staging\n                          [required]\n  -h, --host TEXT         Host to deploy to\n  -u, --user-dir TEXT     Directory containing profile\n  --help                  Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#dist","title":"dist","text":"<p>Creates a distributable version of this dashboard and stores it in a 'dist' folder. This folder can be statically deployed to any web server, hosting service, or bucket storage.</p> <p>Note: Make sure to run <code>visivo run</code> before running <code>visivo dist</code>.</p> <p>Usage:</p> <pre><code>visivo dist [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -o, --output-dir TEXT  Directory to output results\n  -d, --dist-dir TEXT    Directory to output the distribution files\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#init","title":"init","text":"<p>Enables a quick set up by writing your source &amp; api credentials to an env file.</p> <p>Usage:</p> <pre><code>visivo init [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -pd, --project-dir TEXT  Directory to initialize the project in\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#list","title":"list","text":"<p>Lists all objects of a given type in the project.</p> <p>Usage:</p> <pre><code>visivo list [OPTIONS] {sources|models|traces}\n</code></pre> <p>Options:</p> <pre><code>  -w, --working-dir TEXT  Directory to run the command\n  -o, --output-dir TEXT   Directory to output results\n  -s, --source TEXT       Name of the default source connection to use. This\n                          overrides the default source in the project.\n  --help                  Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#run","title":"run","text":"<p>Compiles the project and then runs the trace queries to fetch data to populate in the traces. Writes all data to the source directory. Can skip the compile with the --skip-compile flag.</p> <p>Usage:</p> <pre><code>visivo run [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -w, --working-dir TEXT   Directory to run the command\n  -o, --output-dir TEXT    Directory to output results\n  -df, --dag-filter TEXT   Run the command with the given dag filter. ie `-df\n                           'dashboard-name'+` will only run the dashboard\n                           named 'dashboard-name' and it's children\n  -s, --source TEXT        Name of the default source connection to use. This\n                           overrides the default source in the project.\n  -th, --threads TEXT      The max number of threads to use when running trace\n                           queries\n  -dp, --dbt-profile TEXT  The dbt profile to use\n  -dt, --dbt-target TEXT   The dbt target to use\n  -sc, --skip-compile      Skips the compile phase. This is useful if you have\n                           already compiled just want to run or serve.\n  -p, --port INTEGER       What port to serve on\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#serve","title":"serve","text":"<p>Enables fast local development by spinning up a localhost server to run and view your project locally. Visivo will automatically refresh your project and re-run traces that have changed when you make updates to project files.</p> <p>Usage:</p> <pre><code>visivo serve [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -s, --source TEXT        Name of the default source connection to use. This\n                           overrides the default source in the project.\n  -w, --working-dir TEXT   Directory to run the command\n  -o, --output-dir TEXT    Directory to output results\n  -df, --dag-filter TEXT   Run the command with the given dag filter. ie `-df\n                           'dashboard-name'+` will only run the dashboard\n                           named 'dashboard-name' and it's children\n  -p, --port INTEGER       What port to serve on\n  -th, --threads TEXT      The max number of threads to use when running trace\n                           queries\n  -sc, --skip-compile      Skips the compile phase. This is useful if you have\n                           already compiled just want to run or serve.\n  -dp, --dbt-profile TEXT  The dbt profile to use\n  -dt, --dbt-target TEXT   The dbt target to use\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#test","title":"test","text":"<p>Enables testing trace values to ensure that the charts that are being produced have the characteristics that you would expect.</p> <p>Usage:</p> <pre><code>visivo test [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -s, --source TEXT       Name of the default source connection to use. This\n                          overrides the default source in the project.\n  -w, --working-dir TEXT  Directory to run the command\n  -o, --output-dir TEXT   Directory to output results\n  --help                  Show this message and exit.\n</code></pre>"},{"location":"reference/configuration/Alert/","title":"Alert","text":""},{"location":"reference/configuration/Alert/#alert","title":"Alert","text":""},{"location":"reference/configuration/Alert/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. if_ string None A EvalString that must evaluate to true for the alert to fire destinations Array of ConsoleDestination or EmailDestination or SlackDestination []"},{"location":"reference/configuration/Chart/","title":"Chart","text":""},{"location":"reference/configuration/Chart/#chart","title":"Chart","text":""},{"location":"reference/configuration/Chart/#overview","title":"Overview","text":"<p>Charts enable you to combine one or more traces with layout configurations (titles, axis labels, ect.).</p> <p>Tip</p> <p>You can add traces of different types to a chart. For example, you may want to display an <code>indicator</code> on top of a <code>bar</code> to show how what the bars add up to.</p> <p>You can also configure interactivity in your charts by setting up a  <code>selector</code>.</p>"},{"location":"reference/configuration/Chart/#common-configurations","title":"Common Configurations","text":""},{"location":"reference/configuration/Chart/#single-trace","title":"Single Trace","text":"<p>This is the most common and simplest chart setup. You will use this when you want to display a single trace.</p> <p>Single Trace</p> Code <pre><code>models:\n  - name: Array of Numbers\n    args: [\"curl\", \"-s\", \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/y_values.csv\"]\n\ntraces:\n  - name: Simple Scatter\n    model: ref(Array of Numbers)\n    props:\n      type: scatter\n      x: ?{ ln(numbers_column)}\n      y: ?{numbers_column}\n      mode: markers\n      marker:\n        size: ?{ abs(sin(exp(numbers_column) - 5)*100) }\n        opacity: ?{ abs(cos(exp(numbers_column) - 5)*100)/100 }\n    filters:\n      - ?{ numbers_column &lt; 400 }\n    order_by:\n      - ?{numbers_column}\n\ncharts:\n  - name: Single Trace Chart\n    traces:\n      - ref(Simple Scatter)\n    layout:\n      title:\n        text: \"Single Trace\"\n</code></pre> <p></p>"},{"location":"reference/configuration/Chart/#duel-axis","title":"Duel Axis","text":"<p>When you want to display two different types of data on the same chart, duel axis can come in handy.</p> <p>Tip</p> <p>You can actually create a third, and fourth axis (see plotly docs), however, we do not recommended using more than two yaxes.</p> <p>Here's a working example that you can copy and paste into your project:</p> <p>Duel Y Axes</p> Code <pre><code>models:\n  - name: Series of Numbers\n    args: [\"curl\", \"-s\", \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/y_values.csv\"]\n\ntraces:\n  - name: Yaxis Trace\n    model: ref(Series of Numbers)\n    props:\n      type: bar\n      y: ?{numbers_column}\n      marker:\n        color: '#713B57'\n        opacity: .7\n    order_by:\n      - ?{numbers_column}\n\n  - name: Yaxis2 Trace\n    model: ref(Series of Numbers)\n    props:\n      type: scatter\n      y: ?{ (500 -  numbers_column) }\n      yaxis: 'y2'\n      line:\n        shape: spline\n        smoothing: .1\n        color: orange\n\n    order_by:\n      - ?{numbers_column}\n\ncharts:\n  - name: Duel Axis\n    traces:\n      - ref(Yaxis2 Trace)\n      - ref(Yaxis Trace)\n    layout:\n      title:\n        text: \"Dual Axis\"\n      legend:\n        orientation: \"h\"\n      yaxis:\n        title:\n          text: \"yaxis title\"\n          font:\n            size: 18\n            color: '#713B57'\n      yaxis2:\n        title:\n          text: \"yaxis2 title\"\n          font:\n            size: 18\n            color: orange\n        side: right\n        overlaying: 'y'\n        anchor: 'y'\n        showgrid: false\n</code></pre> <p></p>"},{"location":"reference/configuration/Chart/#position-traces-with-domains","title":"Position Traces with Domains","text":"<p>You can use domains to position traces on your chart. This is useful when you want to display multiple traces on your chart. The <code>domain</code> attribute in the trace props enables you to position your traces relative to 0,0 coordinates of the chart.</p> <p>Here's some working examples that you can copy and paste into your project:</p> <p>Trend Line + Multiple Indicators</p> Code <pre><code>models:\n  - name: Numbers From Remote CSV\n    args: [\"curl\", \"-s\", \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/y_values.csv\"]\n\ntraces:\n  - name: Line Trace\n    model: ref(Numbers From Remote CSV)\n    props:\n      type: scatter\n      y: ?{numbers_column}\n      line:\n        shape: spline\n        color: orange\n\n  - name: Average Value\n    model: ref(Numbers From Remote CSV)\n    columns:\n      avg_numbers_column: avg(numbers_column)\n    props:\n      type: indicator\n      value: column(avg_numbers_column)[0]\n      number:\n        font:\n          size: 35\n        suffix: \" avg\"\n      domain:\n        y: [0, .7]\n        x: [.5, 1]\n\n  - name: Total Value\n    model: ref(Numbers From Remote CSV)\n    columns:\n      sum_numbers_column: sum(numbers_column)\n    props:\n      type: indicator\n      value: column(sum_numbers_column)[0]\n      number:\n        font:\n          size: 35\n        suffix: \" sum\"\n      domain:\n        y: [.5, 1]\n        x: [.2, .5]\n\ncharts:\n  - name: Big Number Over Line Chart\n    traces:\n      - ref(Average Value)\n      - ref(Total Value)\n      - ref(Line Trace)\n    layout:\n      title:\n        text: \"Indicator + Scatter Plot\"\n</code></pre> <p></p>"},{"location":"reference/configuration/Chart/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. selector Selector None The selector for the choosing which trace data is shown. traces Array of Trace [] A list of trace either written in line in the chart called using the ref() function. layout Layout None A layout configuration that must adhere to the layout.schema.json file."},{"location":"reference/configuration/Chart/Layout/","title":"Layout","text":""},{"location":"reference/configuration/Chart/Layout/#layout","title":"Layout","text":"<p>A schema to validate plotly layout</p>"},{"location":"reference/configuration/Chart/Layout/#attributes","title":"Attributes","text":"<p>These attributes apply to the <code>chart.layout</code> object. </p><pre><code>activeselection:\n  fillcolor: 'any' #(1)!\n  opacity: 'number' #(2)!\nactiveshape:\n  fillcolor: 'any' #(3)!\n  opacity: 'number' #(4)!\nannotations: array\nautosize: 'boolean' #(5)!\nautotypenumbers: 'any' #(6)!\nbargap: 'number' #(892)!\nbargroupgap: 'number' #(893)!\nbarmode: 'any' #(894)!\nbarnorm: 'any' #(895)!\nboxgap: 'number' #(896)!\nboxgroupgap: 'number' #(897)!\nboxmode: 'any' #(898)!\ncalendar: 'any' #(7)!\nclickmode: 'string' #(8)!\ncoloraxis:\n  autocolorscale: 'boolean' #(9)!\n  cauto: 'boolean' #(10)!\n  cmax: 'number' #(11)!\n  cmid: 'number' #(12)!\n  cmin: 'number' #(13)!\n  colorbar:\n    bgcolor: 'any' #(14)!\n    bordercolor: 'any' #(15)!\n    borderwidth: 'number' #(16)!\n    exponentformat: 'any' #(17)!\n    len: 'number' #(18)!\n    lenmode: 'any' #(19)!\n    minexponent: 'number' #(20)!\n    nticks: 'integer' #(21)!\n    orientation: 'any' #(22)!\n    outlinecolor: 'any' #(23)!\n    outlinewidth: 'number' #(24)!\n    separatethousands: 'boolean' #(25)!\n    showexponent: 'any' #(26)!\n    showticklabels: 'boolean' #(27)!\n    showtickprefix: 'any' #(28)!\n    showticksuffix: 'any' #(29)!\n    thickness: 'number' #(30)!\n    thicknessmode: 'any' #(31)!\n    tickangle: 'number' #(32)!\n    tickcolor: 'any' #(33)!\n    tickfont:\n      color: any\n      family: 'string' #(34)!\n      lineposition: 'string' #(35)!\n      shadow: 'string' #(36)!\n      size: number\n      style: 'any' #(37)!\n      textcase: 'any' #(38)!\n      variant: 'any' #(39)!\n      weight: 'integer' #(40)!\n    tickformat: 'string' #(41)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(42)!\n    ticklabelposition: 'any' #(43)!\n    ticklabelstep: 'integer' #(44)!\n    ticklen: 'number' #(45)!\n    tickmode: 'any' #(46)!\n    tickprefix: 'string' #(47)!\n    ticks: 'any' #(48)!\n    ticksuffix: 'string' #(49)!\n    ticktext: 'array' #(50)!\n    ticktextsrc: 'string' #(51)!\n    tickvals: 'array' #(52)!\n    tickvalssrc: 'string' #(53)!\n    tickwidth: 'number' #(54)!\n    title:\n      font:\n        color: any\n        family: 'string' #(55)!\n        lineposition: 'string' #(56)!\n        shadow: 'string' #(57)!\n        size: number\n        style: 'any' #(58)!\n        textcase: 'any' #(59)!\n        variant: 'any' #(60)!\n        weight: 'integer' #(61)!\n      side: 'any' #(62)!\n      text: 'string' #(63)!\n    x: 'number' #(64)!\n    xanchor: 'any' #(65)!\n    xpad: 'number' #(66)!\n    xref: 'any' #(67)!\n    y: 'number' #(68)!\n    yanchor: 'any' #(69)!\n    ypad: 'number' #(70)!\n    yref: 'any' #(71)!\n  colorscale: 'any' #(72)!\n  reversescale: 'boolean' #(73)!\n  showscale: 'boolean' #(74)!\ncolorscale:\n  diverging: 'any' #(75)!\n  sequential: 'any' #(76)!\n  sequentialminus: 'any' #(77)!\ncolorway: 'array' #(78)!\ndragmode: 'any' #(79)!\nextendfunnelareacolors: 'boolean' #(902)!\nextendiciclecolors: 'boolean' #(906)!\nextendpiecolors: 'boolean' #(908)!\nextendsunburstcolors: 'boolean' #(912)!\nextendtreemapcolors: 'boolean' #(914)!\nfont:\n  color: any\n  family: 'string' #(80)!\n  lineposition: 'string' #(81)!\n  shadow: 'string' #(82)!\n  size: number\n  style: 'any' #(83)!\n  textcase: 'any' #(84)!\n  variant: 'any' #(85)!\n  weight: 'integer' #(86)!\nfunnelareacolorway: 'array' #(903)!\nfunnelgap: 'number' #(899)!\nfunnelgroupgap: 'number' #(900)!\nfunnelmode: 'any' #(901)!\ngeo:\n  bgcolor: 'any' #(87)!\n  center:\n    lat: 'number' #(88)!\n    lon: 'number' #(89)!\n  coastlinecolor: 'any' #(90)!\n  coastlinewidth: 'number' #(91)!\n  countrycolor: 'any' #(92)!\n  countrywidth: 'number' #(93)!\n  domain:\n    column: 'integer' #(94)!\n    row: 'integer' #(95)!\n    x: 'array' #(96)!\n    y: 'array' #(97)!\n  fitbounds: 'any' #(98)!\n  framecolor: 'any' #(99)!\n  framewidth: 'number' #(100)!\n  lakecolor: 'any' #(101)!\n  landcolor: 'any' #(102)!\n  lataxis:\n    dtick: 'number' #(103)!\n    gridcolor: 'any' #(104)!\n    griddash: 'string' #(105)!\n    gridwidth: 'number' #(106)!\n    range: 'array' #(107)!\n    showgrid: 'boolean' #(108)!\n    tick0: 'number' #(109)!\n  lonaxis:\n    dtick: 'number' #(110)!\n    gridcolor: 'any' #(111)!\n    griddash: 'string' #(112)!\n    gridwidth: 'number' #(113)!\n    range: 'array' #(114)!\n    showgrid: 'boolean' #(115)!\n    tick0: 'number' #(116)!\n  oceancolor: 'any' #(117)!\n  projection:\n    distance: 'number' #(118)!\n    parallels: 'array' #(119)!\n    rotation:\n      lat: 'number' #(120)!\n      lon: 'number' #(121)!\n      roll: 'number' #(122)!\n    scale: 'number' #(123)!\n    tilt: 'number' #(124)!\n    type: 'any' #(125)!\n  resolution: 'any' #(126)!\n  rivercolor: 'any' #(127)!\n  riverwidth: 'number' #(128)!\n  scope: 'any' #(129)!\n  showcoastlines: 'boolean' #(130)!\n  showcountries: 'boolean' #(131)!\n  showframe: 'boolean' #(132)!\n  showlakes: 'boolean' #(133)!\n  showland: 'boolean' #(134)!\n  showocean: 'boolean' #(135)!\n  showrivers: 'boolean' #(136)!\n  showsubunits: 'boolean' #(137)!\n  subunitcolor: 'any' #(138)!\n  subunitwidth: 'number' #(139)!\n  visible: 'boolean' #(140)!\ngrid:\n  columns: 'integer' #(141)!\n  domain:\n    x: 'array' #(142)!\n    y: 'array' #(143)!\n  pattern: 'any' #(144)!\n  roworder: 'any' #(145)!\n  rows: 'integer' #(146)!\n  subplots: 'array' #(147)!\n  xaxes: 'array' #(148)!\n  xgap: 'number' #(149)!\n  xside: 'any' #(150)!\n  yaxes: 'array' #(151)!\n  ygap: 'number' #(152)!\n  yside: 'any' #(153)!\nheight: 'number' #(154)!\nhiddenlabels: 'array' #(904)!\nhiddenlabelssrc: 'string' #(905)!\nhidesources: 'boolean' #(155)!\nhoverdistance: 'integer' #(156)!\nhoverlabel:\n  align: 'any' #(157)!\n  bgcolor: 'any' #(158)!\n  bordercolor: 'any' #(159)!\n  font:\n    color: any\n    family: 'string' #(160)!\n    lineposition: 'string' #(161)!\n    shadow: 'string' #(162)!\n    size: number\n    style: 'any' #(163)!\n    textcase: 'any' #(164)!\n    variant: 'any' #(165)!\n    weight: 'integer' #(166)!\n  grouptitlefont:\n    color: any\n    family: 'string' #(167)!\n    lineposition: 'string' #(168)!\n    shadow: 'string' #(169)!\n    size: number\n    style: 'any' #(170)!\n    textcase: 'any' #(171)!\n    variant: 'any' #(172)!\n    weight: 'integer' #(173)!\n  namelength: 'integer' #(174)!\nhovermode: 'any' #(175)!\nhoversubplots: 'any' #(176)!\niciclecolorway: 'array' #(907)!\nimages: array\nlegend:\n  bgcolor: 'any' #(177)!\n  bordercolor: 'any' #(178)!\n  borderwidth: 'number' #(179)!\n  entrywidth: 'number' #(180)!\n  entrywidthmode: 'any' #(181)!\n  font:\n    color: any\n    family: 'string' #(182)!\n    lineposition: 'string' #(183)!\n    shadow: 'string' #(184)!\n    size: number\n    style: 'any' #(185)!\n    textcase: 'any' #(186)!\n    variant: 'any' #(187)!\n    weight: 'integer' #(188)!\n  groupclick: 'any' #(189)!\n  grouptitlefont:\n    color: any\n    family: 'string' #(190)!\n    lineposition: 'string' #(191)!\n    shadow: 'string' #(192)!\n    size: number\n    style: 'any' #(193)!\n    textcase: 'any' #(194)!\n    variant: 'any' #(195)!\n    weight: 'integer' #(196)!\n  indentation: 'number' #(197)!\n  itemclick: 'any' #(198)!\n  itemdoubleclick: 'any' #(199)!\n  itemsizing: 'any' #(200)!\n  itemwidth: 'number' #(201)!\n  maxheight: 'number' #(202)!\n  orientation: 'any' #(203)!\n  title:\n    font:\n      color: any\n      family: 'string' #(204)!\n      lineposition: 'string' #(205)!\n      shadow: 'string' #(206)!\n      size: number\n      style: 'any' #(207)!\n      textcase: 'any' #(208)!\n      variant: 'any' #(209)!\n      weight: 'integer' #(210)!\n    side: 'any' #(211)!\n    text: 'string' #(212)!\n  tracegroupgap: 'number' #(213)!\n  traceorder: 'string' #(214)!\n  valign: 'any' #(215)!\n  visible: 'boolean' #(216)!\n  x: 'number' #(217)!\n  xanchor: 'any' #(218)!\n  xref: 'any' #(219)!\n  y: 'number' #(220)!\n  yanchor: 'any' #(221)!\n  yref: 'any' #(222)!\nmap:\n  bearing: 'number' #(223)!\n  bounds:\n    east: 'number' #(224)!\n    north: 'number' #(225)!\n    south: 'number' #(226)!\n    west: 'number' #(227)!\n  center:\n    lat: 'number' #(228)!\n    lon: 'number' #(229)!\n  domain:\n    column: 'integer' #(230)!\n    row: 'integer' #(231)!\n    x: 'array' #(232)!\n    y: 'array' #(233)!\n  layers: array\n  pitch: 'number' #(234)!\n  zoom: 'number' #(235)!\nmapbox:\n  accesstoken: 'string' #(236)!\n  bearing: 'number' #(237)!\n  bounds:\n    east: 'number' #(238)!\n    north: 'number' #(239)!\n    south: 'number' #(240)!\n    west: 'number' #(241)!\n  center:\n    lat: 'number' #(242)!\n    lon: 'number' #(243)!\n  domain:\n    column: 'integer' #(244)!\n    row: 'integer' #(245)!\n    x: 'array' #(246)!\n    y: 'array' #(247)!\n  layers: array\n  pitch: 'number' #(248)!\n  zoom: 'number' #(249)!\nmargin:\n  autoexpand: 'boolean' #(250)!\n  b: 'number' #(251)!\n  l: 'number' #(252)!\n  pad: 'number' #(253)!\n  r: 'number' #(254)!\n  t: 'number' #(255)!\nmetasrc: 'string' #(256)!\nminreducedheight: 'number' #(257)!\nminreducedwidth: 'number' #(258)!\nmodebar:\n  activecolor: 'any' #(259)!\n  add: 'string | array' #(260)!\n  addsrc: 'string' #(261)!\n  bgcolor: 'any' #(262)!\n  color: 'any' #(263)!\n  orientation: 'any' #(264)!\n  remove: 'string | array' #(265)!\n  removesrc: 'string' #(266)!\nnewselection:\n  line:\n    color: 'any' #(267)!\n    dash: 'string' #(268)!\n    width: 'number' #(269)!\n  mode: 'any' #(270)!\nnewshape:\n  drawdirection: 'any' #(271)!\n  fillcolor: 'any' #(272)!\n  fillrule: 'any' #(273)!\n  label:\n    font:\n      color: any\n      family: 'string' #(274)!\n      lineposition: 'string' #(275)!\n      shadow: 'string' #(276)!\n      size: number\n      style: 'any' #(277)!\n      textcase: 'any' #(278)!\n      variant: 'any' #(279)!\n      weight: 'integer' #(280)!\n    padding: 'number' #(281)!\n    text: 'string' #(282)!\n    textangle: 'number' #(283)!\n    textposition: 'any' #(284)!\n    texttemplate: 'string' #(285)!\n    xanchor: 'any' #(286)!\n    yanchor: 'any' #(287)!\n  layer: 'any' #(288)!\n  legend: 'string' #(289)!\n  legendgroup: 'string' #(290)!\n  legendgrouptitle:\n    font:\n      color: any\n      family: 'string' #(291)!\n      lineposition: 'string' #(292)!\n      shadow: 'string' #(293)!\n      size: number\n      style: 'any' #(294)!\n      textcase: 'any' #(295)!\n      variant: 'any' #(296)!\n      weight: 'integer' #(297)!\n    text: 'string' #(298)!\n  legendrank: 'number' #(299)!\n  legendwidth: 'number' #(300)!\n  line:\n    color: 'any' #(301)!\n    dash: 'string' #(302)!\n    width: 'number' #(303)!\n  name: 'string' #(304)!\n  opacity: 'number' #(305)!\n  showlegend: 'boolean' #(306)!\n  visible: 'any' #(307)!\npaper_bgcolor: 'any' #(308)!\npiecolorway: 'array' #(909)!\nplot_bgcolor: 'any' #(309)!\npolar:\n  angularaxis:\n    autotypenumbers: 'any' #(310)!\n    categoryarray: 'array' #(311)!\n    categoryarraysrc: 'string' #(312)!\n    categoryorder: 'any' #(313)!\n    color: 'any' #(314)!\n    direction: 'any' #(315)!\n    exponentformat: 'any' #(316)!\n    gridcolor: 'any' #(317)!\n    griddash: 'string' #(318)!\n    gridwidth: 'number' #(319)!\n    hoverformat: 'string' #(320)!\n    layer: 'any' #(321)!\n    linecolor: 'any' #(322)!\n    linewidth: 'number' #(323)!\n    minexponent: 'number' #(324)!\n    nticks: 'integer' #(325)!\n    period: 'number' #(326)!\n    rotation: 'number' #(327)!\n    separatethousands: 'boolean' #(328)!\n    showexponent: 'any' #(329)!\n    showgrid: 'boolean' #(330)!\n    showline: 'boolean' #(331)!\n    showticklabels: 'boolean' #(332)!\n    showtickprefix: 'any' #(333)!\n    showticksuffix: 'any' #(334)!\n    thetaunit: 'any' #(335)!\n    tickangle: 'number' #(336)!\n    tickcolor: 'any' #(337)!\n    tickfont:\n      color: any\n      family: 'string' #(338)!\n      lineposition: 'string' #(339)!\n      shadow: 'string' #(340)!\n      size: number\n      style: 'any' #(341)!\n      textcase: 'any' #(342)!\n      variant: 'any' #(343)!\n      weight: 'integer' #(344)!\n    tickformat: 'string' #(345)!\n    tickformatstops: array\n    ticklabelstep: 'integer' #(346)!\n    ticklen: 'number' #(347)!\n    tickmode: 'any' #(348)!\n    tickprefix: 'string' #(349)!\n    ticks: 'any' #(350)!\n    ticksuffix: 'string' #(351)!\n    ticktext: 'array' #(352)!\n    ticktextsrc: 'string' #(353)!\n    tickvals: 'array' #(354)!\n    tickvalssrc: 'string' #(355)!\n    tickwidth: 'number' #(356)!\n    type: 'any' #(357)!\n    visible: 'boolean' #(358)!\n  bgcolor: 'any' #(359)!\n  domain:\n    column: 'integer' #(360)!\n    row: 'integer' #(361)!\n    x: 'array' #(362)!\n    y: 'array' #(363)!\n  gridshape: 'any' #(364)!\n  hole: 'number' #(365)!\n  radialaxis:\n    angle: 'number' #(366)!\n    autorange: 'any' #(367)!\n    autorangeoptions:\n      include: 'array' #(368)!\n      includesrc: 'string' #(369)!\n    autotickangles: 'array' #(370)!\n    autotypenumbers: 'any' #(371)!\n    calendar: 'any' #(372)!\n    categoryarray: 'array' #(373)!\n    categoryarraysrc: 'string' #(374)!\n    categoryorder: 'any' #(375)!\n    color: 'any' #(376)!\n    exponentformat: 'any' #(377)!\n    gridcolor: 'any' #(378)!\n    griddash: 'string' #(379)!\n    gridwidth: 'number' #(380)!\n    hoverformat: 'string' #(381)!\n    layer: 'any' #(382)!\n    linecolor: 'any' #(383)!\n    linewidth: 'number' #(384)!\n    minexponent: 'number' #(385)!\n    nticks: 'integer' #(386)!\n    range: 'array' #(387)!\n    rangemode: 'any' #(388)!\n    separatethousands: 'boolean' #(389)!\n    showexponent: 'any' #(390)!\n    showgrid: 'boolean' #(391)!\n    showline: 'boolean' #(392)!\n    showticklabels: 'boolean' #(393)!\n    showtickprefix: 'any' #(394)!\n    showticksuffix: 'any' #(395)!\n    side: 'any' #(396)!\n    tickangle: 'number' #(397)!\n    tickcolor: 'any' #(398)!\n    tickfont:\n      color: any\n      family: 'string' #(399)!\n      lineposition: 'string' #(400)!\n      shadow: 'string' #(401)!\n      size: number\n      style: 'any' #(402)!\n      textcase: 'any' #(403)!\n      variant: 'any' #(404)!\n      weight: 'integer' #(405)!\n    tickformat: 'string' #(406)!\n    tickformatstops: array\n    ticklabelstep: 'integer' #(407)!\n    ticklen: 'number' #(408)!\n    tickmode: 'any' #(409)!\n    tickprefix: 'string' #(410)!\n    ticks: 'any' #(411)!\n    ticksuffix: 'string' #(412)!\n    ticktext: 'array' #(413)!\n    ticktextsrc: 'string' #(414)!\n    tickvals: 'array' #(415)!\n    tickvalssrc: 'string' #(416)!\n    tickwidth: 'number' #(417)!\n    title:\n      font:\n        color: any\n        family: 'string' #(418)!\n        lineposition: 'string' #(419)!\n        shadow: 'string' #(420)!\n        size: number\n        style: 'any' #(421)!\n        textcase: 'any' #(422)!\n        variant: 'any' #(423)!\n        weight: 'integer' #(424)!\n      text: 'string' #(425)!\n    type: 'any' #(426)!\n    visible: 'boolean' #(427)!\n  sector: 'array' #(428)!\nscattergap: 'number' #(910)!\nscattermode: 'any' #(911)!\nscene:\n  annotations: array\n  aspectmode: 'any' #(429)!\n  aspectratio:\n    impliedEdits: any\n    x: number\n    y: number\n    z: number\n  bgcolor: any\n  camera:\n    center:\n      x: number\n      y: number\n      z: number\n    eye:\n      x: number\n      y: number\n      z: number\n    projection:\n      type: 'any' #(430)!\n    up:\n      x: number\n      y: number\n      z: number\n  domain:\n    column: 'integer' #(431)!\n    row: 'integer' #(432)!\n    x: 'array' #(433)!\n    y: 'array' #(434)!\n  dragmode: 'any' #(435)!\n  hovermode: 'any' #(436)!\n  xaxis:\n    autorange: 'any' #(437)!\n    autorangeoptions:\n      include: 'array' #(438)!\n      includesrc: 'string' #(439)!\n    autotypenumbers: 'any' #(440)!\n    backgroundcolor: 'any' #(441)!\n    calendar: 'any' #(442)!\n    categoryarray: 'array' #(443)!\n    categoryarraysrc: 'string' #(444)!\n    categoryorder: 'any' #(445)!\n    color: 'any' #(446)!\n    exponentformat: 'any' #(447)!\n    gridcolor: 'any' #(448)!\n    gridwidth: 'number' #(449)!\n    hoverformat: 'string' #(450)!\n    linecolor: 'any' #(451)!\n    linewidth: 'number' #(452)!\n    minexponent: 'number' #(453)!\n    mirror: 'any' #(454)!\n    nticks: 'integer' #(455)!\n    range: 'array' #(456)!\n    rangemode: 'any' #(457)!\n    separatethousands: 'boolean' #(458)!\n    showaxeslabels: 'boolean' #(459)!\n    showbackground: 'boolean' #(460)!\n    showexponent: 'any' #(461)!\n    showgrid: 'boolean' #(462)!\n    showline: 'boolean' #(463)!\n    showspikes: 'boolean' #(464)!\n    showticklabels: 'boolean' #(465)!\n    showtickprefix: 'any' #(466)!\n    showticksuffix: 'any' #(467)!\n    spikecolor: 'any' #(468)!\n    spikesides: 'boolean' #(469)!\n    spikethickness: 'number' #(470)!\n    tickangle: 'number' #(471)!\n    tickcolor: 'any' #(472)!\n    tickfont:\n      color: any\n      family: 'string' #(473)!\n      lineposition: 'string' #(474)!\n      shadow: 'string' #(475)!\n      size: number\n      style: 'any' #(476)!\n      textcase: 'any' #(477)!\n      variant: 'any' #(478)!\n      weight: 'integer' #(479)!\n    tickformat: 'string' #(480)!\n    tickformatstops: array\n    ticklen: 'number' #(481)!\n    tickmode: 'any' #(482)!\n    tickprefix: 'string' #(483)!\n    ticks: 'any' #(484)!\n    ticksuffix: 'string' #(485)!\n    ticktext: 'array' #(486)!\n    ticktextsrc: 'string' #(487)!\n    tickvals: 'array' #(488)!\n    tickvalssrc: 'string' #(489)!\n    tickwidth: 'number' #(490)!\n    title:\n      font:\n        color: any\n        family: 'string' #(491)!\n        lineposition: 'string' #(492)!\n        shadow: 'string' #(493)!\n        size: number\n        style: 'any' #(494)!\n        textcase: 'any' #(495)!\n        variant: 'any' #(496)!\n        weight: 'integer' #(497)!\n      text: 'string' #(498)!\n    type: 'any' #(499)!\n    visible: 'boolean' #(500)!\n    zeroline: 'boolean' #(501)!\n    zerolinecolor: 'any' #(502)!\n    zerolinewidth: 'number' #(503)!\n  yaxis:\n    autorange: 'any' #(504)!\n    autorangeoptions:\n      include: 'array' #(505)!\n      includesrc: 'string' #(506)!\n    autotypenumbers: 'any' #(507)!\n    backgroundcolor: 'any' #(508)!\n    calendar: 'any' #(509)!\n    categoryarray: 'array' #(510)!\n    categoryarraysrc: 'string' #(511)!\n    categoryorder: 'any' #(512)!\n    color: 'any' #(513)!\n    exponentformat: 'any' #(514)!\n    gridcolor: 'any' #(515)!\n    gridwidth: 'number' #(516)!\n    hoverformat: 'string' #(517)!\n    linecolor: 'any' #(518)!\n    linewidth: 'number' #(519)!\n    minexponent: 'number' #(520)!\n    mirror: 'any' #(521)!\n    nticks: 'integer' #(522)!\n    range: 'array' #(523)!\n    rangemode: 'any' #(524)!\n    separatethousands: 'boolean' #(525)!\n    showaxeslabels: 'boolean' #(526)!\n    showbackground: 'boolean' #(527)!\n    showexponent: 'any' #(528)!\n    showgrid: 'boolean' #(529)!\n    showline: 'boolean' #(530)!\n    showspikes: 'boolean' #(531)!\n    showticklabels: 'boolean' #(532)!\n    showtickprefix: 'any' #(533)!\n    showticksuffix: 'any' #(534)!\n    spikecolor: 'any' #(535)!\n    spikesides: 'boolean' #(536)!\n    spikethickness: 'number' #(537)!\n    tickangle: 'number' #(538)!\n    tickcolor: 'any' #(539)!\n    tickfont:\n      color: any\n      family: 'string' #(540)!\n      lineposition: 'string' #(541)!\n      shadow: 'string' #(542)!\n      size: number\n      style: 'any' #(543)!\n      textcase: 'any' #(544)!\n      variant: 'any' #(545)!\n      weight: 'integer' #(546)!\n    tickformat: 'string' #(547)!\n    tickformatstops: array\n    ticklen: 'number' #(548)!\n    tickmode: 'any' #(549)!\n    tickprefix: 'string' #(550)!\n    ticks: 'any' #(551)!\n    ticksuffix: 'string' #(552)!\n    ticktext: 'array' #(553)!\n    ticktextsrc: 'string' #(554)!\n    tickvals: 'array' #(555)!\n    tickvalssrc: 'string' #(556)!\n    tickwidth: 'number' #(557)!\n    title:\n      font:\n        color: any\n        family: 'string' #(558)!\n        lineposition: 'string' #(559)!\n        shadow: 'string' #(560)!\n        size: number\n        style: 'any' #(561)!\n        textcase: 'any' #(562)!\n        variant: 'any' #(563)!\n        weight: 'integer' #(564)!\n      text: 'string' #(565)!\n    type: 'any' #(566)!\n    visible: 'boolean' #(567)!\n    zeroline: 'boolean' #(568)!\n    zerolinecolor: 'any' #(569)!\n    zerolinewidth: 'number' #(570)!\n  zaxis:\n    autorange: 'any' #(571)!\n    autorangeoptions:\n      include: 'array' #(572)!\n      includesrc: 'string' #(573)!\n    autotypenumbers: 'any' #(574)!\n    backgroundcolor: 'any' #(575)!\n    calendar: 'any' #(576)!\n    categoryarray: 'array' #(577)!\n    categoryarraysrc: 'string' #(578)!\n    categoryorder: 'any' #(579)!\n    color: 'any' #(580)!\n    exponentformat: 'any' #(581)!\n    gridcolor: 'any' #(582)!\n    gridwidth: 'number' #(583)!\n    hoverformat: 'string' #(584)!\n    linecolor: 'any' #(585)!\n    linewidth: 'number' #(586)!\n    minexponent: 'number' #(587)!\n    mirror: 'any' #(588)!\n    nticks: 'integer' #(589)!\n    range: 'array' #(590)!\n    rangemode: 'any' #(591)!\n    separatethousands: 'boolean' #(592)!\n    showaxeslabels: 'boolean' #(593)!\n    showbackground: 'boolean' #(594)!\n    showexponent: 'any' #(595)!\n    showgrid: 'boolean' #(596)!\n    showline: 'boolean' #(597)!\n    showspikes: 'boolean' #(598)!\n    showticklabels: 'boolean' #(599)!\n    showtickprefix: 'any' #(600)!\n    showticksuffix: 'any' #(601)!\n    spikecolor: 'any' #(602)!\n    spikesides: 'boolean' #(603)!\n    spikethickness: 'number' #(604)!\n    tickangle: 'number' #(605)!\n    tickcolor: 'any' #(606)!\n    tickfont:\n      color: any\n      family: 'string' #(607)!\n      lineposition: 'string' #(608)!\n      shadow: 'string' #(609)!\n      size: number\n      style: 'any' #(610)!\n      textcase: 'any' #(611)!\n      variant: 'any' #(612)!\n      weight: 'integer' #(613)!\n    tickformat: 'string' #(614)!\n    tickformatstops: array\n    ticklen: 'number' #(615)!\n    tickmode: 'any' #(616)!\n    tickprefix: 'string' #(617)!\n    ticks: 'any' #(618)!\n    ticksuffix: 'string' #(619)!\n    ticktext: 'array' #(620)!\n    ticktextsrc: 'string' #(621)!\n    tickvals: 'array' #(622)!\n    tickvalssrc: 'string' #(623)!\n    tickwidth: 'number' #(624)!\n    title:\n      font:\n        color: any\n        family: 'string' #(625)!\n        lineposition: 'string' #(626)!\n        shadow: 'string' #(627)!\n        size: number\n        style: 'any' #(628)!\n        textcase: 'any' #(629)!\n        variant: 'any' #(630)!\n        weight: 'integer' #(631)!\n      text: 'string' #(632)!\n    type: 'any' #(633)!\n    visible: 'boolean' #(634)!\n    zeroline: 'boolean' #(635)!\n    zerolinecolor: 'any' #(636)!\n    zerolinewidth: 'number' #(637)!\nselectdirection: 'any' #(638)!\nselections: array\nseparators: 'string' #(639)!\nshapes: array\nshowlegend: 'boolean' #(640)!\nsliders: array\nsmith:\n  bgcolor: 'any' #(641)!\n  domain:\n    column: 'integer' #(642)!\n    row: 'integer' #(643)!\n    x: 'array' #(644)!\n    y: 'array' #(645)!\n  imaginaryaxis:\n    color: 'any' #(646)!\n    gridcolor: 'any' #(647)!\n    griddash: 'string' #(648)!\n    gridwidth: 'number' #(649)!\n    hoverformat: 'string' #(650)!\n    layer: 'any' #(651)!\n    linecolor: 'any' #(652)!\n    linewidth: 'number' #(653)!\n    showgrid: 'boolean' #(654)!\n    showline: 'boolean' #(655)!\n    showticklabels: 'boolean' #(656)!\n    showtickprefix: 'any' #(657)!\n    showticksuffix: 'any' #(658)!\n    tickcolor: 'any' #(659)!\n    tickfont:\n      color: any\n      family: 'string' #(660)!\n      lineposition: 'string' #(661)!\n      shadow: 'string' #(662)!\n      size: number\n      style: 'any' #(663)!\n      textcase: 'any' #(664)!\n      variant: 'any' #(665)!\n      weight: 'integer' #(666)!\n    tickformat: 'string' #(667)!\n    ticklen: 'number' #(668)!\n    tickprefix: 'string' #(669)!\n    ticks: 'any' #(670)!\n    ticksuffix: 'string' #(671)!\n    tickvals: 'array' #(672)!\n    tickvalssrc: 'string' #(673)!\n    tickwidth: 'number' #(674)!\n    visible: 'boolean' #(675)!\n  realaxis:\n    color: 'any' #(676)!\n    gridcolor: 'any' #(677)!\n    griddash: 'string' #(678)!\n    gridwidth: 'number' #(679)!\n    hoverformat: 'string' #(680)!\n    layer: 'any' #(681)!\n    linecolor: 'any' #(682)!\n    linewidth: 'number' #(683)!\n    showgrid: 'boolean' #(684)!\n    showline: 'boolean' #(685)!\n    showticklabels: 'boolean' #(686)!\n    showtickprefix: 'any' #(687)!\n    showticksuffix: 'any' #(688)!\n    side: 'any' #(689)!\n    tickangle: 'number' #(690)!\n    tickcolor: 'any' #(691)!\n    tickfont:\n      color: any\n      family: 'string' #(692)!\n      lineposition: 'string' #(693)!\n      shadow: 'string' #(694)!\n      size: number\n      style: 'any' #(695)!\n      textcase: 'any' #(696)!\n      variant: 'any' #(697)!\n      weight: 'integer' #(698)!\n    tickformat: 'string' #(699)!\n    ticklen: 'number' #(700)!\n    tickprefix: 'string' #(701)!\n    ticks: 'any' #(702)!\n    ticksuffix: 'string' #(703)!\n    tickvals: 'array' #(704)!\n    tickvalssrc: 'string' #(705)!\n    tickwidth: 'number' #(706)!\n    visible: 'boolean' #(707)!\nspikedistance: 'integer' #(708)!\nsunburstcolorway: 'array' #(913)!\nternary:\n  aaxis:\n    color: 'any' #(709)!\n    exponentformat: 'any' #(710)!\n    gridcolor: 'any' #(711)!\n    griddash: 'string' #(712)!\n    gridwidth: 'number' #(713)!\n    hoverformat: 'string' #(714)!\n    layer: 'any' #(715)!\n    linecolor: 'any' #(716)!\n    linewidth: 'number' #(717)!\n    min: 'number' #(718)!\n    minexponent: 'number' #(719)!\n    nticks: 'integer' #(720)!\n    separatethousands: 'boolean' #(721)!\n    showexponent: 'any' #(722)!\n    showgrid: 'boolean' #(723)!\n    showline: 'boolean' #(724)!\n    showticklabels: 'boolean' #(725)!\n    showtickprefix: 'any' #(726)!\n    showticksuffix: 'any' #(727)!\n    tickangle: 'number' #(728)!\n    tickcolor: 'any' #(729)!\n    tickfont:\n      color: any\n      family: 'string' #(730)!\n      lineposition: 'string' #(731)!\n      shadow: 'string' #(732)!\n      size: number\n      style: 'any' #(733)!\n      textcase: 'any' #(734)!\n      variant: 'any' #(735)!\n      weight: 'integer' #(736)!\n    tickformat: 'string' #(737)!\n    tickformatstops: array\n    ticklabelstep: 'integer' #(738)!\n    ticklen: 'number' #(739)!\n    tickmode: 'any' #(740)!\n    tickprefix: 'string' #(741)!\n    ticks: 'any' #(742)!\n    ticksuffix: 'string' #(743)!\n    ticktext: 'array' #(744)!\n    ticktextsrc: 'string' #(745)!\n    tickvals: 'array' #(746)!\n    tickvalssrc: 'string' #(747)!\n    tickwidth: 'number' #(748)!\n    title:\n      font:\n        color: any\n        family: 'string' #(749)!\n        lineposition: 'string' #(750)!\n        shadow: 'string' #(751)!\n        size: number\n        style: 'any' #(752)!\n        textcase: 'any' #(753)!\n        variant: 'any' #(754)!\n        weight: 'integer' #(755)!\n      text: 'string' #(756)!\n  baxis:\n    color: 'any' #(757)!\n    exponentformat: 'any' #(758)!\n    gridcolor: 'any' #(759)!\n    griddash: 'string' #(760)!\n    gridwidth: 'number' #(761)!\n    hoverformat: 'string' #(762)!\n    layer: 'any' #(763)!\n    linecolor: 'any' #(764)!\n    linewidth: 'number' #(765)!\n    min: 'number' #(766)!\n    minexponent: 'number' #(767)!\n    nticks: 'integer' #(768)!\n    separatethousands: 'boolean' #(769)!\n    showexponent: 'any' #(770)!\n    showgrid: 'boolean' #(771)!\n    showline: 'boolean' #(772)!\n    showticklabels: 'boolean' #(773)!\n    showtickprefix: 'any' #(774)!\n    showticksuffix: 'any' #(775)!\n    tickangle: 'number' #(776)!\n    tickcolor: 'any' #(777)!\n    tickfont:\n      color: any\n      family: 'string' #(778)!\n      lineposition: 'string' #(779)!\n      shadow: 'string' #(780)!\n      size: number\n      style: 'any' #(781)!\n      textcase: 'any' #(782)!\n      variant: 'any' #(783)!\n      weight: 'integer' #(784)!\n    tickformat: 'string' #(785)!\n    tickformatstops: array\n    ticklabelstep: 'integer' #(786)!\n    ticklen: 'number' #(787)!\n    tickmode: 'any' #(788)!\n    tickprefix: 'string' #(789)!\n    ticks: 'any' #(790)!\n    ticksuffix: 'string' #(791)!\n    ticktext: 'array' #(792)!\n    ticktextsrc: 'string' #(793)!\n    tickvals: 'array' #(794)!\n    tickvalssrc: 'string' #(795)!\n    tickwidth: 'number' #(796)!\n    title:\n      font:\n        color: any\n        family: 'string' #(797)!\n        lineposition: 'string' #(798)!\n        shadow: 'string' #(799)!\n        size: number\n        style: 'any' #(800)!\n        textcase: 'any' #(801)!\n        variant: 'any' #(802)!\n        weight: 'integer' #(803)!\n      text: 'string' #(804)!\n  bgcolor: 'any' #(805)!\n  caxis:\n    color: 'any' #(806)!\n    exponentformat: 'any' #(807)!\n    gridcolor: 'any' #(808)!\n    griddash: 'string' #(809)!\n    gridwidth: 'number' #(810)!\n    hoverformat: 'string' #(811)!\n    layer: 'any' #(812)!\n    linecolor: 'any' #(813)!\n    linewidth: 'number' #(814)!\n    min: 'number' #(815)!\n    minexponent: 'number' #(816)!\n    nticks: 'integer' #(817)!\n    separatethousands: 'boolean' #(818)!\n    showexponent: 'any' #(819)!\n    showgrid: 'boolean' #(820)!\n    showline: 'boolean' #(821)!\n    showticklabels: 'boolean' #(822)!\n    showtickprefix: 'any' #(823)!\n    showticksuffix: 'any' #(824)!\n    tickangle: 'number' #(825)!\n    tickcolor: 'any' #(826)!\n    tickfont:\n      color: any\n      family: 'string' #(827)!\n      lineposition: 'string' #(828)!\n      shadow: 'string' #(829)!\n      size: number\n      style: 'any' #(830)!\n      textcase: 'any' #(831)!\n      variant: 'any' #(832)!\n      weight: 'integer' #(833)!\n    tickformat: 'string' #(834)!\n    tickformatstops: array\n    ticklabelstep: 'integer' #(835)!\n    ticklen: 'number' #(836)!\n    tickmode: 'any' #(837)!\n    tickprefix: 'string' #(838)!\n    ticks: 'any' #(839)!\n    ticksuffix: 'string' #(840)!\n    ticktext: 'array' #(841)!\n    ticktextsrc: 'string' #(842)!\n    tickvals: 'array' #(843)!\n    tickvalssrc: 'string' #(844)!\n    tickwidth: 'number' #(845)!\n    title:\n      font:\n        color: any\n        family: 'string' #(846)!\n        lineposition: 'string' #(847)!\n        shadow: 'string' #(848)!\n        size: number\n        style: 'any' #(849)!\n        textcase: 'any' #(850)!\n        variant: 'any' #(851)!\n        weight: 'integer' #(852)!\n      text: 'string' #(853)!\n  domain:\n    column: 'integer' #(854)!\n    row: 'integer' #(855)!\n    x: 'array' #(856)!\n    y: 'array' #(857)!\n  sum: 'number' #(858)!\ntitle:\n  automargin: 'boolean' #(859)!\n  font:\n    color: any\n    family: 'string' #(860)!\n    lineposition: 'string' #(861)!\n    shadow: 'string' #(862)!\n    size: number\n    style: 'any' #(863)!\n    textcase: 'any' #(864)!\n    variant: 'any' #(865)!\n    weight: 'integer' #(866)!\n  pad:\n    b: 'number' #(867)!\n    l: 'number' #(868)!\n    r: 'number' #(869)!\n    t: 'number' #(870)!\n  subtitle:\n    font:\n      color: any\n      family: 'string' #(871)!\n      lineposition: 'string' #(872)!\n      shadow: 'string' #(873)!\n      size: number\n      style: 'any' #(874)!\n      textcase: 'any' #(875)!\n      variant: 'any' #(876)!\n      weight: 'integer' #(877)!\n    text: 'string' #(878)!\n  text: 'string' #(879)!\n  x: 'number' #(880)!\n  xanchor: 'any' #(881)!\n  xref: 'any' #(882)!\n  y: 'number' #(883)!\n  yanchor: 'any' #(884)!\n  yref: 'any' #(885)!\ntransition:\n  duration: 'number' #(886)!\n  easing: 'any' #(887)!\n  ordering: 'any' #(888)!\ntreemapcolorway: 'array' #(915)!\nuniformtext:\n  minsize: 'number' #(889)!\n  mode: 'any' #(890)!\nupdatemenus: array\nviolingap: 'number' #(916)!\nviolingroupgap: 'number' #(917)!\nviolinmode: 'any' #(918)!\nwaterfallgap: 'number' #(919)!\nwaterfallgroupgap: 'number' #(920)!\nwaterfallmode: 'any' #(921)!\nwidth: 'number' #(891)!\n</code></pre> <ol> <li>Sets the color filling the active selection' interior.</li> <li>Sets the opacity of the active selection.</li> <li>Sets the color filling the active shape' interior.</li> <li>Sets the opacity of the active shape.</li> <li>Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.</li> <li>Using strict a numeric string in trace data is not converted to a number. Using convert types a numeric string in trace data may be treated as a number during automatic axis <code>type</code> detection. This is the default value; however it could be overridden for individual axes.</li> <li>Sets the default calendar system to use for interpreting and displaying dates throughout the plot.</li> <li>Determines the mode of single click interactions. event is the default value and emits the <code>plotly_click</code> event. In addition this mode emits the <code>plotly_selected</code> event in drag modes lasso and select, but with no event data attached (kept for compatibility reasons). The select flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. select with <code>hovermode</code>: x can be confusing, consider explicitly setting <code>hovermode</code>: closest when using this feature. Selection events are sent accordingly as long as event flag is set as well. When the event flag is missing, <code>plotly_click</code> and <code>plotly_selected</code> events are not fired.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in <code>cmin</code> and <code>cmax</code> Defaults to <code>false</code> when <code>cmin</code> and <code>cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, <code>cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>cmin</code> and/or <code>cmax</code> to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when <code>cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, <code>cmax</code> must be set as well.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>cmin</code> and <code>cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Reverses the color mapping if true. If true, <code>cmin</code> will correspond to the last color in the array and <code>cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the default diverging colorscale. Note that <code>autocolorscale</code> must be true for this attribute to work.</li> <li>Sets the default sequential colorscale for positive values. Note that <code>autocolorscale</code> must be true for this attribute to work.</li> <li>Sets the default sequential colorscale for negative values. Note that <code>autocolorscale</code> must be true for this attribute to work.</li> <li>Sets the default trace colors.</li> <li>Determines the mode of drag interactions. select and lasso apply only to scatter traces with markers or text. orbit and turntable apply only to 3D scenes.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Set the background color of the map</li> <li>Sets the latitude of the map's center. For all projection types, the map's latitude center lies at the middle of the latitude range by default.</li> <li>Sets the longitude of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above <code>projection.rotation.lon</code> otherwise.</li> <li>Sets the coastline color.</li> <li>Sets the coastline stroke width (in px).</li> <li>Sets line color of the country boundaries.</li> <li>Sets line width (in px) of the country boundaries.</li> <li>If there is a layout grid, use the domain for this column in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when <code>projection.scale</code> is set to 1. a map will fit either its x or y domain, but not both.</li> <li>If there is a layout grid, use the domain for this row in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when <code>projection.scale</code> is set to 1. a map will fit either its x or y domain, but not both.</li> <li>Sets the horizontal domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when <code>projection.scale</code> is set to 1. a map will fit either its x or y domain, but not both.</li> <li>Sets the vertical domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when <code>projection.scale</code> is set to 1. a map will fit either its x or y domain, but not both.</li> <li>Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting <code>fitbounds</code> leads to <code>center.lon</code> and <code>center.lat</code> getting auto-filled. On maps with a non-clipped projection, setting <code>fitbounds</code> leads to <code>center.lon</code>, <code>center.lat</code>, and <code>projection.rotation.lon</code> getting auto-filled. On maps with a clipped projection, setting <code>fitbounds</code> leads to <code>center.lon</code>, <code>center.lat</code>, <code>projection.rotation.lon</code>, <code>projection.rotation.lat</code>, <code>lonaxis.range</code> and <code>lataxis.range</code> getting auto-filled. If locations, only the trace's visible locations are considered in the <code>fitbounds</code> computations. If geojson, the entire trace input <code>geojson</code> (if provided) is considered in the <code>fitbounds</code> computations, Defaults to false.</li> <li>Sets the color the frame.</li> <li>Sets the stroke width (in px) of the frame.</li> <li>Sets the color of the lakes.</li> <li>Sets the land mass color.</li> <li>Sets the graticule's longitude/latitude tick step.</li> <li>Sets the graticule's stroke color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the graticule's stroke width (in px).</li> <li>Sets the range of this axis (in degrees), sets the map's clipped coordinates.</li> <li>Sets whether or not graticule are shown on the map.</li> <li>Sets the graticule's starting tick longitude/latitude.</li> <li>Sets the graticule's longitude/latitude tick step.</li> <li>Sets the graticule's stroke color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the graticule's stroke width (in px).</li> <li>Sets the range of this axis (in degrees), sets the map's clipped coordinates.</li> <li>Sets whether or not graticule are shown on the map.</li> <li>Sets the graticule's starting tick longitude/latitude.</li> <li>Sets the ocean color</li> <li>For satellite projection type only. Sets the distance from the center of the sphere to the point of view as a proportion of the sphere\u2019s radius.</li> <li>For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.</li> <li>Rotates the map along meridians (in degrees North).</li> <li>Rotates the map along parallels (in degrees East). Defaults to the center of the <code>lonaxis.range</code> values.</li> <li>Roll the map (in degrees) For example, a roll of 180 makes the map appear upside down.</li> <li>Zooms in or out on the map view. A scale of 1 corresponds to the largest zoom level that fits the map's lon and lat ranges. </li> <li>For satellite projection type only. Sets the tilt angle of perspective projection.</li> <li>Sets the projection type.</li> <li>Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.</li> <li>Sets color of the rivers.</li> <li>Sets the stroke width (in px) of the rivers.</li> <li>Set the scope of the map.</li> <li>Sets whether or not the coastlines are drawn.</li> <li>Sets whether or not country boundaries are drawn.</li> <li>Sets whether or not a frame is drawn around the map.</li> <li>Sets whether or not lakes are drawn.</li> <li>Sets whether or not land masses are filled in color.</li> <li>Sets whether or not oceans are filled in color.</li> <li>Sets whether or not rivers are drawn.</li> <li>Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.</li> <li>Sets the color of the subunits boundaries.</li> <li>Sets the stroke width (in px) of the subunits boundaries.</li> <li>Sets the default visibility of the base layers.</li> <li>The number of columns in the grid. If you provide a 2D <code>subplots</code> array, the length of its longest row is used as the default. If you give an <code>xaxes</code> array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</li> <li>Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</li> <li>Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</li> <li>If no <code>subplots</code>, <code>xaxes</code>, or <code>yaxes</code> are given but we do have <code>rows</code> and <code>columns</code>, we can generate defaults using consecutive axis IDs, in two ways: coupled gives one x axis per column and one y axis per row. independent uses a new xy pair for each cell, left-to-right across each row then iterating rows according to <code>roworder</code>.</li> <li>Is the first row the top or the bottom? Note that columns are always enumerated from left to right.</li> <li>The number of rows in the grid. If you provide a 2D <code>subplots</code> array or a <code>yaxes</code> array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</li> <li>Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like xy or x3y2, or ** to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support <code>domain</code> can place themselves in this grid separately using the <code>gridcell</code> attribute.</li> <li>Used with <code>yaxes</code> when the x and y axes are shared across columns and rows. Each entry should be an x axis id like x, x2, etc., or ** to not put an x axis in that column. Entries other than ** must be unique. Ignored if <code>subplots</code> is present. If missing but <code>yaxes</code> is present, will generate consecutive IDs.</li> <li>Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.</li> <li>Sets where the x axis labels and titles go. bottom means the very bottom of the grid. bottom plot is the lowest plot that each x axis is used in. top and top plot are similar.</li> <li>Used with <code>yaxes</code> when the x and y axes are shared across columns and rows. Each entry should be an y axis id like y, y2, etc., or ** to not put a y axis in that row. Entries other than ** must be unique. Ignored if <code>subplots</code> is present. If missing but <code>xaxes</code> is present, will generate consecutive IDs.</li> <li>Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.</li> <li>Sets where the y axis labels and titles go. left means the very left edge of the grid. left plot is the leftmost plot that each y axis is used in. right and right plot are similar.</li> <li>Sets the plot's height (in px).</li> <li>Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).</li> <li>Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the background color of all hover labels on graph</li> <li>Sets the border color of all hover labels on graph.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Determines the mode of hover interactions. If closest, a single hoverlabel will appear for the closest point within the <code>hoverdistance</code>. If x (or y), multiple hoverlabels will appear for multiple points at the closest x- (or y-) coordinate within the <code>hoverdistance</code>, with the caveat that no more than one hoverlabel will appear per trace. If x unified (or y unified), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the <code>hoverdistance</code> with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.</li> <li>Determines expansion of hover effects to other subplots If single just the axis pair of the primary point is included without overlaying subplots. If overlaying all subplots using the main axis and occupying the same space are included. If axis, also include stacked subplots using the same axis when <code>hovermode</code> is set to x, x unified, y or y unified.</li> <li>Sets the legend background color. Defaults to <code>layout.paper_bgcolor</code>.</li> <li>Sets the color of the border enclosing the legend.</li> <li>Sets the width (in px) of the border enclosing the legend.</li> <li>Sets the width (in px or fraction) of the legend. Use 0 to size the entry based on the text width, when <code>entrywidthmode</code> is set to pixels.</li> <li>Determines what entrywidth means.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the behavior on legend group item click. toggleitem toggles the visibility of the individual item clicked on the graph. togglegroup toggles the visibility of all items in the same legendgroup as the item clicked on the graph.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the indentation (in px) of the legend entries.</li> <li>Determines the behavior on legend item click. toggle toggles the visibility of the item clicked on the graph. toggleothers makes the clicked item the sole visible item on the graph. false disables legend item click interactions.</li> <li>Determines the behavior on legend item double-click. toggle toggles the visibility of the item clicked on the graph. toggleothers makes the clicked item the sole visible item on the graph. false disables legend item double-click interactions.</li> <li>Determines if the legend items symbols scale with their corresponding trace attributes or remain constant independent of the symbol size on the graph.</li> <li>Sets the width (in px) of the legend item symbols (the part other than the title.text).</li> <li>Sets the max height (in px) of the legend, or max height ratio (reference height * ratio) if less than one. Default value is: 0.5 for horizontal legends; 1 for vertical legends. The minimum allowed height is 30px. For a ratio of 0.5, the legend will take up to 50% of the reference height before displaying a scrollbar. The reference height is the full layout height except for vertically oriented legends with a <code>yref</code> of <code>\"paper\"</code>, where the reference height is the plot height.</li> <li>Sets the orientation of the legend.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of legend's title with respect to the legend items. Defaulted to top with <code>orientation</code> is h. Defaulted to left with <code>orientation</code> is v. The top left options could be used to expand top center and top right are for horizontal alignment legend area in both x and y sides.</li> <li>Sets the title of the legend.</li> <li>Sets the amount of vertical space (in px) between legend groups.</li> <li>Determines the order at which the legend items are displayed. If normal, the items are displayed top-to-bottom in the same order as the input data. If reversed, the items are displayed in the opposite order as normal. If grouped, the items are displayed in groups (when a trace <code>legendgroup</code> is provided). if grouped+reversed, the items are displayed in the opposite order as grouped.</li> <li>Sets the vertical alignment of the symbols with respect to their associated text.</li> <li>Determines whether or not this legend is visible.</li> <li>Sets the x position with respect to <code>xref</code> (in normalized coordinates) of the legend. When <code>xref</code> is paper, defaults to 1.02 for vertical legends and defaults to 0 for horizontal legends. When <code>xref</code> is container, defaults to 1 for vertical legends and defaults to 0 for horizontal legends. Must be between 0 and 1 if <code>xref</code> is container. and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets the legend's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the legend. Value auto anchors legends to the right for <code>x</code> values greater than or equal to 2/3, anchors legends to the left for <code>x</code> values less than or equal to 1/3 and anchors legends with respect to their center otherwise.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> (in normalized coordinates) of the legend. When <code>yref</code> is paper, defaults to 1 for vertical legends, defaults to -0.1 for horizontal legends on graphs w/o range sliders and defaults to 1.1 for horizontal legends on graph with one or multiple range sliders. When <code>yref</code> is container, defaults to 1. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets the legend's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the legend. Value auto anchors legends at their bottom for <code>y</code> values less than or equal to 1/3, anchors legends to at their top for <code>y</code> values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the bearing angle of the map in degrees counter-clockwise from North (map.bearing).</li> <li>Sets the maximum longitude of the map (in degrees East) if <code>west</code>, <code>south</code> and <code>north</code> are declared.</li> <li>Sets the maximum latitude of the map (in degrees North) if <code>east</code>, <code>west</code> and <code>south</code> are declared.</li> <li>Sets the minimum latitude of the map (in degrees North) if <code>east</code>, <code>west</code> and <code>north</code> are declared.</li> <li>Sets the minimum longitude of the map (in degrees East) if <code>east</code>, <code>south</code> and <code>north</code> are declared.</li> <li>Sets the latitude of the center of the map (in degrees North).</li> <li>Sets the longitude of the center of the map (in degrees East).</li> <li>If there is a layout grid, use the domain for this column in the grid for this map subplot .</li> <li>If there is a layout grid, use the domain for this row in the grid for this map subplot .</li> <li>Sets the horizontal domain of this map subplot (in plot fraction).</li> <li>Sets the vertical domain of this map subplot (in plot fraction).</li> <li>Sets the pitch angle of the map (in degrees, where 0 means perpendicular to the surface of the map) (map.pitch).</li> <li>Sets the zoom level of the map (map.zoom).</li> <li>Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under <code>mapboxAccessToken</code>. Note that accessToken are only required when <code>style</code> (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.</li> <li>Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).</li> <li>Sets the maximum longitude of the map (in degrees East) if <code>west</code>, <code>south</code> and <code>north</code> are declared.</li> <li>Sets the maximum latitude of the map (in degrees North) if <code>east</code>, <code>west</code> and <code>south</code> are declared.</li> <li>Sets the minimum latitude of the map (in degrees North) if <code>east</code>, <code>west</code> and <code>north</code> are declared.</li> <li>Sets the minimum longitude of the map (in degrees East) if <code>east</code>, <code>south</code> and <code>north</code> are declared.</li> <li>Sets the latitude of the center of the map (in degrees North).</li> <li>Sets the longitude of the center of the map (in degrees East).</li> <li>If there is a layout grid, use the domain for this column in the grid for this mapbox subplot .</li> <li>If there is a layout grid, use the domain for this row in the grid for this mapbox subplot .</li> <li>Sets the horizontal domain of this mapbox subplot (in plot fraction).</li> <li>Sets the vertical domain of this mapbox subplot (in plot fraction).</li> <li>Sets the pitch angle of the map (in degrees, where 0 means perpendicular to the surface of the map) (mapbox.pitch).</li> <li>Sets the zoom level of the map (mapbox.zoom).</li> <li>Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.</li> <li>Sets the bottom margin (in px).</li> <li>Sets the left margin (in px).</li> <li>Sets the amount of padding (in px) between the plotting area and the axis lines</li> <li>Sets the right margin (in px).</li> <li>Sets the top margin (in px).</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Minimum height of the plot with margin.automargin applied (in px)</li> <li>Minimum width of the plot with margin.automargin applied (in px)</li> <li>Sets the color of the active or hovered on icons in the modebar.</li> <li>Determines which predefined modebar buttons to add. Please note that these buttons will only be shown if they are compatible with all trace types used in a graph. Similar to <code>config.modeBarButtonsToAdd</code> option. This may include v1hovermode, hoverclosest, hovercompare, togglehover, togglespikelines, drawline, drawopenpath, drawclosedpath, drawcircle, drawrect, eraseshape.</li> <li>Sets the source reference on Chart Studio Cloud for <code>add</code>.</li> <li>Sets the background color of the modebar.</li> <li>Sets the color of the icons in the modebar.</li> <li>Sets the orientation of the modebar.</li> <li>Determines which predefined modebar buttons to remove. Similar to <code>config.modeBarButtonsToRemove</code> option. This may include autoScale2d, autoscale, editInChartStudio, editinchartstudio, hoverCompareCartesian, hovercompare, lasso, lasso2d, orbitRotation, orbitrotation, pan, pan2d, pan3d, reset, resetCameraDefault3d, resetCameraLastSave3d, resetGeo, resetSankeyGroup, resetScale2d, resetViewMap, resetViewMapbox, resetViews, resetcameradefault, resetcameralastsave, resetsankeygroup, resetscale, resetview, resetviews, select, select2d, sendDataToCloud, senddatatocloud, tableRotation, tablerotation, toImage, toggleHover, toggleSpikelines, togglehover, togglespikelines, toimage, zoom, zoom2d, zoom3d, zoomIn2d, zoomInGeo, zoomInMap, zoomInMapbox, zoomOut2d, zoomOutGeo, zoomOutMap, zoomOutMapbox, zoomin, zoomout.</li> <li>Sets the source reference on Chart Studio Cloud for <code>remove</code>.</li> <li>Sets the line color. By default uses either dark grey or white to increase contrast with background color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the line width (in px).</li> <li>Describes how a new selection is created. If <code>immediate</code>, a new selection is created after first mouse up. If <code>gradual</code>, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.</li> <li>When <code>dragmode</code> is set to drawrect, drawline or drawcircle this limits the drag to be horizontal, vertical or diagonal. Using diagonal there is no limit e.g. in drawing lines in any direction. ortho limits the draw to be either horizontal or vertical. horizontal allows horizontal extend. vertical allows vertical extend.</li> <li>Sets the color filling new shapes' interior. Please note that if using a fillcolor with alpha greater than half, drag inside the active shape starts moving the shape underneath, otherwise a new shape could be started over.</li> <li>Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets padding (in px) between edge of label and edge of new shape.</li> <li>Sets the text to display with the new shape. It is also used for legend item if <code>name</code> is not provided.</li> <li>Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle auto is the same angle as the line. For all other shapes, angle auto is horizontal.</li> <li>Sets the position of the label text relative to the new shape. Supported values for rectangles, circles and paths are top left, top center, top right, middle left, middle center, middle right, bottom left, bottom center, and bottom right. Supported values for lines are start, middle, and end. Default: middle center for rectangles, circles, and paths; middle for lines.</li> <li>Template string used for rendering the new shape's label. Note that this will override <code>text</code>. Variables are inserted using %{variable}, for example \"x0: %{x0}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{x0:$.2f}\". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{x0|%m %b %Y}\". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example \"Length in cm: %{x02.54}\", \"%{slope60:.1f} meters per second.\" For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables <code>x0</code>, <code>x1</code>, <code>y0</code>, <code>y1</code>, <code>slope</code>, <code>dx</code>, <code>dy</code>, <code>width</code>, <code>height</code>, <code>length</code>, <code>xcenter</code> and <code>ycenter</code>.</li> <li>Sets the label's horizontal position anchor This anchor binds the specified <code>textposition</code> to the left, center or right of the label text. For example, if <code>textposition</code> is set to top right and <code>xanchor</code> to right then the right-most portion of the label text lines up with the right-most edge of the new shape.</li> <li>Sets the label's vertical position anchor This anchor binds the specified <code>textposition</code> to the top, middle or bottom of the label text. For example, if <code>textposition</code> is set to top right and <code>yanchor</code> to top then the top-most portion of the label text lines up with the top-most edge of the new shape.</li> <li>Specifies whether new shapes are drawn below gridlines (below), between gridlines and traces (between) or above traces (above).</li> <li>Sets the reference to a legend to show new shape in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for new shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for new shape. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</li> <li>Sets the width (in px or fraction) of the legend for new shape.</li> <li>Sets the line color. By default uses either dark grey or white to increase contrast with background color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the line width (in px).</li> <li>Sets new shape name. The name appears as the legend item.</li> <li>Sets the opacity of new shapes.</li> <li>Determines whether or not new shape is shown in the legend.</li> <li>Determines whether or not new shape is visible. If legendonly, the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the background color of the paper where the graph is drawn.</li> <li>Sets the background color of the plotting area in-between x and y axes.</li> <li>Using strict a numeric string in trace data is not converted to a number. Using convert types a numeric string in trace data may be treated as a number during automatic axis <code>type</code> detection. Defaults to layout.autotypenumbers.</li> <li>Sets the order in which categories on this axis appear. Only has an effect if <code>categoryorder</code> is set to array. Used with <code>categoryorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>categoryarray</code>.</li> <li>Specifies the ordering logic for the case of categorical variables. By default, plotly uses trace, which specifies the order that is present in the data supplied. Set <code>categoryorder</code> to category ascending or category descending if order should be determined by the alphanumerical order of the category names. Set <code>categoryorder</code> to array to derive the ordering from the attribute <code>categoryarray</code>. If a category is not found in the <code>categoryarray</code> array, the sorting behavior for that attribute will be identical to the trace mode. The unspecified categories will follow the categories in <code>categoryarray</code>. Set <code>categoryorder</code> to total ascending or total descending if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Sets the direction corresponding to positive angles.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the color of the grid lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the layer on which this axis is displayed. If above traces, this axis is displayed above all the subplot's traces If below traces, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with <code>cliponaxis</code> set to false to show markers and/or text nodes above this axis.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Set the angular period. Has an effect only when <code>angularaxis.type</code> is category.</li> <li>Sets that start position (in degrees) of the angular axis By default, polar subplots with <code>direction</code> set to counterclockwise get a <code>rotation</code> of 0 which corresponds to due East (like what mathematicians prefer). In turn, polar with <code>direction</code> set to clockwise get a rotation of 90 which corresponds to due North (like on a compass),</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the format unit of the formatted theta values. Has an effect only when <code>angularaxis.type</code> is linear.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>Sets the angular axis type. If linear, set <code>thetaunit</code> to determine the unit in which axis value are shown. If *category, use <code>period</code> to set the number of integer coordinates around polar axis.</li> <li>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</li> <li>Set the background color of the subplot</li> <li>If there is a layout grid, use the domain for this column in the grid for this polar subplot .</li> <li>If there is a layout grid, use the domain for this row in the grid for this polar subplot .</li> <li>Sets the horizontal domain of this polar subplot (in plot fraction).</li> <li>Sets the vertical domain of this polar subplot (in plot fraction).</li> <li>Determines if the radial axis grid lines and angular axis line are drawn as circular sectors or as linear (polygon) sectors. Has an effect only when the angular axis has <code>type</code> category. Note that <code>radialaxis.angle</code> is snapped to the angle of the closest vertex when <code>gridshape</code> is circular (so that radial axis scale is the same as the data scale).</li> <li>Sets the fraction of the radius to cut out of the polar subplot.</li> <li>Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first <code>polar.sector</code> angle.</li> <li>Determines whether or not the range of this axis is computed in relation to the input data. See <code>rangemode</code> for more info. If <code>range</code> is provided and it has a value for both the lower and upper bound, <code>autorange</code> is set to false. Using min applies autorange only to set the minimum. Using max applies autorange only to set the maximum. Using min reversed applies autorange only to set the minimum on a reversed axis. Using max reversed applies autorange only to set the maximum on a reversed axis. Using reversed applies autorange on both ends and reverses the axis direction.</li> <li>Ensure this value is included in autorange.</li> <li>Sets the source reference on Chart Studio Cloud for <code>include</code>.</li> <li>When <code>tickangle</code> is set to auto, it will be set to the first angle in this array that is large enough to prevent label overlap.</li> <li>Using strict a numeric string in trace data is not converted to a number. Using convert types a numeric string in trace data may be treated as a number during automatic axis <code>type</code> detection. Defaults to layout.autotypenumbers.</li> <li>Sets the calendar system to use for <code>range</code> and <code>tick0</code> if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global <code>layout.calendar</code></li> <li>Sets the order in which categories on this axis appear. Only has an effect if <code>categoryorder</code> is set to array. Used with <code>categoryorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>categoryarray</code>.</li> <li>Specifies the ordering logic for the case of categorical variables. By default, plotly uses trace, which specifies the order that is present in the data supplied. Set <code>categoryorder</code> to category ascending or category descending if order should be determined by the alphanumerical order of the category names. Set <code>categoryorder</code> to array to derive the ordering from the attribute <code>categoryarray</code>. If a category is not found in the <code>categoryarray</code> array, the sorting behavior for that attribute will be identical to the trace mode. The unspecified categories will follow the categories in <code>categoryarray</code>. Set <code>categoryorder</code> to total ascending or total descending if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the color of the grid lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the layer on which this axis is displayed. If above traces, this axis is displayed above all the subplot's traces If below traces, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with <code>cliponaxis</code> set to false to show markers and/or text nodes above this axis.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the range of this axis. If the axis <code>type</code> is log, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis <code>type</code> is date, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis <code>type</code> is category, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements <code>null</code> impacts the default <code>autorange</code>.</li> <li>If tozero`, the range extends to 0, regardless of the input data If nonnegative, the range is non-negative, regardless of the input data. If normal, the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Determines on which side of radial axis line the tick and tick labels appear.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of this axis.</li> <li>Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</li> <li>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</li> <li>Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with 0 corresponding to rightmost limit of the polar subplot.</li> <li>If cube, this scene's axes are drawn as a cube, regardless of the axes' ranges. If data, this scene's axes are drawn in proportion with the axes' ranges. If manual, this scene's axes are drawn in proportion with the input of aspectratio (the default behavior if aspectratio is provided). If auto, this scene's axes are drawn using the results of data except when one axis is more than four times the size of the two others, where in that case the results of cube are used.</li> <li>Sets the projection type. The projection type could be either perspective or orthographic. The default is perspective.</li> <li>If there is a layout grid, use the domain for this column in the grid for this scene subplot .</li> <li>If there is a layout grid, use the domain for this row in the grid for this scene subplot .</li> <li>Sets the horizontal domain of this scene subplot (in plot fraction).</li> <li>Sets the vertical domain of this scene subplot (in plot fraction).</li> <li>Determines the mode of drag interactions for this scene.</li> <li>Determines the mode of hover interactions for this scene.</li> <li>Determines whether or not the range of this axis is computed in relation to the input data. See <code>rangemode</code> for more info. If <code>range</code> is provided and it has a value for both the lower and upper bound, <code>autorange</code> is set to false. Using min applies autorange only to set the minimum. Using max applies autorange only to set the maximum. Using min reversed applies autorange only to set the minimum on a reversed axis. Using max reversed applies autorange only to set the maximum on a reversed axis. Using reversed applies autorange on both ends and reverses the axis direction.</li> <li>Ensure this value is included in autorange.</li> <li>Sets the source reference on Chart Studio Cloud for <code>include</code>.</li> <li>Using strict a numeric string in trace data is not converted to a number. Using convert types a numeric string in trace data may be treated as a number during automatic axis <code>type</code> detection. Defaults to layout.autotypenumbers.</li> <li>Sets the background color of this axis' wall.</li> <li>Sets the calendar system to use for <code>range</code> and <code>tick0</code> if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global <code>layout.calendar</code></li> <li>Sets the order in which categories on this axis appear. Only has an effect if <code>categoryorder</code> is set to array. Used with <code>categoryorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>categoryarray</code>.</li> <li>Specifies the ordering logic for the case of categorical variables. By default, plotly uses trace, which specifies the order that is present in the data supplied. Set <code>categoryorder</code> to category ascending or category descending if order should be determined by the alphanumerical order of the category names. Set <code>categoryorder</code> to array to derive the ordering from the attribute <code>categoryarray</code>. If a category is not found in the <code>categoryarray</code> array, the sorting behavior for that attribute will be identical to the trace mode. The unspecified categories will follow the categories in <code>categoryarray</code>. Set <code>categoryorder</code> to total ascending or total descending if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the color of the grid lines.</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If true, the axis lines are mirrored. If ticks, the axis lines and ticks are mirrored. If false, mirroring is disable. If all, axis lines are mirrored on all shared-axes subplots. If allticks, axis lines and ticks are mirrored on all shared-axes subplots.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the range of this axis. If the axis <code>type</code> is log, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis <code>type</code> is date, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis <code>type</code> is category, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements <code>null</code> impacts the default <code>autorange</code>.</li> <li>If normal, the range is computed in relation to the extrema of the input data. If tozero`, the range extends to 0, regardless of the input data If nonnegative, the range is non-negative, regardless of the input data. Applies only to linear axes.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>Sets whether or not this axis is labeled</li> <li>Sets whether or not this axis' wall has a background color.</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Sets whether or not spikes starting from data points to this axis' wall are shown on hover.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the color of the spikes.</li> <li>Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.</li> <li>Sets the thickness (in px) of the spikes.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of this axis.</li> <li>Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</li> <li>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</li> <li>Determines whether or not a line is drawn at along the 0 value of this axis. If true, the zero line is drawn on top of the grid lines.</li> <li>Sets the line color of the zero line.</li> <li>Sets the width (in px) of the zero line.</li> <li>Determines whether or not the range of this axis is computed in relation to the input data. See <code>rangemode</code> for more info. If <code>range</code> is provided and it has a value for both the lower and upper bound, <code>autorange</code> is set to false. Using min applies autorange only to set the minimum. Using max applies autorange only to set the maximum. Using min reversed applies autorange only to set the minimum on a reversed axis. Using max reversed applies autorange only to set the maximum on a reversed axis. Using reversed applies autorange on both ends and reverses the axis direction.</li> <li>Ensure this value is included in autorange.</li> <li>Sets the source reference on Chart Studio Cloud for <code>include</code>.</li> <li>Using strict a numeric string in trace data is not converted to a number. Using convert types a numeric string in trace data may be treated as a number during automatic axis <code>type</code> detection. Defaults to layout.autotypenumbers.</li> <li>Sets the background color of this axis' wall.</li> <li>Sets the calendar system to use for <code>range</code> and <code>tick0</code> if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global <code>layout.calendar</code></li> <li>Sets the order in which categories on this axis appear. Only has an effect if <code>categoryorder</code> is set to array. Used with <code>categoryorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>categoryarray</code>.</li> <li>Specifies the ordering logic for the case of categorical variables. By default, plotly uses trace, which specifies the order that is present in the data supplied. Set <code>categoryorder</code> to category ascending or category descending if order should be determined by the alphanumerical order of the category names. Set <code>categoryorder</code> to array to derive the ordering from the attribute <code>categoryarray</code>. If a category is not found in the <code>categoryarray</code> array, the sorting behavior for that attribute will be identical to the trace mode. The unspecified categories will follow the categories in <code>categoryarray</code>. Set <code>categoryorder</code> to total ascending or total descending if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the color of the grid lines.</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If true, the axis lines are mirrored. If ticks, the axis lines and ticks are mirrored. If false, mirroring is disable. If all, axis lines are mirrored on all shared-axes subplots. If allticks, axis lines and ticks are mirrored on all shared-axes subplots.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the range of this axis. If the axis <code>type</code> is log, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis <code>type</code> is date, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis <code>type</code> is category, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements <code>null</code> impacts the default <code>autorange</code>.</li> <li>If normal, the range is computed in relation to the extrema of the input data. If tozero`, the range extends to 0, regardless of the input data If nonnegative, the range is non-negative, regardless of the input data. Applies only to linear axes.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>Sets whether or not this axis is labeled</li> <li>Sets whether or not this axis' wall has a background color.</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Sets whether or not spikes starting from data points to this axis' wall are shown on hover.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the color of the spikes.</li> <li>Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.</li> <li>Sets the thickness (in px) of the spikes.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of this axis.</li> <li>Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</li> <li>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</li> <li>Determines whether or not a line is drawn at along the 0 value of this axis. If true, the zero line is drawn on top of the grid lines.</li> <li>Sets the line color of the zero line.</li> <li>Sets the width (in px) of the zero line.</li> <li>Determines whether or not the range of this axis is computed in relation to the input data. See <code>rangemode</code> for more info. If <code>range</code> is provided and it has a value for both the lower and upper bound, <code>autorange</code> is set to false. Using min applies autorange only to set the minimum. Using max applies autorange only to set the maximum. Using min reversed applies autorange only to set the minimum on a reversed axis. Using max reversed applies autorange only to set the maximum on a reversed axis. Using reversed applies autorange on both ends and reverses the axis direction.</li> <li>Ensure this value is included in autorange.</li> <li>Sets the source reference on Chart Studio Cloud for <code>include</code>.</li> <li>Using strict a numeric string in trace data is not converted to a number. Using convert types a numeric string in trace data may be treated as a number during automatic axis <code>type</code> detection. Defaults to layout.autotypenumbers.</li> <li>Sets the background color of this axis' wall.</li> <li>Sets the calendar system to use for <code>range</code> and <code>tick0</code> if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global <code>layout.calendar</code></li> <li>Sets the order in which categories on this axis appear. Only has an effect if <code>categoryorder</code> is set to array. Used with <code>categoryorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>categoryarray</code>.</li> <li>Specifies the ordering logic for the case of categorical variables. By default, plotly uses trace, which specifies the order that is present in the data supplied. Set <code>categoryorder</code> to category ascending or category descending if order should be determined by the alphanumerical order of the category names. Set <code>categoryorder</code> to array to derive the ordering from the attribute <code>categoryarray</code>. If a category is not found in the <code>categoryarray</code> array, the sorting behavior for that attribute will be identical to the trace mode. The unspecified categories will follow the categories in <code>categoryarray</code>. Set <code>categoryorder</code> to total ascending or total descending if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the color of the grid lines.</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If true, the axis lines are mirrored. If ticks, the axis lines and ticks are mirrored. If false, mirroring is disable. If all, axis lines are mirrored on all shared-axes subplots. If allticks, axis lines and ticks are mirrored on all shared-axes subplots.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the range of this axis. If the axis <code>type</code> is log, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis <code>type</code> is date, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis <code>type</code> is category, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements <code>null</code> impacts the default <code>autorange</code>.</li> <li>If normal, the range is computed in relation to the extrema of the input data. If tozero`, the range extends to 0, regardless of the input data If nonnegative, the range is non-negative, regardless of the input data. Applies only to linear axes.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>Sets whether or not this axis is labeled</li> <li>Sets whether or not this axis' wall has a background color.</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Sets whether or not spikes starting from data points to this axis' wall are shown on hover.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the color of the spikes.</li> <li>Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.</li> <li>Sets the thickness (in px) of the spikes.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of this axis.</li> <li>Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</li> <li>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</li> <li>Determines whether or not a line is drawn at along the 0 value of this axis. If true, the zero line is drawn on top of the grid lines.</li> <li>Sets the line color of the zero line.</li> <li>Sets the width (in px) of the zero line.</li> <li>When <code>dragmode</code> is set to select, this limits the selection of the drag to horizontal, vertical or diagonal. h only allows horizontal selection, v only vertical, d only diagonal and any sets no limit.</li> <li>Sets the decimal and thousand separators. For example, . * puts a '.' before decimals and a space between thousands. In English locales, dflt is .,* but other locales may alter this default.</li> <li>Determines whether or not a legend is drawn. Default is <code>true</code> if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with <code>showlegend: true</code>.</li> <li>Set the background color of the subplot</li> <li>If there is a layout grid, use the domain for this column in the grid for this smith subplot .</li> <li>If there is a layout grid, use the domain for this row in the grid for this smith subplot .</li> <li>Sets the horizontal domain of this smith subplot (in plot fraction).</li> <li>Sets the vertical domain of this smith subplot (in plot fraction).</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Sets the color of the grid lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the layer on which this axis is displayed. If above traces, this axis is displayed above all the subplot's traces If below traces, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with <code>cliponaxis</code> set to false to show markers and/or text nodes above this axis.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the tick length (in px).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the values at which ticks on this axis appear. Defaults to <code>realaxis.tickvals</code> plus the same as negatives and zero.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Sets the color of the grid lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the layer on which this axis is displayed. If above traces, this axis is displayed above all the subplot's traces If below traces, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with <code>cliponaxis</code> set to false to show markers and/or text nodes above this axis.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Determines on which side of real axis line the tick and tick labels appear.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the tick length (in px).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If top (bottom), this axis' are drawn above (below) the axis line.</li> <li>Sets a tick label suffix.</li> <li>Sets the values at which ticks on this axis appear.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</li> <li>Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the color of the grid lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the layer on which this axis is displayed. If above traces, this axis is displayed above all the subplot's traces If below traces, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with <code>cliponaxis</code> set to false to show markers and/or text nodes above this axis.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of this axis.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the color of the grid lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the layer on which this axis is displayed. If above traces, this axis is displayed above all the subplot's traces If below traces, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with <code>cliponaxis</code> set to false to show markers and/or text nodes above this axis.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of this axis.</li> <li>Set the background color of the subplot</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the color of the grid lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the layer on which this axis is displayed. If above traces, this axis is displayed above all the subplot's traces If below traces, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with <code>cliponaxis</code> set to false to show markers and/or text nodes above this axis.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of this axis.</li> <li>If there is a layout grid, use the domain for this column in the grid for this ternary subplot .</li> <li>If there is a layout grid, use the domain for this row in the grid for this ternary subplot .</li> <li>Sets the horizontal domain of this ternary subplot (in plot fraction).</li> <li>Sets the vertical domain of this ternary subplot (in plot fraction).</li> <li>The number each triplet should sum to, and the maximum range of each axis</li> <li>Determines whether the title can automatically push the figure margins. If <code>yref='paper'</code> then the margin will expand to ensure that the title doesn\u2019t overlap with the edges of the container. If <code>yref='container'</code> then the margins will ensure that the title doesn\u2019t overlap with the plot area, tick labels, and axis titles. If <code>automargin=true</code> and the margins need to be expanded, then y will be set to a default 1 and yanchor will be set to an appropriate default to ensure that minimal margin space is needed. Note that when <code>yref='paper'</code>, only 1 or 0 are allowed y values. Invalid values will be reset to the default 1.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>The amount of padding (in px) along the bottom of the component.</li> <li>The amount of padding (in px) on the left side of the component.</li> <li>The amount of padding (in px) on the right side of the component.</li> <li>The amount of padding (in px) along the top of the component.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the plot's subtitle.</li> <li>Sets the plot's title.</li> <li>Sets the x position with respect to <code>xref</code> in normalized coordinates from 0 (left) to 1 (right).</li> <li>Sets the title's horizontal alignment with respect to its x position. left means that the title starts at x, right means that the title ends at x and center means that the title's center is at x. auto divides <code>xref</code> by three and calculates the <code>xanchor</code> value automatically based on the value of <code>x</code>.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> in normalized coordinates from 0 (bottom) to 1 (top). auto places the baseline of the title onto the vertical center of the top margin.</li> <li>Sets the title's vertical alignment with respect to its y position. top means that the title's cap line is at y, bottom means that the title's baseline is at y and middle means that the title's midline is at y. auto divides <code>yref</code> by three and calculates the <code>yanchor</code> value automatically based on the value of <code>y</code>.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.</li> <li>The easing function used for the transition</li> <li>Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.</li> <li>Sets the minimum text size between traces of the same type.</li> <li>Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by <code>uniformtext.minsize</code> using hide option hides the text; and using show option shows the text without further downscaling. Please note that if the size defined by <code>minsize</code> is greater than the font size defined by trace, then the <code>minsize</code> is used.</li> <li>Sets the plot's width (in px).</li> <li>Sets the gap (in plot fraction) between bars of adjacent location coordinates.</li> <li>Sets the gap (in plot fraction) between bars of the same location coordinate.</li> <li>Determines how bars at the same location coordinate are displayed on the graph. With stack, the bars are stacked on top of one another With relative, the bars are stacked on top of one another, with negative values below the axis, positive values above With group, the bars are plotted next to one another centered around the shared location. With overlay, the bars are plotted over one another, you might need to reduce opacity to see multiple bars.</li> <li>Sets the normalization for bar traces on the graph. With fraction, the value of each bar is divided by the sum of all values at that location coordinate. percent is the same but multiplied by 100 to show percentages.</li> <li>Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have width set.</li> <li>Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have width set.</li> <li>Determines how boxes at the same location coordinate are displayed on the graph. If group, the boxes are plotted next to one another centered around the shared location. If overlay, the boxes are plotted over one another, you might need to set opacity to see them multiple boxes. Has no effect on traces that have width set.</li> <li>Sets the gap (in plot fraction) between bars of adjacent location coordinates.</li> <li>Sets the gap (in plot fraction) between bars of the same location coordinate.</li> <li>Determines how bars at the same location coordinate are displayed on the graph. With stack, the bars are stacked on top of one another With group, the bars are plotted next to one another centered around the shared location. With overlay, the bars are plotted over one another, you might need to reduce opacity to see multiple bars.</li> <li>If <code>true</code>, the funnelarea slice colors (whether given by <code>funnelareacolorway</code> or inherited from <code>colorway</code>) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set <code>false</code> to disable. Colors provided in the trace, using <code>marker.colors</code>, are never extended.</li> <li>Sets the default funnelarea slice colors. Defaults to the main <code>colorway</code> used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see <code>extendfunnelareacolors</code>.</li> <li>hiddenlabels is the funnelarea &amp; pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts</li> <li>Sets the source reference on Chart Studio Cloud for <code>hiddenlabels</code>.</li> <li>If <code>true</code>, the icicle slice colors (whether given by <code>iciclecolorway</code> or inherited from <code>colorway</code>) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set <code>false</code> to disable. Colors provided in the trace, using <code>marker.colors</code>, are never extended.</li> <li>Sets the default icicle slice colors. Defaults to the main <code>colorway</code> used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see <code>extendiciclecolors</code>.</li> <li>If <code>true</code>, the pie slice colors (whether given by <code>piecolorway</code> or inherited from <code>colorway</code>) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set <code>false</code> to disable. Colors provided in the trace, using <code>marker.colors</code>, are never extended.</li> <li>Sets the default pie slice colors. Defaults to the main <code>colorway</code> used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see <code>extendpiecolors</code>.</li> <li>Sets the gap (in plot fraction) between scatter points of adjacent location coordinates. Defaults to <code>bargap</code>.</li> <li>Determines how scatter points at the same location coordinate are displayed on the graph. With group, the scatter points are plotted next to one another centered around the shared location. With overlay, the scatter points are plotted over one another, you might need to reduce opacity to see multiple scatter points.</li> <li>If <code>true</code>, the sunburst slice colors (whether given by <code>sunburstcolorway</code> or inherited from <code>colorway</code>) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set <code>false</code> to disable. Colors provided in the trace, using <code>marker.colors</code>, are never extended.</li> <li>Sets the default sunburst slice colors. Defaults to the main <code>colorway</code> used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see <code>extendsunburstcolors</code>.</li> <li>If <code>true</code>, the treemap slice colors (whether given by <code>treemapcolorway</code> or inherited from <code>colorway</code>) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set <code>false</code> to disable. Colors provided in the trace, using <code>marker.colors</code>, are never extended.</li> <li>Sets the default treemap slice colors. Defaults to the main <code>colorway</code> used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see <code>extendtreemapcolors</code>.</li> <li>Sets the gap (in plot fraction) between violins of adjacent location coordinates. Has no effect on traces that have width set.</li> <li>Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have width set.</li> <li>Determines how violins at the same location coordinate are displayed on the graph. If group, the violins are plotted next to one another centered around the shared location. If overlay, the violins are plotted over one another, you might need to set opacity to see them multiple violins. Has no effect on traces that have width set.</li> <li>Sets the gap (in plot fraction) between bars of adjacent location coordinates.</li> <li>Sets the gap (in plot fraction) between bars of the same location coordinate.</li> <li>Determines how bars at the same location coordinate are displayed on the graph. With group, the bars are plotted next to one another centered around the shared location. With overlay, the bars are plotted over one another, you might need to reduce opacity to see multiple bars.</li> </ol>"},{"location":"reference/configuration/Dashboards/Dashboard/","title":"Dashboard","text":""},{"location":"reference/configuration/Dashboards/Dashboard/#dashboard","title":"Dashboard","text":"<p>Dashboards are lists of rows that enable you to build your dashboard grid.</p> <p>Tip</p> <p>By leveraging <code>visivo serve</code> while building you can quickly optimize your layout. Simply re-size your row heights and item widths, save the file and quickly see the new layout of your dashboard on localhost:8000.</p> <p>Within the rows you are able to organize and display <code>charts</code>, <code>tables</code>, <code>selectors</code> and <code>markdown</code> from your project as items.</p> <p></p> <p>Note</p> visivo.project.yml<pre><code>dashboards:\n  - name: Layout Example\n    rows:\n      - height: medium\n        items: #item.width default is 1\n          - chart: ...\n          - chart: ...\n          - chart: ...\n      - height: large\n        items:\n          - width: 2\n            table: ...\n          - width: 1\n            markdown: ...\n      - height: small\n        items:\n          - width: 2\n            selector: ...\n          - chart: ...\n          - chart: ...\n          - width: 2\n            chart: ...\n</code></pre> <p>Above you can see how changing the row heights and item widths impacts the layout of the dashboard.</p> <p>Example</p> <p><code>row.height</code> defaults to <code>medium</code> and <code>item.width</code> defaults to <code>1</code>. Specifying those fields are optional if you want to use the default values </p><pre><code>dashboards:\n  - name: any-name-you-want  #unique name of your dashboard\n    rows:\n      - height: medium\n        items:\n          - width: 2  #widths are evaluated relative to other items in the row\n            table: ref(a-table-name)\n          - width 1  #this chart will be 1/3 of the row\n            chart: ref(a-chart-name)\n      - height: small\n        items:\n          - markdown: \"# Some inline **markdown**\"\n          - chart: ref(another-chart)\n          - width: 2\n            chart: ref(a-third-chart)\n</code></pre>"},{"location":"reference/configuration/Dashboards/Dashboard/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the dashboard across the entire project file_path string None The path to the file that contains the object definition. level Any of: integer, string None The importance level of the dashboard (either an index number or level title) tags array None A list of tags associated with the dashboard description string None A description of the dashboard's purpose and contents type string internal The type of dashboard (always 'internal') rows Array of Row [] A list of <code>Row</code> objects"},{"location":"reference/configuration/Dashboards/Dashboard/Row/","title":"Row","text":""},{"location":"reference/configuration/Dashboards/Dashboard/Row/#row","title":"Row","text":"<p>Rows are the horizontal component of the dashboard grid and house 1 to many Items.</p> <p>Tip</p> <p>You can set the height of a row using the <code>height</code> attribute on a row</p> Row Height Options in Pixels Height Pixels compact wrapped xsmall 128 small 256 medium 396 large 512 xlarge 768 xxlarge 1024"},{"location":"reference/configuration/Dashboards/Dashboard/Row/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. height medium Sets the height of the row. items Array of Item None A list of items containing tables, charts or markdown. Items are placed in the row in the order that they are listed from left to right."},{"location":"reference/configuration/Dashboards/Dashboard/Row/Item/","title":"Item","text":""},{"location":"reference/configuration/Dashboards/Dashboard/Row/Item/#item","title":"Item","text":"<p>The Item houses a single chart, table, selector or markdown object.</p> <p>It also informs the width that the chart, table or markdown should occupy within a row. Widths are evaluated for each item in a row relative to all of the other items in the row.</p> <p>In the example below, the markdown would take up 1/4th of the row and would be positioned on the left edge. The table would also take up 1/4th of the page and would sit to the right of the markdown. The chart would take up 1/2 of the page and would touch the right edge of the row.</p> <pre><code>items:\n  - width: 1\n    markdown: \"# Some inline **markdown**\"\n  - width: 1\n    table: ref(table-name)\n  - width: 2\n    chart: ref(chart-name)\n  - width: 1\n    selector: ref(selector-name)\n</code></pre>"},{"location":"reference/configuration/Dashboards/Dashboard/Row/Item/#markdown","title":"Markdown","text":"<p>You can use markdown to add formatted text to your dashboard. Visivo markdown supports CommonMark and GitHub Flavored Markdown. You can also render raw HTML within your markdown.</p> <p>To control the alignment of markdown content, you can use the <code>align</code> and <code>justify</code> properties.</p> Horizontal Alignment (align)Vertical Distribution (justify) <p>Controls how text aligns horizontally within the container:</p> <p><code>align: left</code> (default) </p><pre><code>[Header     ]\n[Paragraph  ]\n[List       ]\n</code></pre> <p><code>align: center</code> </p><pre><code>[  Header   ]\n[ Paragraph ]\n[   List    ]\n</code></pre> <p><code>align: right</code> </p><pre><code>[     Header]\n[  Paragraph]\n[      List]\n</code></pre> <p>Controls how content blocks are distributed vertically in fixed-height containers:</p> <p><code>justify: start</code> (default) </p><pre><code>[Header     ]\n[Paragraph  ]\n[List       ]\n[           ]\n[           ]\n</code></pre> <p><code>justify: center</code> </p><pre><code>[           ]\n[Header     ]\n[Paragraph  ]\n[List       ]\n[           ]\n</code></pre> <p><code>justify: between</code> </p><pre><code>[Header     ]\n[           ]\n[Paragraph  ]\n[           ]\n[List       ]\n</code></pre> <p><code>justify: around</code> </p><pre><code>[           ]\n[Header     ]\n[           ]\n[Paragraph  ]\n[           ]\n[List       ]\n[           ]\n</code></pre> <p><code>justify: evenly</code> </p><pre><code>[           ]\n[Header     ]\n[Paragraph  ]\n[List       ]\n[           ]\n</code></pre> <p><code>justify: end</code> </p><pre><code>[           ]\n[           ]\n[Header     ]\n[Paragraph  ]\n[List       ]\n</code></pre>"},{"location":"reference/configuration/Dashboards/Dashboard/Row/Item/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. width integer 1 The width of the Item determines is evaluated relative to the other items in a row. markdown string None Markdown text to include in the dashboard. align string None Alignment of markdown content. Only valid when markdown is set. Options are 'left', 'center', or 'right'. justify string None Justification of markdown content within its container. Options are 'start', 'end', 'center', 'between', 'around', or 'evenly'. chart Chart None A chart object defined inline or a ref() to a chart. table Table None A Table object defined inline or a ref() to a table selector Selector None A Selector object defined inline or a ref() to a selector"},{"location":"reference/configuration/Dashboards/ExternalDashboard/","title":"ExternalDashboard","text":""},{"location":"reference/configuration/Dashboards/ExternalDashboard/#externaldashboard","title":"ExternalDashboard","text":"<p>Represents an external dashboard that links to another system or URL</p>"},{"location":"reference/configuration/Dashboards/ExternalDashboard/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the dashboard across the entire project file_path string None The path to the file that contains the object definition. level Any of: integer, string None The importance level of the dashboard (either an index number or level title) tags array None A list of tags associated with the dashboard description string None A description of the dashboard's purpose and contents type string external The type of dashboard (always 'external') href string None URL to the external dashboard"},{"location":"reference/configuration/Dbt/","title":"Dbt","text":""},{"location":"reference/configuration/Dbt/#dbt","title":"Dbt","text":"<p>Configuration for pulling models and sources from a dbt project.</p> <p>The integration will create models and sources from the dbt project and store them in the output directory.</p> <p>It will pull all the \"targets\" defined in the profiles.yml file as sources. Each of these sources will be named in the format \"prefix + dbt_profile + dbt_target\".</p> <p>Then it will create each of the dbt models as Visivo models pointing to the default profile and target. These models will be named in the format \"prefix + dbt_model\".</p> <p>Using all the default values: </p><pre><code>dbt:\n  enabled: true\n</code></pre> <p>Or specify the input and/or output file and locations:</p> <pre><code>dbt:\n  output_file: includes/dbt.yml\n  dbt_project_yml_location: dbt\n  profiles_yml_location: dbt\n</code></pre>"},{"location":"reference/configuration/Dbt/#attributes","title":"Attributes","text":"Field Type Default Description enabled boolean True Whether to enable the dbt phase.  Defaults to true. output_file string None The file to store the dbt models and sources relative to the working directory.  Defaults to the '$output_directory/dbt.yml'. It is useful to store the file in a different location so it can be checked into source control. dbt_project_yml_location string None Location for the dbt_project.yml file relative to the working directory.  Defaults to the current working directory. profiles_yml_location string None Location for the profiles.yml file relative to the working directory.  Defaults to the current working directory. prefix string Prefix for the dbt models and sources. Defaults to no prefix. You may want to add one if the dbt model names are in conflict with other models in your project."},{"location":"reference/configuration/Defaults/","title":"Defaults","text":""},{"location":"reference/configuration/Defaults/#defaults","title":"Defaults","text":""},{"location":"reference/configuration/Defaults/#attributes","title":"Attributes","text":"Field Type Default Description alert_name string None The name of an alert defined elsewhere in the Visivo project. source_name string None The name of a source defined elsewhere in the Visivo project. threads integer 8 The number of threads to use when running queries. levels Array of Level None Enables you to customize the project level view of your dashboards. Ordered list of dashboard levels with titles and descriptions"},{"location":"reference/configuration/Defaults/Level/","title":"Level","text":""},{"location":"reference/configuration/Defaults/Level/#level","title":"Level","text":"<p>Represents a dashboard level with title and description</p>"},{"location":"reference/configuration/Defaults/Level/#attributes","title":"Attributes","text":"Field Type Default Description title string None Display title for this level description string None Description of this level's purpose"},{"location":"reference/configuration/Destinations/ConsoleDestination/","title":"ConsoleDestination","text":""},{"location":"reference/configuration/Destinations/ConsoleDestination/#consoledestination","title":"ConsoleDestination","text":""},{"location":"reference/configuration/Destinations/ConsoleDestination/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. called boolean False message string Console Destination Run type string None"},{"location":"reference/configuration/Destinations/EmailDestination/","title":"EmailDestination","text":""},{"location":"reference/configuration/Destinations/EmailDestination/#emaildestination","title":"EmailDestination","text":"<p>You can configure email destinations for any SMTP provider. Here's an example of this configuration looks in your yaml file: </p><pre><code>destinations:\n  - name: email-destination #any unique name of your choosing\n    type: email\n    subject: \"[ALERT] Your Visivo Tests Have Failed\" #can be any message you want\n    to: someone@your_company.com\n    port: 2525 #is this port by default\n    host: your_company_email_server.com\n    username: someones_username\n    password: {{ env_var('EMAIL_PASSWORD')}} #We'd recommend using environment variables here for security\n</code></pre>"},{"location":"reference/configuration/Destinations/EmailDestination/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. type string None The type of alert destination. subject string Visivo Destination Subject of the alert email. to string None The email to send the alert to. port integer 2525 The port of the email server that the destination is connecting to. host string None The host of the email server that the destination is connecting to. username string None The username for authenticating the email server. password string None The password for authenticating the email server."},{"location":"reference/configuration/Destinations/SlackDestination/","title":"SlackDestination","text":""},{"location":"reference/configuration/Destinations/SlackDestination/#slackdestination","title":"SlackDestination","text":"<p>You can configure slack alerts by setting up an incoming message slack webhook. Once you do that, the set up in Visivo is super simple: </p><pre><code>alerts:\n  - name: slack-destination #any name you choose\n    type: slack\n    webhook_url: {{ env_var(\"SLACK_WEBHOOK\")}}\n</code></pre>"},{"location":"reference/configuration/Destinations/SlackDestination/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. webhook_url string None An incoming message slack webhook url. You can set one of those up by following these instructions. type string None The type of Destination Destination. Needs to be <code>slack</code> to configure a slack destination"},{"location":"reference/configuration/Include/","title":"Include","text":""},{"location":"reference/configuration/Include/#include","title":"Include","text":"<p>Include's can be used to break apart a project file with references to other files. This includes files from remote github repositories.</p> <p>Read more about includes here </p>"},{"location":"reference/configuration/Include/#attributes","title":"Attributes","text":"Field Type Default Description path string None The path or git reference to external yml files or directories to include in this project depth integer None Directory traversal depth. None=fully recursive, 0=current directory only, 1=one level deep, etc. Only applies to directory paths. exclusions array [] Patterns to exclude from directory inclusion. Supports glob patterns and regex. Only applies to directory paths."},{"location":"reference/configuration/Models/CsvScriptModel/","title":"CsvScriptModel","text":""},{"location":"reference/configuration/Models/CsvScriptModel/#csvscriptmodel","title":"CsvScriptModel","text":"<p>CSV Script Models are a type of model that executes a command with a given set of args. This command needs to return a well formatted  with a header row to stdout.</p> <p>Visivo will be able to access the generate file as a model by storing a duckdb file in the source directory.</p> <p>Example</p> EchoPython ScriptCSV File <p>Echoing all of your data is probably not a very practical example, but it does nicely demonstrate how the feature works! </p><pre><code>models:\n  - name: csv\n    table_name: csv\n    args:\n        - echo\n        - |\n          x,y\n          1,9\n          2,1\n          3,2\n          4,3\n          5,5\n          6,8\n</code></pre> <p>In this example we'll use python to generate a csv of processes running on your machine and make that csv available to Visivo as a model for analysis. </p>created_processes_csv.py<pre><code>import subprocess\nimport csv\nimport sys\n\n# Define the CSV file to write\ncsv_file = \"data/processes.csv\"\n\n# Execute the 'ps aux' command\nresult = subprocess.run([\"ps\", \"aux\"], stdout=subprocess.PIPE, text=True)\n\n# Split the output into lines\nlines = result.stdout.strip().split(\"/n\")\n\n# Write CSV to stdout\nwriter = csv.writer(sys.stdout)\nwriter.writerow(\n    [\"USER\",\"PID\",\"%CPU\",\"%MEM\",\"VSZ\",\"RSS\",\"TTY\",\"STAT\",\"START\",\"TIME\",\"COMMAND\"]\n)  # Header\n\nfor line in lines[1:]:  # Skip the header line from the ps output\n    row = line.split(None, 10)  # Split on whitespace, but only for the first 10 columns\n    writer.writerow(row)\n</code></pre> With your script ready to go, all you have to do is convert <code>python create_processes_csv.py</code> into the args list format in a model. <pre><code>models:\n  - name: processes\n    table_name: processes\n    args:\n      - python\n      - create_processes_csv.py\n</code></pre> <p>One of the best use cases for this type of model is to store a static csv in your project and cat it into a model. This great because it's simple and allows you to version control your csv data. </p>file.csv<pre><code>columns,go,up,here\n1,text,more text,6\n2,stuff,more stuff,7\n</code></pre> Then just <code>cat</code> the csv file in a model. <pre><code>models:\n  - name: file_model\n    table_name: file_model\n    args:\n      - cat\n      - file.csv\n</code></pre> <p>The args are python subprocess list args and you can read their source documentation here.</p>"},{"location":"reference/configuration/Models/CsvScriptModel/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. table_name string model The name to give the resulting models table args array None An array of the variables that build your command to run. allow_empty boolean False Whether to allow the command to return an empty csv."},{"location":"reference/configuration/Models/LocalMergeModel/","title":"LocalMergeModel","text":""},{"location":"reference/configuration/Models/LocalMergeModel/#localmergemodel","title":"LocalMergeModel","text":"<p>Local Merge Models are models that allow you to merge data from multiple other models locally.</p> <p>Note</p> <p>Any joining is done in a local DuckDB database. While more efficient than SQLite, it's still primarily designed for medium-sized datasets.</p> <p>Example</p> Internal join External <p>Here is an example of merging two models that are defined in your project. One that is external and one that is internal. </p><pre><code>models:\n  - name: local_merge\n    models:\n        - ref(first_domain_model)\n        - ref(external_data_model)\n    sql: SELECT * FROM first_domain_model.model AS fdm JOIN external_data_model.model AS edm ON fdm.external_id = edm.id\n</code></pre>"},{"location":"reference/configuration/Models/LocalMergeModel/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. sql string None The sql used to generate your base data models Array of Model None A model object defined inline or a ref() to a model."},{"location":"reference/configuration/Models/SqlModel/","title":"SqlModel","text":""},{"location":"reference/configuration/Models/SqlModel/#sqlmodel","title":"SqlModel","text":""},{"location":"reference/configuration/Models/SqlModel/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. sql string None The sql used to generate your base data source Any of: BigQuerySource, MysqlSource, PostgresqlSource, SnowflakeSource, SqliteSource None A source object defined inline or a ref() to a chart. Override the defaults.source_name"},{"location":"reference/configuration/Selector/","title":"Selector","text":""},{"location":"reference/configuration/Selector/#selector","title":"Selector","text":"<p>Selectors enable you to toggle between multiple different traces in your chart.</p> <p>Tip</p> <p>Selectors can also be used to add interactivity between charts different tables. You can read more about using selectors to add interactivity here.</p> <p>You can configure selectors to be single select or multi-select. Single select is great if you only want to show a single trace at a time on the chart while the multi-select can be really useful for providing filtering capabilities.</p>"},{"location":"reference/configuration/Selector/#example","title":"Example","text":"<p>Here's how you might use selectors to create interactivity between two different charts. </p><pre><code>charts:\n    - name: Chart One\n      selector:\n          name: Common Selector\n          type: single\n          ...\n    - name: Chart Two\n      selector: ref(Common Selector)\n      ...\n</code></pre>"},{"location":"reference/configuration/Selector/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. type multiple Single or multiple selector options array [] Optional set of traces, items, or rows to create the choices list"},{"location":"reference/configuration/Sources/BigQuerySource/","title":"BigQuerySource","text":""},{"location":"reference/configuration/Sources/BigQuerySource/#bigquerysource","title":"BigQuerySource","text":"<p>BigQuerySources hold the connection information to Google BigQuery instances.</p> <p>BigQuery Authentication</p> <p>You can authenticate BigQuery in one of two ways:  1. Pass a base64 encoded service account key to the <code>credentials_base64</code> field.  2. Set the absolute file path to the credentials file in a environment variable named <code>GOOGLE_APPLICATION_CREDENTIALS</code>.</p> Base64 Encoded Credentials<code>GOOGLE_APPLICATION_CREDENTIALS</code> Environment Variable <p>Using encoding the service key json credential file to base64 can be a useful way to authenticate BigQuery without logging into Google Cloud Console each time and makes it easier to manage credentials in CI/CD pipelines.</p> <p>However utilizing base64 encoding requires a few extra steps:</p> <ol> <li>Create a Google Cloud Service Account<ol> <li>Go to the Google Cloud Console</li> <li>Select your project</li> <li>Navigate to \"IAM &amp; Admin\" &gt; \"Service Accounts\"</li> <li>Click \"Create Service Account\"</li> <li>Give it a name and description</li> <li>Grant it the \"BigQuery Admin\" role (or more restrictive custom role)</li> <li>Click \"Done\"</li> </ol> </li> <li>Create and download credentials<ol> <li>Find your service account in the list</li> <li>Click the three dots menu &gt; \"Manage keys\"</li> <li>Click \"Add Key\" &gt; \"Create new key\"</li> <li>Choose JSON format</li> <li>Click \"Create\" - this downloads your credentials file</li> </ol> </li> <li>Convert credentials to base64     <pre><code># On Linux/Mac\npython -m base64 &lt; credentials.json &gt; encoded.txt\n\n# On Windows PowerShell\n[Convert]::ToBase64String([System.IO.File]::ReadAllBytes(\"credentials.json\")) &gt; encoded.txt\n</code></pre></li> <li>Use the contents of encoded.txt as your credentials_base64 value. You can store the single line key in your untracked env file and use the <code>{{ env_var('VAR_NAME') }}</code> syntax to reference the environment variable in your Visivo config.</li> </ol> <p>If you use gcloud locally you probably have this environment variable configured already.</p> <p>Run <code>echo $GOOGLE_APPLICATION_CREDENTIALS</code> in your terminal. If it returns your crendetials then you're all set. and can configure a BigQuerySource without the <code>credentials_base64</code> field.</p> <p>If you don't have the environment variable, follow these steps:</p> <ol> <li>Create a Google Cloud Service Account<ol> <li>Go to the Google Cloud Console</li> <li>Select your project</li> <li>Navigate to \"IAM &amp; Admin\" &gt; \"Service Accounts\"</li> <li>Click \"Create Service Account\"</li> <li>Give it a name and description</li> <li>Grant it the \"BigQuery Admin\" role (or more restrictive custom role)</li> <li>Click \"Done\"</li> </ol> </li> <li>Create and download credentials<ol> <li>Find your service account in the list</li> <li>Click the three dots menu &gt; \"Manage keys\"</li> <li>Click \"Add Key\" &gt; \"Create new key\"</li> <li>Choose JSON format</li> <li>Click \"Create\" - this downloads your credentials file</li> </ol> </li> <li>Set the environment variable     You can set the environment variable in your shell profile file.     <pre><code>export GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/your/credentials.json\"\n</code></pre>     or in your untracked .env file.     <pre><code>GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/credentials.json\n</code></pre> This method is easier to manage and does not require any extra steps to authenticate.</li> </ol> <p>The service account needs at minimum the \"BigQuery User\" role to execute queries. For more restricted access, you can create a custom role with just the required permissions:</p> <ul> <li>bigquery.jobs.create</li> <li>bigquery.tables.get</li> <li>bigquery.tables.getData</li> <li>bigquery.tables.list</li> </ul> <p>Example</p> Simple <pre><code>    sources:\n      - name: bigquery_source\n        type: bigquery\n        project: my-project-id\n        database: my_dataset\n        credentials_base64: {{ env_var('BIGQUERY_BASE64_ENCODED_CREDENTIALS') }}\n</code></pre> <p>Note: Recommended environment variable use is covered in the sources overview.</p>"},{"location":"reference/configuration/Sources/BigQuerySource/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. host string None The host url of the database. port integer None The port of the database. database string None The default BigQuery dataset to use for queries. username string None Username for the database. password string None Password corresponding to the username. db_schema string None The schema that the Visivo project will use in queries. after_connect string None project string None The Google Cloud project ID that contains your BigQuery dataset. credentials_base64 string None The Google Cloud service account credentials JSON string base64 encoded. Turn your JSON into a base64 string in the command line with <code>python -m base64 &lt; credentials.json &gt; encoded.txt</code>. Not required if GOOGLE_APPLICATION_CREDENTIALS environment variable is set. type string None connection_pool_size integer 8 The pool size that is used for this connection."},{"location":"reference/configuration/Sources/DuckdbSource/","title":"DuckdbSource","text":""},{"location":"reference/configuration/Sources/DuckdbSource/#duckdbsource","title":"DuckdbSource","text":"<p>DuckdbSources hold the connection information to DuckDB data sources.</p> <p>Example</p> Simple <pre><code>    sources:\n      - name: duckdb_source\n        type: duckdb\n        database: local/file/database.db\n        connection_pool_size: 2\n</code></pre> <p>Note</p> <p>Recommended environment variable use is covered in the sources overview.</p>"},{"location":"reference/configuration/Sources/DuckdbSource/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. host string None The host url of the database. port integer None The port of the database. database string None The database that the Visivo project will use in queries. username string None Username for the database. password string None Password corresponding to the username. db_schema string None The schema that the Visivo project will use in queries. type string None connection_pool_size integer 1 The pool size that is used for this connection. attach Any of: DuckdbAttachment, array None List of other local Duckdb database sources to attach in the connection that will be available in the base SQL query."},{"location":"reference/configuration/Sources/DuckdbSource/DuckdbAttachment/","title":"DuckdbAttachment","text":""},{"location":"reference/configuration/Sources/DuckdbSource/DuckdbAttachment/#duckdbattachment","title":"DuckdbAttachment","text":""},{"location":"reference/configuration/Sources/DuckdbSource/DuckdbAttachment/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object schema_name string Name of the schema to attach the source under. source None Local Duckdb database source to attach in the connection that will be available in the base SQL query."},{"location":"reference/configuration/Sources/MysqlSource/","title":"MysqlSource","text":""},{"location":"reference/configuration/Sources/MysqlSource/#mysqlsource","title":"MysqlSource","text":"<p>MysqlSources hold the connection information to MySQL data sources.</p> <p>Example</p> Simple <pre><code>    sources:\n      - name: mysql_source\n        type: mysql\n        database: database\n        username: {{ env_var('MYSQL_USER') }}\n        password: {{ env_var('MYSQL_PASSWORD') }}\n        connection_pool_size: 2\n</code></pre> <p>Note</p> <p>Recommended environment variable use is covered in the sources overview.</p>"},{"location":"reference/configuration/Sources/MysqlSource/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. host string None The host url of the database. port integer None The port of the database. database string None The database that the Visivo project will use in queries. username string None Username for the database. password string None Password corresponding to the username. db_schema string None The schema that the Visivo project will use in queries. after_connect string None type string None connection_pool_size integer 1 The pool size that is used for this connection."},{"location":"reference/configuration/Sources/PostgresqlSource/","title":"PostgresqlSource","text":""},{"location":"reference/configuration/Sources/PostgresqlSource/#postgresqlsource","title":"PostgresqlSource","text":"<p>PostgresqlSources hold the connection information to PostgreSQL data sources.</p> <p>Example</p> Simple <pre><code>    sources:\n      - name: postgresql_source\n        type: postgresql\n        database: database\n        username: {{ env_var('PG_USER') }}\n        password: {{ env_var('PG_PASSWORD') }}\n        connection_pool_size: 2\n</code></pre> <p>Note</p> <p>Recommended environment variable use is covered in the sources overview.</p>"},{"location":"reference/configuration/Sources/PostgresqlSource/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. host string None The host url of the database. port integer None The port of the database. database string None The database that the Visivo project will use in queries. username string None Username for the database. password string None Password corresponding to the username. db_schema string None The schema that the Visivo project will use in queries. after_connect string None type string None connection_pool_size integer 1 The pool size that is used for this connection."},{"location":"reference/configuration/Sources/SnowflakeSource/","title":"SnowflakeSource","text":""},{"location":"reference/configuration/Sources/SnowflakeSource/#snowflakesource","title":"SnowflakeSource","text":"<p>SnowflakeSources hold the connection information to Snowflake data sources.</p> <p>Example</p> SimpleKey Authentication <pre><code>    sources:\n      - name: snowflake_source\n        type: snowflake\n        database: DEV\n        warehouse: DEV\n        account: ab12345.us-west-1.aws\n        db_schema: DEFAULT\n        username: {{ env_var('SNOWFLAKE_USER') }}\n        password: {{ env_var('SNOWFLAKE_PASSWORD') }}\n</code></pre> <pre><code>    sources:\n      - name: snowflake_source\n        type: snowflake\n        database: DEV\n        warehouse: DEV\n        account: ab12345.us-west-1.aws\n        db_schema: DEFAULT\n        username: \"{{ env_var('SNOWFLAKE_USER') }}\"\n        private_key_path: /path/to/rsa_key.p8\n        private_key_passphrase: \"{{ env_var('DB_PRIVATE_KEY_PASSPHRASE') }}\"\n</code></pre> <p>Note: Recommended environment variable use is covered in the sources overview.</p>"},{"location":"reference/configuration/Sources/SnowflakeSource/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. host string None The host url of the database. port integer None The port of the database. database string None The database that the Visivo project will use in queries. username string None Username for the database. password string None Password corresponding to the username. db_schema string None The schema that the Visivo project will use in queries. after_connect string None account string None The snowflake account url. Here's how you find this: snowflake docs. warehouse string None The compute warehouse that you want queries from your Visivo project to leverage. role string None The access role that you want to use when running queries. timezone string None The timezone that you want to use by default when running queries. private_key_path string None Path to the private key file (.p8) for key pair authentication. If provided, password will be ignored. private_key_passphrase string None Passphrase for the private key file if it is encrypted. type string None connection_pool_size integer 8 The pool size that is used for this connection."},{"location":"reference/configuration/Sources/SqliteSource/","title":"SqliteSource","text":""},{"location":"reference/configuration/Sources/SqliteSource/#sqlitesource","title":"SqliteSource","text":"<p>SqliteSources hold the connection information to SQLite data sources.</p> <p>Example</p> SimpleAdditional Attached <pre><code>sources:\n  - name: sqlite_source\n    database: local/file/local.db\n    type: sqlite\n</code></pre> <p>Attaching other SQLite databases allows you to join models between databases.</p> <pre><code>sources:\n  - name: sqlite_source\n    database: local/file/local.db\n    type: sqlite\n    attach:\n      - schema_name: static\n        name: static_source\n        database: local/static/file/local.db\n        type: sqlite\n</code></pre> <p>The above source can be then used in a model and the sql for that model might look similar to: <code>SELECT * FROM local AS l JOIN static.data AS sd ON l.static_id=sd.id</code></p> <p>Note</p> <p>Recommended environment variable use is covered in the sources overview.</p>"},{"location":"reference/configuration/Sources/SqliteSource/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. host string None The host url of the database. port integer None The port of the database. database string None The database that the Visivo project will use in queries. username string None Username for the database. password string None Password corresponding to the username. db_schema string None The schema that the Visivo project will use in queries. after_connect string None type string None attach Any of: Attachment, array None List of other local SQLite database sources to attach in the connection that will be available in the base SQL query."},{"location":"reference/configuration/Sources/SqliteSource/Attachment/","title":"Attachment","text":""},{"location":"reference/configuration/Sources/SqliteSource/Attachment/#attachment","title":"Attachment","text":""},{"location":"reference/configuration/Sources/SqliteSource/Attachment/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object schema_name string Name of the schema to attach the source under. source None Local SQLite database source to attach in the connection that will be available in the base SQL query."},{"location":"reference/configuration/Table/","title":"Table","text":""},{"location":"reference/configuration/Table/#table","title":"Table","text":"<p>Tables enable you to quickly represent trace data in a tabular format.</p> <p>Since tables sit on top of trace data, the steps to create a table from scratch are as follows:</p> <ol> <li>Create a model.</li> <li>Create a trace with columns or props that references your model.</li> <li>Create a table that references the trace. Within the table.columns block you will need to explicitly state the trace columns and header names that you want to include.</li> </ol>"},{"location":"reference/configuration/Table/#example","title":"Example","text":"<pre><code>models:\n  - name: table-model\n    sql: |\n        select\n            project_name,\n            project_created_at,\n            cli_version,\n            stage_name,\n            account_name,\n            stage_archived\n        FROM visivo_project\ntraces:\n  - name: pre-table-trace\n    model: ref(table-model)\n    columns:\n        project_name: project_name\n        project_created_at: project_created_at::varchar\n        cli_version: cli_version\n        stage_name: stage_name\n        account_name: account_name\n        stage_archived: stage_archived::varchar\n    props:\n        type: scatter\n        x: column(project_created_at)\n        y: column(project_name)\ntables:\n  - name: latest-projects-table\n    traces:\n      - ref(pre-table-trace)\n    column_defs:\n      - trace_name: pre-table-trace\n        columns:\n        - header: \"Project Name\"\n          key: columns.project_name\n        - header: \"Project Created At\"\n          key: columns.project_created_at\n        - header: \"Project Json\"\n          key: columns.project_json\n        - header: \"CLI Version\"\n          key: columns.cli_version\n        - header: \"Stage Name\"\n          key: columns.stage_name\n          aggregation: uniqueCount\n        - header: \"Account Name\"\n          key: columns.account_name\n        - header: \"Account Name\"\n          key: columns.stage_archived\n</code></pre> Tables are built on the material react table framework."},{"location":"reference/configuration/Table/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. selector Selector None The selector for the choosing which trace data is shown. traces Array of Trace [] A ref() to a trace or trace defined in line.  Data for the table will come from the trace. column_defs Any of: TableColumnDefinition, array None A list of column definitions. These definitions define the columns for a given trace included in this table. rows_per_page 50 The number of rows to show per page. Default is 50 rows"},{"location":"reference/configuration/Table/TableColumnDefinition/","title":"TableColumnDefinition","text":""},{"location":"reference/configuration/Table/TableColumnDefinition/#tablecolumndefinition","title":"TableColumnDefinition","text":"<p>Table columns allow you to display a subset of the available trace data.</p>"},{"location":"reference/configuration/Table/TableColumnDefinition/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object trace_name string None The name of the trace that the column defs apply to. columns Array of TableColumn None A list of column definitions that contain <code>header</code> and <code>key</code>. <code>header</code> is the title of the column in the table. <code>key</code> is the path to the array property you want to include.  For example 'props.x' or 'columns.x_data'."},{"location":"reference/configuration/Table/TableColumnDefinition/TableColumn/","title":"TableColumn","text":""},{"location":"reference/configuration/Table/TableColumnDefinition/TableColumn/#tablecolumn","title":"TableColumn","text":""},{"location":"reference/configuration/Table/TableColumnDefinition/TableColumn/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object header string None The display name of the column. Defaults to readable key name. key string None The key to the data that will pull back the value. aggregation AggregationEnum None The aggregate function that will apply to the column when a user groups the table by a different column. Defaults to none. markdown boolean False If true, the column content will be rendered as markdown. Defaults to false."},{"location":"reference/configuration/Table/TableColumnDefinition/TableColumn/AggregationEnum/","title":"AggregationEnum","text":""},{"location":"reference/configuration/Table/TableColumnDefinition/TableColumn/AggregationEnum/#aggregationenum","title":"AggregationEnum","text":"<p>The options for aggregating table columns. Details on the calculations below:</p> <pre><code>**count** - Finds the number of rows in a group&lt;br&gt;\n\n**extent** - Finds the minimum and maximum values of a group of rows&lt;br&gt;\n\n**max** - Finds the maximum value of a group of rows&lt;br&gt;\n\n**mean** - Finds the average value of a group of rows&lt;br&gt;\n\n**median** - Finds the median value of a group of rows&lt;br&gt;\n\n**min** - Finds the minimum value of a group of rows&lt;br&gt;\n\n**sum** - sums the values of a group of rows&lt;br&gt;\n\n**uniqueCount** - Finds the number of unique values of a group of rows&lt;br&gt;\n\n**unique** - Finds the unique values of a group of rows\n</code></pre>"},{"location":"reference/configuration/Table/TableColumnDefinition/TableColumn/AggregationEnum/#attributes","title":"Attributes","text":"Field Type Default Description"},{"location":"reference/configuration/Trace/","title":"Trace","text":""},{"location":"reference/configuration/Trace/#trace","title":"Trace","text":"<p>The Trace is one of the most important objects within a Visivo Project. You can think of a trace as a single series on a chart (ie. one line, a sequence of bars, a big number ect.).</p> <p>Example</p> <p><code>Total Revenue by Week</code> would be a trace. Once you define this metric in a single trace in your project, you can add it to as many charts as you want. This is especially powerful since charts are able to join disparate axis automatically. Meaning you can define a trace for <code>Revenue Per Week</code> and then define another trace for <code>Revenue per Day</code> and include both of those traces on the same chart with no extra configuration needed.</p> <p>This approach has a few key advantages:</p> <ul> <li>Modularity: Traces can appear on multiple charts &amp; tables.</li> <li>Single Source of Truth: Traces are a single source of truth.</li> <li>Testable: You can write  general &amp; fast tests to ensure that trace data is correct.</li> </ul>"},{"location":"reference/configuration/Trace/#cohorts","title":"Cohorts","text":"<p>To easily cut a trace into multiple cohorts you can use the <code>cohort_on</code> attribute.</p> <p>Example</p> <p>To represent <code>Revenue Per Week by Account Executive</code>. You can use the <code>cohort_on</code> attribute to split out data into different series within a single trace. </p><pre><code>traces:\n  - name: rev-per-week-by-account-executive\n    cohort_on: \"account_executive_name\"\n    model: ref(orders)\n    columns:\n      week: date_trunc('week', \"order_date\")\n      orders: count(*)\n    props:\n      type: bar\n      x: column(week)\n      y: column(orders)\n</code></pre> <p>Traces are also where you define how you want to represent your data visually. Since Visivo leverages plotly for charting, you can set up a number of unique and useful trace types that are also highly customizable. See types below.</p>"},{"location":"reference/configuration/Trace/#example","title":"Example","text":"<pre><code>traces:\n  - name: crypto ohlc\n    model:\n      sql: 'SELECT * finance_data_atlas.FINANCE.CMCCD2019'\n    source_name: remote-snowflake\n    cohort_on: ?{ \"Cryptocurrency Name\" }\n    props:\n      type: ohlc\n      x: ?{ date_trunc('week', \"Date\")::date::varchar }\n      close: ?{ max_by(\"Value\", \"Date\") }\n      high: ?{ max(\"Value\") }\n      low: ?{ min(\"Value\") }\n      open: ?{ min_by(\"Value\", \"Date\") }\n      increasing:\n        line:\n          color: 'green'\n      decreasing:\n        line:\n          color: 'red'\n      xaxis: 'x'\n      yaxis: 'y'\n    filters:\n    - ?{\"Date\" &gt;= '2015-01-01'}\n    - ?{ \"Cryptocurrency Name\" in ('Bitcoin (btc)', 'Ethereum (eth)', 'Dogecoin (doge)') }\n    - ?{ \"Measure Name\" = 'Price, USD' }\n</code></pre>"},{"location":"reference/configuration/Trace/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. model None The model or model ref that Visivo should use to build the trace. cohort_on string None <code>cohort_on</code> enables splitting the trace out into different series or cohorts. The column or query referenced here will be used to cut the resulting trace. order_by array None Takes a <code>column()</code> or <code>?{}</code> reference. Orders the dataset so that information is presented in the correct order when the trace is added to a chart. Order by query statements support using <code>asc</code> and <code>desc</code>. filters array None A list of <code>column()</code> or <code>?{}</code> functions that evaluate to <code>true</code> or <code>false</code>. Can include aggregations in the sql statement. tests Any of: Test, array None A list of tests to run against the trace data. Enables making assertions about the nullability of data and relationships between data. columns TraceColumns None Place where you can define named sql select statements. Once they are defined here they can be referenced in the trace props or in tables built on the trace. props None layout None"},{"location":"reference/configuration/Trace/Model/","title":"Model","text":""},{"location":"reference/configuration/Trace/Model/#model","title":"Model","text":""},{"location":"reference/configuration/Trace/Model/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition."},{"location":"reference/configuration/Trace/Props/Bar/","title":"Bar","text":""},{"location":"reference/configuration/Trace/Props/Bar/#bar","title":"Bar","text":""},{"location":"reference/configuration/Trace/Props/Bar/#overview","title":"Overview","text":"<p>The bar trace type is used to display data as bars. </p> <p>You have pretty broad control over the appearance of the bars via the <code>marker</code> attributes. You can set the fill color, opacity, pattern, line color, width, etc. You can also configure display the bars as either grouped or stacked. </p> <p>Common Uses</p> <ul> <li>Categorical Data Comparison: Visualizing data across distinct categories (e.g., sales by product type).</li> <li>Grouped Bar Charts: Comparing multiple series side by side (e.g., monthly sales by region).</li> <li>Stacked Bar Charts: Showing cumulative data (e.g., revenue breakdown by product within a year).</li> <li>Horizontal Bar Charts: Comparing data where horizontal labels are more readable (e.g., ranking of countries by population).</li> <li>Time-Series Data (Categorical): Displaying data changes over time with categories as the x-axis (e.g., yearly revenue growth by product).</li> </ul> <p>Checkout the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Bar/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple BarCohorted BarHorizontal Cohorted Bar <p>Here's a really simple bar chart:  You can copy this code below to create this chart in your project:  </p><pre><code>models:\n  - name: monty-python-quest-data\n    args:\n      - curl\n      - \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/monty_python_quests.csv\"\ntraces:\n  - name: Count Enemies Encountered by Knight\n    model: ${ref(monty-python-quest-data)}\n    cohort_on: \"person\"\n    props:\n      type: bar \n      x: ?{enemy_encountered}\n      y: ?{ count(*) }\n      text: ?{ count(*) }\n    order_by: \n      - ?{ count(*) desc}\ncharts: \n  - name: Count Times Enemy Was Encountered by Knight\n    traces: \n      - ${ref(Count Enemies Encountered by Knight)}\n    layout: \n      title: \n        text: Cohorted Bar&lt;br&gt;&lt;sub&gt;The Number of Times an Enemy was Enountered on a Quest by Knight&lt;/sub&gt;\n</code></pre> <p>You can use the <code>trace.cohort_on</code> key to create facets in your bar chart.  Here's the code:  </p><pre><code>models:\n  - name: monty-python-quest-data\n    args:\n      - curl\n      - \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/monty_python_quests.csv\"\ntraces:\n  - name: Count Enemies Encountered by Knight\n    model: ${ref(monty-python-quest-data)}\n    cohort_on: \"person\"\n    props:\n      type: bar \n      x: ?{enemy_encountered}\n      y: ?{ count(*) }\n      text: ?{ count(*) }\n    order_by: \n      - ?{ count(*) desc}\n\ncharts: \n  - name: Count Times Enemy Was Encountered by Knight\n    traces: \n      - ${ref(Count Enemies Encountered by Knight)}\n    layout: \n      title: \n        text: Cohorted Bar&lt;br&gt;&lt;sub&gt;The Number of Times an Enemy was Enountered on a Quest by Knight&lt;/sub&gt;\n</code></pre> <p>It can be useful to view some data horizontally. </p> <p> Here's the code:  </p><pre><code>models:\n  - name: monty-python-quest-data-h\n    args:\n      - curl\n      - \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/monty_python_quests.csv\"\ntraces:\n  - name: Count Enemies Encountered by Knight H\n    model: ${ref(monty-python-quest-data-h)}\n    cohort_on: \"person\"\n    props:\n      type: bar \n      y: ?{enemy_encountered}\n      x: ?{ count(*) }\n      text: ?{ count(*) }\n      textposition: outside\n      textfont:\n        size: 15\n      orientation: h\n    order_by: \n      - ?{ count(*) desc}\n\ncharts: \n  - name: Count Times Enemy Was Encountered by Knight H\n    traces: \n      - ${ref(Count Enemies Encountered by Knight H)}\n    layout: \n      title: \n        text: Horizontal Cohorted Bar&lt;br&gt;&lt;sub&gt;The Number of Times an Enemy was Enountered on a Quest by Knight&lt;/sub&gt;\n      margin: \n        l: 160\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Bar/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>bar</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>alignmentgroup: 'string' #(1)!\nbase: 'array' #(2)!\nbasesrc: 'string' #(3)!\ncliponaxis: 'boolean' #(4)!\nconstraintext: 'any' #(5)!\ncustomdata: 'array' #(6)!\ncustomdatasrc: 'string' #(7)!\ndx: 'number' #(8)!\ndy: 'number' #(9)!\nerror_x:\n  array: 'array' #(10)!\n  arrayminus: 'array' #(11)!\n  arrayminussrc: 'string' #(12)!\n  arraysrc: 'string' #(13)!\n  color: 'any' #(14)!\n  copy_ystyle: boolean\n  symmetric: 'boolean' #(15)!\n  thickness: 'number' #(16)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(17)!\n  value: 'number' #(18)!\n  valueminus: 'number' #(19)!\n  visible: 'boolean' #(20)!\n  width: 'number' #(21)!\nerror_y:\n  array: 'array' #(22)!\n  arrayminus: 'array' #(23)!\n  arrayminussrc: 'string' #(24)!\n  arraysrc: 'string' #(25)!\n  color: 'any' #(26)!\n  symmetric: 'boolean' #(27)!\n  thickness: 'number' #(28)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(29)!\n  value: 'number' #(30)!\n  valueminus: 'number' #(31)!\n  visible: 'boolean' #(32)!\n  width: 'number' #(33)!\nhoverinfo: 'array' #(34)!\nhoverinfosrc: 'string' #(35)!\nhoverlabel:\n  align: 'array' #(36)!\n  alignsrc: 'string' #(37)!\n  bgcolor: 'color | array' #(38)!\n  bgcolorsrc: 'string' #(39)!\n  bordercolor: 'color | array' #(40)!\n  bordercolorsrc: 'string' #(41)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(42)!\n    family: 'string | array' #(43)!\n    familysrc: 'string' #(44)!\n    lineposition: 'array' #(45)!\n    linepositionsrc: 'string' #(46)!\n    shadow: 'string | array' #(47)!\n    shadowsrc: 'string' #(48)!\n    size: number | array\n    sizesrc: 'string' #(49)!\n    style: 'array' #(50)!\n    stylesrc: 'string' #(51)!\n    textcase: 'array' #(52)!\n    textcasesrc: 'string' #(53)!\n    variant: 'array' #(54)!\n    variantsrc: 'string' #(55)!\n    weight: 'integer | array' #(56)!\n    weightsrc: 'string' #(57)!\n  namelength: 'integer | array' #(58)!\n  namelengthsrc: 'string' #(59)!\nhovertemplate: 'string | array' #(60)!\nhovertemplatesrc: 'string' #(61)!\nhovertext: 'string | array' #(62)!\nhovertextsrc: 'string' #(63)!\nids: 'array' #(64)!\nidssrc: 'string' #(65)!\ninsidetextanchor: 'any' #(66)!\ninsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(67)!\n  family: 'string | array' #(68)!\n  familysrc: 'string' #(69)!\n  lineposition: 'array' #(70)!\n  linepositionsrc: 'string' #(71)!\n  shadow: 'string | array' #(72)!\n  shadowsrc: 'string' #(73)!\n  size: number | array\n  sizesrc: 'string' #(74)!\n  style: 'array' #(75)!\n  stylesrc: 'string' #(76)!\n  textcase: 'array' #(77)!\n  textcasesrc: 'string' #(78)!\n  variant: 'array' #(79)!\n  variantsrc: 'string' #(80)!\n  weight: 'integer | array' #(81)!\n  weightsrc: 'string' #(82)!\nlegend: 'string' #(83)!\nlegendgroup: 'string' #(84)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(85)!\n    lineposition: 'string' #(86)!\n    shadow: 'string' #(87)!\n    size: number\n    style: 'any' #(88)!\n    textcase: 'any' #(89)!\n    variant: 'any' #(90)!\n    weight: 'integer' #(91)!\n  text: 'string' #(92)!\nlegendrank: 'number' #(93)!\nlegendwidth: 'number' #(94)!\nmarker:\n  autocolorscale: 'boolean' #(95)!\n  cauto: 'boolean' #(96)!\n  cmax: 'number' #(97)!\n  cmid: 'number' #(98)!\n  cmin: 'number' #(99)!\n  color: 'color | array' #(100)!\n  coloraxis: 'string' #(101)!\n  colorbar:\n    bgcolor: 'any' #(102)!\n    bordercolor: 'any' #(103)!\n    borderwidth: 'number' #(104)!\n    exponentformat: 'any' #(105)!\n    len: 'number' #(106)!\n    lenmode: 'any' #(107)!\n    minexponent: 'number' #(108)!\n    nticks: 'integer' #(109)!\n    orientation: 'any' #(110)!\n    outlinecolor: 'any' #(111)!\n    outlinewidth: 'number' #(112)!\n    separatethousands: 'boolean' #(113)!\n    showexponent: 'any' #(114)!\n    showticklabels: 'boolean' #(115)!\n    showtickprefix: 'any' #(116)!\n    showticksuffix: 'any' #(117)!\n    thickness: 'number' #(118)!\n    thicknessmode: 'any' #(119)!\n    tickangle: 'number' #(120)!\n    tickcolor: 'any' #(121)!\n    tickfont:\n      color: any\n      family: 'string' #(122)!\n      lineposition: 'string' #(123)!\n      shadow: 'string' #(124)!\n      size: number\n      style: 'any' #(125)!\n      textcase: 'any' #(126)!\n      variant: 'any' #(127)!\n      weight: 'integer' #(128)!\n    tickformat: 'string' #(129)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(130)!\n    ticklabelposition: 'any' #(131)!\n    ticklabelstep: 'integer' #(132)!\n    ticklen: 'number' #(133)!\n    tickmode: 'any' #(134)!\n    tickprefix: 'string' #(135)!\n    ticks: 'any' #(136)!\n    ticksuffix: 'string' #(137)!\n    ticktext: 'array' #(138)!\n    ticktextsrc: 'string' #(139)!\n    tickvals: 'array' #(140)!\n    tickvalssrc: 'string' #(141)!\n    tickwidth: 'number' #(142)!\n    title:\n      font:\n        color: any\n        family: 'string' #(143)!\n        lineposition: 'string' #(144)!\n        shadow: 'string' #(145)!\n        size: number\n        style: 'any' #(146)!\n        textcase: 'any' #(147)!\n        variant: 'any' #(148)!\n        weight: 'integer' #(149)!\n      side: 'any' #(150)!\n      text: 'string' #(151)!\n    x: 'number' #(152)!\n    xanchor: 'any' #(153)!\n    xpad: 'number' #(154)!\n    xref: 'any' #(155)!\n    y: 'number' #(156)!\n    yanchor: 'any' #(157)!\n    ypad: 'number' #(158)!\n    yref: 'any' #(159)!\n  colorscale: 'any' #(160)!\n  colorsrc: 'string' #(161)!\n  line:\n    autocolorscale: 'boolean' #(162)!\n    cauto: 'boolean' #(163)!\n    cmax: 'number' #(164)!\n    cmid: 'number' #(165)!\n    cmin: 'number' #(166)!\n    color: 'color | array' #(167)!\n    coloraxis: 'string' #(168)!\n    colorscale: 'any' #(169)!\n    colorsrc: 'string' #(170)!\n    reversescale: 'boolean' #(171)!\n    width: 'number | array' #(172)!\n    widthsrc: 'string' #(173)!\n  opacity: 'number | array' #(174)!\n  opacitysrc: 'string' #(175)!\n  pattern:\n    bgcolor: 'color | array' #(176)!\n    bgcolorsrc: 'string' #(177)!\n    fgcolor: 'color | array' #(178)!\n    fgcolorsrc: 'string' #(179)!\n    fgopacity: 'number' #(180)!\n    fillmode: 'any' #(181)!\n    shape: 'array' #(182)!\n    shapesrc: 'string' #(183)!\n    size: 'number | array' #(184)!\n    sizesrc: 'string' #(185)!\n    solidity: 'number | array' #(186)!\n    soliditysrc: 'string' #(187)!\n  reversescale: 'boolean' #(188)!\n  showscale: 'boolean' #(189)!\nmetasrc: 'string' #(190)!\nname: 'string' #(191)!\noffset: 'number | array' #(192)!\noffsetgroup: 'string' #(193)!\noffsetsrc: 'string' #(194)!\nopacity: 'number' #(195)!\norientation: 'any' #(196)!\noutsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(197)!\n  family: 'string | array' #(198)!\n  familysrc: 'string' #(199)!\n  lineposition: 'array' #(200)!\n  linepositionsrc: 'string' #(201)!\n  shadow: 'string | array' #(202)!\n  shadowsrc: 'string' #(203)!\n  size: number | array\n  sizesrc: 'string' #(204)!\n  style: 'array' #(205)!\n  stylesrc: 'string' #(206)!\n  textcase: 'array' #(207)!\n  textcasesrc: 'string' #(208)!\n  variant: 'array' #(209)!\n  variantsrc: 'string' #(210)!\n  weight: 'integer | array' #(211)!\n  weightsrc: 'string' #(212)!\nselected:\n  marker:\n    color: 'any' #(213)!\n    opacity: 'number' #(214)!\n  textfont:\n    color: 'any' #(215)!\nshowlegend: 'boolean' #(216)!\nstream:\n  maxpoints: 'number' #(217)!\n  token: 'string' #(218)!\ntext: 'string | array' #(219)!\ntextangle: 'number' #(220)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(221)!\n  family: 'string | array' #(222)!\n  familysrc: 'string' #(223)!\n  lineposition: 'array' #(224)!\n  linepositionsrc: 'string' #(225)!\n  shadow: 'string | array' #(226)!\n  shadowsrc: 'string' #(227)!\n  size: number | array\n  sizesrc: 'string' #(228)!\n  style: 'array' #(229)!\n  stylesrc: 'string' #(230)!\n  textcase: 'array' #(231)!\n  textcasesrc: 'string' #(232)!\n  variant: 'array' #(233)!\n  variantsrc: 'string' #(234)!\n  weight: 'integer | array' #(235)!\n  weightsrc: 'string' #(236)!\ntextposition: 'array' #(237)!\ntextpositionsrc: 'string' #(238)!\ntextsrc: 'string' #(239)!\ntexttemplate: 'string | array' #(240)!\ntexttemplatesrc: 'string' #(241)!\ntype: bar\nuid: 'string' #(242)!\nunselected:\n  marker:\n    color: 'any' #(243)!\n    opacity: 'number' #(244)!\n  textfont:\n    color: 'any' #(245)!\nvisible: 'any' #(246)!\nwidth: 'number | array' #(247)!\nwidthsrc: 'string' #(248)!\nx: 'array' #(249)!\nxaxis: 'string' #(250)!\nxcalendar: 'any' #(251)!\nxhoverformat: 'string' #(252)!\nxperiodalignment: 'any' #(253)!\nxsrc: 'string' #(254)!\ny: 'array' #(255)!\nyaxis: 'string' #(256)!\nycalendar: 'any' #(257)!\nyhoverformat: 'string' #(258)!\nyperiodalignment: 'any' #(259)!\nysrc: 'string' #(260)!\nzorder: 'integer' #(261)!\n</code></pre> <ol> <li>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</li> <li>Sets where the bar base is drawn (in position axis units). In stack or relative barmode, traces that set base will be excluded and drawn in overlay mode instead.</li> <li>Sets the source reference on Chart Studio Cloud for <code>base</code>.</li> <li>Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set <code>xaxis.layer</code> and <code>yaxis.layer</code> to below traces.</li> <li>Constrain the size of text inside or outside a bar to be no larger than the bar itself.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the x coordinate step. See <code>x0</code> for more info.</li> <li>Sets the y coordinate step. See <code>y0</code> for more info.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>value</code> and <code>label</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Determines if texts are kept at center or start/end points in <code>textposition</code> inside mode.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the opacity of the bars.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Shifts the position where the bar is drawn (in position axis units). In group barmode, traces that set offset will be excluded and drawn in overlay mode instead.</li> <li>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</li> <li>Sets the source reference on Chart Studio Cloud for <code>offset</code>.</li> <li>Sets the opacity of the trace.</li> <li>Sets the orientation of the bars. With v (h), the value of the each bar spans along the vertical (horizontal).</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the angle of the tick labels with respect to the bar. For example, a <code>tickangle</code> of -90 draws the tick labels vertically. With auto the texts may automatically be rotated to fit with the maximum size in bars.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Specifies the location of the <code>text</code>. inside positions <code>text</code> inside, next to the bar end (rotated and scaled if needed). outside positions <code>text</code> outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. auto tries to position <code>text</code> inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If none, no text appears.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>value</code> and <code>label</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the bar width (in position axis units).</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the x coordinates.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the y axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Barpolar/","title":"Barpolar","text":""},{"location":"reference/configuration/Trace/Props/Barpolar/#barpolar","title":"Barpolar","text":""},{"location":"reference/configuration/Trace/Props/Barpolar/#overview","title":"Overview","text":"<p>The <code>barpolar</code> trace type is used to create bar charts in polar coordinates. This is particularly useful for displaying data that is cyclical or directional in nature, such as wind directions, time-of-day activities, or any phenomena that repeats over a circular dimension.</p> <p>You have extensive control over the appearance of the bars through the <code>marker</code> and <code>insidetextfont</code> attributes. You can set colors, opacity, line styles, and more. The bars can be customized to start at a specific radial axis and extend to another, allowing for flexible representations.</p> <p>Common Uses</p> <ul> <li>Wind Rose Charts: Visualizing wind speed and direction distributions.</li> <li>Circular Histograms: Displaying the frequency of events over a circular variable like time of day or compass direction.</li> <li>Directional Data Representation: Showcasing data that has a directional component (e.g., animal migration patterns).</li> <li>Cyclical Phenomena Visualization: Illustrating patterns that repeat over a cycle (e.g., seasonal sales data).</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Barpolar/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple BarpolarWind Rose ChartPolar Bar with Custom Radial Range <p>Here's a simple <code>barpolar</code> chart showing activities over different compass directions:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: activity-data\n    args:\n      - echo\n      - |\n        direction,activity_level\n        0,5\n        45,10\n        90,2\n        135,8\n        180,4\n        225,6\n        270,7\n        315,3\ntraces:\n  - name: Activity Level by Direction\n    model: ${ref(activity-data)}\n    props:\n      type: barpolar\n      r: ?{activity_level}\n      theta: ?{direction}\n      marker:\n        color: \"#1f77b4\"\n    order_by:\n      - ?{direction}\ncharts:\n  - name: Activity Level Polar Chart\n    traces:\n      - ${ref(Activity Level by Direction)}\n    layout:\n      polar:\n        radialaxis:\n          ticksuffix: \"%\"\n          tickangle: 360\n          tick0: 0\n          dtick: 2\n        angularaxis:\n          rotation: 180\n      margin: \n        l: 0 \n        r: 0 \n        b: 40\n      title:\n        text: Simple Barpolar Chart&lt;br&gt;&lt;sub&gt;Activity Level by Direction&lt;/sub&gt;\n</code></pre> <p>A wind rose chart is a common use of <code>barpolar</code> to display wind speed and direction frequencies:</p> <p></p> <p>Here's the updated code:</p> <pre><code>models:\n  - name: wind-data\n    args:\n      - echo\n      - |\n        cardinal_order,direction,speed,count\n        1,N,0-1 m/s,2\n        1,N,1-2 m/s,3\n        1,N,2-3 m/s,5\n        2,NE,0-1 m/s,1\n        2,NE,1-2 m/s,4\n        2,NE,2-3 m/s,6\n        3,E,0-1 m/s,2\n        3,E,1-2 m/s,5\n        3,E,2-3 m/s,3\n        4,SE,0-1 m/s,3\n        4,SE,1-2 m/s,2\n        4,SE,2-3 m/s,4\n        5,S,0-1 m/s,4\n        5,S,1-2 m/s,5\n        5,S,2-3 m/s,2\n        6,SW,0-1 m/s,2\n        6,SW,1-2 m/s,3\n        6,SW,2-3 m/s,5\n        7,W,0-1 m/s,1\n        7,W,1-2 m/s,4\n        7,W,2-3 m/s,6\n        8,NW,0-1 m/s,2\n        8,NW,1-2 m/s,5\n        8,NW,2-3 m/s,3\ntraces:\n  - name: Wind Rose\n    model: ${ref(wind-data)}\n    columns:\n      bar_color: | \n        CASE speed \n          when '0-1 m/s' THEN '#1f77b4' \n          when '1-2 m/s' then '#ff7f0e' \n          when '2-3 m/s' then '#2ca02c' \n        end \n    props:\n      type: barpolar\n      r: ?{count}\n      theta: ?{direction}\n      text: ?{speed}\n      marker:\n        color: column(bar_color)\n        opacity: .85\n      hoverinfo: \"theta+r+name\"\n    order_by: \n      - ?{cardinal_order}\ncharts:\n  - name: Wind Rose Chart\n    traces:\n      - ${ref(Wind Rose)}\n    layout:\n      polar:\n        radialaxis:\n          ticksuffix: \"\"\n          angle: 0\n        angularaxis:\n          direction: \"clockwise\"\n          period: 8\n\n      legend:\n        title:\n          text: \"Wind Speed\"\n      title:\n        text: Wind Rose Chart&lt;br&gt;&lt;sub&gt;Wind Speed Distribution by Direction&lt;/sub&gt;\n</code></pre> <p>You can customize the radial range to represent data starting and ending at specific radial positions:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: custom-radial-data\n    args:\n      - echo\n      - |\n        direction,radial_start,radial_end\n        0,1,3\n        60,2,5\n        120,3,6\n        180,1,4\n        240,2,7\n        300,3,5\ntraces:\n  - name: Custom Radial Barpolar\n    model: ${ref(custom-radial-data)}\n    props:\n      type: barpolar\n      theta: ?{direction}\n      width: 30\n      marker:\n        color: \"#d62728\"\n      opacity: 0.8\n    order_by:\n      - ?{direction}\ncharts:\n  - name: Custom Radial Barpolar Chart\n    traces:\n      - ${ref(Custom Radial Barpolar)}\n    layout:\n      polar:\n        radialaxis:\n          visible: true\n      title:\n        text: Polar Bar with Custom Radial Range&lt;br&gt;&lt;sub&gt;Bars Starting and Ending at Custom Radial Positions&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Barpolar/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>barpolar</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>base: 'array' #(1)!\nbasesrc: 'string' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\ndr: 'number' #(5)!\ndtheta: 'number' #(6)!\nhoverinfo: 'array' #(7)!\nhoverinfosrc: 'string' #(8)!\nhoverlabel:\n  align: 'array' #(9)!\n  alignsrc: 'string' #(10)!\n  bgcolor: 'color | array' #(11)!\n  bgcolorsrc: 'string' #(12)!\n  bordercolor: 'color | array' #(13)!\n  bordercolorsrc: 'string' #(14)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(15)!\n    family: 'string | array' #(16)!\n    familysrc: 'string' #(17)!\n    lineposition: 'array' #(18)!\n    linepositionsrc: 'string' #(19)!\n    shadow: 'string | array' #(20)!\n    shadowsrc: 'string' #(21)!\n    size: number | array\n    sizesrc: 'string' #(22)!\n    style: 'array' #(23)!\n    stylesrc: 'string' #(24)!\n    textcase: 'array' #(25)!\n    textcasesrc: 'string' #(26)!\n    variant: 'array' #(27)!\n    variantsrc: 'string' #(28)!\n    weight: 'integer | array' #(29)!\n    weightsrc: 'string' #(30)!\n  namelength: 'integer | array' #(31)!\n  namelengthsrc: 'string' #(32)!\nhovertemplate: 'string | array' #(33)!\nhovertemplatesrc: 'string' #(34)!\nhovertext: 'string | array' #(35)!\nhovertextsrc: 'string' #(36)!\nids: 'array' #(37)!\nidssrc: 'string' #(38)!\nlegend: 'string' #(39)!\nlegendgroup: 'string' #(40)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(41)!\n    lineposition: 'string' #(42)!\n    shadow: 'string' #(43)!\n    size: number\n    style: 'any' #(44)!\n    textcase: 'any' #(45)!\n    variant: 'any' #(46)!\n    weight: 'integer' #(47)!\n  text: 'string' #(48)!\nlegendrank: 'number' #(49)!\nlegendwidth: 'number' #(50)!\nmarker:\n  autocolorscale: 'boolean' #(51)!\n  cauto: 'boolean' #(52)!\n  cmax: 'number' #(53)!\n  cmid: 'number' #(54)!\n  cmin: 'number' #(55)!\n  color: 'color | array' #(56)!\n  coloraxis: 'string' #(57)!\n  colorbar:\n    bgcolor: 'any' #(58)!\n    bordercolor: 'any' #(59)!\n    borderwidth: 'number' #(60)!\n    exponentformat: 'any' #(61)!\n    len: 'number' #(62)!\n    lenmode: 'any' #(63)!\n    minexponent: 'number' #(64)!\n    nticks: 'integer' #(65)!\n    orientation: 'any' #(66)!\n    outlinecolor: 'any' #(67)!\n    outlinewidth: 'number' #(68)!\n    separatethousands: 'boolean' #(69)!\n    showexponent: 'any' #(70)!\n    showticklabels: 'boolean' #(71)!\n    showtickprefix: 'any' #(72)!\n    showticksuffix: 'any' #(73)!\n    thickness: 'number' #(74)!\n    thicknessmode: 'any' #(75)!\n    tickangle: 'number' #(76)!\n    tickcolor: 'any' #(77)!\n    tickfont:\n      color: any\n      family: 'string' #(78)!\n      lineposition: 'string' #(79)!\n      shadow: 'string' #(80)!\n      size: number\n      style: 'any' #(81)!\n      textcase: 'any' #(82)!\n      variant: 'any' #(83)!\n      weight: 'integer' #(84)!\n    tickformat: 'string' #(85)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(86)!\n    ticklabelposition: 'any' #(87)!\n    ticklabelstep: 'integer' #(88)!\n    ticklen: 'number' #(89)!\n    tickmode: 'any' #(90)!\n    tickprefix: 'string' #(91)!\n    ticks: 'any' #(92)!\n    ticksuffix: 'string' #(93)!\n    ticktext: 'array' #(94)!\n    ticktextsrc: 'string' #(95)!\n    tickvals: 'array' #(96)!\n    tickvalssrc: 'string' #(97)!\n    tickwidth: 'number' #(98)!\n    title:\n      font:\n        color: any\n        family: 'string' #(99)!\n        lineposition: 'string' #(100)!\n        shadow: 'string' #(101)!\n        size: number\n        style: 'any' #(102)!\n        textcase: 'any' #(103)!\n        variant: 'any' #(104)!\n        weight: 'integer' #(105)!\n      side: 'any' #(106)!\n      text: 'string' #(107)!\n    x: 'number' #(108)!\n    xanchor: 'any' #(109)!\n    xpad: 'number' #(110)!\n    xref: 'any' #(111)!\n    y: 'number' #(112)!\n    yanchor: 'any' #(113)!\n    ypad: 'number' #(114)!\n    yref: 'any' #(115)!\n  colorscale: 'any' #(116)!\n  colorsrc: 'string' #(117)!\n  line:\n    autocolorscale: 'boolean' #(118)!\n    cauto: 'boolean' #(119)!\n    cmax: 'number' #(120)!\n    cmid: 'number' #(121)!\n    cmin: 'number' #(122)!\n    color: 'color | array' #(123)!\n    coloraxis: 'string' #(124)!\n    colorscale: 'any' #(125)!\n    colorsrc: 'string' #(126)!\n    reversescale: 'boolean' #(127)!\n    width: 'number | array' #(128)!\n    widthsrc: 'string' #(129)!\n  opacity: 'number | array' #(130)!\n  opacitysrc: 'string' #(131)!\n  pattern:\n    bgcolor: 'color | array' #(132)!\n    bgcolorsrc: 'string' #(133)!\n    fgcolor: 'color | array' #(134)!\n    fgcolorsrc: 'string' #(135)!\n    fgopacity: 'number' #(136)!\n    fillmode: 'any' #(137)!\n    shape: 'array' #(138)!\n    shapesrc: 'string' #(139)!\n    size: 'number | array' #(140)!\n    sizesrc: 'string' #(141)!\n    solidity: 'number | array' #(142)!\n    soliditysrc: 'string' #(143)!\n  reversescale: 'boolean' #(144)!\n  showscale: 'boolean' #(145)!\nmetasrc: 'string' #(146)!\nname: 'string' #(147)!\noffset: 'number | array' #(148)!\noffsetsrc: 'string' #(149)!\nopacity: 'number' #(150)!\nr: 'array' #(151)!\nrsrc: 'string' #(152)!\nselected:\n  marker:\n    color: 'any' #(153)!\n    opacity: 'number' #(154)!\n  textfont:\n    color: 'any' #(155)!\nshowlegend: 'boolean' #(156)!\nstream:\n  maxpoints: 'number' #(157)!\n  token: 'string' #(158)!\nsubplot: 'string' #(159)!\ntext: 'string | array' #(160)!\ntextsrc: 'string' #(161)!\ntheta: 'array' #(162)!\nthetasrc: 'string' #(163)!\nthetaunit: 'any' #(164)!\ntype: barpolar\nuid: 'string' #(165)!\nunselected:\n  marker:\n    color: 'any' #(166)!\n    opacity: 'number' #(167)!\n  textfont:\n    color: 'any' #(168)!\nvisible: 'any' #(169)!\nwidth: 'number | array' #(170)!\nwidthsrc: 'string' #(171)!\n</code></pre> <ol> <li>Sets where the bar base is drawn (in radial axis units). In stack barmode, traces that set base will be excluded and drawn in overlay mode instead.</li> <li>Sets the source reference on Chart Studio Cloud for <code>base</code>.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the r coordinate step.</li> <li>Sets the theta coordinate step. By default, the <code>dtheta</code> step equals the subplot's period divided by the length of the <code>r</code> coordinates.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the opacity of the bars.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Shifts the angular position where the bar is drawn (in thetatunit units).</li> <li>Sets the source reference on Chart Studio Cloud for <code>offset</code>.</li> <li>Sets the opacity of the trace.</li> <li>Sets the radial coordinates</li> <li>Sets the source reference on Chart Studio Cloud for <code>r</code>.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a reference between this trace's data coordinates and a polar subplot. If polar (the default value), the data refer to <code>layout.polar</code>. If polar2, the data refer to <code>layout.polar2</code>, and so on.</li> <li>Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Sets the angular coordinates</li> <li>Sets the source reference on Chart Studio Cloud for <code>theta</code>.</li> <li>Sets the unit of input theta values. Has an effect only when on linear angular axes.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the bar angular width (in thetaunit units).</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Box/","title":"Box","text":""},{"location":"reference/configuration/Trace/Props/Box/#box","title":"Box","text":""},{"location":"reference/configuration/Trace/Props/Box/#overview","title":"Overview","text":"<p>The <code>box</code> trace type is used to display data as a box plot, which shows the distribution of data based on their quartiles, medians, and potential outliers. It's useful for statistical visualizations, as it highlights data spread and central tendency while accounting for variability.</p> <p>You can control various aspects of the plot, such as the orientation, box and whisker styles, marker symbols, and points display. Additionally, you can show or hide outliers and configure hover labels for enhanced interaction.</p> <p>Common Uses</p> <ul> <li>Distribution Analysis: Understanding the distribution of quest-related data.</li> <li>Outlier Detection: Identifying outliers in quest performance metrics.</li> <li>Comparative Analysis: Comparing the performance of knights on different quests.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Box/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Box PlotHorizontal Box PlotCohorted Box Plot <p>Here's a simple <code>box</code> plot showing the distribution of sample data:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: sample-data\n    args:\n      - echo\n      - |\n        category,value\n        A,23\n        A,15\n        A,18\n        A,30\n        A,28\n        B,40\n        B,35\n        B,31\n        B,25\n        B,29\ntraces:\n  - name: Sample Box Plot\n    model: ${ref(sample-data)}\n    props:\n      type: box\n      x: ?{category}\n      y: ?{value}\n      boxpoints: \"all\"\n      jitter: 1\n      pointpos: -1.1\ncharts:\n  - name: Sample Box Plot Chart\n    traces:\n      - ${ref(Sample Box Plot)}\n    layout:\n      title:\n        text: Simple Box Plot&lt;br&gt;&lt;sub&gt;Distribution of Values by Category&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Category\"\n      yaxis:\n        title:\n          text: \"Value\"\n</code></pre> <p>Here's a <code>box</code> plot showing the distribution of rewards earned by knights across different quests:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: monty-python-quest-data-unique\n    args:\n      - curl\n      - \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/monty_python_quests.csv\"\ntraces:\n  - name: Rewards Distribution by Quest\n    model: ${ref(monty-python-quest-data-unique)}\n    cohort_on: \"person\"\n    props:\n      type: box\n      y: ?{person}\n      x: ?{reward_gbp}\n      boxpoints: \"all\"\n      jitter: 1\n      pointpos: -1.1\n      orientation: h\ncharts:\n  - name: Rewards Distribution Box Plot\n    traces:\n      - ${ref(Rewards Distribution by Quest)}\n    layout:\n      title:\n        text: Horizontal Box Plot&lt;br&gt;&lt;sub&gt;GBP Rewards Earned Across Quests&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Reward (GBP)\"\n</code></pre> <p>In this example, we show how to display a box plot for the number of proclamations mades:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: monty-python-quest-proclamations\n    args:\n      - curl\n      - \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/monty_python_quests.csv\"\ntraces:\n  - name: Proclamations Box Plot\n    model: ${ref(monty-python-quest-proclamations)}\n    cohort_on: \"person\"\n    props:\n      type: box\n      y: ?{proclamations_made}\n      x: ?{enemy_encountered} \n\ncharts:\n  - name: Proclamations Box Plot with Outliers\n    traces:\n      - ${ref(Proclamations Box Plot)}\n    layout:\n      title:\n        text: Cohorted Box Plot&lt;br&gt;&lt;sub&gt;Proclamations Made Across Quests by Enemy&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Enemy\"\n      boxmode: group\n      yaxis:\n        title:\n          text: \"Proclamations Made\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Box/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>box</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>alignmentgroup: 'string' #(1)!\nboxmean: 'any' #(2)!\nboxpoints: 'any' #(3)!\ncustomdata: 'array' #(4)!\ncustomdatasrc: 'string' #(5)!\ndx: 'number' #(6)!\ndy: 'number' #(7)!\nfillcolor: 'any' #(8)!\nhoverinfo: 'array' #(9)!\nhoverinfosrc: 'string' #(10)!\nhoverlabel:\n  align: 'array' #(11)!\n  alignsrc: 'string' #(12)!\n  bgcolor: 'color | array' #(13)!\n  bgcolorsrc: 'string' #(14)!\n  bordercolor: 'color | array' #(15)!\n  bordercolorsrc: 'string' #(16)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(17)!\n    family: 'string | array' #(18)!\n    familysrc: 'string' #(19)!\n    lineposition: 'array' #(20)!\n    linepositionsrc: 'string' #(21)!\n    shadow: 'string | array' #(22)!\n    shadowsrc: 'string' #(23)!\n    size: number | array\n    sizesrc: 'string' #(24)!\n    style: 'array' #(25)!\n    stylesrc: 'string' #(26)!\n    textcase: 'array' #(27)!\n    textcasesrc: 'string' #(28)!\n    variant: 'array' #(29)!\n    variantsrc: 'string' #(30)!\n    weight: 'integer | array' #(31)!\n    weightsrc: 'string' #(32)!\n  namelength: 'integer | array' #(33)!\n  namelengthsrc: 'string' #(34)!\nhoveron: 'string' #(35)!\nhovertemplate: 'string | array' #(36)!\nhovertemplatesrc: 'string' #(37)!\nhovertext: 'string | array' #(38)!\nhovertextsrc: 'string' #(39)!\nids: 'array' #(40)!\nidssrc: 'string' #(41)!\njitter: 'number' #(42)!\nlegend: 'string' #(43)!\nlegendgroup: 'string' #(44)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(45)!\n    lineposition: 'string' #(46)!\n    shadow: 'string' #(47)!\n    size: number\n    style: 'any' #(48)!\n    textcase: 'any' #(49)!\n    variant: 'any' #(50)!\n    weight: 'integer' #(51)!\n  text: 'string' #(52)!\nlegendrank: 'number' #(53)!\nlegendwidth: 'number' #(54)!\nline:\n  color: 'any' #(55)!\n  width: 'number' #(56)!\nlowerfence: 'array' #(57)!\nlowerfencesrc: 'string' #(58)!\nmarker:\n  angle: 'number' #(59)!\n  color: 'any' #(60)!\n  line:\n    color: 'any' #(61)!\n    outliercolor: 'any' #(62)!\n    outlierwidth: 'number' #(63)!\n    width: 'number' #(64)!\n  opacity: 'number' #(65)!\n  outliercolor: 'any' #(66)!\n  size: 'number' #(67)!\n  symbol: 'any' #(68)!\nmean: 'array' #(69)!\nmeansrc: 'string' #(70)!\nmedian: 'array' #(71)!\nmediansrc: 'string' #(72)!\nmetasrc: 'string' #(73)!\nname: 'string' #(74)!\nnotched: 'boolean' #(75)!\nnotchspan: 'array' #(76)!\nnotchspansrc: 'string' #(77)!\nnotchwidth: 'number' #(78)!\noffsetgroup: 'string' #(79)!\nopacity: 'number' #(80)!\norientation: 'any' #(81)!\npointpos: 'number' #(82)!\nq1: 'array' #(83)!\nq1src: 'string' #(84)!\nq3: 'array' #(85)!\nq3src: 'string' #(86)!\nquartilemethod: 'any' #(87)!\nsd: 'array' #(88)!\nsdmultiple: 'number' #(89)!\nsdsrc: 'string' #(90)!\nselected:\n  marker:\n    color: 'any' #(91)!\n    opacity: 'number' #(92)!\n    size: 'number' #(93)!\nshowlegend: 'boolean' #(94)!\nshowwhiskers: 'boolean' #(95)!\nsizemode: 'any' #(96)!\nstream:\n  maxpoints: 'number' #(97)!\n  token: 'string' #(98)!\ntext: 'string | array' #(99)!\ntextsrc: 'string' #(100)!\ntype: box\nuid: 'string' #(101)!\nunselected:\n  marker:\n    color: 'any' #(102)!\n    opacity: 'number' #(103)!\n    size: 'number' #(104)!\nupperfence: 'array' #(105)!\nupperfencesrc: 'string' #(106)!\nvisible: 'any' #(107)!\nwhiskerwidth: 'number' #(108)!\nwidth: 'number' #(109)!\nx: 'array' #(110)!\nxaxis: 'string' #(111)!\nxcalendar: 'any' #(112)!\nxhoverformat: 'string' #(113)!\nxperiodalignment: 'any' #(114)!\nxsrc: 'string' #(115)!\ny: 'array' #(116)!\nyaxis: 'string' #(117)!\nycalendar: 'any' #(118)!\nyhoverformat: 'string' #(119)!\nyperiodalignment: 'any' #(120)!\nysrc: 'string' #(121)!\nzorder: 'integer' #(122)!\n</code></pre> <ol> <li>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</li> <li>If true, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If sd the standard deviation is also drawn. Defaults to true when <code>mean</code> is set. Defaults to sd when <code>sd</code> is set Otherwise defaults to false.</li> <li>If outliers, only the sample points lying outside the whiskers are shown If suspectedoutliers, the outlier points are shown and points either less than 4Q1-3Q3 or greater than 4Q3-3Q1 are highlighted (see <code>outliercolor</code>) If all, all sample points are shown If false, only the box(es) are shown with no sample points Defaults to suspectedoutliers when <code>marker.outliercolor</code> or <code>marker.line.outliercolor</code> is set. Defaults to all under the q1/median/q3 signature. Otherwise defaults to outliers.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the x coordinate step for multi-box traces set using q1/median/q3.</li> <li>Sets the y coordinate step for multi-box traces set using q1/median/q3.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Do the hover effects highlight individual boxes  or sample points or both?</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the amount of jitter in the sample points drawn. If 0, the sample points align along the distribution axis. If 1, the sample points are drawn in a random jitter of width equal to the width of the box(es).</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the color of line bounding the box(es).</li> <li>Sets the width (in px) of line bounding the box(es).</li> <li>Sets the lower fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If <code>lowerfence</code> is not provided but a sample (in <code>y</code> or <code>x</code>) is set, we compute the lower as the last sample point below 1.5 times the IQR.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lowerfence</code>.</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets the border line color of the outlier sample points. Defaults to marker.color</li> <li>Sets the border line width (in px) of the outlier sample points.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the marker opacity.</li> <li>Sets the color of the outlier sample points.</li> <li>Sets the marker size (in px).</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the mean values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If <code>mean</code> is not provided but a sample (in <code>y</code> or <code>x</code>) is set, we compute the mean for each box using the sample values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>mean</code>.</li> <li>Sets the median values. There should be as many items as the number of boxes desired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>median</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if <code>x</code> and <code>x0</code> (<code>y</code> and <code>y0</code> if horizontal) are missing and the position axis is categorical</li> <li>Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 * IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to false unless <code>notchwidth</code> or <code>notchspan</code> is set.</li> <li>Sets the notch span from the boxes' <code>median</code> values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If <code>notchspan</code> is not provided but a sample (in <code>y</code> or <code>x</code>) is set, we compute it as 1.57 * IQR / sqrt(N), where N is the sample size.</li> <li>Sets the source reference on Chart Studio Cloud for <code>notchspan</code>.</li> <li>Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).</li> <li>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</li> <li>Sets the opacity of the trace.</li> <li>Sets the orientation of the box(es). If v (h), the distribution is visualized along the vertical (horizontal).</li> <li>Sets the position of the sample points in relation to the box(es). If 0, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</li> <li>Sets the Quartile 1 values. There should be as many items as the number of boxes desired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>q1</code>.</li> <li>Sets the Quartile 3 values. There should be as many items as the number of boxes desired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>q3</code>.</li> <li>Sets the method used to compute the sample's Q1 and Q3 quartiles. The linear method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The exclusive method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The inclusive method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.</li> <li>Sets the standard deviation values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If <code>sd</code> is not provided but a sample (in <code>y</code> or <code>x</code>) is set, we compute the standard deviation for each box using the sample values.</li> <li>Scales the box size when sizemode=sd Allowing boxes to be drawn across any stddev range For example 1-stddev, 3-stddev, 5-stddev</li> <li>Sets the source reference on Chart Studio Cloud for <code>sd</code>.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not whiskers are visible. Defaults to true for <code>sizemode</code> quartiles, false for sd.</li> <li>Sets the upper and lower bound for the boxes quartiles means box is drawn between Q1 and Q3 SD means the box is drawn between Mean +- Standard Deviation Argument sdmultiple (default 1) to scale the box size So it could be drawn 1-stddev, 3-stddev etc</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the upper fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If <code>upperfence</code> is not provided but a sample (in <code>y</code> or <code>x</code>) is set, we compute the upper as the last sample point above 1.5 times the IQR.</li> <li>Sets the source reference on Chart Studio Cloud for <code>upperfence</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</li> <li>Sets the width of the box in data coordinate If 0 (default value) the width is automatically selected based on the positions of other box traces in the same subplot.</li> <li>Sets the x sample data or coordinates. See overview for more info.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y sample data or coordinates. See overview for more info.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the y axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Candlestick/","title":"Candlestick","text":""},{"location":"reference/configuration/Trace/Props/Candlestick/#candlestick","title":"Candlestick","text":""},{"location":"reference/configuration/Trace/Props/Candlestick/#overview","title":"Overview","text":"<p>The <code>candlestick</code> trace type is commonly used in financial analysis to visualize the price movements of a stock or asset over time. It requires open, high, low, and close (OHLC) data and is useful for tracking the performance of a stock or identifying market trends.</p> <p>You can control the appearance of candlestick charts through attributes such as <code>increasing</code>, <code>decreasing</code>, <code>line</code>, <code>fillcolor</code>, and more to highlight upward and downward trends in the market.</p> <p>Common Uses</p> <ul> <li>Stock Market Analysis: Visualizing the performance of stocks over time.</li> <li>Trend Identification: Identifying market trends such as uptrends, downtrends, or reversals.</li> <li>Price Fluctuation Visualization: Showing how stock prices move within a specific time period (daily, weekly, etc.).</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Candlestick/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Candlestick PlotCandlestick Plot with VolumeColored Candlestick Plot <p>Here's a simple <code>candlestick</code> plot showing stock price movements over a period:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: stock-data\n    args:\n      - echo\n      - |\n        date,open,high,low,close\n        2024-01-01,100,105,95,102\n        2024-01-02,102,108,99,104\n        2024-01-03,104,110,100,108\n        2024-01-04,108,112,101,107\n        2024-01-05,107,109,98,103\ntraces:\n  - name: Simple Candlestick Plot\n    model: ${ref(stock-data)}\n    props:\n      type: candlestick\n      x: ?{date}\n      open: ?{open}\n      high: ?{high}\n      low: ?{low}\n      close: ?{close}\ncharts:\n  - name: Simple Candlestick Chart\n    traces:\n      - ${ref(Simple Candlestick Plot)}\n    layout:\n      title:\n        text: Simple Candlestick Chart&lt;br&gt;&lt;sub&gt;Stock Price Movements&lt;/sub&gt;\n      xaxis:\n        rangeslider:\n          visible: false\n        title:\n          text: \"Date\"\n      yaxis:\n        title:\n          text: \"Price (USD)\"\n</code></pre> <p>This example includes both candlestick data and volume, providing additional insights into the market activity:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: stock-data-with-volume\n    args:\n      - echo\n      - |\n        date,open,high,low,close,volume\n        2024-01-01,100,105,95,102,1000000\n        2024-01-02,102,108,99,104,1200000\n        2024-01-03,104,110,100,108,1500000\n        2024-01-04,108,112,101,107,1100000\n        2024-01-05,107,109,98,103,1300000\ntraces:\n  - name: Candlestick Plot with Volume\n    model: ${ref(stock-data-with-volume)}\n    props:\n      type: candlestick\n      x: ?{date}\n      open: ?{open}\n      high: ?{high}\n      low: ?{low}\n      close: ?{close}\n  - name: Volume Trace\n    model: ${ref(stock-data-with-volume)}\n    props:\n      type: bar\n      x: ?{date}\n      y: ?{volume}\n      yaxis: \"y2\"\n      marker:\n        opacity: .5\n        color: 'blue'\ncharts:\n  - name: Candlestick Chart with Volume\n    traces:\n      - ${ref(Candlestick Plot with Volume)}\n      - ${ref(Volume Trace)}\n    layout:\n      showlegend: false\n\n      title:\n        text: Candlestick Chart with Volume&lt;br&gt;&lt;sub&gt;Stock Price and Volume&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Date\"\n        rangeslider: \n          visible: false\n      yaxis:\n        title:\n          text: \"Price (USD)\"\n\n      yaxis2:\n        title:\n          text: \"Volume\"\n        overlaying: \"y\"\n        side: \"right\"\n        range: [0, 10000000]\n</code></pre> <p>Here's a candlestick chart with customized colors for increasing and decreasing stock prices:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: stock-data-colored\n    args:\n      - echo\n      - |\n        date,open,high,low,close\n        2024-01-01,100,105,95,102\n        2024-01-02,102,108,99,104\n        2024-01-03,104,110,100,108\n        2024-01-04,108,112,101,107\n        2024-01-05,107,109,98,103\ntraces:\n  - name: Colored Candlestick Plot\n    model: ${ref(stock-data-colored)}\n    props:\n      type: candlestick\n      x: ?{date}\n      open: ?{open}\n      high: ?{high}\n      low: ?{low}\n      close: ?{close}\n      increasing:\n        line:\n          color: \"#17becf\"\n      decreasing:\n        line:\n          color: \"#d62728\"\ncharts:\n  - name: Candlestick with Custom Colors\n    traces:\n      - ${ref(Colored Candlestick Plot)}\n    layout:\n      title:\n        text: Colored Candlestick Chart&lt;br&gt;&lt;sub&gt;Stock Price Movements with Custom Colors&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Date\"\n      yaxis:\n        title:\n          text: \"Price (USD)\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Candlestick/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>candlestick</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>close: 'array' #(1)!\nclosesrc: 'string' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\ndecreasing:\n  fillcolor: 'any' #(5)!\n  line:\n    color: 'any' #(6)!\n    width: 'number' #(7)!\nhigh: 'array' #(8)!\nhighsrc: 'string' #(9)!\nhoverinfo: 'array' #(10)!\nhoverinfosrc: 'string' #(11)!\nhoverlabel:\n  align: 'array' #(12)!\n  alignsrc: 'string' #(13)!\n  bgcolor: 'color | array' #(14)!\n  bgcolorsrc: 'string' #(15)!\n  bordercolor: 'color | array' #(16)!\n  bordercolorsrc: 'string' #(17)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(18)!\n    family: 'string | array' #(19)!\n    familysrc: 'string' #(20)!\n    lineposition: 'array' #(21)!\n    linepositionsrc: 'string' #(22)!\n    shadow: 'string | array' #(23)!\n    shadowsrc: 'string' #(24)!\n    size: number | array\n    sizesrc: 'string' #(25)!\n    style: 'array' #(26)!\n    stylesrc: 'string' #(27)!\n    textcase: 'array' #(28)!\n    textcasesrc: 'string' #(29)!\n    variant: 'array' #(30)!\n    variantsrc: 'string' #(31)!\n    weight: 'integer | array' #(32)!\n    weightsrc: 'string' #(33)!\n  namelength: 'integer | array' #(34)!\n  namelengthsrc: 'string' #(35)!\n  split: 'boolean' #(36)!\nhovertext: 'string | array' #(37)!\nhovertextsrc: 'string' #(38)!\nids: 'array' #(39)!\nidssrc: 'string' #(40)!\nincreasing:\n  fillcolor: 'any' #(41)!\n  line:\n    color: 'any' #(42)!\n    width: 'number' #(43)!\nlegend: 'string' #(44)!\nlegendgroup: 'string' #(45)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(46)!\n    lineposition: 'string' #(47)!\n    shadow: 'string' #(48)!\n    size: number\n    style: 'any' #(49)!\n    textcase: 'any' #(50)!\n    variant: 'any' #(51)!\n    weight: 'integer' #(52)!\n  text: 'string' #(53)!\nlegendrank: 'number' #(54)!\nlegendwidth: 'number' #(55)!\nline:\n  width: 'number' #(56)!\nlow: 'array' #(57)!\nlowsrc: 'string' #(58)!\nmetasrc: 'string' #(59)!\nname: 'string' #(60)!\nopacity: 'number' #(61)!\nopen: 'array' #(62)!\nopensrc: 'string' #(63)!\nshowlegend: 'boolean' #(64)!\nstream:\n  maxpoints: 'number' #(65)!\n  token: 'string' #(66)!\ntext: 'string | array' #(67)!\ntextsrc: 'string' #(68)!\ntype: candlestick\nuid: 'string' #(69)!\nvisible: 'any' #(70)!\nwhiskerwidth: 'number' #(71)!\nx: 'array' #(72)!\nxaxis: 'string' #(73)!\nxcalendar: 'any' #(74)!\nxhoverformat: 'string' #(75)!\nxperiodalignment: 'any' #(76)!\nxsrc: 'string' #(77)!\nyaxis: 'string' #(78)!\nyhoverformat: 'string' #(79)!\nzorder: 'integer' #(80)!\n</code></pre> <ol> <li>Sets the close values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>close</code>.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Sets the color of line bounding the box(es).</li> <li>Sets the width (in px) of line bounding the box(es).</li> <li>Sets the high values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>high</code>.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Show hover information (open, close, high, low) in separate labels.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Sets the color of line bounding the box(es).</li> <li>Sets the width (in px) of line bounding the box(es).</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via <code>increasing.line.width</code> and <code>decreasing.line.width</code>.</li> <li>Sets the low values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>low</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the open values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>open</code>.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</li> <li>Sets the x coordinates. If absent, linear coordinate will be generated.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Carpet/","title":"Carpet","text":""},{"location":"reference/configuration/Trace/Props/Carpet/#carpet","title":"Carpet","text":""},{"location":"reference/configuration/Trace/Props/Carpet/#overview","title":"Overview","text":"<p>The <code>carpet</code> trace type is used to create carpet plots, which can be useful for visualizing data across irregular spaces or non-grid-like arrangements. Carpet plots are commonly employed in complex datasets that span two independent variables, such as pressure and temperature or other bivariate datasets.</p> <p>Carpet traces provide you with control over the X and Y axes, as well as customization of the A and B axes (the independent variables). You can also use a variety of formatting options, including line, color, and axis ticks to enhance the visualization.</p> <p>Common Uses</p> <ul> <li>Distortion Analysis: Visualizing data across irregular spaces, such as in physics or engineering.</li> <li>Bivariate Data Visualization: Displaying complex relationships between two independent variables.</li> <li>Gridless Data Representation: Visualizing data that doesn't fit neatly into grid-like structures.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Carpet/#examples","title":"Examples","text":"<p>Common Configurations</p> Carpet Grid <p>Here's a simple(ish) <code>carpet</code> plot showing data across two independent variables (A and B):</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: carpet-data-axes\n    args:\n      - echo\n      - |\n        a,b,x,y\n        1,5,2,3\n        2,6,3,4\n        3,7,4,5\n        4,8,5,6\n        5,9,6,7\ntraces:\n  - name: Carpet Plot with Custom Axes\n    model: ${ref(carpet-data-axes)}\n    props:\n      type: carpet\n      a: ?{a}\n      b: ?{b}\n      y: ?{y}\n      aaxis:\n        title:\n          text: \"Custom A Axis\"\n        tickprefix: \"A-\"\n      baxis:\n        title:\n          text: \"Custom B Axis\"\n        tickprefix: \"B-\"\ncharts:\n  - name: Simple Carpet Chart\n    traces:\n      - ${ref(Carpet Plot with Custom Axes)}\n    layout:\n      title:\n        text: Carpet Plot with Custom Axes&lt;br&gt;&lt;sub&gt;With Customized A and B Axes&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n      margin: \n        b: 0\n        r: 70\n        l: 70\n        t: 50\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Carpet/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>carpet</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>a: 'array' #(1)!\na0: 'number' #(2)!\naaxis:\n  arraydtick: 'integer' #(3)!\n  arraytick0: 'integer' #(4)!\n  autorange: 'any' #(5)!\n  autotypenumbers: 'any' #(6)!\n  categoryarray: 'array' #(7)!\n  categoryarraysrc: 'string' #(8)!\n  categoryorder: 'any' #(9)!\n  cheatertype: any\n  color: 'any' #(10)!\n  dtick: 'number' #(11)!\n  endline: 'boolean' #(12)!\n  endlinecolor: 'any' #(13)!\n  endlinewidth: 'number' #(14)!\n  exponentformat: 'any' #(15)!\n  fixedrange: 'boolean' #(16)!\n  gridcolor: 'any' #(17)!\n  griddash: 'string' #(18)!\n  gridwidth: 'number' #(19)!\n  labelpadding: 'integer' #(20)!\n  labelprefix: 'string' #(21)!\n  labelsuffix: 'string' #(22)!\n  linecolor: 'any' #(23)!\n  linewidth: 'number' #(24)!\n  minexponent: 'number' #(25)!\n  minorgridcolor: 'any' #(26)!\n  minorgridcount: 'integer' #(27)!\n  minorgriddash: 'string' #(28)!\n  minorgridwidth: 'number' #(29)!\n  nticks: 'integer' #(30)!\n  range: 'array' #(31)!\n  rangemode: 'any' #(32)!\n  separatethousands: 'boolean' #(33)!\n  showexponent: 'any' #(34)!\n  showgrid: 'boolean' #(35)!\n  showline: 'boolean' #(36)!\n  showticklabels: 'any' #(37)!\n  showtickprefix: 'any' #(38)!\n  showticksuffix: 'any' #(39)!\n  smoothing: number\n  startline: 'boolean' #(40)!\n  startlinecolor: 'any' #(41)!\n  startlinewidth: 'number' #(42)!\n  tick0: 'number' #(43)!\n  tickangle: 'number' #(44)!\n  tickfont:\n    color: any\n    family: 'string' #(45)!\n    lineposition: 'string' #(46)!\n    shadow: 'string' #(47)!\n    size: number\n    style: 'any' #(48)!\n    textcase: 'any' #(49)!\n    variant: 'any' #(50)!\n    weight: 'integer' #(51)!\n  tickformat: 'string' #(52)!\n  tickformatstops: array\n  tickmode: any\n  tickprefix: 'string' #(53)!\n  ticksuffix: 'string' #(54)!\n  ticktext: 'array' #(55)!\n  ticktextsrc: 'string' #(56)!\n  tickvals: 'array' #(57)!\n  tickvalssrc: 'string' #(58)!\n  title:\n    font:\n      color: any\n      family: 'string' #(59)!\n      lineposition: 'string' #(60)!\n      shadow: 'string' #(61)!\n      size: number\n      style: 'any' #(62)!\n      textcase: 'any' #(63)!\n      variant: 'any' #(64)!\n      weight: 'integer' #(65)!\n    offset: 'number' #(66)!\n    text: 'string' #(67)!\n  type: 'any' #(68)!\nasrc: 'string' #(69)!\nb: 'array' #(70)!\nb0: 'number' #(71)!\nbaxis:\n  arraydtick: 'integer' #(72)!\n  arraytick0: 'integer' #(73)!\n  autorange: 'any' #(74)!\n  autotypenumbers: 'any' #(75)!\n  categoryarray: 'array' #(76)!\n  categoryarraysrc: 'string' #(77)!\n  categoryorder: 'any' #(78)!\n  cheatertype: any\n  color: 'any' #(79)!\n  dtick: 'number' #(80)!\n  endline: 'boolean' #(81)!\n  endlinecolor: 'any' #(82)!\n  endlinewidth: 'number' #(83)!\n  exponentformat: 'any' #(84)!\n  fixedrange: 'boolean' #(85)!\n  gridcolor: 'any' #(86)!\n  griddash: 'string' #(87)!\n  gridwidth: 'number' #(88)!\n  labelpadding: 'integer' #(89)!\n  labelprefix: 'string' #(90)!\n  labelsuffix: 'string' #(91)!\n  linecolor: 'any' #(92)!\n  linewidth: 'number' #(93)!\n  minexponent: 'number' #(94)!\n  minorgridcolor: 'any' #(95)!\n  minorgridcount: 'integer' #(96)!\n  minorgriddash: 'string' #(97)!\n  minorgridwidth: 'number' #(98)!\n  nticks: 'integer' #(99)!\n  range: 'array' #(100)!\n  rangemode: 'any' #(101)!\n  separatethousands: 'boolean' #(102)!\n  showexponent: 'any' #(103)!\n  showgrid: 'boolean' #(104)!\n  showline: 'boolean' #(105)!\n  showticklabels: 'any' #(106)!\n  showtickprefix: 'any' #(107)!\n  showticksuffix: 'any' #(108)!\n  smoothing: number\n  startline: 'boolean' #(109)!\n  startlinecolor: 'any' #(110)!\n  startlinewidth: 'number' #(111)!\n  tick0: 'number' #(112)!\n  tickangle: 'number' #(113)!\n  tickfont:\n    color: any\n    family: 'string' #(114)!\n    lineposition: 'string' #(115)!\n    shadow: 'string' #(116)!\n    size: number\n    style: 'any' #(117)!\n    textcase: 'any' #(118)!\n    variant: 'any' #(119)!\n    weight: 'integer' #(120)!\n  tickformat: 'string' #(121)!\n  tickformatstops: array\n  tickmode: any\n  tickprefix: 'string' #(122)!\n  ticksuffix: 'string' #(123)!\n  ticktext: 'array' #(124)!\n  ticktextsrc: 'string' #(125)!\n  tickvals: 'array' #(126)!\n  tickvalssrc: 'string' #(127)!\n  title:\n    font:\n      color: any\n      family: 'string' #(128)!\n      lineposition: 'string' #(129)!\n      shadow: 'string' #(130)!\n      size: number\n      style: 'any' #(131)!\n      textcase: 'any' #(132)!\n      variant: 'any' #(133)!\n      weight: 'integer' #(134)!\n    offset: 'number' #(135)!\n    text: 'string' #(136)!\n  type: 'any' #(137)!\nbsrc: 'string' #(138)!\ncarpet: 'string' #(139)!\ncheaterslope: 'number' #(140)!\ncolor: 'any' #(141)!\ncustomdata: 'array' #(142)!\ncustomdatasrc: 'string' #(143)!\nda: 'number' #(144)!\ndb: 'number' #(145)!\nfont:\n  color: any\n  family: 'string' #(146)!\n  lineposition: 'string' #(147)!\n  shadow: 'string' #(148)!\n  size: number\n  style: 'any' #(149)!\n  textcase: 'any' #(150)!\n  variant: 'any' #(151)!\n  weight: 'integer' #(152)!\nids: 'array' #(153)!\nidssrc: 'string' #(154)!\nlegend: 'string' #(155)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(156)!\n    lineposition: 'string' #(157)!\n    shadow: 'string' #(158)!\n    size: number\n    style: 'any' #(159)!\n    textcase: 'any' #(160)!\n    variant: 'any' #(161)!\n    weight: 'integer' #(162)!\n  text: 'string' #(163)!\nlegendrank: 'number' #(164)!\nlegendwidth: 'number' #(165)!\nmetasrc: 'string' #(166)!\nname: 'string' #(167)!\nopacity: 'number' #(168)!\nstream:\n  maxpoints: 'number' #(169)!\n  token: 'string' #(170)!\ntype: carpet\nuid: 'string' #(171)!\nvisible: 'any' #(172)!\nx: 'array' #(173)!\nxaxis: 'string' #(174)!\nxsrc: 'string' #(175)!\ny: 'array' #(176)!\nyaxis: 'string' #(177)!\nysrc: 'string' #(178)!\nzorder: 'integer' #(179)!\n</code></pre> <ol> <li>An array containing values of the first parameter value</li> <li>Alternate to <code>a</code>. Builds a linear space of a coordinates. Use with <code>da</code> where <code>a0</code> is the starting coordinate and <code>da</code> the step.</li> <li>The stride between grid lines along the axis</li> <li>The starting index of grid lines along the axis</li> <li>Determines whether or not the range of this axis is computed in relation to the input data. See <code>rangemode</code> for more info. If <code>range</code> is provided, then <code>autorange</code> is set to false.</li> <li>Using strict a numeric string in trace data is not converted to a number. Using convert types a numeric string in trace data may be treated as a number during automatic axis <code>type</code> detection. Defaults to layout.autotypenumbers.</li> <li>Sets the order in which categories on this axis appear. Only has an effect if <code>categoryorder</code> is set to array. Used with <code>categoryorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>categoryarray</code>.</li> <li>Specifies the ordering logic for the case of categorical variables. By default, plotly uses trace, which specifies the order that is present in the data supplied. Set <code>categoryorder</code> to category ascending or category descending if order should be determined by the alphanumerical order of the category names. Set <code>categoryorder</code> to array to derive the ordering from the attribute <code>categoryarray</code>. If a category is not found in the <code>categoryarray</code> array, the sorting behavior for that attribute will be identical to the trace mode. The unspecified categories will follow the categories in <code>categoryarray</code>.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>The stride between grid lines along the axis</li> <li>Determines whether or not a line is drawn at along the final value of this axis. If true, the end line is drawn on top of the grid lines.</li> <li>Sets the line color of the end line.</li> <li>Sets the width (in px) of the end line.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Determines whether or not this axis is zoom-able. If true, then zoom is disabled.</li> <li>Sets the axis line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the axis line.</li> <li>Extra padding between label and the axis</li> <li>Sets a axis label prefix.</li> <li>Sets a axis label suffix.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Hide SI prefix for 10^n if |n| is below this number</li> <li>Sets the color of the grid lines.</li> <li>Sets the number of minor grid ticks per major grid tick</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the range of this axis. If the axis <code>type</code> is log, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis <code>type</code> is date, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis <code>type</code> is category, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</li> <li>If normal, the range is computed in relation to the extrema of the input data. If tozero`, the range extends to 0, regardless of the input data If nonnegative, the range is non-negative, regardless of the input data.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Determines whether or not a line is drawn at along the starting value of this axis. If true, the start line is drawn on top of the grid lines.</li> <li>Sets the line color of the start line.</li> <li>Sets the width (in px) of the start line.</li> <li>The starting index of grid lines along the axis</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets a tick label prefix.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>An additional amount by which to offset the title from the tick labels, given in pixels.</li> <li>Sets the title of this axis.</li> <li>Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</li> <li>Sets the source reference on Chart Studio Cloud for <code>a</code>.</li> <li>A two dimensional array of y coordinates at each carpet point.</li> <li>Alternate to <code>b</code>. Builds a linear space of a coordinates. Use with <code>db</code> where <code>b0</code> is the starting coordinate and <code>db</code> the step.</li> <li>The stride between grid lines along the axis</li> <li>The starting index of grid lines along the axis</li> <li>Determines whether or not the range of this axis is computed in relation to the input data. See <code>rangemode</code> for more info. If <code>range</code> is provided, then <code>autorange</code> is set to false.</li> <li>Using strict a numeric string in trace data is not converted to a number. Using convert types a numeric string in trace data may be treated as a number during automatic axis <code>type</code> detection. Defaults to layout.autotypenumbers.</li> <li>Sets the order in which categories on this axis appear. Only has an effect if <code>categoryorder</code> is set to array. Used with <code>categoryorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>categoryarray</code>.</li> <li>Specifies the ordering logic for the case of categorical variables. By default, plotly uses trace, which specifies the order that is present in the data supplied. Set <code>categoryorder</code> to category ascending or category descending if order should be determined by the alphanumerical order of the category names. Set <code>categoryorder</code> to array to derive the ordering from the attribute <code>categoryarray</code>. If a category is not found in the <code>categoryarray</code> array, the sorting behavior for that attribute will be identical to the trace mode. The unspecified categories will follow the categories in <code>categoryarray</code>.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>The stride between grid lines along the axis</li> <li>Determines whether or not a line is drawn at along the final value of this axis. If true, the end line is drawn on top of the grid lines.</li> <li>Sets the line color of the end line.</li> <li>Sets the width (in px) of the end line.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Determines whether or not this axis is zoom-able. If true, then zoom is disabled.</li> <li>Sets the axis line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the axis line.</li> <li>Extra padding between label and the axis</li> <li>Sets a axis label prefix.</li> <li>Sets a axis label suffix.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>Hide SI prefix for 10^n if |n| is below this number</li> <li>Sets the color of the grid lines.</li> <li>Sets the number of minor grid ticks per major grid tick</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the width (in px) of the grid lines.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the range of this axis. If the axis <code>type</code> is log, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis <code>type</code> is date, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis <code>type</code> is category, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</li> <li>If normal, the range is computed in relation to the extrema of the input data. If tozero`, the range extends to 0, regardless of the input data If nonnegative, the range is non-negative, regardless of the input data.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not grid lines are drawn. If true, the grid lines are drawn at every tick mark.</li> <li>Determines whether or not a line bounding this axis is drawn.</li> <li>Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Determines whether or not a line is drawn at along the starting value of this axis. If true, the start line is drawn on top of the grid lines.</li> <li>Sets the line color of the start line.</li> <li>Sets the width (in px) of the start line.</li> <li>The starting index of grid lines along the axis</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets a tick label prefix.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>An additional amount by which to offset the title from the tick labels, given in pixels.</li> <li>Sets the title of this axis.</li> <li>Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</li> <li>Sets the source reference on Chart Studio Cloud for <code>b</code>.</li> <li>An identifier for this carpet, so that <code>scattercarpet</code> and <code>contourcarpet</code> traces can specify a carpet plot on which they lie</li> <li>The shift applied to each successive row of data in creating a cheater plot. Only used if <code>x</code> is been omitted.</li> <li>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the a coordinate step. See <code>a0</code> for more info.</li> <li>Sets the b coordinate step. See <code>b0</code> for more info.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>A two dimensional array of y coordinates at each carpet point.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Choropleth/","title":"Choropleth","text":""},{"location":"reference/configuration/Trace/Props/Choropleth/#choropleth","title":"Choropleth","text":""},{"location":"reference/configuration/Trace/Props/Choropleth/#overview","title":"Overview","text":"<p>The <code>choropleth</code> trace type is used to create choropleth maps, which represent data through color intensity across different geographic regions. This trace is commonly used to display data such as population density, election results, or any data that can be associated with geographic regions.</p> <p>The <code>choropleth</code> trace allows you to control the region coloring based on a variable, and you can customize the map's appearance using color scales, hover labels, and other styling options.</p> <p>Common Uses</p> <ul> <li>Geographic Data Visualization: Showing data distributions across countries, states, or other regions.</li> <li>Density Mapping: Displaying population or other density metrics across regions.</li> <li>Thematic Mapping: Creating maps that represent different data points based on a color gradient (e.g., GDP, COVID-19 cases).</li> </ul>"},{"location":"reference/configuration/Trace/Props/Choropleth/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Choropleth Map <p>Here's a simple <code>choropleth</code> map showing population density across different countries:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: country-population-data\n    args:\n      - echo\n      - |\n        country,population_density\n        USA,38 \n        BRA,25\n        ARG,17\n        UK,286\n        CAN,4\n        RUS,9\n        CHN,153\n        IND,450\n        COD,48\ntraces:\n  - name: Simple Choropleth Map Trace\n    model: ${ref(country-population-data)}\n    props:\n      type: choropleth\n      locations: ?{country}\n      z: ?{population_density}\n      colorscale: \"Picnic\"\ncharts:\n  - name: Simple Choropleth Map\n    traces:\n      - ${ref(Simple Choropleth Map Trace)}\n    layout:\n      title:\n        text: Population Density by Country&lt;br&gt;&lt;sub&gt;Data in Persons per Square Kilometer&lt;/sub&gt;\n      geo:\n        showcoastlines: true\n        projection:\n          type: \"natural earth\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Choropleth/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>choropleth</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\ncoloraxis: 'string' #(2)!\ncolorbar:\n  bgcolor: 'any' #(3)!\n  bordercolor: 'any' #(4)!\n  borderwidth: 'number' #(5)!\n  exponentformat: 'any' #(6)!\n  len: 'number' #(7)!\n  lenmode: 'any' #(8)!\n  minexponent: 'number' #(9)!\n  nticks: 'integer' #(10)!\n  orientation: 'any' #(11)!\n  outlinecolor: 'any' #(12)!\n  outlinewidth: 'number' #(13)!\n  separatethousands: 'boolean' #(14)!\n  showexponent: 'any' #(15)!\n  showticklabels: 'boolean' #(16)!\n  showtickprefix: 'any' #(17)!\n  showticksuffix: 'any' #(18)!\n  thickness: 'number' #(19)!\n  thicknessmode: 'any' #(20)!\n  tickangle: 'number' #(21)!\n  tickcolor: 'any' #(22)!\n  tickfont:\n    color: any\n    family: 'string' #(23)!\n    lineposition: 'string' #(24)!\n    shadow: 'string' #(25)!\n    size: number\n    style: 'any' #(26)!\n    textcase: 'any' #(27)!\n    variant: 'any' #(28)!\n    weight: 'integer' #(29)!\n  tickformat: 'string' #(30)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(31)!\n  ticklabelposition: 'any' #(32)!\n  ticklabelstep: 'integer' #(33)!\n  ticklen: 'number' #(34)!\n  tickmode: 'any' #(35)!\n  tickprefix: 'string' #(36)!\n  ticks: 'any' #(37)!\n  ticksuffix: 'string' #(38)!\n  ticktext: 'array' #(39)!\n  ticktextsrc: 'string' #(40)!\n  tickvals: 'array' #(41)!\n  tickvalssrc: 'string' #(42)!\n  tickwidth: 'number' #(43)!\n  title:\n    font:\n      color: any\n      family: 'string' #(44)!\n      lineposition: 'string' #(45)!\n      shadow: 'string' #(46)!\n      size: number\n      style: 'any' #(47)!\n      textcase: 'any' #(48)!\n      variant: 'any' #(49)!\n      weight: 'integer' #(50)!\n    side: 'any' #(51)!\n    text: 'string' #(52)!\n  x: 'number' #(53)!\n  xanchor: 'any' #(54)!\n  xpad: 'number' #(55)!\n  xref: 'any' #(56)!\n  y: 'number' #(57)!\n  yanchor: 'any' #(58)!\n  ypad: 'number' #(59)!\n  yref: 'any' #(60)!\ncolorscale: 'any' #(61)!\ncustomdata: 'array' #(62)!\ncustomdatasrc: 'string' #(63)!\nfeatureidkey: 'string' #(64)!\ngeo: 'string' #(65)!\nhoverinfo: 'array' #(66)!\nhoverinfosrc: 'string' #(67)!\nhoverlabel:\n  align: 'array' #(68)!\n  alignsrc: 'string' #(69)!\n  bgcolor: 'color | array' #(70)!\n  bgcolorsrc: 'string' #(71)!\n  bordercolor: 'color | array' #(72)!\n  bordercolorsrc: 'string' #(73)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(74)!\n    family: 'string | array' #(75)!\n    familysrc: 'string' #(76)!\n    lineposition: 'array' #(77)!\n    linepositionsrc: 'string' #(78)!\n    shadow: 'string | array' #(79)!\n    shadowsrc: 'string' #(80)!\n    size: number | array\n    sizesrc: 'string' #(81)!\n    style: 'array' #(82)!\n    stylesrc: 'string' #(83)!\n    textcase: 'array' #(84)!\n    textcasesrc: 'string' #(85)!\n    variant: 'array' #(86)!\n    variantsrc: 'string' #(87)!\n    weight: 'integer | array' #(88)!\n    weightsrc: 'string' #(89)!\n  namelength: 'integer | array' #(90)!\n  namelengthsrc: 'string' #(91)!\nhovertemplate: 'string | array' #(92)!\nhovertemplatesrc: 'string' #(93)!\nhovertext: 'string | array' #(94)!\nhovertextsrc: 'string' #(95)!\nids: 'array' #(96)!\nidssrc: 'string' #(97)!\nlegend: 'string' #(98)!\nlegendgroup: 'string' #(99)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(100)!\n    lineposition: 'string' #(101)!\n    shadow: 'string' #(102)!\n    size: number\n    style: 'any' #(103)!\n    textcase: 'any' #(104)!\n    variant: 'any' #(105)!\n    weight: 'integer' #(106)!\n  text: 'string' #(107)!\nlegendrank: 'number' #(108)!\nlegendwidth: 'number' #(109)!\nlocationmode: 'any' #(110)!\nlocations: 'array' #(111)!\nlocationssrc: 'string' #(112)!\nmarker:\n  line:\n    color: 'color | array' #(113)!\n    colorsrc: 'string' #(114)!\n    width: 'number | array' #(115)!\n    widthsrc: 'string' #(116)!\n  opacity: 'number | array' #(117)!\n  opacitysrc: 'string' #(118)!\nmetasrc: 'string' #(119)!\nname: 'string' #(120)!\nreversescale: 'boolean' #(121)!\nselected:\n  marker:\n    opacity: 'number' #(122)!\nshowlegend: 'boolean' #(123)!\nshowscale: 'boolean' #(124)!\nstream:\n  maxpoints: 'number' #(125)!\n  token: 'string' #(126)!\ntext: 'string | array' #(127)!\ntextsrc: 'string' #(128)!\ntype: choropleth\nuid: 'string' #(129)!\nunselected:\n  marker:\n    opacity: 'number' #(130)!\nvisible: 'any' #(131)!\nz: 'array' #(132)!\nzauto: 'boolean' #(133)!\nzmax: 'number' #(134)!\nzmid: 'number' #(135)!\nzmin: 'number' #(136)!\nzsrc: 'string' #(137)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the key in GeoJSON features which is used as id to match the items included in the <code>locations</code> array. Only has an effect when <code>geojson</code> is set. Support nested property, for example properties.name.</li> <li>Sets a reference between this trace's geospatial coordinates and a geographic map. If geo (the default value), the geospatial coordinates refer to <code>layout.geo</code>. If geo2, the geospatial coordinates refer to <code>layout.geo2</code>, and so on.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines the set of locations used to match entries in <code>locations</code> to regions on the map. Values ISO-3, USA-states, country names correspond to features on the base map and value geojson-id corresponds to features from a custom GeoJSON linked to the <code>geojson</code> attribute.</li> <li>Sets the coordinates via location IDs or names. See <code>locationmode</code> for more info.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the opacity of the locations.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Sets the marker opacity of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with each location.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the color values.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Choroplethmap/","title":"Choroplethmap","text":""},{"location":"reference/configuration/Trace/Props/Choroplethmap/#choroplethmap","title":"Choroplethmap","text":""},{"location":"reference/configuration/Trace/Props/Choroplethmap/#overview","title":"Overview","text":"<p>The <code>choroplethmap</code> trace type is used to create choropleth maps on top of a MapLibre layer. It's a more advanced form of the standard <code>choropleth</code> trace, allowing for greater control over map projections, interactivity, and advanced map features like zooming and tilting.</p> <p>With <code>choroplethmap</code>, you can visualize data across geographic regions on MapLibre maps, and customize the map's appearance using layers, color scales, and hover labels.</p> <p>Common Uses</p> <ul> <li>Geospatial Data Visualization: Displaying data on an interactive MapLibre map.</li> <li>Thematic Mapping with Interactivity: Creating maps that can zoom, tilt, and rotate while visualizing variables like population or economic metrics.</li> <li>Map Projections: Applying various MapLibre projections for advanced geographical data representation.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Choroplethmap/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple ChoroplethMapLibre MapChoroplethMapLibre with Custom Colorscale and ZoomInteractive ChoroplethMapLibre with Hover Data <p>Here's a simple <code>choroplethmap</code> map showing population density across different regions on a MapLibre layer:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: country-population-data-map\n    args:\n      - echo\n      - |\n        iso_alpha,population_density\n        USA,36\n        CAN,4\n        RUS,9\n        CHN,153\n        IND,450\ntraces:\n  - name: Simple ChoroplethMapLibre Map\n    model: ref(country-population-data-map\n    props:\n      type: choroplethmap\n      geojson: \"https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson\"\n      locations: ?{iso_alpha}\n      z: ?{population_density}\n      colorscale: \"Blues\"\n      marker:\n        opacity: 0.7\ncharts:\n  - name: Simple ChoroplethMapLibre Chart\n    traces:\n      - ${ref(Simple ChoroplethMapLibre Map)}\n    layout:\n      title:\n        text: Population Density by Country on MapLibre&lt;br&gt;&lt;sub&gt;Data in Persons per Square Kilometer&lt;/sub&gt;\n      mapbox:\n        style: \"carto-positron\"\n        zoom: 1\n        center:\n          lat: 20\n          lon: 0\n</code></pre> <p>This example shows a choropleth map on a MapLibre layer using a custom color scale, zoom, and center on Europe:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: european-gdp-data\n    args:\n      - echo\n      - |\n        iso_alpha,gdp\n        FRA,2716\n        DEU,3846\n        ITA,2001\n        ESP,1419\n        GBR,2827\ntraces:\n  - name: ChoroplethMapLibre with Custom Colorscale Trace\n    model: ${ref(european-gdp-data)}\n    props:\n      type: choroplethmap\n      geojson: \"https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson\"\n      locations: ?{iso_alpha}\n      z: ?{gdp}\n      colorscale: [[0, \"rgb(255,245,240)\"], [0.5, \"rgb(252,146,114)\"], [1, \"rgb(165,15,21)\"]]\n      marker:\n        opacity: 0.75\ncharts:\n  - name: ChoroplethMapLibre with Custom Colorscale\n    traces:\n      - ${ref(ChoroplethMapLibre with Custom Colorscale Trace)}\n    layout:\n      title:\n        text: GDP by Country in Europe&lt;br&gt;&lt;sub&gt;Data in Billions of USD&lt;/sub&gt;\n      mapbox:\n        style: \"carto-positron\"\n        zoom: 3\n        center:\n          lat: 50\n          lon: 10\n</code></pre> <p>Here's a choropleth map on a MapLibre layer that includes hover information for each country:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: covid-data-map\n    args:\n      - echo\n      - |\n        iso_alpha,covid_cases,covid_deaths\n        USA,33000000,600000\n        BRA,20000000,550000\n        IND,30000000,400000\n        RUS,6000000,150000\n        ZAF,2000000,60000\ntraces:\n  - name: Interactive ChoroplethMapLibre with Hover Data Trace\n    model: ${ref(covid-data-map)}\n    props:\n      type: choroplethmap\n      geojson: \"https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson\"\n      locations: ?{iso_alpha}\n      z: ?{covid_cases}\n      colorscale: \"Reds\"\n      text: ?{covid_deaths}\n      hovertemplate: \"Cases: %{z}&lt;br&gt;Deaths: %{text}\"\n      marker:\n        opacity: 0.8\ncharts:\n  - name: Interactive ChoroplethMapLibre with Hover Data\n    traces:\n      - ${ref(Interactive ChoroplethMapLibre with Hover Data Trace)}\n    layout:\n      title:\n        text: COVID-19 Cases by Country on MapLibre&lt;br&gt;&lt;sub&gt;Hover to See Deaths Data&lt;/sub&gt;\n      mapbox:\n        style: \"carto-darkmatter\"\n        zoom: 2\n        center:\n          lat: 30\n          lon: 0\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Choroplethmap/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>choroplethmap</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\nbelow: 'string' #(2)!\ncoloraxis: 'string' #(3)!\ncolorbar:\n  bgcolor: 'any' #(4)!\n  bordercolor: 'any' #(5)!\n  borderwidth: 'number' #(6)!\n  exponentformat: 'any' #(7)!\n  len: 'number' #(8)!\n  lenmode: 'any' #(9)!\n  minexponent: 'number' #(10)!\n  nticks: 'integer' #(11)!\n  orientation: 'any' #(12)!\n  outlinecolor: 'any' #(13)!\n  outlinewidth: 'number' #(14)!\n  separatethousands: 'boolean' #(15)!\n  showexponent: 'any' #(16)!\n  showticklabels: 'boolean' #(17)!\n  showtickprefix: 'any' #(18)!\n  showticksuffix: 'any' #(19)!\n  thickness: 'number' #(20)!\n  thicknessmode: 'any' #(21)!\n  tickangle: 'number' #(22)!\n  tickcolor: 'any' #(23)!\n  tickfont:\n    color: any\n    family: 'string' #(24)!\n    lineposition: 'string' #(25)!\n    shadow: 'string' #(26)!\n    size: number\n    style: 'any' #(27)!\n    textcase: 'any' #(28)!\n    variant: 'any' #(29)!\n    weight: 'integer' #(30)!\n  tickformat: 'string' #(31)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(32)!\n  ticklabelposition: 'any' #(33)!\n  ticklabelstep: 'integer' #(34)!\n  ticklen: 'number' #(35)!\n  tickmode: 'any' #(36)!\n  tickprefix: 'string' #(37)!\n  ticks: 'any' #(38)!\n  ticksuffix: 'string' #(39)!\n  ticktext: 'array' #(40)!\n  ticktextsrc: 'string' #(41)!\n  tickvals: 'array' #(42)!\n  tickvalssrc: 'string' #(43)!\n  tickwidth: 'number' #(44)!\n  title:\n    font:\n      color: any\n      family: 'string' #(45)!\n      lineposition: 'string' #(46)!\n      shadow: 'string' #(47)!\n      size: number\n      style: 'any' #(48)!\n      textcase: 'any' #(49)!\n      variant: 'any' #(50)!\n      weight: 'integer' #(51)!\n    side: 'any' #(52)!\n    text: 'string' #(53)!\n  x: 'number' #(54)!\n  xanchor: 'any' #(55)!\n  xpad: 'number' #(56)!\n  xref: 'any' #(57)!\n  y: 'number' #(58)!\n  yanchor: 'any' #(59)!\n  ypad: 'number' #(60)!\n  yref: 'any' #(61)!\ncolorscale: 'any' #(62)!\ncustomdata: 'array' #(63)!\ncustomdatasrc: 'string' #(64)!\nfeatureidkey: 'string' #(65)!\nhoverinfo: 'array' #(66)!\nhoverinfosrc: 'string' #(67)!\nhoverlabel:\n  align: 'array' #(68)!\n  alignsrc: 'string' #(69)!\n  bgcolor: 'color | array' #(70)!\n  bgcolorsrc: 'string' #(71)!\n  bordercolor: 'color | array' #(72)!\n  bordercolorsrc: 'string' #(73)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(74)!\n    family: 'string | array' #(75)!\n    familysrc: 'string' #(76)!\n    lineposition: 'array' #(77)!\n    linepositionsrc: 'string' #(78)!\n    shadow: 'string | array' #(79)!\n    shadowsrc: 'string' #(80)!\n    size: number | array\n    sizesrc: 'string' #(81)!\n    style: 'array' #(82)!\n    stylesrc: 'string' #(83)!\n    textcase: 'array' #(84)!\n    textcasesrc: 'string' #(85)!\n    variant: 'array' #(86)!\n    variantsrc: 'string' #(87)!\n    weight: 'integer | array' #(88)!\n    weightsrc: 'string' #(89)!\n  namelength: 'integer | array' #(90)!\n  namelengthsrc: 'string' #(91)!\nhovertemplate: 'string | array' #(92)!\nhovertemplatesrc: 'string' #(93)!\nhovertext: 'string | array' #(94)!\nhovertextsrc: 'string' #(95)!\nids: 'array' #(96)!\nidssrc: 'string' #(97)!\nlegend: 'string' #(98)!\nlegendgroup: 'string' #(99)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(100)!\n    lineposition: 'string' #(101)!\n    shadow: 'string' #(102)!\n    size: number\n    style: 'any' #(103)!\n    textcase: 'any' #(104)!\n    variant: 'any' #(105)!\n    weight: 'integer' #(106)!\n  text: 'string' #(107)!\nlegendrank: 'number' #(108)!\nlegendwidth: 'number' #(109)!\nlocations: 'array' #(110)!\nlocationssrc: 'string' #(111)!\nmarker:\n  line:\n    color: 'color | array' #(112)!\n    colorsrc: 'string' #(113)!\n    width: 'number | array' #(114)!\n    widthsrc: 'string' #(115)!\n  opacity: 'number | array' #(116)!\n  opacitysrc: 'string' #(117)!\nmetasrc: 'string' #(118)!\nname: 'string' #(119)!\nreversescale: 'boolean' #(120)!\nselected:\n  marker:\n    opacity: 'number' #(121)!\nshowlegend: 'boolean' #(122)!\nshowscale: 'boolean' #(123)!\nstream:\n  maxpoints: 'number' #(124)!\n  token: 'string' #(125)!\nsubplot: 'string' #(126)!\ntext: 'string | array' #(127)!\ntextsrc: 'string' #(128)!\ntype: choroplethmap\nuid: 'string' #(129)!\nunselected:\n  marker:\n    opacity: 'number' #(130)!\nvisible: 'any' #(131)!\nz: 'array' #(132)!\nzauto: 'boolean' #(133)!\nzmax: 'number' #(134)!\nzmid: 'number' #(135)!\nzmin: 'number' #(136)!\nzsrc: 'string' #(137)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmap traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the key in GeoJSON features which is used as id to match the items included in the <code>locations</code> array. Support nested property, for example properties.name.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variable <code>properties</code> Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets which features found in geojson to plot using their feature <code>id</code> field.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the opacity of the locations.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Sets the marker opacity of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a reference between this trace's data coordinates and a map subplot. If map (the default value), the data refer to <code>layout.map</code>. If map2, the data refer to <code>layout.map2</code>, and so on.</li> <li>Sets the text elements associated with each location.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the color values.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Choroplethmapbox/","title":"Choroplethmapbox","text":""},{"location":"reference/configuration/Trace/Props/Choroplethmapbox/#choroplethmapbox","title":"Choroplethmapbox","text":""},{"location":"reference/configuration/Trace/Props/Choroplethmapbox/#overview","title":"Overview","text":"<p>Danger</p> <p>You need a mapbox api key to use choroplethmapbox traces.</p> <p>The <code>choroplethmapbox</code> trace type is used to create choropleth maps on top of a Mapbox layer. It's a more advanced form of the standard <code>choropleth</code> trace, allowing for greater control over map projections, interactivity, and advanced map features like zooming and tilting.</p> <p>With <code>choroplethmapbox</code>, you can visualize data across geographic regions on Mapbox maps, and customize the map's appearance using layers, color scales, and hover labels.</p> <p>Common Uses</p> <ul> <li>Geospatial Data Visualization: Displaying data on an interactive Mapbox map.</li> <li>Thematic Mapping with Interactivity: Creating maps that can zoom, tilt, and rotate while visualizing variables like population or economic metrics.</li> <li>Map Projections: Applying various Mapbox projections for advanced geographical data representation.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Choroplethmapbox/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple ChoroplethMapbox MapChoroplethMapbox with Custom Colorscale and ZoomInteractive ChoroplethMapbox with Hover Data <p>Here's a simple <code>choroplethmapbox</code> map showing population density across different regions on a Mapbox layer:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: country-population-data-mapbox\n    args:\n      - echo\n      - |\n        iso_alpha,population_density\n        USA,36\n        CAN,4\n        RUS,9\n        CHN,153\n        IND,450\ntraces:\n  - name: Simple ChoroplethMapbox Map\n    model: ref(country-population-data-mapbox\n    props:\n      type: choroplethmapbox\n      geojson: \"https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson\"\n      locations: ?{iso_alpha}\n      z: ?{population_density}\n      colorscale: \"Blues\"\n      marker:\n        opacity: 0.7\ncharts:\n  - name: Simple ChoroplethMapbox Chart\n    traces:\n      - ${ref(Simple ChoroplethMapbox Map)}\n    layout:\n      title:\n        text: Population Density by Country on Mapbox&lt;br&gt;&lt;sub&gt;Data in Persons per Square Kilometer&lt;/sub&gt;\n      mapbox:\n        style: \"carto-positron\"\n        zoom: 1\n        center:\n          lat: 20\n          lon: 0\n</code></pre> <p>This example shows a choropleth map on a Mapbox layer using a custom color scale, zoom, and center on Europe:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: european-gdp-data\n    args:\n      - echo\n      - |\n        iso_alpha,gdp\n        FRA,2716\n        DEU,3846\n        ITA,2001\n        ESP,1419\n        GBR,2827\ntraces:\n  - name: ChoroplethMapbox with Custom Colorscale Trace\n    model: ${ref(european-gdp-data)}\n    props:\n      type: choroplethmapbox\n      geojson: \"https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson\"\n      locations: ?{iso_alpha}\n      z: ?{gdp}\n      colorscale: [[0, \"rgb(255,245,240)\"], [0.5, \"rgb(252,146,114)\"], [1, \"rgb(165,15,21)\"]]\n      marker:\n        opacity: 0.75\ncharts:\n  - name: ChoroplethMapbox with Custom Colorscale\n    traces:\n      - ${ref(ChoroplethMapbox with Custom Colorscale Trace)}\n    layout:\n      title:\n        text: GDP by Country in Europe&lt;br&gt;&lt;sub&gt;Data in Billions of USD&lt;/sub&gt;\n      mapbox:\n        style: \"carto-positron\"\n        zoom: 3\n        center:\n          lat: 50\n          lon: 10\n</code></pre> <p>Here's a choropleth map on a Mapbox layer that includes hover information for each country:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: covid-data-mapbox\n    args:\n      - echo\n      - |\n        iso_alpha,covid_cases,covid_deaths\n        USA,33000000,600000\n        BRA,20000000,550000\n        IND,30000000,400000\n        RUS,6000000,150000\n        ZAF,2000000,60000\ntraces:\n  - name: Interactive ChoroplethMapbox with Hover Data Trace\n    model: ${ref(covid-data-mapbox)}\n    props:\n      type: choroplethmapbox\n      geojson: \"https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson\"\n      locations: ?{iso_alpha}\n      z: ?{covid_cases}\n      colorscale: \"Reds\"\n      text: ?{covid_deaths}\n      hovertemplate: \"Cases: %{z}&lt;br&gt;Deaths: %{text}\"\n      marker:\n        opacity: 0.8\ncharts:\n  - name: Interactive ChoroplethMapbox with Hover Data\n    traces:\n      - ${ref(Interactive ChoroplethMapbox with Hover Data Trace)}\n    layout:\n      title:\n        text: COVID-19 Cases by Country on Mapbox&lt;br&gt;&lt;sub&gt;Hover to See Deaths Data&lt;/sub&gt;\n      mapbox:\n        style: \"carto-darkmatter\"\n        zoom: 2\n        center:\n          lat: 30\n          lon: 0\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Choroplethmapbox/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>choroplethmapbox</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\nbelow: 'string' #(2)!\ncoloraxis: 'string' #(3)!\ncolorbar:\n  bgcolor: 'any' #(4)!\n  bordercolor: 'any' #(5)!\n  borderwidth: 'number' #(6)!\n  exponentformat: 'any' #(7)!\n  len: 'number' #(8)!\n  lenmode: 'any' #(9)!\n  minexponent: 'number' #(10)!\n  nticks: 'integer' #(11)!\n  orientation: 'any' #(12)!\n  outlinecolor: 'any' #(13)!\n  outlinewidth: 'number' #(14)!\n  separatethousands: 'boolean' #(15)!\n  showexponent: 'any' #(16)!\n  showticklabels: 'boolean' #(17)!\n  showtickprefix: 'any' #(18)!\n  showticksuffix: 'any' #(19)!\n  thickness: 'number' #(20)!\n  thicknessmode: 'any' #(21)!\n  tickangle: 'number' #(22)!\n  tickcolor: 'any' #(23)!\n  tickfont:\n    color: any\n    family: 'string' #(24)!\n    lineposition: 'string' #(25)!\n    shadow: 'string' #(26)!\n    size: number\n    style: 'any' #(27)!\n    textcase: 'any' #(28)!\n    variant: 'any' #(29)!\n    weight: 'integer' #(30)!\n  tickformat: 'string' #(31)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(32)!\n  ticklabelposition: 'any' #(33)!\n  ticklabelstep: 'integer' #(34)!\n  ticklen: 'number' #(35)!\n  tickmode: 'any' #(36)!\n  tickprefix: 'string' #(37)!\n  ticks: 'any' #(38)!\n  ticksuffix: 'string' #(39)!\n  ticktext: 'array' #(40)!\n  ticktextsrc: 'string' #(41)!\n  tickvals: 'array' #(42)!\n  tickvalssrc: 'string' #(43)!\n  tickwidth: 'number' #(44)!\n  title:\n    font:\n      color: any\n      family: 'string' #(45)!\n      lineposition: 'string' #(46)!\n      shadow: 'string' #(47)!\n      size: number\n      style: 'any' #(48)!\n      textcase: 'any' #(49)!\n      variant: 'any' #(50)!\n      weight: 'integer' #(51)!\n    side: 'any' #(52)!\n    text: 'string' #(53)!\n  x: 'number' #(54)!\n  xanchor: 'any' #(55)!\n  xpad: 'number' #(56)!\n  xref: 'any' #(57)!\n  y: 'number' #(58)!\n  yanchor: 'any' #(59)!\n  ypad: 'number' #(60)!\n  yref: 'any' #(61)!\ncolorscale: 'any' #(62)!\ncustomdata: 'array' #(63)!\ncustomdatasrc: 'string' #(64)!\nfeatureidkey: 'string' #(65)!\nhoverinfo: 'array' #(66)!\nhoverinfosrc: 'string' #(67)!\nhoverlabel:\n  align: 'array' #(68)!\n  alignsrc: 'string' #(69)!\n  bgcolor: 'color | array' #(70)!\n  bgcolorsrc: 'string' #(71)!\n  bordercolor: 'color | array' #(72)!\n  bordercolorsrc: 'string' #(73)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(74)!\n    family: 'string | array' #(75)!\n    familysrc: 'string' #(76)!\n    lineposition: 'array' #(77)!\n    linepositionsrc: 'string' #(78)!\n    shadow: 'string | array' #(79)!\n    shadowsrc: 'string' #(80)!\n    size: number | array\n    sizesrc: 'string' #(81)!\n    style: 'array' #(82)!\n    stylesrc: 'string' #(83)!\n    textcase: 'array' #(84)!\n    textcasesrc: 'string' #(85)!\n    variant: 'array' #(86)!\n    variantsrc: 'string' #(87)!\n    weight: 'integer | array' #(88)!\n    weightsrc: 'string' #(89)!\n  namelength: 'integer | array' #(90)!\n  namelengthsrc: 'string' #(91)!\nhovertemplate: 'string | array' #(92)!\nhovertemplatesrc: 'string' #(93)!\nhovertext: 'string | array' #(94)!\nhovertextsrc: 'string' #(95)!\nids: 'array' #(96)!\nidssrc: 'string' #(97)!\nlegend: 'string' #(98)!\nlegendgroup: 'string' #(99)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(100)!\n    lineposition: 'string' #(101)!\n    shadow: 'string' #(102)!\n    size: number\n    style: 'any' #(103)!\n    textcase: 'any' #(104)!\n    variant: 'any' #(105)!\n    weight: 'integer' #(106)!\n  text: 'string' #(107)!\nlegendrank: 'number' #(108)!\nlegendwidth: 'number' #(109)!\nlocations: 'array' #(110)!\nlocationssrc: 'string' #(111)!\nmarker:\n  line:\n    color: 'color | array' #(112)!\n    colorsrc: 'string' #(113)!\n    width: 'number | array' #(114)!\n    widthsrc: 'string' #(115)!\n  opacity: 'number | array' #(116)!\n  opacitysrc: 'string' #(117)!\nmetasrc: 'string' #(118)!\nname: 'string' #(119)!\nreversescale: 'boolean' #(120)!\nselected:\n  marker:\n    opacity: 'number' #(121)!\nshowlegend: 'boolean' #(122)!\nshowscale: 'boolean' #(123)!\nstream:\n  maxpoints: 'number' #(124)!\n  token: 'string' #(125)!\nsubplot: 'string' #(126)!\ntext: 'string | array' #(127)!\ntextsrc: 'string' #(128)!\ntype: choroplethmapbox\nuid: 'string' #(129)!\nunselected:\n  marker:\n    opacity: 'number' #(130)!\nvisible: 'any' #(131)!\nz: 'array' #(132)!\nzauto: 'boolean' #(133)!\nzmax: 'number' #(134)!\nzmid: 'number' #(135)!\nzmin: 'number' #(136)!\nzsrc: 'string' #(137)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the key in GeoJSON features which is used as id to match the items included in the <code>locations</code> array. Support nested property, for example properties.name.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variable <code>properties</code> Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets which features found in geojson to plot using their feature <code>id</code> field.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the opacity of the locations.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Sets the marker opacity of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>mapbox subplots and traces are deprecated! Please consider switching to <code>map</code> subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If mapbox (the default value), the data refer to <code>layout.mapbox</code>. If mapbox2, the data refer to <code>layout.mapbox2</code>, and so on.</li> <li>Sets the text elements associated with each location.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the color values.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Cone/","title":"Cone","text":""},{"location":"reference/configuration/Trace/Props/Cone/#cone","title":"Cone","text":""},{"location":"reference/configuration/Trace/Props/Cone/#overview","title":"Overview","text":"<p>The <code>cone</code> trace type is used to create 3D cone plots, which are useful for visualizing vector fields or directional data in three-dimensional space. Each cone represents a vector, with its position, size, and orientation conveying information about the vector's magnitude and direction.</p> <p>Cone plots are particularly useful in scientific and engineering applications, such as fluid dynamics, electromagnetic field visualization, or wind direction and speed mapping.</p> <p>Common Uses</p> <ul> <li>Vector Field Visualization: Displaying 3D vector fields in physics or engineering.</li> <li>Wind Data Representation: Showing wind direction and speed in meteorology.</li> <li>Fluid Flow Analysis: Visualizing fluid dynamics in simulations or experiments.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Cone/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Cone PlotWind Direction Cone Plot <p>Here's a simple <code>cone</code> plot showing a basic vector field:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: vector-field-data\n    args:\n      - echo\n      - |\n        x,y,z,u,v,w\n        0,0,0,1,0,0\n        0,1,0,0,1,0\n        1,0,0,0,0,1\n        1,1,0,1,1,1\n        0,0,1,-1,0,0\n        0,1,1,0,-1,0\n        1,0,1,0,0,-1\n        1,1,1,-1,-1,-1\ntraces:\n  - name: Simple Cone Plot Trace\n    model: ${ref(vector-field-data)}\n    props:\n      type: cone\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      u: ?{u}\n      v: ?{v}\n      w: ?{w}\n      colorscale: \"Viridis\"\n      sizemode: \"absolute\"\n      sizeref: 0.5\ncharts:\n  - name: Simple Cone Plot\n    traces:\n      - ${ref(Simple Cone Plot Trace)}\n    layout:\n      title:\n        text: Simple 3D Vector Field\n      scene:\n        camera:\n          eye:\n            x: 1.5\n            y: 1.5\n            z: 1.5\n</code></pre> <p>Here's a <code>cone</code> plot showing wind direction and speed:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: wind-data\n    args:\n      - echo\n      - |\n        x,y,z,u,v,w,speed\n        0,0,0,5,5,0,7.07\n        1,1,0,-5,5,0,7.07\n        2,2,0,-5,-5,0,7.07\n        3,3,0,5,-5,0,7.07\n        4,4,0,0,0,5,5.00\ntraces:\n  - name: Wind Direction Cone Plot Trace\n    model: ${ref(wind-data)}\n    props:\n      type: cone\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      u: ?{u}\n      v: ?{v}\n      w: ?{w}\n      colorscale: \"Viridis\"\n      colorbar:\n        title: \"Wind Speed (m/s)\"\n      hoverinfo: \"text\"\n      text: ?{speed}\ncharts:\n  - name: Wind Direction Cone Plot\n    traces:\n      - ${ref(Wind Direction Cone Plot Trace)}\n    layout:\n      title:\n        text: Wind Direction and Speed\n      scene:\n        camera:\n          eye:\n            x: 1.5\n            y: -.5\n            z: 1.1\n      margin:\n        l: 90\n        r: 0\n        t: 40\n        b: 90\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Cone/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>cone</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>anchor: 'any' #(1)!\nautocolorscale: 'boolean' #(2)!\ncauto: 'boolean' #(3)!\ncmax: 'number' #(4)!\ncmid: 'number' #(5)!\ncmin: 'number' #(6)!\ncoloraxis: 'string' #(7)!\ncolorbar:\n  bgcolor: 'any' #(8)!\n  bordercolor: 'any' #(9)!\n  borderwidth: 'number' #(10)!\n  exponentformat: 'any' #(11)!\n  len: 'number' #(12)!\n  lenmode: 'any' #(13)!\n  minexponent: 'number' #(14)!\n  nticks: 'integer' #(15)!\n  orientation: 'any' #(16)!\n  outlinecolor: 'any' #(17)!\n  outlinewidth: 'number' #(18)!\n  separatethousands: 'boolean' #(19)!\n  showexponent: 'any' #(20)!\n  showticklabels: 'boolean' #(21)!\n  showtickprefix: 'any' #(22)!\n  showticksuffix: 'any' #(23)!\n  thickness: 'number' #(24)!\n  thicknessmode: 'any' #(25)!\n  tickangle: 'number' #(26)!\n  tickcolor: 'any' #(27)!\n  tickfont:\n    color: any\n    family: 'string' #(28)!\n    lineposition: 'string' #(29)!\n    shadow: 'string' #(30)!\n    size: number\n    style: 'any' #(31)!\n    textcase: 'any' #(32)!\n    variant: 'any' #(33)!\n    weight: 'integer' #(34)!\n  tickformat: 'string' #(35)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(36)!\n  ticklabelposition: 'any' #(37)!\n  ticklabelstep: 'integer' #(38)!\n  ticklen: 'number' #(39)!\n  tickmode: 'any' #(40)!\n  tickprefix: 'string' #(41)!\n  ticks: 'any' #(42)!\n  ticksuffix: 'string' #(43)!\n  ticktext: 'array' #(44)!\n  ticktextsrc: 'string' #(45)!\n  tickvals: 'array' #(46)!\n  tickvalssrc: 'string' #(47)!\n  tickwidth: 'number' #(48)!\n  title:\n    font:\n      color: any\n      family: 'string' #(49)!\n      lineposition: 'string' #(50)!\n      shadow: 'string' #(51)!\n      size: number\n      style: 'any' #(52)!\n      textcase: 'any' #(53)!\n      variant: 'any' #(54)!\n      weight: 'integer' #(55)!\n    side: 'any' #(56)!\n    text: 'string' #(57)!\n  x: 'number' #(58)!\n  xanchor: 'any' #(59)!\n  xpad: 'number' #(60)!\n  xref: 'any' #(61)!\n  y: 'number' #(62)!\n  yanchor: 'any' #(63)!\n  ypad: 'number' #(64)!\n  yref: 'any' #(65)!\ncolorscale: 'any' #(66)!\ncustomdata: 'array' #(67)!\ncustomdatasrc: 'string' #(68)!\nhoverinfo: 'array' #(69)!\nhoverinfosrc: 'string' #(70)!\nhoverlabel:\n  align: 'array' #(71)!\n  alignsrc: 'string' #(72)!\n  bgcolor: 'color | array' #(73)!\n  bgcolorsrc: 'string' #(74)!\n  bordercolor: 'color | array' #(75)!\n  bordercolorsrc: 'string' #(76)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(77)!\n    family: 'string | array' #(78)!\n    familysrc: 'string' #(79)!\n    lineposition: 'array' #(80)!\n    linepositionsrc: 'string' #(81)!\n    shadow: 'string | array' #(82)!\n    shadowsrc: 'string' #(83)!\n    size: number | array\n    sizesrc: 'string' #(84)!\n    style: 'array' #(85)!\n    stylesrc: 'string' #(86)!\n    textcase: 'array' #(87)!\n    textcasesrc: 'string' #(88)!\n    variant: 'array' #(89)!\n    variantsrc: 'string' #(90)!\n    weight: 'integer | array' #(91)!\n    weightsrc: 'string' #(92)!\n  namelength: 'integer | array' #(93)!\n  namelengthsrc: 'string' #(94)!\nhovertemplate: 'string | array' #(95)!\nhovertemplatesrc: 'string' #(96)!\nhovertext: 'string | array' #(97)!\nhovertextsrc: 'string' #(98)!\nids: 'array' #(99)!\nidssrc: 'string' #(100)!\nlegend: 'string' #(101)!\nlegendgroup: 'string' #(102)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(103)!\n    lineposition: 'string' #(104)!\n    shadow: 'string' #(105)!\n    size: number\n    style: 'any' #(106)!\n    textcase: 'any' #(107)!\n    variant: 'any' #(108)!\n    weight: 'integer' #(109)!\n  text: 'string' #(110)!\nlegendrank: 'number' #(111)!\nlegendwidth: 'number' #(112)!\nlighting:\n  ambient: 'number' #(113)!\n  diffuse: 'number' #(114)!\n  facenormalsepsilon: 'number' #(115)!\n  fresnel: 'number' #(116)!\n  roughness: 'number' #(117)!\n  specular: 'number' #(118)!\n  vertexnormalsepsilon: 'number' #(119)!\nlightposition:\n  x: 'number' #(120)!\n  y: 'number' #(121)!\n  z: 'number' #(122)!\nmetasrc: 'string' #(123)!\nname: 'string' #(124)!\nopacity: 'number' #(125)!\nreversescale: 'boolean' #(126)!\nscene: 'string' #(127)!\nshowlegend: 'boolean' #(128)!\nshowscale: 'boolean' #(129)!\nsizemode: 'any' #(130)!\nsizeref: 'number' #(131)!\nstream:\n  maxpoints: 'number' #(132)!\n  token: 'string' #(133)!\ntext: 'string | array' #(134)!\ntextsrc: 'string' #(135)!\ntype: cone\nu: 'array' #(136)!\nuhoverformat: 'string' #(137)!\nuid: 'string' #(138)!\nusrc: 'string' #(139)!\nv: 'array' #(140)!\nvhoverformat: 'string' #(141)!\nvisible: 'any' #(142)!\nvsrc: 'string' #(143)!\nw: 'array' #(144)!\nwhoverformat: 'string' #(145)!\nwsrc: 'string' #(146)!\nx: 'array' #(147)!\nxhoverformat: 'string' #(148)!\nxsrc: 'string' #(149)!\ny: 'array' #(150)!\nyhoverformat: 'string' #(151)!\nysrc: 'string' #(152)!\nz: 'array' #(153)!\nzhoverformat: 'string' #(154)!\nzsrc: 'string' #(155)!\n</code></pre> <ol> <li>Sets the cones' anchor with respect to their x/y/z positions. Note that cm denote the cone's center of mass which corresponds to 1/4 from the tail to tip.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in <code>cmin</code> and <code>cmax</code> Defaults to <code>false</code> when <code>cmin</code> and <code>cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, <code>cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>cmin</code> and/or <code>cmax</code> to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when <code>cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, <code>cmax</code> must be set as well.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>cmin</code> and <code>cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variable <code>norm</code> Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Ambient light increases overall color visibility but can wash out the image.</li> <li>Represents the extent that incident rays are reflected in a range of angles.</li> <li>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</li> <li>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</li> <li>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</li> <li>Represents the level that incident rays are reflected in a single direction, causing shine.</li> <li>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</li> <li>Numeric vector, representing the X coordinate for each vertex.</li> <li>Numeric vector, representing the Y coordinate for each vertex.</li> <li>Numeric vector, representing the Z coordinate for each vertex.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the surface. Please note that in the case of using high <code>opacity</code> values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</li> <li>Reverses the color mapping if true. If true, <code>cmin</code> will correspond to the last color in the array and <code>cmax</code> will correspond to the first color.</li> <li>Sets a reference between this trace's 3D coordinate system and a 3D scene. If scene (the default value), the (x,y,z) coordinates refer to <code>layout.scene</code>. If scene2, the (x,y,z) coordinates refer to <code>layout.scene2</code>, and so on.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Determines whether <code>sizeref</code> is set as a scaled (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as absolute value (in the same units as the vector field). To display sizes in actual vector length use raw.</li> <li>Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and <code>sizeref</code>. This factor (computed internally) corresponds to the minimum \"time\" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With <code>sizemode</code> set to raw, its default value is 1. With <code>sizemode</code> set to scaled, <code>sizeref</code> is unitless, its default value is 0.5. With <code>sizemode</code> set to absolute, <code>sizeref</code> has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with the cones. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Sets the x components of the vector field.</li> <li>Sets the hover text formatting rulefor <code>u</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the source reference on Chart Studio Cloud for <code>u</code>.</li> <li>Sets the y components of the vector field.</li> <li>Sets the hover text formatting rulefor <code>v</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the source reference on Chart Studio Cloud for <code>v</code>.</li> <li>Sets the z components of the vector field.</li> <li>Sets the hover text formatting rulefor <code>w</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Sets the source reference on Chart Studio Cloud for <code>w</code>.</li> <li>Sets the x coordinates of the vector field and of the displayed cones.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates of the vector field and of the displayed cones.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the z coordinates of the vector field and of the displayed cones.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>zaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Contour/","title":"Contour","text":""},{"location":"reference/configuration/Trace/Props/Contour/#contour","title":"Contour","text":""},{"location":"reference/configuration/Trace/Props/Contour/#overview","title":"Overview","text":"<p>The <code>contour</code> trace type is used to create contour plots, which are useful for visualizing three-dimensional data in two dimensions. Contour plots are often used to represent things like elevation, temperature, or pressure distributions. The trace uses a matrix of Z values and optional X and Y coordinates to create a continuous representation of the data.</p> <p>Contour traces allow you to customize line colors, fill colors, and the number of contour levels to highlight data variation.</p> <p>Common Uses</p> <ul> <li>Topographic Maps: Visualizing elevation levels across a geographic area.</li> <li>Heat or Temperature Maps: Displaying temperature distributions over a surface.</li> <li>Electromagnetic Fields: Representing the strength of a field at various points.</li> <li>Pressure Levels: Visualizing pressure across different areas in meteorology.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Contour/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Contour PlotFilled Contour PlotContour Plot with Multiple Levels <p>Here's a simple <code>contour</code> plot showing a basic grid of Z values, where X and Y represent spatial data:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: contour-data\n    args:\n      - echo\n      - |\n        x,y,z\n        1,1,10\n        2,1,15\n        3,1,20\n        4,1,25\n        5,1,30\n        1,2,5\n        2,2,10\n        3,2,15\n        4,2,20\n        5,2,25\n        1,3,0\n        2,3,5\n        3,3,10\n        4,3,15\n        5,3,20\n        1,4,5\n        2,4,10\n        3,4,15\n        4,4,20\n        5,4,25\n        1,5,10\n        2,5,15\n        3,5,20\n        4,5,25\n        5,5,30\ntraces:\n  - name: Simple Contour Plot\n    model: ${ref(contour-data)}\n    props:\n      type: contour\n      z: \n        - ?{x}\n        - ?{y}\n        - ?{z}\n      colorscale: \"Viridis\"\n      ncontours: 20\ncharts:\n  - name: Simple Contour Chart\n    traces:\n      - ${ref(Simple Contour Plot)}\n    layout:\n      title:\n        text: Simple Contour Plot&lt;br&gt;&lt;sub&gt;Contour Plot Based on Z Values&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>This example shows a contour plot with filled contours, where each level is shaded with a different color:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: contour-data-filled\n    args:\n      - echo\n      - |\n        x,y,z\n        0,0,10\n        1,0,15\n        2,0,20\n        3,0,25\n        4,0,30\n        0,1,5\n        1,1,10\n        2,1,15\n        3,1,20\n        4,1,25\n        0,2,0\n        1,2,5\n        2,2,10\n        3,2,15\n        4,2,20\n        0,3,5\n        1,3,10\n        2,3,15\n        3,3,20\n        4,3,25\n        0,4,10\n        1,4,15\n        2,4,20\n        3,4,25\n        4,4,30\ntraces:\n  - name: Filled Contour Plot\n    model: ${ref(contour-data-filled)}\n    props:\n      type: contour\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      colorscale: \"Earth\"\n      contours:\n        coloring: \"heatmap\"\n        showlines: true\n      ncontours: 25\ncharts:\n  - name: Filled Contour Chart\n    traces:\n      - ${ref(Filled Contour Plot)}\n    layout:\n      title:\n        text: Filled Contour Plot&lt;br&gt;&lt;sub&gt;Contour Plot with Filled Levels&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>This example demonstrates how to customize the contour levels by specifying a set number of levels:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: contour-data-multi\n    args:\n      - echo\n      - |\n        x,y,z\n        -3,-3,0\n        -2,-3,1\n        -1,-3,2\n        0,-3,3\n        1,-3,4\n        2,-3,5\n        3,-3,6\n        -3,-2,1\n        -2,-2,2\n        -1,-2,3\n        0,-2,4\n        1,-2,5\n        2,-2,6\n        3,-2,7\n        -3,-1,2\n        -2,-1,3\n        -1,-1,4\n        0,-1,5\n        1,-1,6\n        2,-1,7\n        3,-1,8\n        -3,0,3\n        -2,0,4\n        -1,0,5\n        0,0,6\n        1,0,7\n        2,0,8\n        3,0,9\n        -3,1,4\n        -2,1,5\n        -1,1,6\n        0,1,7\n        1,1,8\n        2,1,9\n        3,1,10\n        -3,2,5\n        -2,2,6\n        -1,2,7\n        0,2,8\n        1,2,9\n        2,2,10\n        3,2,11\n        -3,3,6\n        -2,3,7\n        -1,3,8\n        0,3,9\n        1,3,10\n        2,3,11\n        3,3,12\ntraces:\n  - name: Contour Plot with Multiple Levels\n    model: ${ref(contour-data-multi)}\n    props:\n      type: contour\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      colorscale: \"Jet\"\n      contours:\n        start: 0\n        end: 12\n        size: 0.5\n      ncontours: 24\ncharts:\n  - name: Contour Chart with Multiple Levels\n    traces:\n      - ${ref(Contour Plot with Multiple Levels)}\n    layout:\n      title:\n        text: Contour Plot with Multiple Levels&lt;br&gt;&lt;sub&gt;Custom Contour Levels&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Contour/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>contour</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\nautocontour: 'boolean' #(2)!\ncoloraxis: 'string' #(3)!\ncolorbar:\n  bgcolor: 'any' #(4)!\n  bordercolor: 'any' #(5)!\n  borderwidth: 'number' #(6)!\n  exponentformat: 'any' #(7)!\n  len: 'number' #(8)!\n  lenmode: 'any' #(9)!\n  minexponent: 'number' #(10)!\n  nticks: 'integer' #(11)!\n  orientation: 'any' #(12)!\n  outlinecolor: 'any' #(13)!\n  outlinewidth: 'number' #(14)!\n  separatethousands: 'boolean' #(15)!\n  showexponent: 'any' #(16)!\n  showticklabels: 'boolean' #(17)!\n  showtickprefix: 'any' #(18)!\n  showticksuffix: 'any' #(19)!\n  thickness: 'number' #(20)!\n  thicknessmode: 'any' #(21)!\n  tickangle: 'number' #(22)!\n  tickcolor: 'any' #(23)!\n  tickfont:\n    color: any\n    family: 'string' #(24)!\n    lineposition: 'string' #(25)!\n    shadow: 'string' #(26)!\n    size: number\n    style: 'any' #(27)!\n    textcase: 'any' #(28)!\n    variant: 'any' #(29)!\n    weight: 'integer' #(30)!\n  tickformat: 'string' #(31)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(32)!\n  ticklabelposition: 'any' #(33)!\n  ticklabelstep: 'integer' #(34)!\n  ticklen: 'number' #(35)!\n  tickmode: 'any' #(36)!\n  tickprefix: 'string' #(37)!\n  ticks: 'any' #(38)!\n  ticksuffix: 'string' #(39)!\n  ticktext: 'array' #(40)!\n  ticktextsrc: 'string' #(41)!\n  tickvals: 'array' #(42)!\n  tickvalssrc: 'string' #(43)!\n  tickwidth: 'number' #(44)!\n  title:\n    font:\n      color: any\n      family: 'string' #(45)!\n      lineposition: 'string' #(46)!\n      shadow: 'string' #(47)!\n      size: number\n      style: 'any' #(48)!\n      textcase: 'any' #(49)!\n      variant: 'any' #(50)!\n      weight: 'integer' #(51)!\n    side: 'any' #(52)!\n    text: 'string' #(53)!\n  x: 'number' #(54)!\n  xanchor: 'any' #(55)!\n  xpad: 'number' #(56)!\n  xref: 'any' #(57)!\n  y: 'number' #(58)!\n  yanchor: 'any' #(59)!\n  ypad: 'number' #(60)!\n  yref: 'any' #(61)!\ncolorscale: 'any' #(62)!\nconnectgaps: 'boolean' #(63)!\ncontours:\n  coloring: 'any' #(64)!\n  end: 'number' #(65)!\n  impliedEdits: any\n  labelfont:\n    color: any\n    family: 'string' #(66)!\n    lineposition: 'string' #(67)!\n    shadow: 'string' #(68)!\n    size: number\n    style: 'any' #(69)!\n    textcase: 'any' #(70)!\n    variant: 'any' #(71)!\n    weight: 'integer' #(72)!\n  labelformat: 'string' #(73)!\n  operation: 'any' #(74)!\n  showlabels: 'boolean' #(75)!\n  showlines: 'boolean' #(76)!\n  size: 'number' #(77)!\n  start: 'number' #(78)!\n  type: 'any' #(79)!\ncustomdata: 'array' #(80)!\ncustomdatasrc: 'string' #(81)!\ndx: 'number' #(82)!\ndy: 'number' #(83)!\nfillcolor: 'any' #(84)!\nhoverinfo: 'array' #(85)!\nhoverinfosrc: 'string' #(86)!\nhoverlabel:\n  align: 'array' #(87)!\n  alignsrc: 'string' #(88)!\n  bgcolor: 'color | array' #(89)!\n  bgcolorsrc: 'string' #(90)!\n  bordercolor: 'color | array' #(91)!\n  bordercolorsrc: 'string' #(92)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(93)!\n    family: 'string | array' #(94)!\n    familysrc: 'string' #(95)!\n    lineposition: 'array' #(96)!\n    linepositionsrc: 'string' #(97)!\n    shadow: 'string | array' #(98)!\n    shadowsrc: 'string' #(99)!\n    size: number | array\n    sizesrc: 'string' #(100)!\n    style: 'array' #(101)!\n    stylesrc: 'string' #(102)!\n    textcase: 'array' #(103)!\n    textcasesrc: 'string' #(104)!\n    variant: 'array' #(105)!\n    variantsrc: 'string' #(106)!\n    weight: 'integer | array' #(107)!\n    weightsrc: 'string' #(108)!\n  namelength: 'integer | array' #(109)!\n  namelengthsrc: 'string' #(110)!\nhoverongaps: 'boolean' #(111)!\nhovertemplate: 'string | array' #(112)!\nhovertemplatesrc: 'string' #(113)!\nhovertext: 'array' #(114)!\nhovertextsrc: 'string' #(115)!\nids: 'array' #(116)!\nidssrc: 'string' #(117)!\nlegend: 'string' #(118)!\nlegendgroup: 'string' #(119)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(120)!\n    lineposition: 'string' #(121)!\n    shadow: 'string' #(122)!\n    size: number\n    style: 'any' #(123)!\n    textcase: 'any' #(124)!\n    variant: 'any' #(125)!\n    weight: 'integer' #(126)!\n  text: 'string' #(127)!\nlegendrank: 'number' #(128)!\nlegendwidth: 'number' #(129)!\nline:\n  color: 'any' #(130)!\n  dash: 'string' #(131)!\n  smoothing: 'number' #(132)!\n  width: 'number' #(133)!\nmetasrc: 'string' #(134)!\nname: 'string' #(135)!\nncontours: 'integer' #(136)!\nopacity: 'number' #(137)!\nreversescale: 'boolean' #(138)!\nshowlegend: 'boolean' #(139)!\nshowscale: 'boolean' #(140)!\nstream:\n  maxpoints: 'number' #(141)!\n  token: 'string' #(142)!\ntext: 'array' #(143)!\ntextfont:\n  color: any\n  family: 'string' #(144)!\n  lineposition: 'string' #(145)!\n  shadow: 'string' #(146)!\n  size: number\n  style: 'any' #(147)!\n  textcase: 'any' #(148)!\n  variant: 'any' #(149)!\n  weight: 'integer' #(150)!\ntextsrc: 'string' #(151)!\ntexttemplate: 'string' #(152)!\ntranspose: 'boolean' #(153)!\ntype: contour\nuid: 'string' #(154)!\nvisible: 'any' #(155)!\nx: 'array' #(156)!\nxaxis: 'string' #(157)!\nxcalendar: 'any' #(158)!\nxhoverformat: 'string' #(159)!\nxperiodalignment: 'any' #(160)!\nxsrc: 'string' #(161)!\nxtype: 'any' #(162)!\ny: 'array' #(163)!\nyaxis: 'string' #(164)!\nycalendar: 'any' #(165)!\nyhoverformat: 'string' #(166)!\nyperiodalignment: 'any' #(167)!\nysrc: 'string' #(168)!\nytype: 'any' #(169)!\nz: 'array' #(170)!\nzauto: 'boolean' #(171)!\nzhoverformat: 'string' #(172)!\nzmax: 'number' #(173)!\nzmid: 'number' #(174)!\nzmin: 'number' #(175)!\nzorder: 'integer' #(176)!\nzsrc: 'string' #(177)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the contour level attributes are picked by an algorithm. If true, the number of contour levels can be set in <code>ncontours</code>. If false, set the contour level attributes in <code>contours</code>.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the <code>z</code> data are filled in. It is defaulted to true if <code>z</code> is a one dimensional array otherwise it is defaulted to false.</li> <li>Determines the coloring method showing the contour values. If fill, coloring is done evenly between each contour level If heatmap, a heatmap gradient coloring is applied between each contour level. If lines, coloring is done on the contour lines. If none, no coloring is applied on this trace.</li> <li>Sets the end contour level value. Must be more than <code>contours.start</code></li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</li> <li>Sets the constraint operation. <code>=</code> keeps regions equal to <code>value</code>. <code>&lt;</code> and <code>&lt;=</code> keep regions less than <code>value</code>. <code>&gt;</code> and <code>&gt;=</code> keep regions greater than <code>value</code>. <code>[]</code>, <code>()</code>, <code>[)</code>, and <code>(]</code> keep regions inside <code>value[0]</code> and <code>value[1]</code>. <code>][</code>, <code>)(</code>, <code>](</code>, and <code>)[</code> keep regions outside <code>value[0]</code> and <code>value[1]</code>. Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</li> <li>Determines whether to label the contour lines with their values.</li> <li>Determines whether or not the contour lines are drawn. Has an effect only if <code>contours.coloring</code> is set to fill.</li> <li>Sets the step between each contour level. Must be positive.</li> <li>Sets the starting contour level value. Must be less than <code>contours.end</code></li> <li>If <code>levels</code>, the data is represented as a contour plot with multiple levels displayed. If <code>constraint</code>, the data is represented as constraints with the invalid region shaded as specified by the <code>operation</code> and <code>value</code> parameters.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the x coordinate step. See <code>x0</code> for more info.</li> <li>Sets the y coordinate step. See <code>y0</code> for more info.</li> <li>Sets the fill color if <code>contours.type</code> is constraint. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the <code>z</code> data have hover labels associated with them.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the color of the contour level. Has no effect if <code>contours.coloring</code> is set to lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the amount of smoothing for the contour lines, where 0 corresponds to no smoothing.</li> <li>Sets the contour line width in (in px) Defaults to 0.5 when <code>contours.type</code> is levels. Defaults to 2 when <code>contour.type</code> is constraint.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of <code>ncontours</code>. Has an effect only if <code>autocontour</code> is true or if <code>contours.size</code> is missing.</li> <li>Sets the opacity of the trace.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with each z value.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>For this trace it only has an effect if <code>coloring</code> is set to heatmap. Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>x</code>, <code>y</code>, <code>z</code> and <code>text</code>.</li> <li>Transposes the z data.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the x coordinates.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>If array, the heatmap's x coordinates are given by x (the default behavior when <code>x</code> is provided). If scaled, the heatmap's x coordinates are given by x0 and dx (the default behavior when <code>x</code> is not provided).</li> <li>Sets the y coordinates.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the y axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>If array, the heatmap's y coordinates are given by y (the default behavior when <code>y</code> is provided) If scaled, the heatmap's y coordinates are given by y0 and dy (the default behavior when <code>y</code> is not provided)</li> <li>Sets the z data.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Contourcarpet/","title":"Contourcarpet","text":""},{"location":"reference/configuration/Trace/Props/Contourcarpet/#contourcarpet","title":"Contourcarpet","text":""},{"location":"reference/configuration/Trace/Props/Contourcarpet/#overview","title":"Overview","text":"<p>The <code>contourcarpet</code> trace type is used to create contour plots over a carpet plot. It combines the advantages of contour plots with the flexible grid system of carpet plots. This trace is useful for visualizing 3D data on non-uniform or irregular grids, often seen in engineering, physics, or other technical applications.</p> <p>You can control contour levels, colors, and other properties to display data patterns over an underlying carpet plot.</p> <p>Common Uses</p> <ul> <li>Distorted Grids: Visualizing data over irregular grids or non-linear spaces.</li> <li>Engineering Data: Representing data that spans across irregular dimensions.</li> <li>Multivariate Visualization: Handling data with multiple independent variables.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Contourcarpet/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Contourcarpet PlotFilled Contourcarpet PlotContourcarpet with Custom Contour Levels <p>Here's a simple <code>contourcarpet</code> plot showing a contour over a basic carpet plot:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: contourcarpet-data\n    args:\n      - echo\n      - |\n        a,b,x,y,z\n        1,1,2,3,10\n        2,1,3,4,15\n        3,1,4,5,20\n        1,2,5,6,25\n        2,2,6,7,30\n        3,2,7,8,35\n        1,3,8,9,40\n        2,3,9,10,45\n        3,3,10,11,50\ntraces:\n  - name: Carpet Plot\n    model: ${ref(contourcarpet-data)}\n    props:\n      type: carpet\n      a: ?{a}\n      b: ?{b}\n      x: ?{x}\n      y: ?{y}\n  - name: Simple Contourcarpet Plot\n    model: ${ref(contourcarpet-data)}\n    props:\n      type: contourcarpet\n      carpet: ${ref(Carpet Plot)}\n      z: ?{z}\n      colorscale: \"Viridis\"\ncharts:\n  - name: Simple Contourcarpet Chart\n    traces:\n      - ${ref(Simple Contourcarpet Plot)}\n      - ${ref(Carpet Plot)}\n    layout:\n      title:\n        text: Simple Contourcarpet Plot&lt;br&gt;&lt;sub&gt;Contour Plot over a Carpet&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>This example shows a filled contourcarpet plot, where the contours are filled with colors:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: contourcarpet-data-filled\n    args:\n      - echo\n      - |\n        a,b,x,y,z\n        0,0,2,3,5\n        1,0,3,4,10\n        2,0,4,5,15\n        0,1,5,6,20\n        1,1,6,7,25\n        2,1,7,8,30\n        0,2,8,9,35\n        1,2,9,10,40\n        2,2,10,11,45\ntraces:\n  - name: Carpet Plot Filled\n    model: ${ref(contourcarpet-data-filled)}\n    props:\n      type: carpet\n      a: ?{a}\n      b: ?{b}\n      x: ?{x}\n      y: ?{y}\n  - name: Filled Contourcarpet Plot\n    model: ${ref(contourcarpet-data-filled)}\n    props:\n      type: contourcarpet\n      carpet: ${ref(Carpet Plot Filled)}\n      z: ?{z}\n      colorscale: \"Earth\"\n      contours:\n        coloring: \"heatmap\"\n        showlines: true\ncharts:\n  - name: Filled Contourcarpet Chart\n    traces:\n      - ${ref(Filled Contourcarpet Plot)}\n      - ${ref(Carpet Plot Filled)}\n    layout:\n      title:\n        text: Filled Contourcarpet Plot&lt;br&gt;&lt;sub&gt;Filled Contour Plot over a Carpet&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>This example demonstrates how to customize contour levels and coloring in a <code>contourcarpet</code> plot:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: contourcarpet-data-custom\n    args:\n      - echo\n      - |\n        a,b,x,y,z\n        0,0,1,1,10\n        1,0,2,2,20\n        2,0,3,3,30\n        0,1,4,4,40\n        1,1,5,5,50\n        2,1,6,6,60\n        0,2,7,7,70\n        1,2,8,8,80\n        2,2,9,9,90\ntraces:\n  - name: Carpet Plot Custom\n    model: ${ref(contourcarpet-data-custom)}\n    props:\n      type: carpet\n      a: ?{a}\n      b: ?{b}\n      x: ?{x}\n      y: ?{y}\n  - name: Custom Contourcarpet Plot\n    model: ${ref(contourcarpet-data-custom)}\n    props:\n      type: contourcarpet\n      carpet: ${ref(Carpet Plot Custom)}\n      z: ?{z}\n      colorscale: \"Jet\"\n      contours:\n        start: 10\n        end: 90\n        size: 10\ncharts:\n  - name: Custom Contourcarpet Chart\n    traces:\n      - ${ref(Custom Contourcarpet Plot)}\n      - ${ref(Carpet Plot Custom)}\n    layout:\n      title:\n        text: Custom Contourcarpet Plot&lt;br&gt;&lt;sub&gt;Customized Contour Levels on a Carpet&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Contourcarpet/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>contourcarpet</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>a: 'array' #(1)!\nasrc: 'string' #(2)!\natype: 'any' #(3)!\nautocolorscale: 'boolean' #(4)!\nautocontour: 'boolean' #(5)!\nb: 'array' #(6)!\nbsrc: 'string' #(7)!\nbtype: 'any' #(8)!\ncarpet: 'string' #(9)!\ncoloraxis: 'string' #(10)!\ncolorbar:\n  bgcolor: 'any' #(11)!\n  bordercolor: 'any' #(12)!\n  borderwidth: 'number' #(13)!\n  exponentformat: 'any' #(14)!\n  len: 'number' #(15)!\n  lenmode: 'any' #(16)!\n  minexponent: 'number' #(17)!\n  nticks: 'integer' #(18)!\n  orientation: 'any' #(19)!\n  outlinecolor: 'any' #(20)!\n  outlinewidth: 'number' #(21)!\n  separatethousands: 'boolean' #(22)!\n  showexponent: 'any' #(23)!\n  showticklabels: 'boolean' #(24)!\n  showtickprefix: 'any' #(25)!\n  showticksuffix: 'any' #(26)!\n  thickness: 'number' #(27)!\n  thicknessmode: 'any' #(28)!\n  tickangle: 'number' #(29)!\n  tickcolor: 'any' #(30)!\n  tickfont:\n    color: any\n    family: 'string' #(31)!\n    lineposition: 'string' #(32)!\n    shadow: 'string' #(33)!\n    size: number\n    style: 'any' #(34)!\n    textcase: 'any' #(35)!\n    variant: 'any' #(36)!\n    weight: 'integer' #(37)!\n  tickformat: 'string' #(38)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(39)!\n  ticklabelposition: 'any' #(40)!\n  ticklabelstep: 'integer' #(41)!\n  ticklen: 'number' #(42)!\n  tickmode: 'any' #(43)!\n  tickprefix: 'string' #(44)!\n  ticks: 'any' #(45)!\n  ticksuffix: 'string' #(46)!\n  ticktext: 'array' #(47)!\n  ticktextsrc: 'string' #(48)!\n  tickvals: 'array' #(49)!\n  tickvalssrc: 'string' #(50)!\n  tickwidth: 'number' #(51)!\n  title:\n    font:\n      color: any\n      family: 'string' #(52)!\n      lineposition: 'string' #(53)!\n      shadow: 'string' #(54)!\n      size: number\n      style: 'any' #(55)!\n      textcase: 'any' #(56)!\n      variant: 'any' #(57)!\n      weight: 'integer' #(58)!\n    side: 'any' #(59)!\n    text: 'string' #(60)!\n  x: 'number' #(61)!\n  xanchor: 'any' #(62)!\n  xpad: 'number' #(63)!\n  xref: 'any' #(64)!\n  y: 'number' #(65)!\n  yanchor: 'any' #(66)!\n  ypad: 'number' #(67)!\n  yref: 'any' #(68)!\ncolorscale: 'any' #(69)!\ncontours:\n  coloring: 'any' #(70)!\n  end: 'number' #(71)!\n  impliedEdits: any\n  labelfont:\n    color: any\n    family: 'string' #(72)!\n    lineposition: 'string' #(73)!\n    shadow: 'string' #(74)!\n    size: number\n    style: 'any' #(75)!\n    textcase: 'any' #(76)!\n    variant: 'any' #(77)!\n    weight: 'integer' #(78)!\n  labelformat: 'string' #(79)!\n  operation: 'any' #(80)!\n  showlabels: 'boolean' #(81)!\n  showlines: 'boolean' #(82)!\n  size: 'number' #(83)!\n  start: 'number' #(84)!\n  type: 'any' #(85)!\ncustomdata: 'array' #(86)!\ncustomdatasrc: 'string' #(87)!\nda: 'number' #(88)!\ndb: 'number' #(89)!\nfillcolor: 'any' #(90)!\nhovertext: 'array' #(91)!\nhovertextsrc: 'string' #(92)!\nids: 'array' #(93)!\nidssrc: 'string' #(94)!\nlegend: 'string' #(95)!\nlegendgroup: 'string' #(96)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(97)!\n    lineposition: 'string' #(98)!\n    shadow: 'string' #(99)!\n    size: number\n    style: 'any' #(100)!\n    textcase: 'any' #(101)!\n    variant: 'any' #(102)!\n    weight: 'integer' #(103)!\n  text: 'string' #(104)!\nlegendrank: 'number' #(105)!\nlegendwidth: 'number' #(106)!\nline:\n  color: 'any' #(107)!\n  dash: 'string' #(108)!\n  smoothing: 'number' #(109)!\n  width: 'number' #(110)!\nmetasrc: 'string' #(111)!\nname: 'string' #(112)!\nncontours: 'integer' #(113)!\nopacity: 'number' #(114)!\nreversescale: 'boolean' #(115)!\nshowlegend: 'boolean' #(116)!\nshowscale: 'boolean' #(117)!\nstream:\n  maxpoints: 'number' #(118)!\n  token: 'string' #(119)!\ntext: 'array' #(120)!\ntextsrc: 'string' #(121)!\ntranspose: 'boolean' #(122)!\ntype: contourcarpet\nuid: 'string' #(123)!\nvisible: 'any' #(124)!\nxaxis: 'string' #(125)!\nyaxis: 'string' #(126)!\nz: 'array' #(127)!\nzauto: 'boolean' #(128)!\nzmax: 'number' #(129)!\nzmid: 'number' #(130)!\nzmin: 'number' #(131)!\nzorder: 'integer' #(132)!\nzsrc: 'string' #(133)!\n</code></pre> <ol> <li>Sets the x coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>a</code>.</li> <li>If array, the heatmap's x coordinates are given by x (the default behavior when <code>x</code> is provided). If scaled, the heatmap's x coordinates are given by x0 and dx (the default behavior when <code>x</code> is not provided).</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the contour level attributes are picked by an algorithm. If true, the number of contour levels can be set in <code>ncontours</code>. If false, set the contour level attributes in <code>contours</code>.</li> <li>Sets the y coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>b</code>.</li> <li>If array, the heatmap's y coordinates are given by y (the default behavior when <code>y</code> is provided) If scaled, the heatmap's y coordinates are given by y0 and dy (the default behavior when <code>y</code> is not provided)</li> <li>The <code>carpet</code> of the carpet axes on which this contour trace lies</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Determines the coloring method showing the contour values. If fill, coloring is done evenly between each contour level If lines, coloring is done on the contour lines. If none, no coloring is applied on this trace.</li> <li>Sets the end contour level value. Must be more than <code>contours.start</code></li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</li> <li>Sets the constraint operation. <code>=</code> keeps regions equal to <code>value</code>. <code>&lt;</code> and <code>&lt;=</code> keep regions less than <code>value</code>. <code>&gt;</code> and <code>&gt;=</code> keep regions greater than <code>value</code>. <code>[]</code>, <code>()</code>, <code>[)</code>, and <code>(]</code> keep regions inside <code>value[0]</code> and <code>value[1]</code>. <code>][</code>, <code>)(</code>, <code>](</code>, and <code>)[</code> keep regions outside <code>value[0]</code> and <code>value[1]</code>. Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</li> <li>Determines whether to label the contour lines with their values.</li> <li>Determines whether or not the contour lines are drawn. Has an effect only if <code>contours.coloring</code> is set to fill.</li> <li>Sets the step between each contour level. Must be positive.</li> <li>Sets the starting contour level value. Must be less than <code>contours.end</code></li> <li>If <code>levels</code>, the data is represented as a contour plot with multiple levels displayed. If <code>constraint</code>, the data is represented as constraints with the invalid region shaded as specified by the <code>operation</code> and <code>value</code> parameters.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the x coordinate step. See <code>x0</code> for more info.</li> <li>Sets the y coordinate step. See <code>y0</code> for more info.</li> <li>Sets the fill color if <code>contours.type</code> is constraint. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the color of the contour level. Has no effect if <code>contours.coloring</code> is set to lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the amount of smoothing for the contour lines, where 0 corresponds to no smoothing.</li> <li>Sets the contour line width in (in px) Defaults to 0.5 when <code>contours.type</code> is levels. Defaults to 2 when <code>contour.type</code> is constraint.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of <code>ncontours</code>. Has an effect only if <code>autocontour</code> is true or if <code>contours.size</code> is missing.</li> <li>Sets the opacity of the trace.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with each z value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Transposes the z data.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the z data.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Densitymap/","title":"Densitymap","text":""},{"location":"reference/configuration/Trace/Props/Densitymap/#densitymap","title":"Densitymap","text":""},{"location":"reference/configuration/Trace/Props/Densitymap/#overview","title":"Overview","text":"<p>The <code>densitymap</code> trace type is used to create density maps on a MabLibre layer. This is commonly used to visualize the density of points in a geographical area. Density maps can help in identifying hotspots or areas with a higher concentration of data points.</p> <p>You can customize the colorscale, radius of influence for each point, and other properties to fine-tune the visualization.</p> <p>Common Uses</p> <ul> <li>Geospatial Data Analysis: Identifying hotspots in geographic data, such as crime rates or customer locations.</li> <li>Event Density: Visualizing the concentration of events or occurrences across regions.</li> <li>Heatmap for Geographic Points: Creating heatmaps based on spatial data distributions on a map.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Densitymap/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Densitymap PlotDensitymap with Custom RadiusDensitymap with Custom Colorscale <p>Here's a simple <code>densitymap</code> plot showing the density of random points on a MabLibre map:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: densitymap-data\n    args:\n      - echo\n      - |\n        lat,lon\n        37.7749,-122.4194\n        34.0522,-118.2437\n        40.7128,-74.0060\n        41.8781,-87.6298\n        29.7604,-95.3698\ntraces:\n  - name: Simple Densitymap Plot\n    model: ${ref(densitymap-data)}\n    props:\n      type: densitymap\n      lat: ?{lat}\n      lon: ?{lon}\n      radius: 10\n      colorscale: \"Viridis\"\n      zmin: 0\n      zmax: 100\ncharts:\n  - name: Simple Densitymap Chart\n    traces:\n      - ${ref(Simple Densitymap Plot)}\n    layout:\n      title:\n        text: Simple Densitymap Plot&lt;br&gt;&lt;sub&gt;Spatial Data Density&lt;/sub&gt;\n      mapbox:\n        style: \"carto-positron\"\n        zoom: 3\n        center:\n          lat: 37\n          lon: -95\n</code></pre> <p>This example demonstrates a <code>densitymap</code> plot with a custom radius for the points, which influences how smooth the heatmap appears:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: densitymap-data-radius\n    args:\n      - echo\n      - |\n        lat,lon\n        51.5074,-0.1278\n        48.8566,2.3522\n        52.5200,13.4050\n        40.7128,-74.0060\n        34.0522,-118.2437\ntraces:\n  - name: Densitymap with Custom Radius\n    model: ${ref(densitymap-data-radius)}\n    props:\n      type: densitymap\n      lat: ?{lat}\n      lon: ?{lon}\n      radius: 20\n      colorscale: \"Jet\"\n      zmin: 0\n      zmax: 50\ncharts:\n  - name: Densitymap Chart with Custom Radius\n    traces:\n      - ${ref(Densitymap with Custom Radius)}\n    layout:\n      title:\n        text: Densitymap Plot with Custom Radius&lt;br&gt;&lt;sub&gt;Radius of Influence on Heatmap&lt;/sub&gt;\n      mapbox:\n        style: \"carto-darkmatter\"\n        zoom: 2\n        center:\n          lat: 50\n          lon: 0\n</code></pre> <p>This example shows a <code>densitymap</code> plot with a custom colorscale and zoom centered on Europe:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: densitymap-data-colorscale\n    args:\n      - echo\n      - |\n        lat,lon\n        48.8566,2.3522\n        41.9028,12.4964\n        52.3676,4.9041\n        40.4168,-3.7038\n        51.1657,10.4515\ntraces:\n  - name: Densitymap with Custom Colorscale\n    model: ${ref(densitymap-data-colorscale)}\n    props:\n      type: densitymap\n      lat: ?{lat}\n      lon: ?{lon}\n      radius: 15\n      colorscale: [[0, \"rgb(255,245,240)\"], [0.5, \"rgb(252,146,114)\"], [1, \"rgb(165,15,21)\"]]\n      zmin: 0\n      zmax: 50\ncharts:\n  - name: Densitymap Chart with Custom Colorscale\n    traces:\n      - ${ref(Densitymap with Custom Colorscale)}\n    layout:\n      title:\n        text: Densitymap Plot with Custom Colorscale&lt;br&gt;&lt;sub&gt;Custom Coloring and Center&lt;/sub&gt;\n      mapbox:\n        style: \"carto-positron\"\n        zoom: 4\n        center:\n          lat: 48\n          lon: 3\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Densitymap/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>densitymap</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\nbelow: 'string' #(2)!\ncoloraxis: 'string' #(3)!\ncolorbar:\n  bgcolor: 'any' #(4)!\n  bordercolor: 'any' #(5)!\n  borderwidth: 'number' #(6)!\n  exponentformat: 'any' #(7)!\n  len: 'number' #(8)!\n  lenmode: 'any' #(9)!\n  minexponent: 'number' #(10)!\n  nticks: 'integer' #(11)!\n  orientation: 'any' #(12)!\n  outlinecolor: 'any' #(13)!\n  outlinewidth: 'number' #(14)!\n  separatethousands: 'boolean' #(15)!\n  showexponent: 'any' #(16)!\n  showticklabels: 'boolean' #(17)!\n  showtickprefix: 'any' #(18)!\n  showticksuffix: 'any' #(19)!\n  thickness: 'number' #(20)!\n  thicknessmode: 'any' #(21)!\n  tickangle: 'number' #(22)!\n  tickcolor: 'any' #(23)!\n  tickfont:\n    color: any\n    family: 'string' #(24)!\n    lineposition: 'string' #(25)!\n    shadow: 'string' #(26)!\n    size: number\n    style: 'any' #(27)!\n    textcase: 'any' #(28)!\n    variant: 'any' #(29)!\n    weight: 'integer' #(30)!\n  tickformat: 'string' #(31)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(32)!\n  ticklabelposition: 'any' #(33)!\n  ticklabelstep: 'integer' #(34)!\n  ticklen: 'number' #(35)!\n  tickmode: 'any' #(36)!\n  tickprefix: 'string' #(37)!\n  ticks: 'any' #(38)!\n  ticksuffix: 'string' #(39)!\n  ticktext: 'array' #(40)!\n  ticktextsrc: 'string' #(41)!\n  tickvals: 'array' #(42)!\n  tickvalssrc: 'string' #(43)!\n  tickwidth: 'number' #(44)!\n  title:\n    font:\n      color: any\n      family: 'string' #(45)!\n      lineposition: 'string' #(46)!\n      shadow: 'string' #(47)!\n      size: number\n      style: 'any' #(48)!\n      textcase: 'any' #(49)!\n      variant: 'any' #(50)!\n      weight: 'integer' #(51)!\n    side: 'any' #(52)!\n    text: 'string' #(53)!\n  x: 'number' #(54)!\n  xanchor: 'any' #(55)!\n  xpad: 'number' #(56)!\n  xref: 'any' #(57)!\n  y: 'number' #(58)!\n  yanchor: 'any' #(59)!\n  ypad: 'number' #(60)!\n  yref: 'any' #(61)!\ncolorscale: 'any' #(62)!\ncustomdata: 'array' #(63)!\ncustomdatasrc: 'string' #(64)!\nhoverinfo: 'array' #(65)!\nhoverinfosrc: 'string' #(66)!\nhoverlabel:\n  align: 'array' #(67)!\n  alignsrc: 'string' #(68)!\n  bgcolor: 'color | array' #(69)!\n  bgcolorsrc: 'string' #(70)!\n  bordercolor: 'color | array' #(71)!\n  bordercolorsrc: 'string' #(72)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(73)!\n    family: 'string | array' #(74)!\n    familysrc: 'string' #(75)!\n    lineposition: 'array' #(76)!\n    linepositionsrc: 'string' #(77)!\n    shadow: 'string | array' #(78)!\n    shadowsrc: 'string' #(79)!\n    size: number | array\n    sizesrc: 'string' #(80)!\n    style: 'array' #(81)!\n    stylesrc: 'string' #(82)!\n    textcase: 'array' #(83)!\n    textcasesrc: 'string' #(84)!\n    variant: 'array' #(85)!\n    variantsrc: 'string' #(86)!\n    weight: 'integer | array' #(87)!\n    weightsrc: 'string' #(88)!\n  namelength: 'integer | array' #(89)!\n  namelengthsrc: 'string' #(90)!\nhovertemplate: 'string | array' #(91)!\nhovertemplatesrc: 'string' #(92)!\nhovertext: 'string | array' #(93)!\nhovertextsrc: 'string' #(94)!\nids: 'array' #(95)!\nidssrc: 'string' #(96)!\nlat: 'array' #(97)!\nlatsrc: 'string' #(98)!\nlegend: 'string' #(99)!\nlegendgroup: 'string' #(100)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(101)!\n    lineposition: 'string' #(102)!\n    shadow: 'string' #(103)!\n    size: number\n    style: 'any' #(104)!\n    textcase: 'any' #(105)!\n    variant: 'any' #(106)!\n    weight: 'integer' #(107)!\n  text: 'string' #(108)!\nlegendrank: 'number' #(109)!\nlegendwidth: 'number' #(110)!\nlon: 'array' #(111)!\nlonsrc: 'string' #(112)!\nmetasrc: 'string' #(113)!\nname: 'string' #(114)!\nopacity: 'number' #(115)!\nradius: 'number | array' #(116)!\nradiussrc: 'string' #(117)!\nreversescale: 'boolean' #(118)!\nshowlegend: 'boolean' #(119)!\nshowscale: 'boolean' #(120)!\nstream:\n  maxpoints: 'number' #(121)!\n  token: 'string' #(122)!\nsubplot: 'string' #(123)!\ntext: 'string | array' #(124)!\ntextsrc: 'string' #(125)!\ntype: densitymap\nuid: 'string' #(126)!\nvisible: 'any' #(127)!\nz: 'array' #(128)!\nzauto: 'boolean' #(129)!\nzmax: 'number' #(130)!\nzmid: 'number' #(131)!\nzmin: 'number' #(132)!\nzsrc: 'string' #(133)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines if the densitymap trace will be inserted before the layer with the specified ID. By default, densitymap traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the latitude coordinates (in degrees North).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lat</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the longitude coordinates (in degrees East).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lon</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the radius of influence of one <code>lon</code> / <code>lat</code> point in pixels. Increasing the value makes the densitymap trace smoother, but less detailed.</li> <li>Sets the source reference on Chart Studio Cloud for <code>radius</code>.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a reference between this trace's data coordinates and a map subplot. If map (the default value), the data refer to <code>layout.map</code>. If map2, the data refer to <code>layout.map2</code>, and so on.</li> <li>Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Densitymapbox/","title":"Densitymapbox","text":""},{"location":"reference/configuration/Trace/Props/Densitymapbox/#densitymapbox","title":"Densitymapbox","text":""},{"location":"reference/configuration/Trace/Props/Densitymapbox/#overview","title":"Overview","text":"<p>The <code>densitymapbox</code> trace type is used to create density maps on a Mapbox layer. This is commonly used to visualize the density of points in a geographical area. Density maps can help in identifying hotspots or areas with a higher concentration of data points.</p> <p>You can customize the colorscale, radius of influence for each point, and other properties to fine-tune the visualization.</p> <p>Common Uses</p> <ul> <li>Geospatial Data Analysis: Identifying hotspots in geographic data, such as crime rates or customer locations.</li> <li>Event Density: Visualizing the concentration of events or occurrences across regions.</li> <li>Heatmap for Geographic Points: Creating heatmaps based on spatial data distributions on a map.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Densitymapbox/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Densitymapbox PlotDensitymapbox with Custom RadiusDensitymapbox with Custom Colorscale <p>Here's a simple <code>densitymapbox</code> plot showing the density of random points on a Mapbox map:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: densitymapbox-data\n    args:\n      - echo\n      - |\n        lat,lon\n        37.7749,-122.4194\n        34.0522,-118.2437\n        40.7128,-74.0060\n        41.8781,-87.6298\n        29.7604,-95.3698\ntraces:\n  - name: Simple Densitymapbox Plot\n    model: ${ref(densitymapbox-data)}\n    props:\n      type: densitymapbox\n      lat: ?{lat}\n      lon: ?{lon}\n      radius: 10\n      colorscale: \"Viridis\"\n      zmin: 0\n      zmax: 100\ncharts:\n  - name: Simple Densitymapbox Chart\n    traces:\n      - ${ref(Simple Densitymapbox Plot)}\n    layout:\n      title:\n        text: Simple Densitymapbox Plot&lt;br&gt;&lt;sub&gt;Spatial Data Density&lt;/sub&gt;\n      mapbox:\n        style: \"carto-positron\"\n        zoom: 3\n        center:\n          lat: 37\n          lon: -95\n</code></pre> <p>This example demonstrates a <code>densitymapbox</code> plot with a custom radius for the points, which influences how smooth the heatmap appears:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: densitymapbox-data-radius\n    args:\n      - echo\n      - |\n        lat,lon\n        51.5074,-0.1278\n        48.8566,2.3522\n        52.5200,13.4050\n        40.7128,-74.0060\n        34.0522,-118.2437\ntraces:\n  - name: Densitymapbox with Custom Radius\n    model: ${ref(densitymapbox-data-radius)}\n    props:\n      type: densitymapbox\n      lat: ?{lat}\n      lon: ?{lon}\n      radius: 20\n      colorscale: \"Jet\"\n      zmin: 0\n      zmax: 50\ncharts:\n  - name: Densitymapbox Chart with Custom Radius\n    traces:\n      - ${ref(Densitymapbox with Custom Radius)}\n    layout:\n      title:\n        text: Densitymapbox Plot with Custom Radius&lt;br&gt;&lt;sub&gt;Radius of Influence on Heatmap&lt;/sub&gt;\n      mapbox:\n        style: \"carto-darkmatter\"\n        zoom: 2\n        center:\n          lat: 50\n          lon: 0\n</code></pre> <p>This example shows a <code>densitymapbox</code> plot with a custom colorscale and zoom centered on Europe:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: densitymapbox-data-colorscale\n    args:\n      - echo\n      - |\n        lat,lon\n        48.8566,2.3522\n        41.9028,12.4964\n        52.3676,4.9041\n        40.4168,-3.7038\n        51.1657,10.4515\ntraces:\n  - name: Densitymapbox with Custom Colorscale\n    model: ${ref(densitymapbox-data-colorscale)}\n    props:\n      type: densitymapbox\n      lat: ?{lat}\n      lon: ?{lon}\n      radius: 15\n      colorscale: [[0, \"rgb(255,245,240)\"], [0.5, \"rgb(252,146,114)\"], [1, \"rgb(165,15,21)\"]]\n      zmin: 0\n      zmax: 50\ncharts:\n  - name: Densitymapbox Chart with Custom Colorscale\n    traces:\n      - ${ref(Densitymapbox with Custom Colorscale)}\n    layout:\n      title:\n        text: Densitymapbox Plot with Custom Colorscale&lt;br&gt;&lt;sub&gt;Custom Coloring and Center&lt;/sub&gt;\n      mapbox:\n        style: \"carto-positron\"\n        zoom: 4\n        center:\n          lat: 48\n          lon: 3\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Densitymapbox/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>densitymapbox</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\nbelow: 'string' #(2)!\ncoloraxis: 'string' #(3)!\ncolorbar:\n  bgcolor: 'any' #(4)!\n  bordercolor: 'any' #(5)!\n  borderwidth: 'number' #(6)!\n  exponentformat: 'any' #(7)!\n  len: 'number' #(8)!\n  lenmode: 'any' #(9)!\n  minexponent: 'number' #(10)!\n  nticks: 'integer' #(11)!\n  orientation: 'any' #(12)!\n  outlinecolor: 'any' #(13)!\n  outlinewidth: 'number' #(14)!\n  separatethousands: 'boolean' #(15)!\n  showexponent: 'any' #(16)!\n  showticklabels: 'boolean' #(17)!\n  showtickprefix: 'any' #(18)!\n  showticksuffix: 'any' #(19)!\n  thickness: 'number' #(20)!\n  thicknessmode: 'any' #(21)!\n  tickangle: 'number' #(22)!\n  tickcolor: 'any' #(23)!\n  tickfont:\n    color: any\n    family: 'string' #(24)!\n    lineposition: 'string' #(25)!\n    shadow: 'string' #(26)!\n    size: number\n    style: 'any' #(27)!\n    textcase: 'any' #(28)!\n    variant: 'any' #(29)!\n    weight: 'integer' #(30)!\n  tickformat: 'string' #(31)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(32)!\n  ticklabelposition: 'any' #(33)!\n  ticklabelstep: 'integer' #(34)!\n  ticklen: 'number' #(35)!\n  tickmode: 'any' #(36)!\n  tickprefix: 'string' #(37)!\n  ticks: 'any' #(38)!\n  ticksuffix: 'string' #(39)!\n  ticktext: 'array' #(40)!\n  ticktextsrc: 'string' #(41)!\n  tickvals: 'array' #(42)!\n  tickvalssrc: 'string' #(43)!\n  tickwidth: 'number' #(44)!\n  title:\n    font:\n      color: any\n      family: 'string' #(45)!\n      lineposition: 'string' #(46)!\n      shadow: 'string' #(47)!\n      size: number\n      style: 'any' #(48)!\n      textcase: 'any' #(49)!\n      variant: 'any' #(50)!\n      weight: 'integer' #(51)!\n    side: 'any' #(52)!\n    text: 'string' #(53)!\n  x: 'number' #(54)!\n  xanchor: 'any' #(55)!\n  xpad: 'number' #(56)!\n  xref: 'any' #(57)!\n  y: 'number' #(58)!\n  yanchor: 'any' #(59)!\n  ypad: 'number' #(60)!\n  yref: 'any' #(61)!\ncolorscale: 'any' #(62)!\ncustomdata: 'array' #(63)!\ncustomdatasrc: 'string' #(64)!\nhoverinfo: 'array' #(65)!\nhoverinfosrc: 'string' #(66)!\nhoverlabel:\n  align: 'array' #(67)!\n  alignsrc: 'string' #(68)!\n  bgcolor: 'color | array' #(69)!\n  bgcolorsrc: 'string' #(70)!\n  bordercolor: 'color | array' #(71)!\n  bordercolorsrc: 'string' #(72)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(73)!\n    family: 'string | array' #(74)!\n    familysrc: 'string' #(75)!\n    lineposition: 'array' #(76)!\n    linepositionsrc: 'string' #(77)!\n    shadow: 'string | array' #(78)!\n    shadowsrc: 'string' #(79)!\n    size: number | array\n    sizesrc: 'string' #(80)!\n    style: 'array' #(81)!\n    stylesrc: 'string' #(82)!\n    textcase: 'array' #(83)!\n    textcasesrc: 'string' #(84)!\n    variant: 'array' #(85)!\n    variantsrc: 'string' #(86)!\n    weight: 'integer | array' #(87)!\n    weightsrc: 'string' #(88)!\n  namelength: 'integer | array' #(89)!\n  namelengthsrc: 'string' #(90)!\nhovertemplate: 'string | array' #(91)!\nhovertemplatesrc: 'string' #(92)!\nhovertext: 'string | array' #(93)!\nhovertextsrc: 'string' #(94)!\nids: 'array' #(95)!\nidssrc: 'string' #(96)!\nlat: 'array' #(97)!\nlatsrc: 'string' #(98)!\nlegend: 'string' #(99)!\nlegendgroup: 'string' #(100)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(101)!\n    lineposition: 'string' #(102)!\n    shadow: 'string' #(103)!\n    size: number\n    style: 'any' #(104)!\n    textcase: 'any' #(105)!\n    variant: 'any' #(106)!\n    weight: 'integer' #(107)!\n  text: 'string' #(108)!\nlegendrank: 'number' #(109)!\nlegendwidth: 'number' #(110)!\nlon: 'array' #(111)!\nlonsrc: 'string' #(112)!\nmetasrc: 'string' #(113)!\nname: 'string' #(114)!\nopacity: 'number' #(115)!\nradius: 'number | array' #(116)!\nradiussrc: 'string' #(117)!\nreversescale: 'boolean' #(118)!\nshowlegend: 'boolean' #(119)!\nshowscale: 'boolean' #(120)!\nstream:\n  maxpoints: 'number' #(121)!\n  token: 'string' #(122)!\nsubplot: 'string' #(123)!\ntext: 'string | array' #(124)!\ntextsrc: 'string' #(125)!\ntype: densitymapbox\nuid: 'string' #(126)!\nvisible: 'any' #(127)!\nz: 'array' #(128)!\nzauto: 'boolean' #(129)!\nzmax: 'number' #(130)!\nzmid: 'number' #(131)!\nzmin: 'number' #(132)!\nzsrc: 'string' #(133)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines if the densitymapbox trace will be inserted before the layer with the specified ID. By default, densitymapbox traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the latitude coordinates (in degrees North).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lat</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the longitude coordinates (in degrees East).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lon</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the radius of influence of one <code>lon</code> / <code>lat</code> point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.</li> <li>Sets the source reference on Chart Studio Cloud for <code>radius</code>.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>mapbox subplots and traces are deprecated! Please consider switching to <code>map</code> subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If mapbox (the default value), the data refer to <code>layout.mapbox</code>. If mapbox2, the data refer to <code>layout.mapbox2</code>, and so on.</li> <li>Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Funnel/","title":"Funnel","text":""},{"location":"reference/configuration/Trace/Props/Funnel/#funnel","title":"Funnel","text":""},{"location":"reference/configuration/Trace/Props/Funnel/#overview","title":"Overview","text":"<p>The <code>funnel</code> trace type is used to create funnel charts, which visualize data across stages in a process. Funnel charts are often used in sales or marketing to show how data decreases as it passes through each stage (e.g., from leads to closed deals).</p> <p>You can control the orientation, marker styles, and colors to better represent your data flow. Funnel charts help in identifying bottlenecks or drop-off points in a process.</p> <p>Common Uses</p> <ul> <li>Sales Funnels: Tracking the stages from lead generation to closing a deal.</li> <li>Conversion Funnels: Visualizing the steps in a user journey and where drop-offs occur.</li> <li>Progression Through Stages: Representing data at different stages of a sequential process.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Funnel/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Funnel PlotHorizontal Funnel ChartFunnel Chart with Custom MarkersFunnel Chart with Cohorts <p>Here's a simple <code>funnel</code> chart showing data as it moves through various stages:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: funnel-data\n    args:\n      - echo\n      - |\n        stage,value\n        Leads,1000\n        Qualified Leads,750\n        Opportunities,400\n        Proposals,200\n        Closed Deals,100\ntraces:\n  - name: Simple Funnel Plot\n    model: ${ref(funnel-data)}\n    props:\n      type: funnel\n      y: ?{stage}\n      x: ?{value}\n      textinfo: \"value+percent previous\"\n      marker:\n        color: \"#17becf\"\n    order_by: \n      - ?{value desc}\ncharts:\n  - name: Simple Funnel Chart\n    traces:\n      - ${ref(Simple Funnel Plot)}\n    layout:\n      title:\n        text: Simple Funnel Chart&lt;br&gt;&lt;sub&gt;Sales Funnel from Leads to Closed Deals&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Stage\"\n      margin: \n        l: 100\n</code></pre> <p>This example demonstrates a horizontal funnel chart, with stages represented along the x-axis:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: funnel-data-horizontal\n    args:\n      - echo\n      - |\n        stage,value\n        Awareness,5000\n        Interest,3000\n        Consideration,1500\n        Conversion,700\ntraces:\n  - name: Horizontal Funnel Chart Trace\n    model: ${ref(funnel-data-horizontal)}\n    props:\n      type: funnel\n      orientation: v\n      x: ?{stage}\n      y: ?{value}\n      marker:\n        color: \"#ff7f0e\"\n    order_by: \n      - ?{value desc}\ncharts:\n  - name: Horizontal Funnel Chart\n    traces:\n      - ${ref(Horizontal Funnel Chart Trace)}\n    layout:\n      title:\n        text: Horizontal Funnel Chart&lt;br&gt;&lt;sub&gt;Stages of User Journey&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Stage\"\n</code></pre> <p>Here's a funnel chart where each stage has a different color to highlight distinct phases in the process:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: funnel-data-custom\n    args:\n      - echo\n      - |\n        stage,value,color\n        Leads,1200,\"#1f77b4\"\n        MQL,900,\"#ff7f0e\"\n        SQL,600,\"#2ca02c\"\n        Proposal,300,\"#d62728\"\n        Won,100,\"#9467bd\"\ntraces:\n  - name: Custom Markers Funnel Chart\n    model: ${ref(funnel-data-custom)}\n    props:\n      type: funnel\n      y: ?{stage}\n      x: ?{value}\n      marker:\n        color: ?{color}\n      textinfo: \"value+percent\"\n      orientation: h\n    order_by: \n      - ?{value desc}\ncharts:\n  - name: Funnel Chart with Custom Markers\n    traces:\n      - ${ref(Custom Markers Funnel Chart)}\n    layout:\n      title:\n        text: Funnel Chart with Custom Markers&lt;br&gt;&lt;sub&gt;Stages of the Sales Funnel&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Stage\"\n</code></pre> <p>This example demonstrates a funnel chart using cohorts to compare the customer journey across different products:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: funnel-data-cohorts\n    args:\n      - echo\n      - |\n        stage,value,product\n        Awareness,5000,Product A\n        Interest,3000,Product A\n        Consideration,1500,Product A\n        Purchase,700,Product A\n        Awareness,4500,Product B\n        Interest,2800,Product B\n        Consideration,1200,Product B\n        Purchase,500,Product B\n        Awareness,3800,Product C\n        Interest,2200,Product C\n        Consideration,900,Product C\n        Purchase,300,Product C\ntraces:\n  - name: Cohort Funnel Chart\n    model: ${ref(funnel-data-cohorts)}\n    cohort_on: product\n    props:\n      type: funnel\n      y: ?{stage}\n      x: ?{value}\n      textinfo: \"value+percent previous\"\n      marker:\n        colorscale: \"Viridis\"\n    order_by: \n      - ?{ product }\n      - ?{ value desc}\ncharts:\n  - name: Funnel Chart with Cohorts\n    traces:\n      - ${ref(Cohort Funnel Chart)}\n    layout:\n      title:\n        text: Funnel Chart with Cohorts&lt;br&gt;&lt;sub&gt;Customer Journey by Product&lt;/sub&gt;\n      margin: \n        l: 100\n</code></pre> <p>This example uses the <code>cohort_on</code> attribute to create separate funnel charts for each product, allowing for easy comparison of the customer journey across different products.</p> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Funnel/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>funnel</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>alignmentgroup: 'string' #(1)!\ncliponaxis: 'boolean' #(2)!\nconnector:\n  fillcolor: 'any' #(3)!\n  line:\n    color: 'any' #(4)!\n    dash: 'string' #(5)!\n    width: 'number' #(6)!\n  visible: 'boolean' #(7)!\nconstraintext: 'any' #(8)!\ncustomdata: 'array' #(9)!\ncustomdatasrc: 'string' #(10)!\ndx: 'number' #(11)!\ndy: 'number' #(12)!\nhoverinfo: 'array' #(13)!\nhoverinfosrc: 'string' #(14)!\nhoverlabel:\n  align: 'array' #(15)!\n  alignsrc: 'string' #(16)!\n  bgcolor: 'color | array' #(17)!\n  bgcolorsrc: 'string' #(18)!\n  bordercolor: 'color | array' #(19)!\n  bordercolorsrc: 'string' #(20)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(21)!\n    family: 'string | array' #(22)!\n    familysrc: 'string' #(23)!\n    lineposition: 'array' #(24)!\n    linepositionsrc: 'string' #(25)!\n    shadow: 'string | array' #(26)!\n    shadowsrc: 'string' #(27)!\n    size: number | array\n    sizesrc: 'string' #(28)!\n    style: 'array' #(29)!\n    stylesrc: 'string' #(30)!\n    textcase: 'array' #(31)!\n    textcasesrc: 'string' #(32)!\n    variant: 'array' #(33)!\n    variantsrc: 'string' #(34)!\n    weight: 'integer | array' #(35)!\n    weightsrc: 'string' #(36)!\n  namelength: 'integer | array' #(37)!\n  namelengthsrc: 'string' #(38)!\nhovertemplate: 'string | array' #(39)!\nhovertemplatesrc: 'string' #(40)!\nhovertext: 'string | array' #(41)!\nhovertextsrc: 'string' #(42)!\nids: 'array' #(43)!\nidssrc: 'string' #(44)!\ninsidetextanchor: 'any' #(45)!\ninsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(46)!\n  family: 'string | array' #(47)!\n  familysrc: 'string' #(48)!\n  lineposition: 'array' #(49)!\n  linepositionsrc: 'string' #(50)!\n  shadow: 'string | array' #(51)!\n  shadowsrc: 'string' #(52)!\n  size: number | array\n  sizesrc: 'string' #(53)!\n  style: 'array' #(54)!\n  stylesrc: 'string' #(55)!\n  textcase: 'array' #(56)!\n  textcasesrc: 'string' #(57)!\n  variant: 'array' #(58)!\n  variantsrc: 'string' #(59)!\n  weight: 'integer | array' #(60)!\n  weightsrc: 'string' #(61)!\nlegend: 'string' #(62)!\nlegendgroup: 'string' #(63)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(64)!\n    lineposition: 'string' #(65)!\n    shadow: 'string' #(66)!\n    size: number\n    style: 'any' #(67)!\n    textcase: 'any' #(68)!\n    variant: 'any' #(69)!\n    weight: 'integer' #(70)!\n  text: 'string' #(71)!\nlegendrank: 'number' #(72)!\nlegendwidth: 'number' #(73)!\nmarker:\n  autocolorscale: 'boolean' #(74)!\n  cauto: 'boolean' #(75)!\n  cmax: 'number' #(76)!\n  cmid: 'number' #(77)!\n  cmin: 'number' #(78)!\n  color: 'color | array' #(79)!\n  coloraxis: 'string' #(80)!\n  colorbar:\n    bgcolor: 'any' #(81)!\n    bordercolor: 'any' #(82)!\n    borderwidth: 'number' #(83)!\n    exponentformat: 'any' #(84)!\n    len: 'number' #(85)!\n    lenmode: 'any' #(86)!\n    minexponent: 'number' #(87)!\n    nticks: 'integer' #(88)!\n    orientation: 'any' #(89)!\n    outlinecolor: 'any' #(90)!\n    outlinewidth: 'number' #(91)!\n    separatethousands: 'boolean' #(92)!\n    showexponent: 'any' #(93)!\n    showticklabels: 'boolean' #(94)!\n    showtickprefix: 'any' #(95)!\n    showticksuffix: 'any' #(96)!\n    thickness: 'number' #(97)!\n    thicknessmode: 'any' #(98)!\n    tickangle: 'number' #(99)!\n    tickcolor: 'any' #(100)!\n    tickfont:\n      color: any\n      family: 'string' #(101)!\n      lineposition: 'string' #(102)!\n      shadow: 'string' #(103)!\n      size: number\n      style: 'any' #(104)!\n      textcase: 'any' #(105)!\n      variant: 'any' #(106)!\n      weight: 'integer' #(107)!\n    tickformat: 'string' #(108)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(109)!\n    ticklabelposition: 'any' #(110)!\n    ticklabelstep: 'integer' #(111)!\n    ticklen: 'number' #(112)!\n    tickmode: 'any' #(113)!\n    tickprefix: 'string' #(114)!\n    ticks: 'any' #(115)!\n    ticksuffix: 'string' #(116)!\n    ticktext: 'array' #(117)!\n    ticktextsrc: 'string' #(118)!\n    tickvals: 'array' #(119)!\n    tickvalssrc: 'string' #(120)!\n    tickwidth: 'number' #(121)!\n    title:\n      font:\n        color: any\n        family: 'string' #(122)!\n        lineposition: 'string' #(123)!\n        shadow: 'string' #(124)!\n        size: number\n        style: 'any' #(125)!\n        textcase: 'any' #(126)!\n        variant: 'any' #(127)!\n        weight: 'integer' #(128)!\n      side: 'any' #(129)!\n      text: 'string' #(130)!\n    x: 'number' #(131)!\n    xanchor: 'any' #(132)!\n    xpad: 'number' #(133)!\n    xref: 'any' #(134)!\n    y: 'number' #(135)!\n    yanchor: 'any' #(136)!\n    ypad: 'number' #(137)!\n    yref: 'any' #(138)!\n  colorscale: 'any' #(139)!\n  colorsrc: 'string' #(140)!\n  line:\n    autocolorscale: 'boolean' #(141)!\n    cauto: 'boolean' #(142)!\n    cmax: 'number' #(143)!\n    cmid: 'number' #(144)!\n    cmin: 'number' #(145)!\n    color: 'color | array' #(146)!\n    coloraxis: 'string' #(147)!\n    colorscale: 'any' #(148)!\n    colorsrc: 'string' #(149)!\n    reversescale: 'boolean' #(150)!\n    width: 'number | array' #(151)!\n    widthsrc: 'string' #(152)!\n  opacity: 'number | array' #(153)!\n  opacitysrc: 'string' #(154)!\n  reversescale: 'boolean' #(155)!\n  showscale: 'boolean' #(156)!\nmetasrc: 'string' #(157)!\nname: 'string' #(158)!\noffset: 'number' #(159)!\noffsetgroup: 'string' #(160)!\nopacity: 'number' #(161)!\norientation: 'any' #(162)!\noutsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(163)!\n  family: 'string | array' #(164)!\n  familysrc: 'string' #(165)!\n  lineposition: 'array' #(166)!\n  linepositionsrc: 'string' #(167)!\n  shadow: 'string | array' #(168)!\n  shadowsrc: 'string' #(169)!\n  size: number | array\n  sizesrc: 'string' #(170)!\n  style: 'array' #(171)!\n  stylesrc: 'string' #(172)!\n  textcase: 'array' #(173)!\n  textcasesrc: 'string' #(174)!\n  variant: 'array' #(175)!\n  variantsrc: 'string' #(176)!\n  weight: 'integer | array' #(177)!\n  weightsrc: 'string' #(178)!\nshowlegend: 'boolean' #(179)!\nstream:\n  maxpoints: 'number' #(180)!\n  token: 'string' #(181)!\ntext: 'string | array' #(182)!\ntextangle: 'number' #(183)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(184)!\n  family: 'string | array' #(185)!\n  familysrc: 'string' #(186)!\n  lineposition: 'array' #(187)!\n  linepositionsrc: 'string' #(188)!\n  shadow: 'string | array' #(189)!\n  shadowsrc: 'string' #(190)!\n  size: number | array\n  sizesrc: 'string' #(191)!\n  style: 'array' #(192)!\n  stylesrc: 'string' #(193)!\n  textcase: 'array' #(194)!\n  textcasesrc: 'string' #(195)!\n  variant: 'array' #(196)!\n  variantsrc: 'string' #(197)!\n  weight: 'integer | array' #(198)!\n  weightsrc: 'string' #(199)!\ntextinfo: 'string' #(200)!\ntextposition: 'array' #(201)!\ntextpositionsrc: 'string' #(202)!\ntextsrc: 'string' #(203)!\ntexttemplate: 'string | array' #(204)!\ntexttemplatesrc: 'string' #(205)!\ntype: funnel\nuid: 'string' #(206)!\nvisible: 'any' #(207)!\nwidth: 'number' #(208)!\nx: 'array' #(209)!\nxaxis: 'string' #(210)!\nxhoverformat: 'string' #(211)!\nxperiodalignment: 'any' #(212)!\nxsrc: 'string' #(213)!\ny: 'array' #(214)!\nyaxis: 'string' #(215)!\nyhoverformat: 'string' #(216)!\nyperiodalignment: 'any' #(217)!\nysrc: 'string' #(218)!\nzorder: 'integer' #(219)!\n</code></pre> <ol> <li>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</li> <li>Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set <code>xaxis.layer</code> and <code>yaxis.layer</code> to below traces.</li> <li>Sets the fill color.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the line width (in px).</li> <li>Determines if connector regions and lines are drawn.</li> <li>Constrain the size of text inside or outside a bar to be no larger than the bar itself.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the x coordinate step. See <code>x0</code> for more info.</li> <li>Sets the y coordinate step. See <code>y0</code> for more info.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>percentInitial</code>, <code>percentPrevious</code> and <code>percentTotal</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Determines if texts are kept at center or start/end points in <code>textposition</code> inside mode.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the opacity of the bars.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Shifts the position where the bar is drawn (in position axis units). In group barmode, traces that set offset will be excluded and drawn in overlay mode instead.</li> <li>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</li> <li>Sets the opacity of the trace.</li> <li>Sets the orientation of the funnels. With v (h), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only y array is presented or orientation is set to v. Also regarding graphs including only 'horizontal' funnels, autorange on the y-axis are set to reversed.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the angle of the tick labels with respect to the bar. For example, a <code>tickangle</code> of -90 draws the tick labels vertically. With auto the texts may automatically be rotated to fit with the maximum size in bars.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines which trace information appear on the graph. In the case of having multiple funnels, percentages &amp; totals are computed separately (per trace).</li> <li>Specifies the location of the <code>text</code>. inside positions <code>text</code> inside, next to the bar end (rotated and scaled if needed). outside positions <code>text</code> outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. auto tries to position <code>text</code> inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If none, no text appears.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>percentInitial</code>, <code>percentPrevious</code>, <code>percentTotal</code>, <code>label</code> and <code>value</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the bar width (in position axis units).</li> <li>Sets the x coordinates.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the y axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Funnelarea/","title":"Funnelarea","text":""},{"location":"reference/configuration/Trace/Props/Funnelarea/#funnelarea","title":"Funnelarea","text":""},{"location":"reference/configuration/Trace/Props/Funnelarea/#overview","title":"Overview","text":"<p>The <code>funnelarea</code> trace type is used to create funnel area charts, which are similar to funnel charts but are represented as a circular area instead of a linear progression. Funnel area charts are useful for comparing stages in a process with proportional sizes. Each stage is represented as a sector of a circle, and its size represents the magnitude of the data.</p> <p>You can control the colors, labels, and orientation of the funnel area sections to visualize proportional data across different stages.</p> <p>Common Uses</p> <ul> <li>Proportional Stages: Showing the proportion of data at each stage in a circular format.</li> <li>Conversion Rates: Visualizing the drop-off rates in different stages of a process.</li> <li>Sales and Marketing Funnels: Representing funnels like leads-to-sales in a circular format.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Funnelarea/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Funnelarea PlotFunnelarea with Custom ColorsFunnelarea with Hover Info <p>Here's a simple <code>funnelarea</code> plot showing data in a circular funnel format:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: funnelarea-data\n    args:\n      - echo\n      - |\n        stage,value\n        Leads,1000\n        Qualified Leads,750\n        Opportunities,400\n        Proposals,200\n        Closed Deals,100\ntraces:\n  - name: Simple Funnelarea Plot\n    model: ${ref(funnelarea-data)}\n    props:\n      type: funnelarea\n      labels: ?{stage}\n      values: ?{value}\ncharts:\n  - name: Simple Funnelarea Chart\n    traces:\n      - ${ref(Simple Funnelarea Plot)}\n    layout:\n      title:\n        text: Simple Funnelarea Chart&lt;br&gt;&lt;sub&gt;Proportional Sales Funnel&lt;/sub&gt;\n</code></pre> <p>This example shows a <code>funnelarea</code> plot where each stage has a custom color for better differentiation:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: funnelarea-data-custom\n    args:\n      - echo\n      - |\n        stage,value,color\n        Awareness,5000,\"#1f77b4\"\n        Interest,3000,\"#ff7f0e\"\n        Consideration,1500,\"#2ca02c\"\n        Decision,700,\"#d62728\"\n        Purchase,300,\"#9467bd\"\ntraces:\n  - name: Custom Colors Funnelarea Plot\n    model: ${ref(funnelarea-data-custom)}\n    props:\n      type: funnelarea\n      labels: ?{stage}\n      values: ?{value}\n      marker:\n        colors: ?{color}\ncharts:\n  - name: Funnelarea Chart with Custom Colors\n    traces:\n      - ${ref(Custom Colors Funnelarea Plot)}\n    layout:\n      title:\n        text: Funnelarea Chart with Custom Colors&lt;br&gt;&lt;sub&gt;User Journey&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>funnelarea</code> plot with hover information to show the value and percentage for each stage:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: funnelarea-data-hover\n    args:\n      - echo\n      - |\n        stage,value\n        Leads,1000\n        Opportunities,500\n        Proposals,250\n        Won,100\ntraces:\n  - name: Funnelarea Plot with Hover Info\n    model: ${ref(funnelarea-data-hover)}\n    props:\n      type: funnelarea\n      labels: ?{stage}\n      values: ?{value}\n      hoverinfo: \"label+value+percent\"\ncharts:\n  - name: Funnelarea Chart with Hover Info\n    traces:\n      - ${ref(Funnelarea Plot with Hover Info)}\n    layout:\n      title:\n        text: Funnelarea Chart with Hover Info&lt;br&gt;&lt;sub&gt;Sales Funnel with Hover Details&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Funnelarea/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>funnelarea</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>aspectratio: 'number' #(1)!\nbaseratio: 'number' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\ndlabel: 'number' #(5)!\ndomain:\n  column: 'integer' #(6)!\n  row: 'integer' #(7)!\n  x: 'array' #(8)!\n  y: 'array' #(9)!\nhoverinfo: 'array' #(10)!\nhoverinfosrc: 'string' #(11)!\nhoverlabel:\n  align: 'array' #(12)!\n  alignsrc: 'string' #(13)!\n  bgcolor: 'color | array' #(14)!\n  bgcolorsrc: 'string' #(15)!\n  bordercolor: 'color | array' #(16)!\n  bordercolorsrc: 'string' #(17)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(18)!\n    family: 'string | array' #(19)!\n    familysrc: 'string' #(20)!\n    lineposition: 'array' #(21)!\n    linepositionsrc: 'string' #(22)!\n    shadow: 'string | array' #(23)!\n    shadowsrc: 'string' #(24)!\n    size: number | array\n    sizesrc: 'string' #(25)!\n    style: 'array' #(26)!\n    stylesrc: 'string' #(27)!\n    textcase: 'array' #(28)!\n    textcasesrc: 'string' #(29)!\n    variant: 'array' #(30)!\n    variantsrc: 'string' #(31)!\n    weight: 'integer | array' #(32)!\n    weightsrc: 'string' #(33)!\n  namelength: 'integer | array' #(34)!\n  namelengthsrc: 'string' #(35)!\nhovertemplate: 'string | array' #(36)!\nhovertemplatesrc: 'string' #(37)!\nhovertext: 'string | array' #(38)!\nhovertextsrc: 'string' #(39)!\nids: 'array' #(40)!\nidssrc: 'string' #(41)!\ninsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(42)!\n  family: 'string | array' #(43)!\n  familysrc: 'string' #(44)!\n  lineposition: 'array' #(45)!\n  linepositionsrc: 'string' #(46)!\n  shadow: 'string | array' #(47)!\n  shadowsrc: 'string' #(48)!\n  size: number | array\n  sizesrc: 'string' #(49)!\n  style: 'array' #(50)!\n  stylesrc: 'string' #(51)!\n  textcase: 'array' #(52)!\n  textcasesrc: 'string' #(53)!\n  variant: 'array' #(54)!\n  variantsrc: 'string' #(55)!\n  weight: 'integer | array' #(56)!\n  weightsrc: 'string' #(57)!\nlabel0: 'number' #(58)!\nlabels: 'array' #(59)!\nlabelssrc: 'string' #(60)!\nlegend: 'string' #(61)!\nlegendgroup: 'string' #(62)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(63)!\n    lineposition: 'string' #(64)!\n    shadow: 'string' #(65)!\n    size: number\n    style: 'any' #(66)!\n    textcase: 'any' #(67)!\n    variant: 'any' #(68)!\n    weight: 'integer' #(69)!\n  text: 'string' #(70)!\nlegendrank: 'number' #(71)!\nlegendwidth: 'number' #(72)!\nmarker:\n  colors: 'array' #(73)!\n  colorssrc: 'string' #(74)!\n  line:\n    color: 'color | array' #(75)!\n    colorsrc: 'string' #(76)!\n    width: 'number | array' #(77)!\n    widthsrc: 'string' #(78)!\n  pattern:\n    bgcolor: 'color | array' #(79)!\n    bgcolorsrc: 'string' #(80)!\n    fgcolor: 'color | array' #(81)!\n    fgcolorsrc: 'string' #(82)!\n    fgopacity: 'number' #(83)!\n    fillmode: 'any' #(84)!\n    shape: 'array' #(85)!\n    shapesrc: 'string' #(86)!\n    size: 'number | array' #(87)!\n    sizesrc: 'string' #(88)!\n    solidity: 'number | array' #(89)!\n    soliditysrc: 'string' #(90)!\nmetasrc: 'string' #(91)!\nname: 'string' #(92)!\nopacity: 'number' #(93)!\nscalegroup: 'string' #(94)!\nshowlegend: 'boolean' #(95)!\nstream:\n  maxpoints: 'number' #(96)!\n  token: 'string' #(97)!\ntext: 'array' #(98)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(99)!\n  family: 'string | array' #(100)!\n  familysrc: 'string' #(101)!\n  lineposition: 'array' #(102)!\n  linepositionsrc: 'string' #(103)!\n  shadow: 'string | array' #(104)!\n  shadowsrc: 'string' #(105)!\n  size: number | array\n  sizesrc: 'string' #(106)!\n  style: 'array' #(107)!\n  stylesrc: 'string' #(108)!\n  textcase: 'array' #(109)!\n  textcasesrc: 'string' #(110)!\n  variant: 'array' #(111)!\n  variantsrc: 'string' #(112)!\n  weight: 'integer | array' #(113)!\n  weightsrc: 'string' #(114)!\ntextinfo: 'string' #(115)!\ntextposition: 'array' #(116)!\ntextpositionsrc: 'string' #(117)!\ntextsrc: 'string' #(118)!\ntexttemplate: 'string | array' #(119)!\ntexttemplatesrc: 'string' #(120)!\ntitle:\n  font:\n    color: color | array\n    colorsrc: 'string' #(121)!\n    family: 'string | array' #(122)!\n    familysrc: 'string' #(123)!\n    lineposition: 'array' #(124)!\n    linepositionsrc: 'string' #(125)!\n    shadow: 'string | array' #(126)!\n    shadowsrc: 'string' #(127)!\n    size: number | array\n    sizesrc: 'string' #(128)!\n    style: 'array' #(129)!\n    stylesrc: 'string' #(130)!\n    textcase: 'array' #(131)!\n    textcasesrc: 'string' #(132)!\n    variant: 'array' #(133)!\n    variantsrc: 'string' #(134)!\n    weight: 'integer | array' #(135)!\n    weightsrc: 'string' #(136)!\n  position: 'any' #(137)!\n  text: 'string' #(138)!\ntype: funnelarea\nuid: 'string' #(139)!\nvalues: 'array' #(140)!\nvaluessrc: 'string' #(141)!\nvisible: 'any' #(142)!\n</code></pre> <ol> <li>Sets the ratio between height and width</li> <li>Sets the ratio between bottom length and maximum top length.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the label step. See <code>label0</code> for more info.</li> <li>If there is a layout grid, use the domain for this column in the grid for this funnelarea trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this funnelarea trace .</li> <li>Sets the horizontal domain of this funnelarea trace (in plot fraction).</li> <li>Sets the vertical domain of this funnelarea trace (in plot fraction).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>label</code>, <code>color</code>, <code>value</code>, <code>text</code> and <code>percent</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Alternate to <code>labels</code>. Builds a numeric set of labels. Use with <code>dlabel</code> where <code>label0</code> is the starting label and <code>dlabel</code> the step.</li> <li>Sets the sector labels. If <code>labels</code> entries are duplicated, we sum associated <code>values</code> or simply count occurrences if <code>values</code> is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.</li> <li>Sets the source reference on Chart Studio Cloud for <code>labels</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.</li> <li>Sets the source reference on Chart Studio Cloud for <code>colors</code>.</li> <li>Sets the color of the line enclosing each sector. Defaults to the <code>paper_bgcolor</code> value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the line enclosing each sector.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>If there are multiple funnelareas that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each sector. If trace <code>textinfo</code> contains a text flag, these elements will be seen on the chart. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines which trace information appear on the graph.</li> <li>Specifies the location of the <code>textinfo</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>label</code>, <code>color</code>, <code>value</code>, <code>text</code> and <code>percent</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Specifies the location of the <code>title</code>.</li> <li>Sets the title of the chart. If it is empty, no title is displayed.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the values of the sectors. If omitted, we count occurrences of each label.</li> <li>Sets the source reference on Chart Studio Cloud for <code>values</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Heatmap/","title":"Heatmap","text":""},{"location":"reference/configuration/Trace/Props/Heatmap/#heatmap","title":"Heatmap","text":""},{"location":"reference/configuration/Trace/Props/Heatmap/#overview","title":"Overview","text":"<p>The <code>heatmap</code> trace type is used to create heatmaps, which represent data using a grid where values are mapped to colors. Heatmaps are commonly used to visualize matrix-like data, such as correlations, intensity, or frequency distributions.</p> <p>You can customize the colorscale, gridlines, and other properties to fit your data and visualization needs.</p> <p>Common Uses</p> <ul> <li>Correlation Matrices: Visualizing relationships between variables.</li> <li>Frequency Distributions: Showing how frequently data points occur across categories.</li> <li>Geospatial Heatmaps: Visualizing the density or intensity of occurrences in a 2D space.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Heatmap/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Heatmap PlotHeatmap with Categorical AxisHeatmap with Text Annotations <p>Here's a simple <code>heatmap</code> plot showing data values on a 2D grid:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: heatmap-data\n    args:\n      - echo\n      - |\n        x,y,z\n        A,1,5\n        A,2,10\n        A,3,15\n        B,1,20\n        B,2,25\n        B,3,30\n        C,1,35\n        C,2,40\n        C,3,45\ntraces:\n  - name: Simple Heatmap Plot\n    model: ${ref(heatmap-data)}\n    props:\n      type: heatmap\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      colorscale: \"Viridis\"\ncharts:\n  - name: Simple Heatmap Chart\n    traces:\n      - ${ref(Simple Heatmap Plot)}\n    layout:\n      title:\n        text: Simple Heatmap Plot&lt;br&gt;&lt;sub&gt;Data Visualization on a 2D Grid&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>This example shows a <code>heatmap</code> plot with non-numeric x and y axis. </p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: heatmap-data-custom\n    args:\n      - echo\n      - |\n        x,y,z\n        Low,A,0.1\n        Low,B,0.2\n        Low,C,0.3\n        Medium,A,0.4\n        Medium,B,0.5\n        Medium,C,0.6\n        High,A,0.7\n        High,B,0.8\n        High,C,0.9\ntraces:\n  - name: Heatmap with Custom Colorscale\n    model: ${ref(heatmap-data-custom)}\n    props:\n      type: heatmap\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      zmin: 0\n      zmax: 1\ncharts:\n  - name: Heatmap Chart with Categorical Axis\n    traces:\n      - ${ref(Heatmap with Custom Colorscale)}\n    layout:\n      title:\n        text: Heatmap Chart with Categorical Axis&lt;br&gt;&lt;sub&gt;Categorical Data&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Priority Level\"\n        type: \"category\"\n      yaxis:\n        title:\n          text: \"Category\"\n        type: \"category\"\n</code></pre> <p>This example demonstrates a heatmap with text annotations, showing the data values on top of each heatmap cell:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: heatmap-data-annotations\n    args:\n      - echo\n      - |\n        x,y,z\n        Q1,2019,100\n        Q2,2019,150\n        Q3,2019,200\n        Q4,2019,250\n        Q1,2020,300\n        Q2,2020,350\n        Q3,2020,400\n        Q4,2020,450\ntraces:\n  - name: Heatmap with Text Annotations\n    model: ${ref(heatmap-data-annotations)}\n    props:\n      type: heatmap\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      text: ?{z}\n      texttemplate: \"%{text}\"\n      textfont:\n        size: 12\n      colorscale: \"Blues\"\ncharts:\n  - name: Heatmap Chart with Text Annotations\n    traces:\n      - ${ref(Heatmap with Text Annotations)}\n    layout:\n      title:\n        text: Heatmap with Text Annotations&lt;br&gt;&lt;sub&gt;Data Values Displayed on Each Cell&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Quarter\"\n      yaxis:\n        title:\n          text: \"Year\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Heatmap/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>heatmap</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\ncoloraxis: 'string' #(2)!\ncolorbar:\n  bgcolor: 'any' #(3)!\n  bordercolor: 'any' #(4)!\n  borderwidth: 'number' #(5)!\n  exponentformat: 'any' #(6)!\n  len: 'number' #(7)!\n  lenmode: 'any' #(8)!\n  minexponent: 'number' #(9)!\n  nticks: 'integer' #(10)!\n  orientation: 'any' #(11)!\n  outlinecolor: 'any' #(12)!\n  outlinewidth: 'number' #(13)!\n  separatethousands: 'boolean' #(14)!\n  showexponent: 'any' #(15)!\n  showticklabels: 'boolean' #(16)!\n  showtickprefix: 'any' #(17)!\n  showticksuffix: 'any' #(18)!\n  thickness: 'number' #(19)!\n  thicknessmode: 'any' #(20)!\n  tickangle: 'number' #(21)!\n  tickcolor: 'any' #(22)!\n  tickfont:\n    color: any\n    family: 'string' #(23)!\n    lineposition: 'string' #(24)!\n    shadow: 'string' #(25)!\n    size: number\n    style: 'any' #(26)!\n    textcase: 'any' #(27)!\n    variant: 'any' #(28)!\n    weight: 'integer' #(29)!\n  tickformat: 'string' #(30)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(31)!\n  ticklabelposition: 'any' #(32)!\n  ticklabelstep: 'integer' #(33)!\n  ticklen: 'number' #(34)!\n  tickmode: 'any' #(35)!\n  tickprefix: 'string' #(36)!\n  ticks: 'any' #(37)!\n  ticksuffix: 'string' #(38)!\n  ticktext: 'array' #(39)!\n  ticktextsrc: 'string' #(40)!\n  tickvals: 'array' #(41)!\n  tickvalssrc: 'string' #(42)!\n  tickwidth: 'number' #(43)!\n  title:\n    font:\n      color: any\n      family: 'string' #(44)!\n      lineposition: 'string' #(45)!\n      shadow: 'string' #(46)!\n      size: number\n      style: 'any' #(47)!\n      textcase: 'any' #(48)!\n      variant: 'any' #(49)!\n      weight: 'integer' #(50)!\n    side: 'any' #(51)!\n    text: 'string' #(52)!\n  x: 'number' #(53)!\n  xanchor: 'any' #(54)!\n  xpad: 'number' #(55)!\n  xref: 'any' #(56)!\n  y: 'number' #(57)!\n  yanchor: 'any' #(58)!\n  ypad: 'number' #(59)!\n  yref: 'any' #(60)!\ncolorscale: 'any' #(61)!\nconnectgaps: 'boolean' #(62)!\ncustomdata: 'array' #(63)!\ncustomdatasrc: 'string' #(64)!\ndx: 'number' #(65)!\ndy: 'number' #(66)!\nhoverinfo: 'array' #(67)!\nhoverinfosrc: 'string' #(68)!\nhoverlabel:\n  align: 'array' #(69)!\n  alignsrc: 'string' #(70)!\n  bgcolor: 'color | array' #(71)!\n  bgcolorsrc: 'string' #(72)!\n  bordercolor: 'color | array' #(73)!\n  bordercolorsrc: 'string' #(74)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(75)!\n    family: 'string | array' #(76)!\n    familysrc: 'string' #(77)!\n    lineposition: 'array' #(78)!\n    linepositionsrc: 'string' #(79)!\n    shadow: 'string | array' #(80)!\n    shadowsrc: 'string' #(81)!\n    size: number | array\n    sizesrc: 'string' #(82)!\n    style: 'array' #(83)!\n    stylesrc: 'string' #(84)!\n    textcase: 'array' #(85)!\n    textcasesrc: 'string' #(86)!\n    variant: 'array' #(87)!\n    variantsrc: 'string' #(88)!\n    weight: 'integer | array' #(89)!\n    weightsrc: 'string' #(90)!\n  namelength: 'integer | array' #(91)!\n  namelengthsrc: 'string' #(92)!\nhoverongaps: 'boolean' #(93)!\nhovertemplate: 'string | array' #(94)!\nhovertemplatesrc: 'string' #(95)!\nhovertext: 'array' #(96)!\nhovertextsrc: 'string' #(97)!\nids: 'array' #(98)!\nidssrc: 'string' #(99)!\nlegend: 'string' #(100)!\nlegendgroup: 'string' #(101)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(102)!\n    lineposition: 'string' #(103)!\n    shadow: 'string' #(104)!\n    size: number\n    style: 'any' #(105)!\n    textcase: 'any' #(106)!\n    variant: 'any' #(107)!\n    weight: 'integer' #(108)!\n  text: 'string' #(109)!\nlegendrank: 'number' #(110)!\nlegendwidth: 'number' #(111)!\nmetasrc: 'string' #(112)!\nname: 'string' #(113)!\nopacity: 'number' #(114)!\nreversescale: 'boolean' #(115)!\nshowlegend: 'boolean' #(116)!\nshowscale: 'boolean' #(117)!\nstream:\n  maxpoints: 'number' #(118)!\n  token: 'string' #(119)!\ntext: 'array' #(120)!\ntextfont:\n  color: any\n  family: 'string' #(121)!\n  lineposition: 'string' #(122)!\n  shadow: 'string' #(123)!\n  size: number\n  style: 'any' #(124)!\n  textcase: 'any' #(125)!\n  variant: 'any' #(126)!\n  weight: 'integer' #(127)!\ntextsrc: 'string' #(128)!\ntexttemplate: 'string' #(129)!\ntranspose: 'boolean' #(130)!\ntype: heatmap\nuid: 'string' #(131)!\nvisible: 'any' #(132)!\nx: 'array' #(133)!\nxaxis: 'string' #(134)!\nxcalendar: 'any' #(135)!\nxgap: 'number' #(136)!\nxhoverformat: 'string' #(137)!\nxperiodalignment: 'any' #(138)!\nxsrc: 'string' #(139)!\nxtype: 'any' #(140)!\ny: 'array' #(141)!\nyaxis: 'string' #(142)!\nycalendar: 'any' #(143)!\nygap: 'number' #(144)!\nyhoverformat: 'string' #(145)!\nyperiodalignment: 'any' #(146)!\nysrc: 'string' #(147)!\nytype: 'any' #(148)!\nz: 'array' #(149)!\nzauto: 'boolean' #(150)!\nzhoverformat: 'string' #(151)!\nzmax: 'number' #(152)!\nzmid: 'number' #(153)!\nzmin: 'number' #(154)!\nzorder: 'integer' #(155)!\nzsmooth: 'any' #(156)!\nzsrc: 'string' #(157)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the <code>z</code> data are filled in. It is defaulted to true if <code>z</code> is a one dimensional array and <code>zsmooth</code> is not false; otherwise it is defaulted to false.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the x coordinate step. See <code>x0</code> for more info.</li> <li>Sets the y coordinate step. See <code>y0</code> for more info.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the <code>z</code> data have hover labels associated with them.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with each z value.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>x</code>, <code>y</code>, <code>z</code> and <code>text</code>.</li> <li>Transposes the z data.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the x coordinates.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the horizontal gap (in pixels) between bricks.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>If array, the heatmap's x coordinates are given by x (the default behavior when <code>x</code> is provided). If scaled, the heatmap's x coordinates are given by x0 and dx (the default behavior when <code>x</code> is not provided).</li> <li>Sets the y coordinates.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the vertical gap (in pixels) between bricks.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the y axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>If array, the heatmap's y coordinates are given by y (the default behavior when <code>y</code> is provided) If scaled, the heatmap's y coordinates are given by y0 and dy (the default behavior when <code>y</code> is not provided)</li> <li>Sets the z data.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> <li>Picks a smoothing algorithm use to smooth <code>z</code> data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Histogram/","title":"Histogram","text":""},{"location":"reference/configuration/Trace/Props/Histogram/#histogram","title":"Histogram","text":""},{"location":"reference/configuration/Trace/Props/Histogram/#overview","title":"Overview","text":"<p>The <code>histogram</code> trace type is used to create histograms, which represent the distribution of numerical data by dividing the data into bins and counting the number of occurrences in each bin. Histograms are great for understanding data distribution, variability, and patterns.</p> <p>You can customize bin size, orientation, and colors to fit your data. Histograms are especially useful in statistical analysis, data science, and exploratory data analysis.</p> <p>Common Uses</p> <ul> <li>Data Distribution: Visualizing how data points are distributed across different ranges.</li> <li>Frequency Analysis: Showing the frequency of values within specific intervals.</li> <li>Statistical Summaries: Understanding the spread, central tendency, and outliers in data.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Histogram/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Histogram PlotHorizontal Histogram PlotStacked Histogram Plot <p>Here's a simple <code>histogram</code> plot showing the distribution of data across different bins:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: histogram-data\n    args:\n      - echo\n      - |\n        value\n        10\n        20\n        15\n        10\n        5\n        25\n        30\n        15\n        20\n        10\ntraces:\n  - name: Simple Histogram Plot\n    model: ${ref(histogram-data)}\n    props:\n      type: histogram\n      x: ?{value}\n      nbinsx: 5\n      marker:\n        color: \"#17becf\"\ncharts:\n  - name: Simple Histogram Chart\n    traces:\n      - ${ref(Simple Histogram Plot)}\n    layout:\n      title:\n        text: Simple Histogram Plot&lt;br&gt;&lt;sub&gt;Data Distribution Across Bins&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Value\"\n      yaxis:\n        title:\n          text: \"Count\"\n      bargap: 0.05\n</code></pre> <p>This example shows a horizontal <code>histogram</code> plot, where the bins are displayed along the y-axis:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: histogram-data-horizontal\n    args:\n      - echo\n      - |\n        value\n        1\n        3\n        2\n        5\n        4\n        3\n        3\n        3\n        3\n        4\n        1\n        3\n        4\n        3\n        3\n        4\n        1\n        2\n        3\n        5\n        2\n        3\n        4\ntraces:\n  - name: Horizontal Histogram Plot\n    model: ${ref(histogram-data-horizontal)}\n    props:\n      type: histogram\n      y: ?{value}\n      nbinsy: 2\n      marker:\n        color: \"#ff7f0e\"\n      orientation: h\ncharts:\n  - name: Horizontal Histogram Chart\n    traces:\n      - ${ref(Horizontal Histogram Plot)}\n    layout:\n      title:\n        text: Horizontal Histogram Plot&lt;br&gt;&lt;sub&gt;Data Distribution in a Horizontal Format&lt;/sub&gt;\n      yaxis:\n        title:\n          text: \"Value\"\n      xaxis:\n        title:\n          text: \"Count\"\n      bargap: 0.05\n</code></pre> <p>Here's a stacked <code>histogram</code> plot showing the distribution of two different datasets stacked on top of each other:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: histogram-data-stacked\n    args:\n      - echo\n      - |\n        group,value\n        A,1\n        A,2\n        A,2\n        A,3\n        B,3\n        B,4\n        B,5\n        B,5\n        B,6\ntraces:\n  - name: Histogram Groups\n    model: ${ref(histogram-data-stacked)}\n    cohort_on: '\"group\"'\n    columns: \n      color: |\n        case \n          when \"group\" = 'A' Then '#1f77b4' \n          when \"group\" = 'B' THEN '#ff7f0e' \n          else null \n        end \n    props:\n      type: histogram\n      x: ?{value}\n      marker:\n        color: column(color) \ncharts:\n  - name: Stacked Histogram Chart\n    traces:\n      - ${ref(Histogram Groups)}\n    layout:\n      title:\n        text: Stacked Histogram Chart&lt;br&gt;&lt;sub&gt;Data Distribution for Two Groups&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Value\"\n      yaxis:\n        title:\n          text: \"Count\"\n      barmode: \"stack\"\n      bargap: .05\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Histogram/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>histogram</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>alignmentgroup: 'string' #(1)!\nautobinx: 'boolean' #(2)!\nautobiny: 'boolean' #(3)!\nbingroup: 'string' #(4)!\ncliponaxis: 'boolean' #(5)!\nconstraintext: 'any' #(6)!\ncumulative:\n  currentbin: 'any' #(7)!\n  direction: 'any' #(8)!\n  enabled: 'boolean' #(9)!\ncustomdata: 'array' #(10)!\ncustomdatasrc: 'string' #(11)!\nerror_x:\n  array: 'array' #(12)!\n  arrayminus: 'array' #(13)!\n  arrayminussrc: 'string' #(14)!\n  arraysrc: 'string' #(15)!\n  color: 'any' #(16)!\n  copy_ystyle: boolean\n  symmetric: 'boolean' #(17)!\n  thickness: 'number' #(18)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(19)!\n  value: 'number' #(20)!\n  valueminus: 'number' #(21)!\n  visible: 'boolean' #(22)!\n  width: 'number' #(23)!\nerror_y:\n  array: 'array' #(24)!\n  arrayminus: 'array' #(25)!\n  arrayminussrc: 'string' #(26)!\n  arraysrc: 'string' #(27)!\n  color: 'any' #(28)!\n  symmetric: 'boolean' #(29)!\n  thickness: 'number' #(30)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(31)!\n  value: 'number' #(32)!\n  valueminus: 'number' #(33)!\n  visible: 'boolean' #(34)!\n  width: 'number' #(35)!\nhistfunc: 'any' #(36)!\nhistnorm: 'any' #(37)!\nhoverinfo: 'array' #(38)!\nhoverinfosrc: 'string' #(39)!\nhoverlabel:\n  align: 'array' #(40)!\n  alignsrc: 'string' #(41)!\n  bgcolor: 'color | array' #(42)!\n  bgcolorsrc: 'string' #(43)!\n  bordercolor: 'color | array' #(44)!\n  bordercolorsrc: 'string' #(45)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(46)!\n    family: 'string | array' #(47)!\n    familysrc: 'string' #(48)!\n    lineposition: 'array' #(49)!\n    linepositionsrc: 'string' #(50)!\n    shadow: 'string | array' #(51)!\n    shadowsrc: 'string' #(52)!\n    size: number | array\n    sizesrc: 'string' #(53)!\n    style: 'array' #(54)!\n    stylesrc: 'string' #(55)!\n    textcase: 'array' #(56)!\n    textcasesrc: 'string' #(57)!\n    variant: 'array' #(58)!\n    variantsrc: 'string' #(59)!\n    weight: 'integer | array' #(60)!\n    weightsrc: 'string' #(61)!\n  namelength: 'integer | array' #(62)!\n  namelengthsrc: 'string' #(63)!\nhovertemplate: 'string | array' #(64)!\nhovertemplatesrc: 'string' #(65)!\nhovertext: 'string | array' #(66)!\nhovertextsrc: 'string' #(67)!\nids: 'array' #(68)!\nidssrc: 'string' #(69)!\ninsidetextanchor: 'any' #(70)!\ninsidetextfont:\n  color: any\n  family: 'string' #(71)!\n  lineposition: 'string' #(72)!\n  shadow: 'string' #(73)!\n  size: number\n  style: 'any' #(74)!\n  textcase: 'any' #(75)!\n  variant: 'any' #(76)!\n  weight: 'integer' #(77)!\nlegend: 'string' #(78)!\nlegendgroup: 'string' #(79)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(80)!\n    lineposition: 'string' #(81)!\n    shadow: 'string' #(82)!\n    size: number\n    style: 'any' #(83)!\n    textcase: 'any' #(84)!\n    variant: 'any' #(85)!\n    weight: 'integer' #(86)!\n  text: 'string' #(87)!\nlegendrank: 'number' #(88)!\nlegendwidth: 'number' #(89)!\nmarker:\n  autocolorscale: 'boolean' #(90)!\n  cauto: 'boolean' #(91)!\n  cmax: 'number' #(92)!\n  cmid: 'number' #(93)!\n  cmin: 'number' #(94)!\n  color: 'color | array' #(95)!\n  coloraxis: 'string' #(96)!\n  colorbar:\n    bgcolor: 'any' #(97)!\n    bordercolor: 'any' #(98)!\n    borderwidth: 'number' #(99)!\n    exponentformat: 'any' #(100)!\n    len: 'number' #(101)!\n    lenmode: 'any' #(102)!\n    minexponent: 'number' #(103)!\n    nticks: 'integer' #(104)!\n    orientation: 'any' #(105)!\n    outlinecolor: 'any' #(106)!\n    outlinewidth: 'number' #(107)!\n    separatethousands: 'boolean' #(108)!\n    showexponent: 'any' #(109)!\n    showticklabels: 'boolean' #(110)!\n    showtickprefix: 'any' #(111)!\n    showticksuffix: 'any' #(112)!\n    thickness: 'number' #(113)!\n    thicknessmode: 'any' #(114)!\n    tickangle: 'number' #(115)!\n    tickcolor: 'any' #(116)!\n    tickfont:\n      color: any\n      family: 'string' #(117)!\n      lineposition: 'string' #(118)!\n      shadow: 'string' #(119)!\n      size: number\n      style: 'any' #(120)!\n      textcase: 'any' #(121)!\n      variant: 'any' #(122)!\n      weight: 'integer' #(123)!\n    tickformat: 'string' #(124)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(125)!\n    ticklabelposition: 'any' #(126)!\n    ticklabelstep: 'integer' #(127)!\n    ticklen: 'number' #(128)!\n    tickmode: 'any' #(129)!\n    tickprefix: 'string' #(130)!\n    ticks: 'any' #(131)!\n    ticksuffix: 'string' #(132)!\n    ticktext: 'array' #(133)!\n    ticktextsrc: 'string' #(134)!\n    tickvals: 'array' #(135)!\n    tickvalssrc: 'string' #(136)!\n    tickwidth: 'number' #(137)!\n    title:\n      font:\n        color: any\n        family: 'string' #(138)!\n        lineposition: 'string' #(139)!\n        shadow: 'string' #(140)!\n        size: number\n        style: 'any' #(141)!\n        textcase: 'any' #(142)!\n        variant: 'any' #(143)!\n        weight: 'integer' #(144)!\n      side: 'any' #(145)!\n      text: 'string' #(146)!\n    x: 'number' #(147)!\n    xanchor: 'any' #(148)!\n    xpad: 'number' #(149)!\n    xref: 'any' #(150)!\n    y: 'number' #(151)!\n    yanchor: 'any' #(152)!\n    ypad: 'number' #(153)!\n    yref: 'any' #(154)!\n  colorscale: 'any' #(155)!\n  colorsrc: 'string' #(156)!\n  line:\n    autocolorscale: 'boolean' #(157)!\n    cauto: 'boolean' #(158)!\n    cmax: 'number' #(159)!\n    cmid: 'number' #(160)!\n    cmin: 'number' #(161)!\n    color: 'color | array' #(162)!\n    coloraxis: 'string' #(163)!\n    colorscale: 'any' #(164)!\n    colorsrc: 'string' #(165)!\n    reversescale: 'boolean' #(166)!\n    width: 'number | array' #(167)!\n    widthsrc: 'string' #(168)!\n  opacity: 'number | array' #(169)!\n  opacitysrc: 'string' #(170)!\n  pattern:\n    bgcolor: 'color | array' #(171)!\n    bgcolorsrc: 'string' #(172)!\n    fgcolor: 'color | array' #(173)!\n    fgcolorsrc: 'string' #(174)!\n    fgopacity: 'number' #(175)!\n    fillmode: 'any' #(176)!\n    shape: 'array' #(177)!\n    shapesrc: 'string' #(178)!\n    size: 'number | array' #(179)!\n    sizesrc: 'string' #(180)!\n    solidity: 'number | array' #(181)!\n    soliditysrc: 'string' #(182)!\n  reversescale: 'boolean' #(183)!\n  showscale: 'boolean' #(184)!\nmetasrc: 'string' #(185)!\nname: 'string' #(186)!\nnbinsx: 'integer' #(187)!\nnbinsy: 'integer' #(188)!\noffsetgroup: 'string' #(189)!\nopacity: 'number' #(190)!\norientation: 'any' #(191)!\noutsidetextfont:\n  color: any\n  family: 'string' #(192)!\n  lineposition: 'string' #(193)!\n  shadow: 'string' #(194)!\n  size: number\n  style: 'any' #(195)!\n  textcase: 'any' #(196)!\n  variant: 'any' #(197)!\n  weight: 'integer' #(198)!\nselected:\n  marker:\n    color: 'any' #(199)!\n    opacity: 'number' #(200)!\n  textfont:\n    color: 'any' #(201)!\nshowlegend: 'boolean' #(202)!\nstream:\n  maxpoints: 'number' #(203)!\n  token: 'string' #(204)!\ntext: 'string | array' #(205)!\ntextangle: 'number' #(206)!\ntextfont:\n  color: any\n  family: 'string' #(207)!\n  lineposition: 'string' #(208)!\n  shadow: 'string' #(209)!\n  size: number\n  style: 'any' #(210)!\n  textcase: 'any' #(211)!\n  variant: 'any' #(212)!\n  weight: 'integer' #(213)!\ntextposition: 'any' #(214)!\ntextsrc: 'string' #(215)!\ntexttemplate: 'string' #(216)!\ntype: histogram\nuid: 'string' #(217)!\nunselected:\n  marker:\n    color: 'any' #(218)!\n    opacity: 'number' #(219)!\n  textfont:\n    color: 'any' #(220)!\nvisible: 'any' #(221)!\nx: 'array' #(222)!\nxaxis: 'string' #(223)!\nxbins: {}\nxcalendar: 'any' #(224)!\nxhoverformat: 'string' #(225)!\nxsrc: 'string' #(226)!\ny: 'array' #(227)!\nyaxis: 'string' #(228)!\nybins: {}\nycalendar: 'any' #(229)!\nyhoverformat: 'string' #(230)!\nysrc: 'string' #(231)!\nzorder: 'integer' #(232)!\n</code></pre> <ol> <li>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</li> <li>Obsolete: since v1.42 each bin attribute is auto-determined separately and <code>autobinx</code> is not needed. However, we accept <code>autobinx: true</code> or <code>false</code> and will update <code>xbins</code> accordingly before deleting <code>autobinx</code> from the trace.</li> <li>Obsolete: since v1.42 each bin attribute is auto-determined separately and <code>autobiny</code> is not needed. However, we accept <code>autobiny: true</code> or <code>false</code> and will update <code>ybins</code> accordingly before deleting <code>autobiny</code> from the trace.</li> <li>Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same orientation under <code>barmode</code> stack, relative and group are forced into the same bingroup, Using <code>bingroup</code>, traces under <code>barmode</code> overlay and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d* trace can share the same <code>bingroup</code></li> <li>Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set <code>xaxis.layer</code> and <code>yaxis.layer</code> to below traces.</li> <li>Constrain the size of text inside or outside a bar to be no larger than the bar itself.</li> <li>Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. include is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. exclude makes the opposite half-bin bias, and half removes it.</li> <li>Only applies if cumulative is enabled. If increasing (default) we sum all prior bins, so the result increases from left to right. If decreasing we sum later bins so the result decreases from left to right.</li> <li>If true, display the cumulative distribution by summing the binned values. Use the <code>direction</code> and <code>centralbin</code> attributes to tune the accumulation method. Note: in this mode, the density <code>histnorm</code> settings behave the same as their equivalents without density: ** and density both rise to the number of data points, and probability and probability density both rise to the number of sample points.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Specifies the binning function used for this histogram trace. If count, the histogram values are computed by counting the number of values lying inside each bin. If sum, avg, min, max, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</li> <li>Specifies the type of normalization used for this histogram trace. If , the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If percent / probability, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If density, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If probability density, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variable <code>binNumber</code> Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Determines if texts are kept at center or start/end points in <code>textposition</code> inside mode.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the opacity of the bars.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if <code>xbins.size</code> is provided.</li> <li>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if <code>ybins.size</code> is provided.</li> <li>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</li> <li>Sets the opacity of the trace.</li> <li>Sets the orientation of the bars. With v (h), the value of the each bar spans along the vertical (horizontal).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.</li> <li>Sets the angle of the tick labels with respect to the bar. For example, a <code>tickangle</code> of -90 draws the tick labels vertically. With auto the texts may automatically be rotated to fit with the maximum size in bars.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Specifies the location of the <code>text</code>. inside positions <code>text</code> inside, next to the bar end (rotated and scaled if needed). outside positions <code>text</code> outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. auto tries to position <code>text</code> inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If none, no text appears.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>label</code> and <code>value</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the sample data to be binned on the x axis.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the sample data to be binned on the y axis.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Histogram2d/","title":"Histogram2d","text":""},{"location":"reference/configuration/Trace/Props/Histogram2d/#histogram2d","title":"Histogram2d","text":""},{"location":"reference/configuration/Trace/Props/Histogram2d/#overview","title":"Overview","text":"<p>The <code>histogram2d</code> trace type is used to create 2D histograms, where data is binned along both the x and y axes, producing a heatmap-like visualization. This allows you to visualize the relationship between two numerical variables by counting how many data points fall into each bin.</p> <p>You can customize the binning along both axes, as well as the colorscale and aggregation method, to better represent your data.</p> <p>Common Uses</p> <ul> <li>Joint Distributions: Visualizing the relationship between two variables.</li> <li>Density Plots: Showing the density of data points across two dimensions.</li> <li>Statistical Analysis: Identifying patterns, correlations, or anomalies in bivariate data.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Histogram2d/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple 2D Histogram Plot2D Histogram with Custom Bins2D Histogram with Density Mode <p>Here's a simple <code>histogram2d</code> plot showing how data is distributed across two dimensions:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: histogram2d-data\n    args:\n      - echo\n      - |\n        x,y\n        1,2\n        2,3\n        3,4\n        2,2\n        1,3\n        3,2\n        4,4\n        5,6\n        4,2\ntraces:\n  - name: Simple 2D Histogram Plot\n    model: ${ref(histogram2d-data)}\n    props:\n      type: histogram2d\n      x: ?{x}\n      y: ?{y}\n      colorscale: \"Viridis\"\ncharts:\n  - name: Simple 2D Histogram Chart\n    traces:\n      - ${ref(Simple 2D Histogram Plot)}\n    layout:\n      title:\n        text: Simple 2D Histogram&lt;br&gt;&lt;sub&gt;Data Distribution Across Two Dimensions&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>This example demonstrates a <code>histogram2d</code> plot with custom binning along the x and y axes:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: histogram2d-data-bins\n    args:\n      - echo\n      - |\n        x,y\n        1,5\n        2,6\n        3,7\n        2,4\n        1,5\n        3,3\n        4,8\n        5,9\n        4,4\ntraces:\n  - name: 2D Histogram with Custom Bins\n    model: ${ref(histogram2d-data-bins)}\n    props:\n      type: histogram2d\n      x: ?{x}\n      y: ?{y}\n      xbins:\n        size: 1\n      ybins:\n        size: 1\n      colorscale: \"Blues\"\ncharts:\n  - name: 2D Histogram with Custom Bins\n    traces:\n      - ${ref(2D Histogram with Custom Bins)}\n    layout:\n      title:\n        text: 2D Histogram with Custom Bins&lt;br&gt;&lt;sub&gt;Custom Binning Along X and Y Axes&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>Here's a <code>histogram2d</code> plot that uses density mode, displaying the relative density of data points across the grid:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: histogram2d-data-density\n    args:\n      - echo\n      - |\n        x,y\n        1,1\n        2,2\n        3,3\n        2,1\n        3,2\n        4,3\n        5,4\n        4,1\n        5,2\ntraces:\n  - name: 2D Histogram with Density Mode\n    model: ${ref(histogram2d-data-density)}\n    props:\n      type: histogram2d\n      x: ?{x}\n      y: ?{y}\n      histnorm: \"density\"\n      colorscale: \"Jet\"\ncharts:\n  - name: 2D Histogram with Density Mode\n    traces:\n      - ${ref(2D Histogram with Density Mode)}\n    layout:\n      title:\n        text: 2D Histogram with Density Mode&lt;br&gt;&lt;sub&gt;Density Distribution of Data&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Histogram2d/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>histogram2d</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autobinx: 'boolean' #(1)!\nautobiny: 'boolean' #(2)!\nautocolorscale: 'boolean' #(3)!\nbingroup: 'string' #(4)!\ncoloraxis: 'string' #(5)!\ncolorbar:\n  bgcolor: 'any' #(6)!\n  bordercolor: 'any' #(7)!\n  borderwidth: 'number' #(8)!\n  exponentformat: 'any' #(9)!\n  len: 'number' #(10)!\n  lenmode: 'any' #(11)!\n  minexponent: 'number' #(12)!\n  nticks: 'integer' #(13)!\n  orientation: 'any' #(14)!\n  outlinecolor: 'any' #(15)!\n  outlinewidth: 'number' #(16)!\n  separatethousands: 'boolean' #(17)!\n  showexponent: 'any' #(18)!\n  showticklabels: 'boolean' #(19)!\n  showtickprefix: 'any' #(20)!\n  showticksuffix: 'any' #(21)!\n  thickness: 'number' #(22)!\n  thicknessmode: 'any' #(23)!\n  tickangle: 'number' #(24)!\n  tickcolor: 'any' #(25)!\n  tickfont:\n    color: any\n    family: 'string' #(26)!\n    lineposition: 'string' #(27)!\n    shadow: 'string' #(28)!\n    size: number\n    style: 'any' #(29)!\n    textcase: 'any' #(30)!\n    variant: 'any' #(31)!\n    weight: 'integer' #(32)!\n  tickformat: 'string' #(33)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(34)!\n  ticklabelposition: 'any' #(35)!\n  ticklabelstep: 'integer' #(36)!\n  ticklen: 'number' #(37)!\n  tickmode: 'any' #(38)!\n  tickprefix: 'string' #(39)!\n  ticks: 'any' #(40)!\n  ticksuffix: 'string' #(41)!\n  ticktext: 'array' #(42)!\n  ticktextsrc: 'string' #(43)!\n  tickvals: 'array' #(44)!\n  tickvalssrc: 'string' #(45)!\n  tickwidth: 'number' #(46)!\n  title:\n    font:\n      color: any\n      family: 'string' #(47)!\n      lineposition: 'string' #(48)!\n      shadow: 'string' #(49)!\n      size: number\n      style: 'any' #(50)!\n      textcase: 'any' #(51)!\n      variant: 'any' #(52)!\n      weight: 'integer' #(53)!\n    side: 'any' #(54)!\n    text: 'string' #(55)!\n  x: 'number' #(56)!\n  xanchor: 'any' #(57)!\n  xpad: 'number' #(58)!\n  xref: 'any' #(59)!\n  y: 'number' #(60)!\n  yanchor: 'any' #(61)!\n  ypad: 'number' #(62)!\n  yref: 'any' #(63)!\ncolorscale: 'any' #(64)!\ncustomdata: 'array' #(65)!\ncustomdatasrc: 'string' #(66)!\nhistfunc: 'any' #(67)!\nhistnorm: 'any' #(68)!\nhoverinfo: 'array' #(69)!\nhoverinfosrc: 'string' #(70)!\nhoverlabel:\n  align: 'array' #(71)!\n  alignsrc: 'string' #(72)!\n  bgcolor: 'color | array' #(73)!\n  bgcolorsrc: 'string' #(74)!\n  bordercolor: 'color | array' #(75)!\n  bordercolorsrc: 'string' #(76)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(77)!\n    family: 'string | array' #(78)!\n    familysrc: 'string' #(79)!\n    lineposition: 'array' #(80)!\n    linepositionsrc: 'string' #(81)!\n    shadow: 'string | array' #(82)!\n    shadowsrc: 'string' #(83)!\n    size: number | array\n    sizesrc: 'string' #(84)!\n    style: 'array' #(85)!\n    stylesrc: 'string' #(86)!\n    textcase: 'array' #(87)!\n    textcasesrc: 'string' #(88)!\n    variant: 'array' #(89)!\n    variantsrc: 'string' #(90)!\n    weight: 'integer | array' #(91)!\n    weightsrc: 'string' #(92)!\n  namelength: 'integer | array' #(93)!\n  namelengthsrc: 'string' #(94)!\nhovertemplate: 'string | array' #(95)!\nhovertemplatesrc: 'string' #(96)!\nids: 'array' #(97)!\nidssrc: 'string' #(98)!\nlegend: 'string' #(99)!\nlegendgroup: 'string' #(100)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(101)!\n    lineposition: 'string' #(102)!\n    shadow: 'string' #(103)!\n    size: number\n    style: 'any' #(104)!\n    textcase: 'any' #(105)!\n    variant: 'any' #(106)!\n    weight: 'integer' #(107)!\n  text: 'string' #(108)!\nlegendrank: 'number' #(109)!\nlegendwidth: 'number' #(110)!\nmarker:\n  color: 'array' #(111)!\n  colorsrc: 'string' #(112)!\nmetasrc: 'string' #(113)!\nname: 'string' #(114)!\nnbinsx: 'integer' #(115)!\nnbinsy: 'integer' #(116)!\nopacity: 'number' #(117)!\nreversescale: 'boolean' #(118)!\nshowlegend: 'boolean' #(119)!\nshowscale: 'boolean' #(120)!\nstream:\n  maxpoints: 'number' #(121)!\n  token: 'string' #(122)!\ntextfont:\n  color: any\n  family: 'string' #(123)!\n  lineposition: 'string' #(124)!\n  shadow: 'string' #(125)!\n  size: number\n  style: 'any' #(126)!\n  textcase: 'any' #(127)!\n  variant: 'any' #(128)!\n  weight: 'integer' #(129)!\ntexttemplate: 'string' #(130)!\ntype: histogram2d\nuid: 'string' #(131)!\nvisible: 'any' #(132)!\nx: 'array' #(133)!\nxaxis: 'string' #(134)!\nxbingroup: 'string' #(135)!\nxbins: {}\nxcalendar: 'any' #(136)!\nxgap: 'number' #(137)!\nxhoverformat: 'string' #(138)!\nxsrc: 'string' #(139)!\ny: 'array' #(140)!\nyaxis: 'string' #(141)!\nybingroup: 'string' #(142)!\nybins: {}\nycalendar: 'any' #(143)!\nygap: 'number' #(144)!\nyhoverformat: 'string' #(145)!\nysrc: 'string' #(146)!\nz: 'array' #(147)!\nzauto: 'boolean' #(148)!\nzhoverformat: 'string' #(149)!\nzmax: 'number' #(150)!\nzmid: 'number' #(151)!\nzmin: 'number' #(152)!\nzsmooth: 'any' #(153)!\nzsrc: 'string' #(154)!\n</code></pre> <ol> <li>Obsolete: since v1.42 each bin attribute is auto-determined separately and <code>autobinx</code> is not needed. However, we accept <code>autobinx: true</code> or <code>false</code> and will update <code>xbins</code> accordingly before deleting <code>autobinx</code> from the trace.</li> <li>Obsolete: since v1.42 each bin attribute is auto-determined separately and <code>autobiny</code> is not needed. However, we accept <code>autobiny: true</code> or <code>false</code> and will update <code>ybins</code> accordingly before deleting <code>autobiny</code> from the trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Set the <code>xbingroup</code> and <code>ybingroup</code> default prefix For example, setting a <code>bingroup</code> of 1 on two histogram2d traces will make them their x-bins and y-bins match separately.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Specifies the binning function used for this histogram trace. If count, the histogram values are computed by counting the number of values lying inside each bin. If sum, avg, min, max, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</li> <li>Specifies the type of normalization used for this histogram trace. If , the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If percent / probability, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If density, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If probability density, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variable <code>z</code> Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the aggregation data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if <code>xbins.size</code> is provided.</li> <li>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if <code>ybins.size</code> is provided.</li> <li>Sets the opacity of the trace.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variable <code>z</code></li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the sample data to be binned on the x axis.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Set a group of histogram traces which will have compatible x-bin settings. Using <code>xbingroup</code>, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same <code>xbingroup</code> value can be used to set (1D) histogram <code>bingroup</code></li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the horizontal gap (in pixels) between bricks.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the sample data to be binned on the y axis.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Set a group of histogram traces which will have compatible y-bin settings. Using <code>ybingroup</code>, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same <code>ybingroup</code> value can be used to set (1D) histogram <code>bingroup</code></li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the vertical gap (in pixels) between bricks.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the aggregation data.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Picks a smoothing algorithm use to smooth <code>z</code> data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Histogram2dcontour/","title":"Histogram2dcontour","text":""},{"location":"reference/configuration/Trace/Props/Histogram2dcontour/#histogram2dcontour","title":"Histogram2dcontour","text":""},{"location":"reference/configuration/Trace/Props/Histogram2dcontour/#overview","title":"Overview","text":"<p>The <code>histogram2dcontour</code> trace type is used to create 2D contour plots that represent the density of data points across two dimensions. Similar to a 2D histogram, this plot type bins data along the x and y axes but visualizes the density using contour lines instead of filled colors. </p> <p>You can customize the binning along both axes, contour lines, and the color mapping to suit your data. This trace type is useful for visualizing patterns and clusters in bivariate data.</p> <p>Common Uses</p> <ul> <li>Density Contours: Showing how data points are distributed and clustered.</li> <li>Joint Distribution Analysis: Visualizing the relationship between two variables with density contours.</li> <li>Bivariate Statistical Analysis: Analyzing two variables and their joint behavior.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Histogram2dcontour/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple 2D Contour Histogram2D Contour Histogram with Filled Contours2D Contour Histogram with Custom Bins <p>Here's a simple <code>histogram2dcontour</code> plot showing the density of data points using contour lines:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: histogram2dcontour-data\n    args:\n      - echo\n      - |\n        x,y\n        1,1\n        2,3\n        3,4\n        4,5\n        2,1\n        3,2\n        5,6\n        4,2\n        5,3\ntraces:\n  - name: Simple 2D Contour Histogram\n    model: ${ref(histogram2dcontour-data)}\n    props:\n      type: histogram2dcontour\n      x: ?{x}\n      y: ?{y}\n      colorscale: \"Viridis\"\n      contours:\n        coloring: \"none\"\ncharts:\n  - name: Simple 2D Contour Histogram\n    traces:\n      - ${ref(Simple 2D Contour Histogram)}\n    layout:\n      title:\n        text: Simple 2D Contour Histogram&lt;br&gt;&lt;sub&gt;Density Contours of Bivariate Data&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>This example demonstrates a <code>histogram2dcontour</code> plot with filled contour regions to better visualize data density:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: histogram2dcontour-data-filled\n    args:\n      - echo\n      - |\n        x,y\n        2,1\n        3,2\n        4,3\n        5,4\n        6,5\n        3,1\n        4,2\n        5,3\n        6,4\ntraces:\n  - name: 2D Contour Histogram with Filled Contours\n    model: ${ref(histogram2dcontour-data-filled)}\n    props:\n      type: histogram2dcontour\n      x: ?{x}\n      y: ?{y}\n      colorscale: \"Blues\"\n      contours:\n        coloring: \"heatmap\"\ncharts:\n  - name: 2D Contour Histogram with Filled Contours\n    traces:\n      - ${ref(2D Contour Histogram with Filled Contours)}\n    layout:\n      title:\n        text: 2D Contour Histogram with Filled Contours&lt;br&gt;&lt;sub&gt;Filled Density Contours&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>Here's a <code>histogram2dcontour</code> plot with custom bin sizes for both the x and y axes, allowing more control over the granularity of the plot:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: histogram2dcontour-data-bins\n    args:\n      - echo\n      - |\n        x,y\n        1,5\n        2,6\n        3,7\n        2,4\n        3,5\n        4,6\n        5,8\n        4,3\n        5,4\ntraces:\n  - name: 2D Contour Histogram with Custom Bins\n    model: ${ref(histogram2dcontour-data-bins)}\n    props:\n      type: histogram2dcontour\n      x: ?{x}\n      y: ?{y}\n      xbins:\n        size: 1\n      ybins:\n        size: 1\n      colorscale: \"Jet\"\ncharts:\n  - name: 2D Contour Histogram with Custom Bins\n    traces:\n      - ${ref(2D Contour Histogram with Custom Bins)}\n    layout:\n      title:\n        text: 2D Contour Histogram with Custom Bins&lt;br&gt;&lt;sub&gt;Custom Bin Sizes for X and Y&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Histogram2dcontour/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>histogram2dcontour</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autobinx: 'boolean' #(1)!\nautobiny: 'boolean' #(2)!\nautocolorscale: 'boolean' #(3)!\nautocontour: 'boolean' #(4)!\nbingroup: 'string' #(5)!\ncoloraxis: 'string' #(6)!\ncolorbar:\n  bgcolor: 'any' #(7)!\n  bordercolor: 'any' #(8)!\n  borderwidth: 'number' #(9)!\n  exponentformat: 'any' #(10)!\n  len: 'number' #(11)!\n  lenmode: 'any' #(12)!\n  minexponent: 'number' #(13)!\n  nticks: 'integer' #(14)!\n  orientation: 'any' #(15)!\n  outlinecolor: 'any' #(16)!\n  outlinewidth: 'number' #(17)!\n  separatethousands: 'boolean' #(18)!\n  showexponent: 'any' #(19)!\n  showticklabels: 'boolean' #(20)!\n  showtickprefix: 'any' #(21)!\n  showticksuffix: 'any' #(22)!\n  thickness: 'number' #(23)!\n  thicknessmode: 'any' #(24)!\n  tickangle: 'number' #(25)!\n  tickcolor: 'any' #(26)!\n  tickfont:\n    color: any\n    family: 'string' #(27)!\n    lineposition: 'string' #(28)!\n    shadow: 'string' #(29)!\n    size: number\n    style: 'any' #(30)!\n    textcase: 'any' #(31)!\n    variant: 'any' #(32)!\n    weight: 'integer' #(33)!\n  tickformat: 'string' #(34)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(35)!\n  ticklabelposition: 'any' #(36)!\n  ticklabelstep: 'integer' #(37)!\n  ticklen: 'number' #(38)!\n  tickmode: 'any' #(39)!\n  tickprefix: 'string' #(40)!\n  ticks: 'any' #(41)!\n  ticksuffix: 'string' #(42)!\n  ticktext: 'array' #(43)!\n  ticktextsrc: 'string' #(44)!\n  tickvals: 'array' #(45)!\n  tickvalssrc: 'string' #(46)!\n  tickwidth: 'number' #(47)!\n  title:\n    font:\n      color: any\n      family: 'string' #(48)!\n      lineposition: 'string' #(49)!\n      shadow: 'string' #(50)!\n      size: number\n      style: 'any' #(51)!\n      textcase: 'any' #(52)!\n      variant: 'any' #(53)!\n      weight: 'integer' #(54)!\n    side: 'any' #(55)!\n    text: 'string' #(56)!\n  x: 'number' #(57)!\n  xanchor: 'any' #(58)!\n  xpad: 'number' #(59)!\n  xref: 'any' #(60)!\n  y: 'number' #(61)!\n  yanchor: 'any' #(62)!\n  ypad: 'number' #(63)!\n  yref: 'any' #(64)!\ncolorscale: 'any' #(65)!\ncontours:\n  coloring: 'any' #(66)!\n  end: 'number' #(67)!\n  impliedEdits: any\n  labelfont:\n    color: any\n    family: 'string' #(68)!\n    lineposition: 'string' #(69)!\n    shadow: 'string' #(70)!\n    size: number\n    style: 'any' #(71)!\n    textcase: 'any' #(72)!\n    variant: 'any' #(73)!\n    weight: 'integer' #(74)!\n  labelformat: 'string' #(75)!\n  operation: 'any' #(76)!\n  showlabels: 'boolean' #(77)!\n  showlines: 'boolean' #(78)!\n  size: 'number' #(79)!\n  start: 'number' #(80)!\n  type: 'any' #(81)!\ncustomdata: 'array' #(82)!\ncustomdatasrc: 'string' #(83)!\nhistfunc: 'any' #(84)!\nhistnorm: 'any' #(85)!\nhoverinfo: 'array' #(86)!\nhoverinfosrc: 'string' #(87)!\nhoverlabel:\n  align: 'array' #(88)!\n  alignsrc: 'string' #(89)!\n  bgcolor: 'color | array' #(90)!\n  bgcolorsrc: 'string' #(91)!\n  bordercolor: 'color | array' #(92)!\n  bordercolorsrc: 'string' #(93)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(94)!\n    family: 'string | array' #(95)!\n    familysrc: 'string' #(96)!\n    lineposition: 'array' #(97)!\n    linepositionsrc: 'string' #(98)!\n    shadow: 'string | array' #(99)!\n    shadowsrc: 'string' #(100)!\n    size: number | array\n    sizesrc: 'string' #(101)!\n    style: 'array' #(102)!\n    stylesrc: 'string' #(103)!\n    textcase: 'array' #(104)!\n    textcasesrc: 'string' #(105)!\n    variant: 'array' #(106)!\n    variantsrc: 'string' #(107)!\n    weight: 'integer | array' #(108)!\n    weightsrc: 'string' #(109)!\n  namelength: 'integer | array' #(110)!\n  namelengthsrc: 'string' #(111)!\nhovertemplate: 'string | array' #(112)!\nhovertemplatesrc: 'string' #(113)!\nids: 'array' #(114)!\nidssrc: 'string' #(115)!\nlegend: 'string' #(116)!\nlegendgroup: 'string' #(117)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(118)!\n    lineposition: 'string' #(119)!\n    shadow: 'string' #(120)!\n    size: number\n    style: 'any' #(121)!\n    textcase: 'any' #(122)!\n    variant: 'any' #(123)!\n    weight: 'integer' #(124)!\n  text: 'string' #(125)!\nlegendrank: 'number' #(126)!\nlegendwidth: 'number' #(127)!\nline:\n  color: 'any' #(128)!\n  dash: 'string' #(129)!\n  smoothing: 'number' #(130)!\n  width: 'number' #(131)!\nmarker:\n  color: 'array' #(132)!\n  colorsrc: 'string' #(133)!\nmetasrc: 'string' #(134)!\nname: 'string' #(135)!\nnbinsx: 'integer' #(136)!\nnbinsy: 'integer' #(137)!\nncontours: 'integer' #(138)!\nopacity: 'number' #(139)!\nreversescale: 'boolean' #(140)!\nshowlegend: 'boolean' #(141)!\nshowscale: 'boolean' #(142)!\nstream:\n  maxpoints: 'number' #(143)!\n  token: 'string' #(144)!\ntextfont:\n  color: any\n  family: 'string' #(145)!\n  lineposition: 'string' #(146)!\n  shadow: 'string' #(147)!\n  size: number\n  style: 'any' #(148)!\n  textcase: 'any' #(149)!\n  variant: 'any' #(150)!\n  weight: 'integer' #(151)!\ntexttemplate: 'string' #(152)!\ntype: histogram2dcontour\nuid: 'string' #(153)!\nvisible: 'any' #(154)!\nx: 'array' #(155)!\nxaxis: 'string' #(156)!\nxbingroup: 'string' #(157)!\nxbins: {}\nxcalendar: 'any' #(158)!\nxhoverformat: 'string' #(159)!\nxsrc: 'string' #(160)!\ny: 'array' #(161)!\nyaxis: 'string' #(162)!\nybingroup: 'string' #(163)!\nybins: {}\nycalendar: 'any' #(164)!\nyhoverformat: 'string' #(165)!\nysrc: 'string' #(166)!\nz: 'array' #(167)!\nzauto: 'boolean' #(168)!\nzhoverformat: 'string' #(169)!\nzmax: 'number' #(170)!\nzmid: 'number' #(171)!\nzmin: 'number' #(172)!\nzsrc: 'string' #(173)!\n</code></pre> <ol> <li>Obsolete: since v1.42 each bin attribute is auto-determined separately and <code>autobinx</code> is not needed. However, we accept <code>autobinx: true</code> or <code>false</code> and will update <code>xbins</code> accordingly before deleting <code>autobinx</code> from the trace.</li> <li>Obsolete: since v1.42 each bin attribute is auto-determined separately and <code>autobiny</code> is not needed. However, we accept <code>autobiny: true</code> or <code>false</code> and will update <code>ybins</code> accordingly before deleting <code>autobiny</code> from the trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the contour level attributes are picked by an algorithm. If true, the number of contour levels can be set in <code>ncontours</code>. If false, set the contour level attributes in <code>contours</code>.</li> <li>Set the <code>xbingroup</code> and <code>ybingroup</code> default prefix For example, setting a <code>bingroup</code> of 1 on two histogram2d traces will make them their x-bins and y-bins match separately.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>zmin</code> and <code>zmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Determines the coloring method showing the contour values. If fill, coloring is done evenly between each contour level If heatmap, a heatmap gradient coloring is applied between each contour level. If lines, coloring is done on the contour lines. If none, no coloring is applied on this trace.</li> <li>Sets the end contour level value. Must be more than <code>contours.start</code></li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</li> <li>Sets the constraint operation. <code>=</code> keeps regions equal to <code>value</code>. <code>&lt;</code> and <code>&lt;=</code> keep regions less than <code>value</code>. <code>&gt;</code> and <code>&gt;=</code> keep regions greater than <code>value</code>. <code>[]</code>, <code>()</code>, <code>[)</code>, and <code>(]</code> keep regions inside <code>value[0]</code> and <code>value[1]</code>. <code>][</code>, <code>)(</code>, <code>](</code>, and <code>)[</code> keep regions outside <code>value[0]</code> and <code>value[1]</code>. Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</li> <li>Determines whether to label the contour lines with their values.</li> <li>Determines whether or not the contour lines are drawn. Has an effect only if <code>contours.coloring</code> is set to fill.</li> <li>Sets the step between each contour level. Must be positive.</li> <li>Sets the starting contour level value. Must be less than <code>contours.end</code></li> <li>If <code>levels</code>, the data is represented as a contour plot with multiple levels displayed. If <code>constraint</code>, the data is represented as constraints with the invalid region shaded as specified by the <code>operation</code> and <code>value</code> parameters.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Specifies the binning function used for this histogram trace. If count, the histogram values are computed by counting the number of values lying inside each bin. If sum, avg, min, max, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</li> <li>Specifies the type of normalization used for this histogram trace. If , the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If percent / probability, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If density, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If probability density, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variable <code>z</code> Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the color of the contour level. Has no effect if <code>contours.coloring</code> is set to lines.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the amount of smoothing for the contour lines, where 0 corresponds to no smoothing.</li> <li>Sets the contour line width in (in px)</li> <li>Sets the aggregation data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if <code>xbins.size</code> is provided.</li> <li>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if <code>ybins.size</code> is provided.</li> <li>Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of <code>ncontours</code>. Has an effect only if <code>autocontour</code> is true or if <code>contours.size</code> is missing.</li> <li>Sets the opacity of the trace.</li> <li>Reverses the color mapping if true. If true, <code>zmin</code> will correspond to the last color in the array and <code>zmax</code> will correspond to the first color.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>For this trace it only has an effect if <code>coloring</code> is set to heatmap. Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>x</code>, <code>y</code>, <code>z</code> and <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the sample data to be binned on the x axis.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Set a group of histogram traces which will have compatible x-bin settings. Using <code>xbingroup</code>, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same <code>xbingroup</code> value can be used to set (1D) histogram <code>bingroup</code></li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the sample data to be binned on the y axis.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Set a group of histogram traces which will have compatible y-bin settings. Using <code>ybingroup</code>, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same <code>ybingroup</code> value can be used to set (1D) histogram <code>bingroup</code></li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the aggregation data.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>z</code>) or the bounds set in <code>zmin</code> and <code>zmax</code> Defaults to <code>false</code> when <code>zmin</code> and <code>zmax</code> are set by the user.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Sets the upper bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>zmin</code> and/or <code>zmax</code> to be equidistant to this point. Value should have the same units as in <code>z</code>. Has no effect when <code>zauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as in <code>z</code> and if set, <code>zmax</code> must be set as well.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Icicle/","title":"Icicle","text":""},{"location":"reference/configuration/Trace/Props/Icicle/#icicle","title":"Icicle","text":""},{"location":"reference/configuration/Trace/Props/Icicle/#overview","title":"Overview","text":"<p>The <code>icicle</code> trace type is used to create icicle charts, which are a variation of treemap charts but arranged vertically. Icicle charts are useful for visualizing hierarchical data, where each branch represents a part of the whole, and you can drill down into sub-categories.</p> <p>You can customize the colors, labels, and depth of the icicle chart to represent your hierarchical data effectively.</p> <p>Common Uses</p> <ul> <li>Hierarchical Data Representation: Visualizing categories and subcategories in a hierarchy.</li> <li>Part-to-Whole Relationships: Showing how parts relate to the whole, with breakdowns for subcategories.</li> <li>Drill-Down Analysis: Allowing users to explore different levels of data.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Icicle/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Icicle PlotIcicle Plot with Custom ColorsIcicle Plot with Depth Limiting <p>Here's a simple <code>icicle</code> plot showing hierarchical data, with branches representing categories:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: icicle-data\n    args:\n      - echo\n      - |\n        category,parent,value\n        A,,100\n        B,A,50\n        C,A,30\n        D,A,10\n        E,B,25\n        F,B,15\ntraces:\n  - name: Simple Icicle Plot\n    model: ${ref(icicle-data)}\n    props:\n      type: icicle\n      labels: ?{category}\n      parents: ?{parent}\n      values: ?{value}\n      branchvalues: \"total\"\n      marker: \n        colorscale: \"Portland\"\n      textposition: \"middle center\"\n      textfont: \n        size: 18\ncharts:\n  - name: Simple Icicle Chart\n    traces:\n      - ${ref(Simple Icicle Plot)}\n    layout:\n      title:\n        text: Simple Icicle Chart&lt;br&gt;&lt;sub&gt;Hierarchical Data Breakdown&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>icicle</code> plot with custom colors for each branch and leaf node:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: icicle-data-custom\n    args:\n      - echo\n      - |\n        category,parent,value,color\n        A,,100,\"#1f77b4\"\n        B,A,50,\"#ff7f0e\"\n        C,A,30,\"#2ca02c\"\n        D,A,20,\"#d62728\"\n        E,B,25,\"#9467bd\"\n        F,B,15,\"#8c564b\"\ntraces:\n  - name: Custom Colors Icicle Plot\n    model: ${ref(icicle-data-custom)}\n    props:\n      type: icicle\n      labels: ?{category}\n      parents: ?{parent}\n      values: ?{value}\n      marker:\n        colors: ?{color}\n      branchvalues: \"total\"\ncharts:\n  - name: Custom Colors Icicle Chart\n    traces:\n      - ${ref(Custom Colors Icicle Plot)}\n    layout:\n      title:\n        text: Icicle Plot with Custom Colors&lt;br&gt;&lt;sub&gt;Custom Coloring for Branches&lt;/sub&gt;\n</code></pre> <p>This example shows an <code>icicle</code> plot with depth limiting, allowing the user to only see the first two levels of the hierarchy:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: icicle-data-depth\n    args:\n      - echo\n      - |\n        category,parent,value\n        A,,100\n        B,A,50\n        C,A,30\n        D,A,20\n        E,B,25\n        F,B,15\ntraces:\n  - name: Icicle Plot with Depth Limiting Trace\n    model: ${ref(icicle-data-depth)}\n    props:\n      type: icicle\n      labels: ?{category}\n      parents: ?{parent}\n      values: ?{value}\n      maxdepth: 2\n      branchvalues: \"total\"\n      marker: \n        colorscale: \"YlOrRd\"\ncharts:\n  - name: Icicle Plot with Depth Limiting\n    traces:\n      - ${ref(Icicle Plot with Depth Limiting Trace)}\n    layout:\n      title:\n        text: Icicle Plot with Depth Limiting&lt;br&gt;&lt;sub&gt;Showing Only First Two Levels&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Icicle/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>icicle</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>branchvalues: 'any' #(1)!\ncount: 'string' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\ndomain:\n  column: 'integer' #(5)!\n  row: 'integer' #(6)!\n  x: 'array' #(7)!\n  y: 'array' #(8)!\nhoverinfo: 'array' #(9)!\nhoverinfosrc: 'string' #(10)!\nhoverlabel:\n  align: 'array' #(11)!\n  alignsrc: 'string' #(12)!\n  bgcolor: 'color | array' #(13)!\n  bgcolorsrc: 'string' #(14)!\n  bordercolor: 'color | array' #(15)!\n  bordercolorsrc: 'string' #(16)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(17)!\n    family: 'string | array' #(18)!\n    familysrc: 'string' #(19)!\n    lineposition: 'array' #(20)!\n    linepositionsrc: 'string' #(21)!\n    shadow: 'string | array' #(22)!\n    shadowsrc: 'string' #(23)!\n    size: number | array\n    sizesrc: 'string' #(24)!\n    style: 'array' #(25)!\n    stylesrc: 'string' #(26)!\n    textcase: 'array' #(27)!\n    textcasesrc: 'string' #(28)!\n    variant: 'array' #(29)!\n    variantsrc: 'string' #(30)!\n    weight: 'integer | array' #(31)!\n    weightsrc: 'string' #(32)!\n  namelength: 'integer | array' #(33)!\n  namelengthsrc: 'string' #(34)!\nhovertemplate: 'string | array' #(35)!\nhovertemplatesrc: 'string' #(36)!\nhovertext: 'string | array' #(37)!\nhovertextsrc: 'string' #(38)!\nids: 'array' #(39)!\nidssrc: 'string' #(40)!\ninsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(41)!\n  family: 'string | array' #(42)!\n  familysrc: 'string' #(43)!\n  lineposition: 'array' #(44)!\n  linepositionsrc: 'string' #(45)!\n  shadow: 'string | array' #(46)!\n  shadowsrc: 'string' #(47)!\n  size: number | array\n  sizesrc: 'string' #(48)!\n  style: 'array' #(49)!\n  stylesrc: 'string' #(50)!\n  textcase: 'array' #(51)!\n  textcasesrc: 'string' #(52)!\n  variant: 'array' #(53)!\n  variantsrc: 'string' #(54)!\n  weight: 'integer | array' #(55)!\n  weightsrc: 'string' #(56)!\nlabels: 'array' #(57)!\nlabelssrc: 'string' #(58)!\nleaf:\n  opacity: 'number' #(59)!\nlegend: 'string' #(60)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(61)!\n    lineposition: 'string' #(62)!\n    shadow: 'string' #(63)!\n    size: number\n    style: 'any' #(64)!\n    textcase: 'any' #(65)!\n    variant: 'any' #(66)!\n    weight: 'integer' #(67)!\n  text: 'string' #(68)!\nlegendrank: 'number' #(69)!\nlegendwidth: 'number' #(70)!\nmarker:\n  autocolorscale: 'boolean' #(71)!\n  cauto: 'boolean' #(72)!\n  cmax: 'number' #(73)!\n  cmid: 'number' #(74)!\n  cmin: 'number' #(75)!\n  coloraxis: 'string' #(76)!\n  colorbar:\n    bgcolor: 'any' #(77)!\n    bordercolor: 'any' #(78)!\n    borderwidth: 'number' #(79)!\n    exponentformat: 'any' #(80)!\n    len: 'number' #(81)!\n    lenmode: 'any' #(82)!\n    minexponent: 'number' #(83)!\n    nticks: 'integer' #(84)!\n    orientation: 'any' #(85)!\n    outlinecolor: 'any' #(86)!\n    outlinewidth: 'number' #(87)!\n    separatethousands: 'boolean' #(88)!\n    showexponent: 'any' #(89)!\n    showticklabels: 'boolean' #(90)!\n    showtickprefix: 'any' #(91)!\n    showticksuffix: 'any' #(92)!\n    thickness: 'number' #(93)!\n    thicknessmode: 'any' #(94)!\n    tickangle: 'number' #(95)!\n    tickcolor: 'any' #(96)!\n    tickfont:\n      color: any\n      family: 'string' #(97)!\n      lineposition: 'string' #(98)!\n      shadow: 'string' #(99)!\n      size: number\n      style: 'any' #(100)!\n      textcase: 'any' #(101)!\n      variant: 'any' #(102)!\n      weight: 'integer' #(103)!\n    tickformat: 'string' #(104)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(105)!\n    ticklabelposition: 'any' #(106)!\n    ticklabelstep: 'integer' #(107)!\n    ticklen: 'number' #(108)!\n    tickmode: 'any' #(109)!\n    tickprefix: 'string' #(110)!\n    ticks: 'any' #(111)!\n    ticksuffix: 'string' #(112)!\n    ticktext: 'array' #(113)!\n    ticktextsrc: 'string' #(114)!\n    tickvals: 'array' #(115)!\n    tickvalssrc: 'string' #(116)!\n    tickwidth: 'number' #(117)!\n    title:\n      font:\n        color: any\n        family: 'string' #(118)!\n        lineposition: 'string' #(119)!\n        shadow: 'string' #(120)!\n        size: number\n        style: 'any' #(121)!\n        textcase: 'any' #(122)!\n        variant: 'any' #(123)!\n        weight: 'integer' #(124)!\n      side: 'any' #(125)!\n      text: 'string' #(126)!\n    x: 'number' #(127)!\n    xanchor: 'any' #(128)!\n    xpad: 'number' #(129)!\n    xref: 'any' #(130)!\n    y: 'number' #(131)!\n    yanchor: 'any' #(132)!\n    ypad: 'number' #(133)!\n    yref: 'any' #(134)!\n  colors: 'array' #(135)!\n  colorscale: 'any' #(136)!\n  colorssrc: 'string' #(137)!\n  line:\n    color: 'color | array' #(138)!\n    colorsrc: 'string' #(139)!\n    width: 'number | array' #(140)!\n    widthsrc: 'string' #(141)!\n  pattern:\n    bgcolor: 'color | array' #(142)!\n    bgcolorsrc: 'string' #(143)!\n    fgcolor: 'color | array' #(144)!\n    fgcolorsrc: 'string' #(145)!\n    fgopacity: 'number' #(146)!\n    fillmode: 'any' #(147)!\n    shape: 'array' #(148)!\n    shapesrc: 'string' #(149)!\n    size: 'number | array' #(150)!\n    sizesrc: 'string' #(151)!\n    solidity: 'number | array' #(152)!\n    soliditysrc: 'string' #(153)!\n  reversescale: 'boolean' #(154)!\n  showscale: 'boolean' #(155)!\nmaxdepth: 'integer' #(156)!\nmetasrc: 'string' #(157)!\nname: 'string' #(158)!\nopacity: 'number' #(159)!\noutsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(160)!\n  family: 'string | array' #(161)!\n  familysrc: 'string' #(162)!\n  lineposition: 'array' #(163)!\n  linepositionsrc: 'string' #(164)!\n  shadow: 'string | array' #(165)!\n  shadowsrc: 'string' #(166)!\n  size: number | array\n  sizesrc: 'string' #(167)!\n  style: 'array' #(168)!\n  stylesrc: 'string' #(169)!\n  textcase: 'array' #(170)!\n  textcasesrc: 'string' #(171)!\n  variant: 'array' #(172)!\n  variantsrc: 'string' #(173)!\n  weight: 'integer | array' #(174)!\n  weightsrc: 'string' #(175)!\nparents: 'array' #(176)!\nparentssrc: 'string' #(177)!\npathbar:\n  edgeshape: 'any' #(178)!\n  side: 'any' #(179)!\n  textfont:\n    color: color | array\n    colorsrc: 'string' #(180)!\n    family: 'string | array' #(181)!\n    familysrc: 'string' #(182)!\n    lineposition: 'array' #(183)!\n    linepositionsrc: 'string' #(184)!\n    shadow: 'string | array' #(185)!\n    shadowsrc: 'string' #(186)!\n    size: number | array\n    sizesrc: 'string' #(187)!\n    style: 'array' #(188)!\n    stylesrc: 'string' #(189)!\n    textcase: 'array' #(190)!\n    textcasesrc: 'string' #(191)!\n    variant: 'array' #(192)!\n    variantsrc: 'string' #(193)!\n    weight: 'integer | array' #(194)!\n    weightsrc: 'string' #(195)!\n  thickness: 'number' #(196)!\n  visible: 'boolean' #(197)!\nroot:\n  color: 'any' #(198)!\nsort: 'boolean' #(199)!\nstream:\n  maxpoints: 'number' #(200)!\n  token: 'string' #(201)!\ntext: 'array' #(202)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(203)!\n  family: 'string | array' #(204)!\n  familysrc: 'string' #(205)!\n  lineposition: 'array' #(206)!\n  linepositionsrc: 'string' #(207)!\n  shadow: 'string | array' #(208)!\n  shadowsrc: 'string' #(209)!\n  size: number | array\n  sizesrc: 'string' #(210)!\n  style: 'array' #(211)!\n  stylesrc: 'string' #(212)!\n  textcase: 'array' #(213)!\n  textcasesrc: 'string' #(214)!\n  variant: 'array' #(215)!\n  variantsrc: 'string' #(216)!\n  weight: 'integer | array' #(217)!\n  weightsrc: 'string' #(218)!\ntextinfo: 'string' #(219)!\ntextposition: 'any' #(220)!\ntextsrc: 'string' #(221)!\ntexttemplate: 'string | array' #(222)!\ntexttemplatesrc: 'string' #(223)!\ntiling:\n  flip: 'string' #(224)!\n  orientation: 'any' #(225)!\n  pad: 'number' #(226)!\ntype: icicle\nuid: 'string' #(227)!\nvalues: 'array' #(228)!\nvaluessrc: 'string' #(229)!\nvisible: 'any' #(230)!\n</code></pre> <ol> <li>Determines how the items in <code>values</code> are summed. When set to total, items in <code>values</code> are taken to be value of all its descendants. When set to remainder, items in <code>values</code> corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</li> <li>Determines default for <code>values</code> when it is not provided, by inferring a 1 for each of the leaves and/or branches, otherwise 0.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>If there is a layout grid, use the domain for this column in the grid for this icicle trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this icicle trace .</li> <li>Sets the horizontal domain of this icicle trace (in plot fraction).</li> <li>Sets the vertical domain of this icicle trace (in plot fraction).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>currentPath</code>, <code>root</code>, <code>entry</code>, <code>percentRoot</code>, <code>percentEntry</code> and <code>percentParent</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the labels of each of the sectors.</li> <li>Sets the source reference on Chart Studio Cloud for <code>labels</code>.</li> <li>Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if colors is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if colors is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.</li> <li>Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>colors</code>.</li> <li>Sets the color of the line enclosing each sector. Defaults to the <code>paper_bgcolor</code> value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the line enclosing each sector.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.</li> <li>Sets the number of rendered sectors from any given <code>level</code>. Set <code>maxdepth</code> to -1 to render all the levels in the hierarchy.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If <code>ids</code> is filled, <code>parents</code> items are understood to be \"ids\" themselves. When <code>ids</code> is not set, plotly attempts to find matching items in <code>labels</code>, but beware they must be unique.</li> <li>Sets the source reference on Chart Studio Cloud for <code>parents</code>.</li> <li>Determines which shape is used for edges between <code>barpath</code> labels.</li> <li>Determines on which side of the the treemap the <code>pathbar</code> should be presented.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the thickness of <code>pathbar</code> (in px). If not specified the <code>pathbar.textfont.size</code> is used with 3 pixles extra padding on each side.</li> <li>Determines if the path bar is drawn i.e. outside the trace <code>domain</code> and with one pixel gap.</li> <li>sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.</li> <li>Determines whether or not the sectors are reordered from largest to smallest.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each sector. If trace <code>textinfo</code> contains a text flag, these elements will be seen on the chart. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines which trace information appear on the graph.</li> <li>Sets the positions of the <code>text</code> elements.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>currentPath</code>, <code>root</code>, <code>entry</code>, <code>percentRoot</code>, <code>percentEntry</code>, <code>percentParent</code>, <code>label</code> and <code>value</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Determines if the positions obtained from solver are flipped on each axis.</li> <li>When set in conjunction with <code>tiling.flip</code>, determines on which side the root nodes are drawn in the chart. If <code>tiling.orientation</code> is v and <code>tiling.flip</code> is , the root nodes appear at the top. If <code>tiling.orientation</code> is v and <code>tiling.flip</code> is y, the root nodes appear at the bottom. If <code>tiling.orientation</code> is h and <code>tiling.flip</code> is , the root nodes appear at the left. If <code>tiling.orientation</code> is h and <code>tiling.flip</code> is x, the root nodes appear at the right.</li> <li>Sets the inner padding (in px).</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the values associated with each of the sectors. Use with <code>branchvalues</code> to determine how the values are summed.</li> <li>Sets the source reference on Chart Studio Cloud for <code>values</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Image/","title":"Image","text":""},{"location":"reference/configuration/Trace/Props/Image/#image","title":"Image","text":""},{"location":"reference/configuration/Trace/Props/Image/#overview","title":"Overview","text":"<p>The <code>image</code> trace type is used to display raster images in a plot. This is particularly useful for visualizing images as data or overlaying images on other plot types. The image trace allows for the rendering of pixel data in a 2D grid.</p> <p>You can customize the image size, position, and color scaling to represent image data effectively. Images can be used in scientific visualizations, geographic data, or any scenario where image data is needed.</p> <p>Common Uses</p> <ul> <li>Raster Images: Displaying raster images in data visualizations.</li> <li>Geographic Maps: Visualizing maps or satellite images.</li> <li>Image Data: Rendering images directly as part of data exploration and analysis.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Image/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Image PlotImage Plot with Custom ColorscaleImage Plot with Axis Annotations <p>Here's a simple <code>image</code> plot displaying an image based on pixel values:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: image-data\n    args:\n      - echo\n      - |\n        z\n        0,0,1,1\n        1,0,0,1\n        1,1,0,0\ntraces:\n  - name: Simple Image Plot\n    model: ${ref(image-data)}\n    props:\n      type: image\n      z: ?{z}\ncharts:\n  - name: Simple Image Chart\n    traces:\n      - ${ref(Simple Image Plot)}\n    layout:\n      title:\n        text: Simple Image Plot&lt;br&gt;&lt;sub&gt;Raster Image Display&lt;/sub&gt;\n</code></pre> <p>This example demonstrates an <code>image</code> plot with a custom colorscale to better represent the image data:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: image-data-custom\n    args:\n      - echo\n      - |\n        z\n        0.1,0.2,0.3,0.4\n        0.5,0.6,0.7,0.8\n        0.9,1.0,0.2,0.3\ntraces:\n  - name: Image Plot with Custom Colorscale\n    model: ${ref(image-data-custom)}\n    props:\n      type: image\n      z: ?{z}\n      colorscale: \"Viridis\"\ncharts:\n  - name: Image Plot with Custom Colorscale\n    traces:\n      - ${ref(Image Plot with Custom Colorscale)}\n    layout:\n      title:\n        text: Image Plot with Custom Colorscale&lt;br&gt;&lt;sub&gt;Custom Coloring for Image Data&lt;/sub&gt;\n</code></pre> <p>This example shows an <code>image</code> plot with axis labels and annotations to provide context for the image data:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: image-data-annotated\n    args:\n      - echo\n      - |\n        z\n        1,0,0,1\n        0,1,1,0\n        0,0,1,1\ntraces:\n  - name: Image Plot with Axis Annotations\n    model: ${ref(image-data-annotated)}\n    props:\n      type: image\n      z: ?{z}\ncharts:\n  - name: Image Plot with Axis Annotations\n    traces:\n      - ${ref(Image Plot with Axis Annotations)}\n    layout:\n      title:\n        text: Image Plot with Axis Annotations&lt;br&gt;&lt;sub&gt;Image with Axes&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"X Axis\"\n      yaxis:\n        title:\n          text: \"Y Axis\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Image/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>image</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>colormodel: 'any' #(1)!\ncustomdata: 'array' #(2)!\ncustomdatasrc: 'string' #(3)!\ndx: 'number' #(4)!\ndy: 'number' #(5)!\nhoverinfo: 'array' #(6)!\nhoverinfosrc: 'string' #(7)!\nhoverlabel:\n  align: 'array' #(8)!\n  alignsrc: 'string' #(9)!\n  bgcolor: 'color | array' #(10)!\n  bgcolorsrc: 'string' #(11)!\n  bordercolor: 'color | array' #(12)!\n  bordercolorsrc: 'string' #(13)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(14)!\n    family: 'string | array' #(15)!\n    familysrc: 'string' #(16)!\n    lineposition: 'array' #(17)!\n    linepositionsrc: 'string' #(18)!\n    shadow: 'string | array' #(19)!\n    shadowsrc: 'string' #(20)!\n    size: number | array\n    sizesrc: 'string' #(21)!\n    style: 'array' #(22)!\n    stylesrc: 'string' #(23)!\n    textcase: 'array' #(24)!\n    textcasesrc: 'string' #(25)!\n    variant: 'array' #(26)!\n    variantsrc: 'string' #(27)!\n    weight: 'integer | array' #(28)!\n    weightsrc: 'string' #(29)!\n  namelength: 'integer | array' #(30)!\n  namelengthsrc: 'string' #(31)!\nhovertemplate: 'string | array' #(32)!\nhovertemplatesrc: 'string' #(33)!\nhovertext: 'array' #(34)!\nhovertextsrc: 'string' #(35)!\nids: 'array' #(36)!\nidssrc: 'string' #(37)!\nlegend: 'string' #(38)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(39)!\n    lineposition: 'string' #(40)!\n    shadow: 'string' #(41)!\n    size: number\n    style: 'any' #(42)!\n    textcase: 'any' #(43)!\n    variant: 'any' #(44)!\n    weight: 'integer' #(45)!\n  text: 'string' #(46)!\nlegendrank: 'number' #(47)!\nlegendwidth: 'number' #(48)!\nmetasrc: 'string' #(49)!\nname: 'string' #(50)!\nopacity: 'number' #(51)!\nsource: 'string' #(52)!\nstream:\n  maxpoints: 'number' #(53)!\n  token: 'string' #(54)!\ntext: 'array' #(55)!\ntextsrc: 'string' #(56)!\ntype: image\nuid: 'string' #(57)!\nvisible: 'any' #(58)!\nxaxis: 'string' #(59)!\nyaxis: 'string' #(60)!\nz: 'array' #(61)!\nzmax: 'array' #(62)!\nzmin: 'array' #(63)!\nzorder: 'integer' #(64)!\nzsmooth: 'any' #(65)!\nzsrc: 'string' #(66)!\n</code></pre> <ol> <li>Color model used to map the numerical color components described in <code>z</code> into colors. If <code>source</code> is specified, this attribute will be set to <code>rgba256</code> otherwise it defaults to <code>rgb</code>.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Set the pixel's horizontal size.</li> <li>Set the pixel's vertical size</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>z</code>, <code>color</code> and <code>colormodel</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Specifies the data URI of the image to be visualized. The URI consists of \"data:image/[][;base64],\"</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with each z value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.</li> <li>Array defining the higher bound for each color component. Note that the default value will depend on the colormodel. For the <code>rgb</code> colormodel, it is [255, 255, 255]. For the <code>rgba</code> colormodel, it is [255, 255, 255, 1]. For the <code>rgba256</code> colormodel, it is [255, 255, 255, 255]. For the <code>hsl</code> colormodel, it is [360, 100, 100]. For the <code>hsla</code> colormodel, it is [360, 100, 100, 1].</li> <li>Array defining the lower bound for each color component. Note that the default value will depend on the colormodel. For the <code>rgb</code> colormodel, it is [0, 0, 0]. For the <code>rgba</code> colormodel, it is [0, 0, 0, 0]. For the <code>rgba256</code> colormodel, it is [0, 0, 0, 0]. For the <code>hsl</code> colormodel, it is [0, 0, 0]. For the <code>hsla</code> colormodel, it is [0, 0, 0, 0].</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> <li>Picks a smoothing algorithm used to smooth <code>z</code> data. This only applies for image traces that use the <code>source</code> attribute.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Indicator/","title":"Indicator","text":""},{"location":"reference/configuration/Trace/Props/Indicator/#indicator","title":"Indicator","text":""},{"location":"reference/configuration/Trace/Props/Indicator/#overview","title":"Overview","text":"<p>The <code>indicator</code> trace type is used to create key performance indicator (KPI) visualizations, allowing you to display single or aggregated values in a gauge or numeric format. Indicators are great for showing metrics like progress, performance, or key values at a glance.</p> <p>You can customize the gauge, delta values, colors, and text annotations to represent your data effectively. Indicator plots are widely used in dashboards and reporting.</p> <p>Common Uses</p> <ul> <li>KPI Dashboards: Displaying key metrics, progress, or performance indicators.</li> <li>Gauges: Visualizing values as a gauge to track goals or targets.</li> <li>Highlighting Change: Showing the difference between two points in time.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Indicator/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Numeric IndicatorGauge IndicatorDelta Indicator with Comparison <p>Here's a simple <code>indicator</code> plot displaying a single numeric value:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: indicator-data\n    args:\n      - echo\n      - |\n        value\n        75\ntraces:\n  - name: Simple Numeric Indicator\n    model: ${ref(indicator-data)}\n    columns:\n      val: value\n      sign: case when value &gt; 0 then '&lt;sup&gt;+&lt;/sup&gt;' else '&lt;sup&gt;-&lt;/sup&gt;' end\n    props:\n      type: indicator\n      mode: \"number\"\n      value: column(val)[0]\n      number: \n        suffix: '&lt;sub&gt;hrs&lt;/sub&gt;'\n        prefix: column(sign)[0]\n        font: \n          size: 100\ncharts:\n  - name: Simple Numeric Indicator Chart\n    traces:\n      - ${ref(Simple Numeric Indicator)}\n    layout:\n      title:\n        text: Simple Numeric Indicator&lt;br&gt;&lt;sub&gt;Displaying a Single Value&lt;/sub&gt;\n    margin: \n      l: 0\n      r: 0\n      b: 50 \n</code></pre> <p>This example shows a <code>gauge</code> indicator to represent a value and its progress toward a goal:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: indicator-data-gauge\n    args:\n      - echo\n      - |\n        value\n        65\ntraces:\n  - name: Gauge Indicator\n    model: ${ref(indicator-data-gauge)}\n    columns: \n      val: value\n    props:\n      type: indicator\n      mode: \"gauge+number\"\n      value: column(val)[0]\n      gauge:\n        axis:\n          range: [0, 100]\n        bar:\n          color: \"#17becf\"\ncharts:\n  - name: Gauge Indicator Chart\n    traces:\n      - ${ref(Gauge Indicator)}\n    layout:\n      title:\n        text: Gauge Indicator&lt;br&gt;&lt;sub&gt;Progress Towards a Target&lt;/sub&gt;\n</code></pre> <p>This example demonstrates an <code>indicator</code> plot with delta values, comparing the current value to a previous value:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: indicator-data-delta\n    args:\n      - echo\n      - |\n        sort,value\n        3,85\n        2,75\n        1,65\n        0,55\ntraces:\n  - name: Delta Indicator with Comparison\n    model: ${ref(indicator-data-delta)}\n    columns: \n      val: value \n    props:\n      type: indicator\n      mode: \"number+delta\"\n      value: column(val)[0]\n      delta:\n        reference: column(val)[1]\n    order_by: \n      - ?{sort desc}\ncharts:\n  - name: Delta Indicator with Comparison Chart\n    traces:\n      - ${ref(Delta Indicator with Comparison)}\n    layout:\n      title:\n        text: Delta Indicator with Comparison&lt;br&gt;&lt;sub&gt;Showing Change from Previous Value&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Indicator/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>indicator</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>align: 'any' #(1)!\ncustomdata: 'array' #(2)!\ncustomdatasrc: 'string' #(3)!\ndelta:\n  decreasing:\n    color: 'any' #(4)!\n    symbol: 'string' #(5)!\n  font:\n    color: any\n    family: 'string' #(6)!\n    lineposition: 'string' #(7)!\n    shadow: 'string' #(8)!\n    size: number\n    style: 'any' #(9)!\n    textcase: 'any' #(10)!\n    variant: 'any' #(11)!\n    weight: 'integer' #(12)!\n  increasing:\n    color: 'any' #(13)!\n    symbol: 'string' #(14)!\n  position: 'any' #(15)!\n  prefix: 'string' #(16)!\n  reference: 'number' #(17)!\n  relative: 'boolean' #(18)!\n  suffix: 'string' #(19)!\n  valueformat: 'string' #(20)!\ndomain:\n  column: 'integer' #(21)!\n  row: 'integer' #(22)!\n  x: 'array' #(23)!\n  y: 'array' #(24)!\ngauge:\n  axis:\n    exponentformat: 'any' #(25)!\n    minexponent: 'number' #(26)!\n    nticks: 'integer' #(27)!\n    range: 'array' #(28)!\n    separatethousands: 'boolean' #(29)!\n    showexponent: 'any' #(30)!\n    showticklabels: 'boolean' #(31)!\n    showtickprefix: 'any' #(32)!\n    showticksuffix: 'any' #(33)!\n    tickangle: 'number' #(34)!\n    tickcolor: 'any' #(35)!\n    tickfont:\n      color: any\n      family: 'string' #(36)!\n      lineposition: 'string' #(37)!\n      shadow: 'string' #(38)!\n      size: number\n      style: 'any' #(39)!\n      textcase: 'any' #(40)!\n      variant: 'any' #(41)!\n      weight: 'integer' #(42)!\n    tickformat: 'string' #(43)!\n    tickformatstops: array\n    ticklabelstep: 'integer' #(44)!\n    ticklen: 'number' #(45)!\n    tickmode: 'any' #(46)!\n    tickprefix: 'string' #(47)!\n    ticks: 'any' #(48)!\n    ticksuffix: 'string' #(49)!\n    ticktext: 'array' #(50)!\n    ticktextsrc: 'string' #(51)!\n    tickvals: 'array' #(52)!\n    tickvalssrc: 'string' #(53)!\n    tickwidth: 'number' #(54)!\n    visible: 'boolean' #(55)!\n  bar:\n    color: 'any' #(56)!\n    line:\n      color: 'any' #(57)!\n      width: 'number' #(58)!\n    thickness: 'number' #(59)!\n  bgcolor: 'any' #(60)!\n  bordercolor: 'any' #(61)!\n  borderwidth: 'number' #(62)!\n  shape: 'any' #(63)!\n  steps: array\n  threshold:\n    line:\n      color: 'any' #(64)!\n      width: 'number' #(65)!\n    thickness: 'number' #(66)!\n    value: 'number' #(67)!\nids: 'array' #(68)!\nidssrc: 'string' #(69)!\nlegend: 'string' #(70)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(71)!\n    lineposition: 'string' #(72)!\n    shadow: 'string' #(73)!\n    size: number\n    style: 'any' #(74)!\n    textcase: 'any' #(75)!\n    variant: 'any' #(76)!\n    weight: 'integer' #(77)!\n  text: 'string' #(78)!\nlegendrank: 'number' #(79)!\nlegendwidth: 'number' #(80)!\nmetasrc: 'string' #(81)!\nmode: 'string' #(82)!\nname: 'string' #(83)!\nnumber:\n  font:\n    color: any\n    family: 'string' #(84)!\n    lineposition: 'string' #(85)!\n    shadow: 'string' #(86)!\n    size: number\n    style: 'any' #(87)!\n    textcase: 'any' #(88)!\n    variant: 'any' #(89)!\n    weight: 'integer' #(90)!\n  prefix: 'string' #(91)!\n  suffix: 'string' #(92)!\n  valueformat: 'string' #(93)!\nstream:\n  maxpoints: 'number' #(94)!\n  token: 'string' #(95)!\ntitle:\n  align: 'any' #(96)!\n  font:\n    color: any\n    family: 'string' #(97)!\n    lineposition: 'string' #(98)!\n    shadow: 'string' #(99)!\n    size: number\n    style: 'any' #(100)!\n    textcase: 'any' #(101)!\n    variant: 'any' #(102)!\n    weight: 'integer' #(103)!\n  text: 'string' #(104)!\ntype: indicator\nuid: 'string' #(105)!\nvalue: 'number' #(106)!\nvisible: 'any' #(107)!\n</code></pre> <ol> <li>Sets the horizontal alignment of the <code>text</code> within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the color for increasing value.</li> <li>Sets the symbol to display for increasing value</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the color for increasing value.</li> <li>Sets the symbol to display for increasing value</li> <li>Sets the position of delta with respect to the number.</li> <li>Sets a prefix appearing before the delta.</li> <li>Sets the reference value to compute the delta. By default, it is set to the current value.</li> <li>Show relative change</li> <li>Sets a suffix appearing next to the delta.</li> <li>Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</li> <li>If there is a layout grid, use the domain for this column in the grid for this indicator trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this indicator trace .</li> <li>Sets the horizontal domain of this indicator trace (in plot fraction).</li> <li>Sets the vertical domain of this indicator trace (in plot fraction).</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the range of this axis.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</li> <li>Sets the background color of the arc.</li> <li>Sets the color of the line enclosing each sector.</li> <li>Sets the width (in px) of the line enclosing each sector.</li> <li>Sets the thickness of the bar as a fraction of the total thickness of the gauge.</li> <li>Sets the gauge background color.</li> <li>Sets the color of the border enclosing the gauge.</li> <li>Sets the width (in px) of the border enclosing the gauge.</li> <li>Set the shape of the gauge</li> <li>Sets the color of the threshold line.</li> <li>Sets the width (in px) of the threshold line.</li> <li>Sets the thickness of the threshold line as a fraction of the thickness of the gauge.</li> <li>Sets a threshold value drawn as a line.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines how the value is displayed on the graph. <code>number</code> displays the value numerically in text. <code>delta</code> displays the difference to a reference value in text. Finally, <code>gauge</code> displays the value graphically on an axis.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets a prefix appearing before the number.</li> <li>Sets a suffix appearing next to the number.</li> <li>Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the horizontal alignment of the title. It defaults to <code>center</code> except for bullet charts for which it defaults to right.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of this indicator.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the number to be displayed.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Isosurface/","title":"Isosurface","text":""},{"location":"reference/configuration/Trace/Props/Isosurface/#isosurface","title":"Isosurface","text":""},{"location":"reference/configuration/Trace/Props/Isosurface/#overview","title":"Overview","text":"<p>The <code>isosurface</code> trace type is used to create 3D isosurface visualizations, which represent a 3D volume using surfaces of constant values. Isosurfaces are commonly used in scientific visualization, such as fluid dynamics, medical imaging, or geospatial data, to show regions of interest within a 3D space.</p> <p>You can customize the colors, opacity, and surface rendering to visualize 3D data effectively.</p> <p>Common Uses</p> <ul> <li>Scientific Visualization: Representing surfaces of constant values in a 3D volume.</li> <li>Medical Imaging: Displaying 3D representations of structures, such as in MRI or CT scans.</li> <li>Geospatial and Engineering Data: Visualizing 3D volumes and their properties.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Isosurface/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Isosurface PlotComplex Isosurface Plot with Slice <p>Here's a simple <code>isosurface</code> plot showing a constant value surface within a 3D grid:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: isosurface-data-simple\n    args:\n      - echo\n      - |\n        idx,x,y,z,value\n        0,0,0,1,1\n        1,0,1,1,2\n        2,0,0,0,3\n        3,0,1,0,4\n        4,1,0,1,5\n        5,1,1,1,6\n        6,1,0,0,7\n        7,1,1,0,8\n\ntraces:\n  - name: Simple Isosurface Plot Trace\n    model: ${ref(isosurface-data-simple)}\n    props:\n      type: isosurface\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      value: ?{value}\n      isomin: 2 \n      isomax: 6 \n      colorscale: \"Reds\"\n    order_by: \n      - ?{ idx asc }\ncharts:\n  - name: Simple Isosurface Chart\n    traces:\n      - ${ref(Simple Isosurface Plot Trace)}\n    layout:\n      title:\n        text: Simple Isosurface Plot&lt;br&gt;&lt;sub&gt;3D Volume Visualization&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a more complex <code>isosurface</code> plot with a slice and custom camera angle:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: isosurface-data\n    args:\n      - curl\n      - https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/fractal-cubic.csv\n\ntraces:\n  - name: Complex With Slice Isosurface Plot\n    model: ${ref(isosurface-data)}\n    props:\n      type: isosurface\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      value: ?{value}\n      isomin: -100\n      isomax: 100\n      surface: \n        show: true \n        count: 1 \n        fill: .8\n      slices: \n        z: \n          show: true\n          locations: [-0.1]\n      caps: \n        x: \n          show: false \n        y: \n          show: false \n        z: \n          show: false\n    order_by: \n      - ?{idx asc}\n\ncharts:\n  - name: Complex With Slice Isosurface Chart\n    traces:\n      - ${ref(Complex With Slice Isosurface Plot)} \n    layout:\n      title:\n        text: Complex With Slice Isosurface Plot&lt;br&gt;&lt;sub&gt;3D Volume Visualization&lt;/sub&gt;\n      margin: \n        t: 50\n        b: 20\n      camera: \n        eye: \n          x: 1.86\n          y: 0.61\n          z: 0.98\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Isosurface/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>isosurface</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\ncaps:\n  x:\n    fill: 'number' #(2)!\n    show: 'boolean' #(3)!\n  y:\n    fill: 'number' #(4)!\n    show: 'boolean' #(5)!\n  z:\n    fill: 'number' #(6)!\n    show: 'boolean' #(7)!\ncauto: 'boolean' #(8)!\ncmax: 'number' #(9)!\ncmid: 'number' #(10)!\ncmin: 'number' #(11)!\ncoloraxis: 'string' #(12)!\ncolorbar:\n  bgcolor: 'any' #(13)!\n  bordercolor: 'any' #(14)!\n  borderwidth: 'number' #(15)!\n  exponentformat: 'any' #(16)!\n  len: 'number' #(17)!\n  lenmode: 'any' #(18)!\n  minexponent: 'number' #(19)!\n  nticks: 'integer' #(20)!\n  orientation: 'any' #(21)!\n  outlinecolor: 'any' #(22)!\n  outlinewidth: 'number' #(23)!\n  separatethousands: 'boolean' #(24)!\n  showexponent: 'any' #(25)!\n  showticklabels: 'boolean' #(26)!\n  showtickprefix: 'any' #(27)!\n  showticksuffix: 'any' #(28)!\n  thickness: 'number' #(29)!\n  thicknessmode: 'any' #(30)!\n  tickangle: 'number' #(31)!\n  tickcolor: 'any' #(32)!\n  tickfont:\n    color: any\n    family: 'string' #(33)!\n    lineposition: 'string' #(34)!\n    shadow: 'string' #(35)!\n    size: number\n    style: 'any' #(36)!\n    textcase: 'any' #(37)!\n    variant: 'any' #(38)!\n    weight: 'integer' #(39)!\n  tickformat: 'string' #(40)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(41)!\n  ticklabelposition: 'any' #(42)!\n  ticklabelstep: 'integer' #(43)!\n  ticklen: 'number' #(44)!\n  tickmode: 'any' #(45)!\n  tickprefix: 'string' #(46)!\n  ticks: 'any' #(47)!\n  ticksuffix: 'string' #(48)!\n  ticktext: 'array' #(49)!\n  ticktextsrc: 'string' #(50)!\n  tickvals: 'array' #(51)!\n  tickvalssrc: 'string' #(52)!\n  tickwidth: 'number' #(53)!\n  title:\n    font:\n      color: any\n      family: 'string' #(54)!\n      lineposition: 'string' #(55)!\n      shadow: 'string' #(56)!\n      size: number\n      style: 'any' #(57)!\n      textcase: 'any' #(58)!\n      variant: 'any' #(59)!\n      weight: 'integer' #(60)!\n    side: 'any' #(61)!\n    text: 'string' #(62)!\n  x: 'number' #(63)!\n  xanchor: 'any' #(64)!\n  xpad: 'number' #(65)!\n  xref: 'any' #(66)!\n  y: 'number' #(67)!\n  yanchor: 'any' #(68)!\n  ypad: 'number' #(69)!\n  yref: 'any' #(70)!\ncolorscale: 'any' #(71)!\ncontour:\n  color: 'any' #(72)!\n  show: 'boolean' #(73)!\n  width: 'number' #(74)!\ncustomdata: 'array' #(75)!\ncustomdatasrc: 'string' #(76)!\nflatshading: 'boolean' #(77)!\nhoverinfo: 'array' #(78)!\nhoverinfosrc: 'string' #(79)!\nhoverlabel:\n  align: 'array' #(80)!\n  alignsrc: 'string' #(81)!\n  bgcolor: 'color | array' #(82)!\n  bgcolorsrc: 'string' #(83)!\n  bordercolor: 'color | array' #(84)!\n  bordercolorsrc: 'string' #(85)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(86)!\n    family: 'string | array' #(87)!\n    familysrc: 'string' #(88)!\n    lineposition: 'array' #(89)!\n    linepositionsrc: 'string' #(90)!\n    shadow: 'string | array' #(91)!\n    shadowsrc: 'string' #(92)!\n    size: number | array\n    sizesrc: 'string' #(93)!\n    style: 'array' #(94)!\n    stylesrc: 'string' #(95)!\n    textcase: 'array' #(96)!\n    textcasesrc: 'string' #(97)!\n    variant: 'array' #(98)!\n    variantsrc: 'string' #(99)!\n    weight: 'integer | array' #(100)!\n    weightsrc: 'string' #(101)!\n  namelength: 'integer | array' #(102)!\n  namelengthsrc: 'string' #(103)!\nhovertemplate: 'string | array' #(104)!\nhovertemplatesrc: 'string' #(105)!\nhovertext: 'string | array' #(106)!\nhovertextsrc: 'string' #(107)!\nids: 'array' #(108)!\nidssrc: 'string' #(109)!\nisomax: 'number' #(110)!\nisomin: 'number' #(111)!\nlegend: 'string' #(112)!\nlegendgroup: 'string' #(113)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(114)!\n    lineposition: 'string' #(115)!\n    shadow: 'string' #(116)!\n    size: number\n    style: 'any' #(117)!\n    textcase: 'any' #(118)!\n    variant: 'any' #(119)!\n    weight: 'integer' #(120)!\n  text: 'string' #(121)!\nlegendrank: 'number' #(122)!\nlegendwidth: 'number' #(123)!\nlighting:\n  ambient: 'number' #(124)!\n  diffuse: 'number' #(125)!\n  facenormalsepsilon: 'number' #(126)!\n  fresnel: 'number' #(127)!\n  roughness: 'number' #(128)!\n  specular: 'number' #(129)!\n  vertexnormalsepsilon: 'number' #(130)!\nlightposition:\n  x: 'number' #(131)!\n  y: 'number' #(132)!\n  z: 'number' #(133)!\nmetasrc: 'string' #(134)!\nname: 'string' #(135)!\nopacity: 'number' #(136)!\nreversescale: 'boolean' #(137)!\nscene: 'string' #(138)!\nshowlegend: 'boolean' #(139)!\nshowscale: 'boolean' #(140)!\nslices:\n  x:\n    fill: 'number' #(141)!\n    locations: 'array' #(142)!\n    locationssrc: 'string' #(143)!\n    show: 'boolean' #(144)!\n  y:\n    fill: 'number' #(145)!\n    locations: 'array' #(146)!\n    locationssrc: 'string' #(147)!\n    show: 'boolean' #(148)!\n  z:\n    fill: 'number' #(149)!\n    locations: 'array' #(150)!\n    locationssrc: 'string' #(151)!\n    show: 'boolean' #(152)!\nspaceframe:\n  fill: 'number' #(153)!\n  show: 'boolean' #(154)!\nstream:\n  maxpoints: 'number' #(155)!\n  token: 'string' #(156)!\nsurface:\n  count: 'integer' #(157)!\n  fill: 'number' #(158)!\n  pattern: 'string' #(159)!\n  show: 'boolean' #(160)!\ntext: 'string | array' #(161)!\ntextsrc: 'string' #(162)!\ntype: isosurface\nuid: 'string' #(163)!\nvalue: 'array' #(164)!\nvaluehoverformat: 'string' #(165)!\nvaluesrc: 'string' #(166)!\nvisible: 'any' #(167)!\nx: 'array' #(168)!\nxhoverformat: 'string' #(169)!\nxsrc: 'string' #(170)!\ny: 'array' #(171)!\nyhoverformat: 'string' #(172)!\nysrc: 'string' #(173)!\nz: 'array' #(174)!\nzhoverformat: 'string' #(175)!\nzsrc: 'string' #(176)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Sets the fill ratio of the <code>caps</code>. The default fill value of the <code>caps</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the x <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>caps</code>. The default fill value of the <code>caps</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the y <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>caps</code>. The default fill value of the <code>caps</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the z <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here <code>value</code>) or the bounds set in <code>cmin</code> and <code>cmax</code> Defaults to <code>false</code> when <code>cmin</code> and <code>cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as <code>value</code> and if set, <code>cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>cmin</code> and/or <code>cmax</code> to be equidistant to this point. Value should have the same units as <code>value</code>. Has no effect when <code>cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as <code>value</code> and if set, <code>cmax</code> must be set as well.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>cmin</code> and <code>cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the color of the contour lines.</li> <li>Sets whether or not dynamic contours are shown on hover</li> <li>Sets the width of the contour lines.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the maximum boundary for iso-surface plot.</li> <li>Sets the minimum boundary for iso-surface plot.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Ambient light increases overall color visibility but can wash out the image.</li> <li>Represents the extent that incident rays are reflected in a range of angles.</li> <li>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</li> <li>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</li> <li>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</li> <li>Represents the level that incident rays are reflected in a single direction, causing shine.</li> <li>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</li> <li>Numeric vector, representing the X coordinate for each vertex.</li> <li>Numeric vector, representing the Y coordinate for each vertex.</li> <li>Numeric vector, representing the Z coordinate for each vertex.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the surface. Please note that in the case of using high <code>opacity</code> values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</li> <li>Reverses the color mapping if true. If true, <code>cmin</code> will correspond to the last color in the array and <code>cmax</code> will correspond to the first color.</li> <li>Sets a reference between this trace's 3D coordinate system and a 3D scene. If scene (the default value), the (x,y,z) coordinates refer to <code>layout.scene</code>. If scene2, the (x,y,z) coordinates refer to <code>layout.scene2</code>, and so on.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Determines whether or not slice planes about the x dimension are drawn.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Determines whether or not slice planes about the y dimension are drawn.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Determines whether or not slice planes about the z dimension are drawn.</li> <li>Sets the fill ratio of the <code>spaceframe</code> elements. The default fill value is 0.15 meaning that only 15% of the area of every faces of tetras would be shaded. Applying a greater <code>fill</code> ratio would allow the creation of stronger elements or could be sued to have entirely closed areas (in case of using 1).</li> <li>Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.</li> <li>Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is <code>all</code> meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code> and <code>E</code> may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.</li> <li>Hides/displays surfaces between minimum and maximum iso-values.</li> <li>Sets the text elements associated with the vertices. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the 4th dimension (value) of the vertices.</li> <li>Sets the hover text formatting rulefor <code>value</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Sets the source reference on Chart Studio Cloud for <code>value</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the X coordinates of the vertices on X axis.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the Y coordinates of the vertices on Y axis.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the Z coordinates of the vertices on Z axis.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>zaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Mesh3d/","title":"Mesh3d","text":""},{"location":"reference/configuration/Trace/Props/Mesh3d/#mesh3d","title":"Mesh3d","text":""},{"location":"reference/configuration/Trace/Props/Mesh3d/#overview","title":"Overview","text":"<p>The <code>mesh3d</code> trace type is used to create 3D mesh plots, which visualize 3D surfaces defined by vertices and connections between them. Mesh plots are commonly used in 3D data visualization to represent geometric shapes, surfaces, and volumes.</p> <p>You can customize the colors, vertex positions, and opacity to represent 3D data and geometries effectively.</p> <p>Common Uses</p> <ul> <li>3D Geometries: Visualizing surfaces and volumes in 3D space.</li> <li>Scientific Visualization: Representing complex 3D data in fields like physics, engineering, and geology.</li> <li>3D Surface Rendering: Displaying 3D surfaces from a set of points and connectivity information.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Mesh3d/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Mesh3D Plot <p>Here's a simple <code>mesh3d</code> plot visualizing a 3D mesh structure with vertices and connections:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: mesh3d-data\n    args:\n      - echo\n      - |\n        idx,x,y,z,i,j,k,color\n        0,0,0,0,0,1,2,#1f77b4\n        1,1,0,2,0,2,3,#ff7f0e\n        2,2,1,0,0,3,1,#2ca02c\n        3,0,2,1,1,2,3,#9467bd\n\ntraces:\n  - name: Simple Mesh3D Plot\n    model: ${ref(mesh3d-data)}\n    props:\n      type: mesh3d\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      i: ?{i}\n      j: ?{j}\n      k: ?{k}\n      facecolor: ?{color}\n      opacity: 0.7\n    order_by: \n      - ?{ idx asc}\ncharts:\n  - name: Simple Mesh3D Chart\n    traces:\n      - ${ref(Simple Mesh3D Plot)}\n    layout:\n      title:\n        text: Simple Mesh3D Plot&lt;br&gt;&lt;sub&gt;3D Mesh Surface Visualization&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Mesh3d/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>mesh3d</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>alphahull: 'number' #(1)!\nautocolorscale: 'boolean' #(2)!\ncauto: 'boolean' #(3)!\ncmax: 'number' #(4)!\ncmid: 'number' #(5)!\ncmin: 'number' #(6)!\ncolor: 'any' #(7)!\ncoloraxis: 'string' #(8)!\ncolorbar:\n  bgcolor: 'any' #(9)!\n  bordercolor: 'any' #(10)!\n  borderwidth: 'number' #(11)!\n  exponentformat: 'any' #(12)!\n  len: 'number' #(13)!\n  lenmode: 'any' #(14)!\n  minexponent: 'number' #(15)!\n  nticks: 'integer' #(16)!\n  orientation: 'any' #(17)!\n  outlinecolor: 'any' #(18)!\n  outlinewidth: 'number' #(19)!\n  separatethousands: 'boolean' #(20)!\n  showexponent: 'any' #(21)!\n  showticklabels: 'boolean' #(22)!\n  showtickprefix: 'any' #(23)!\n  showticksuffix: 'any' #(24)!\n  thickness: 'number' #(25)!\n  thicknessmode: 'any' #(26)!\n  tickangle: 'number' #(27)!\n  tickcolor: 'any' #(28)!\n  tickfont:\n    color: any\n    family: 'string' #(29)!\n    lineposition: 'string' #(30)!\n    shadow: 'string' #(31)!\n    size: number\n    style: 'any' #(32)!\n    textcase: 'any' #(33)!\n    variant: 'any' #(34)!\n    weight: 'integer' #(35)!\n  tickformat: 'string' #(36)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(37)!\n  ticklabelposition: 'any' #(38)!\n  ticklabelstep: 'integer' #(39)!\n  ticklen: 'number' #(40)!\n  tickmode: 'any' #(41)!\n  tickprefix: 'string' #(42)!\n  ticks: 'any' #(43)!\n  ticksuffix: 'string' #(44)!\n  ticktext: 'array' #(45)!\n  ticktextsrc: 'string' #(46)!\n  tickvals: 'array' #(47)!\n  tickvalssrc: 'string' #(48)!\n  tickwidth: 'number' #(49)!\n  title:\n    font:\n      color: any\n      family: 'string' #(50)!\n      lineposition: 'string' #(51)!\n      shadow: 'string' #(52)!\n      size: number\n      style: 'any' #(53)!\n      textcase: 'any' #(54)!\n      variant: 'any' #(55)!\n      weight: 'integer' #(56)!\n    side: 'any' #(57)!\n    text: 'string' #(58)!\n  x: 'number' #(59)!\n  xanchor: 'any' #(60)!\n  xpad: 'number' #(61)!\n  xref: 'any' #(62)!\n  y: 'number' #(63)!\n  yanchor: 'any' #(64)!\n  ypad: 'number' #(65)!\n  yref: 'any' #(66)!\ncolorscale: 'any' #(67)!\ncontour:\n  color: 'any' #(68)!\n  show: 'boolean' #(69)!\n  width: 'number' #(70)!\ncustomdata: 'array' #(71)!\ncustomdatasrc: 'string' #(72)!\ndelaunayaxis: 'any' #(73)!\nfacecolor: 'array' #(74)!\nfacecolorsrc: 'string' #(75)!\nflatshading: 'boolean' #(76)!\nhoverinfo: 'array' #(77)!\nhoverinfosrc: 'string' #(78)!\nhoverlabel:\n  align: 'array' #(79)!\n  alignsrc: 'string' #(80)!\n  bgcolor: 'color | array' #(81)!\n  bgcolorsrc: 'string' #(82)!\n  bordercolor: 'color | array' #(83)!\n  bordercolorsrc: 'string' #(84)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(85)!\n    family: 'string | array' #(86)!\n    familysrc: 'string' #(87)!\n    lineposition: 'array' #(88)!\n    linepositionsrc: 'string' #(89)!\n    shadow: 'string | array' #(90)!\n    shadowsrc: 'string' #(91)!\n    size: number | array\n    sizesrc: 'string' #(92)!\n    style: 'array' #(93)!\n    stylesrc: 'string' #(94)!\n    textcase: 'array' #(95)!\n    textcasesrc: 'string' #(96)!\n    variant: 'array' #(97)!\n    variantsrc: 'string' #(98)!\n    weight: 'integer | array' #(99)!\n    weightsrc: 'string' #(100)!\n  namelength: 'integer | array' #(101)!\n  namelengthsrc: 'string' #(102)!\nhovertemplate: 'string | array' #(103)!\nhovertemplatesrc: 'string' #(104)!\nhovertext: 'string | array' #(105)!\nhovertextsrc: 'string' #(106)!\ni: 'array' #(107)!\nids: 'array' #(108)!\nidssrc: 'string' #(109)!\nintensity: 'array' #(110)!\nintensitymode: 'any' #(111)!\nintensitysrc: 'string' #(112)!\nisrc: 'string' #(113)!\nj: 'array' #(114)!\njsrc: 'string' #(115)!\nk: 'array' #(116)!\nksrc: 'string' #(117)!\nlegend: 'string' #(118)!\nlegendgroup: 'string' #(119)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(120)!\n    lineposition: 'string' #(121)!\n    shadow: 'string' #(122)!\n    size: number\n    style: 'any' #(123)!\n    textcase: 'any' #(124)!\n    variant: 'any' #(125)!\n    weight: 'integer' #(126)!\n  text: 'string' #(127)!\nlegendrank: 'number' #(128)!\nlegendwidth: 'number' #(129)!\nlighting:\n  ambient: 'number' #(130)!\n  diffuse: 'number' #(131)!\n  facenormalsepsilon: 'number' #(132)!\n  fresnel: 'number' #(133)!\n  roughness: 'number' #(134)!\n  specular: 'number' #(135)!\n  vertexnormalsepsilon: 'number' #(136)!\nlightposition:\n  x: 'number' #(137)!\n  y: 'number' #(138)!\n  z: 'number' #(139)!\nmetasrc: 'string' #(140)!\nname: 'string' #(141)!\nopacity: 'number' #(142)!\nreversescale: 'boolean' #(143)!\nscene: 'string' #(144)!\nshowlegend: 'boolean' #(145)!\nshowscale: 'boolean' #(146)!\nstream:\n  maxpoints: 'number' #(147)!\n  token: 'string' #(148)!\ntext: 'string | array' #(149)!\ntextsrc: 'string' #(150)!\ntype: mesh3d\nuid: 'string' #(151)!\nvertexcolor: 'array' #(152)!\nvertexcolorsrc: 'string' #(153)!\nvisible: 'any' #(154)!\nx: 'array' #(155)!\nxcalendar: 'any' #(156)!\nxhoverformat: 'string' #(157)!\nxsrc: 'string' #(158)!\ny: 'array' #(159)!\nycalendar: 'any' #(160)!\nyhoverformat: 'string' #(161)!\nysrc: 'string' #(162)!\nz: 'array' #(163)!\nzcalendar: 'any' #(164)!\nzhoverformat: 'string' #(165)!\nzsrc: 'string' #(166)!\n</code></pre> <ol> <li>Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the <code>x</code>, <code>y</code> and <code>z</code> arrays, if the <code>i</code>, <code>j</code>, <code>k</code> arrays are not supplied. For general use of <code>mesh3d</code> it is preferred that <code>i</code>, <code>j</code>, <code>k</code> are supplied. If -1, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to <code>delaunayaxis</code>. In case the <code>delaunayaxis</code> intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of <code>delaunayaxis</code>. If &gt;0, the alpha-shape algorithm is used. In this case, the positive <code>alphahull</code> value signals the use of the alpha-shape algorithm, and its value acts as the parameter for the mesh fitting. If 0,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the <code>x</code>, <code>y</code> and <code>z</code> point set into a convex hull.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here <code>intensity</code>) or the bounds set in <code>cmin</code> and <code>cmax</code> Defaults to <code>false</code> when <code>cmin</code> and <code>cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as <code>intensity</code> and if set, <code>cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>cmin</code> and/or <code>cmax</code> to be equidistant to this point. Value should have the same units as <code>intensity</code>. Has no effect when <code>cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as <code>intensity</code> and if set, <code>cmax</code> must be set as well.</li> <li>Sets the color of the whole mesh</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>cmin</code> and <code>cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the color of the contour lines.</li> <li>Sets whether or not dynamic contours are shown on hover</li> <li>Sets the width of the contour lines.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if <code>i</code>, <code>j</code>, <code>k</code> are not provided and <code>alphahull</code> is set to indicate Delaunay triangulation.</li> <li>Sets the color of each face Overrides color and vertexcolor.</li> <li>Sets the source reference on Chart Studio Cloud for <code>facecolor</code>.</li> <li>Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the first vertex of a triangle. For example, <code>{i[m], j[m], k[m]}</code> together represent face m (triangle m) in the mesh, where <code>i[m] = n</code> points to the triplet <code>{x[n], y[n], z[n]}</code> in the vertex arrays. Therefore, each element in <code>i</code> represents a point in space, which is the first vertex of a triangle.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the intensity values for vertices or cells as defined by <code>intensitymode</code>. It can be used for plotting fields on meshes.</li> <li>Determines the source of <code>intensity</code> values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>intensity</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>i</code>.</li> <li>A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the second vertex of a triangle. For example, <code>{i[m], j[m], k[m]}</code>  together represent face m (triangle m) in the mesh, where <code>j[m] = n</code> points to the triplet <code>{x[n], y[n], z[n]}</code> in the vertex arrays. Therefore, each element in <code>j</code> represents a point in space, which is the second vertex of a triangle.</li> <li>Sets the source reference on Chart Studio Cloud for <code>j</code>.</li> <li>A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the third vertex of a triangle. For example, <code>{i[m], j[m], k[m]}</code> together represent face m (triangle m) in the mesh, where <code>k[m] = n</code> points to the triplet  <code>{x[n], y[n], z[n]}</code> in the vertex arrays. Therefore, each element in <code>k</code> represents a point in space, which is the third vertex of a triangle.</li> <li>Sets the source reference on Chart Studio Cloud for <code>k</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Ambient light increases overall color visibility but can wash out the image.</li> <li>Represents the extent that incident rays are reflected in a range of angles.</li> <li>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</li> <li>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</li> <li>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</li> <li>Represents the level that incident rays are reflected in a single direction, causing shine.</li> <li>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</li> <li>Numeric vector, representing the X coordinate for each vertex.</li> <li>Numeric vector, representing the Y coordinate for each vertex.</li> <li>Numeric vector, representing the Z coordinate for each vertex.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the surface. Please note that in the case of using high <code>opacity</code> values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</li> <li>Reverses the color mapping if true. If true, <code>cmin</code> will correspond to the last color in the array and <code>cmax</code> will correspond to the first color.</li> <li>Sets a reference between this trace's 3D coordinate system and a 3D scene. If scene (the default value), the (x,y,z) coordinates refer to <code>layout.scene</code>. If scene2, the (x,y,z) coordinates refer to <code>layout.scene2</code>, and so on.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with the vertices. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the color of each vertex Overrides color. While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.</li> <li>Sets the source reference on Chart Studio Cloud for <code>vertexcolor</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the X coordinates of the vertices. The nth element of vectors <code>x</code>, <code>y</code> and <code>z</code> jointly represent the X, Y and Z coordinates of the nth vertex.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the Y coordinates of the vertices. The nth element of vectors <code>x</code>, <code>y</code> and <code>z</code> jointly represent the X, Y and Z coordinates of the nth vertex.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the Z coordinates of the vertices. The nth element of vectors <code>x</code>, <code>y</code> and <code>z</code> jointly represent the X, Y and Z coordinates of the nth vertex.</li> <li>Sets the calendar system to use with <code>z</code> date data.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>zaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Ohlc/","title":"Ohlc","text":""},{"location":"reference/configuration/Trace/Props/Ohlc/#ohlc","title":"Ohlc","text":""},{"location":"reference/configuration/Trace/Props/Ohlc/#overview","title":"Overview","text":"<p>The <code>ohlc</code> trace type is used to create OHLC (Open, High, Low, Close) charts, which are commonly used to visualize stock market data or financial data over time. OHLC charts represent price movements for a given period using vertical bars for high and low prices, and tick marks for open and close prices.</p> <p>You can customize the colors, bar widths, and date ranges to represent financial data effectively.</p> <p>Common Uses</p> <ul> <li>Stock Market Visualization: Displaying price movement data for stocks, currencies, or commodities.</li> <li>Financial Time Series: Visualizing price fluctuations over time.</li> <li>Trading Analysis: Understanding market trends through candlestick-like visualizations.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Ohlc/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple OHLC PlotOHLC Plot with Custom Bar WidthOHLC Plot with Multiple Stocks <p>Here's a simple <code>ohlc</code> plot showing the Open, High, Low, and Close prices of a stock over time:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: ohlc-data\n    args:\n      - echo\n      - |\n        date,open,high,low,close\n        2023-01-01,100,105,95,102\n        2023-01-02,102,108,101,107\n        2023-01-03,107,110,105,109\n        2023-01-04,109,112,107,111\n        2023-01-05,111,114,110,113\ntraces:\n  - name: Simple OHLC Plot\n    model: ${ref(ohlc-data)}\n    props:\n      type: ohlc\n      x: ?{date}\n      open: ?{open}\n      high: ?{high}\n      low: ?{low}\n      close: ?{close}\n      increasing:\n        line:\n          color: \"#17becf\"\n      decreasing:\n        line:\n          color: \"#ff7f0e\"\ncharts:\n  - name: Simple OHLC Chart\n    traces:\n      - ${ref(Simple OHLC Plot)}\n    layout:\n      title:\n        text: Simple OHLC Chart&lt;br&gt;&lt;sub&gt;Stock Price Movements Over Time&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Date\"\n      yaxis:\n        title:\n          text: \"Price\"\n</code></pre> <p>This example demonstrates an <code>ohlc</code> plot with custom bar widths to adjust the spacing between the OHLC bars:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: ohlc-data-width\n    args:\n      - echo\n      - |\n        date,open,high,low,close\n        2023-02-01,200,205,195,202\n        2023-02-02,202,208,201,207\n        2023-02-03,207,210,205,209\n        2023-02-04,209,212,207,211\n        2023-02-05,211,214,210,213\ntraces:\n  - name: OHLC Plot with Custom Width\n    model: ${ref(ohlc-data-width)}\n    props:\n      type: ohlc\n      x: ?{date}\n      open: ?{open}\n      high: ?{high}\n      low: ?{low}\n      close: ?{close}\n      increasing:\n        line:\n          color: \"#2ca02c\"\n      decreasing:\n        line:\n          color: \"#d62728\"\n      line:\n        width: 3\ncharts:\n  - name: OHLC Chart with Custom Width\n    traces:\n      - ${ref(OHLC Plot with Custom Width)}\n    layout:\n      title:\n        text: OHLC Plot with Custom Width&lt;br&gt;&lt;sub&gt;Stock Prices with Custom Bar Width&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Date\"\n      yaxis:\n        title:\n          text: \"Price\"\n</code></pre> <p>This example shows an <code>ohlc</code> plot comparing multiple stocks' Open, High, Low, and Close prices over time:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: ohlc-data-multi\n    args:\n      - echo\n      - |\n        stock,date,open,high,low,close\n        AAPL,2023-03-01,150,155,145,152\n        AAPL,2023-03-02,152,158,150,156\n        AAPL,2023-03-03,156,160,154,159\n        MSFT,2023-03-01,250,255,245,252\n        MSFT,2023-03-02,252,258,250,256\n        MSFT,2023-03-03,256,260,254,259\ntraces:\n  - name: OHLC Plot for AAPL\n    model: ${ref(ohlc-data-multi)}\n    props:\n      type: ohlc\n      x: ?{date}\n      open: ?{open}\n      high: ?{high}\n      low: ?{low}\n      close: ?{close}\n      increasing:\n        line:\n          color: \"#1f77b4\"\n      decreasing:\n        line:\n          color: \"#ff7f0e\"\n    filters: \n      - ?{stock = 'AAPL'}\n  - name: OHLC Plot for MSFT\n    model: ${ref(ohlc-data-multi)}\n    props:\n      type: ohlc\n      x: ?{date}\n      open: ?{open}\n      high: ?{high}\n      low: ?{low}\n      close: ?{close}\n      increasing:\n        line:\n          color: \"#2ca02c\"\n      decreasing:\n        line:\n          color: \"#d62728\"\n    filters: \n      - ?{stock = 'MSFT'}\ncharts:\n  - name: OHLC Chart with Multiple Stocks\n    traces:\n      - ${ref(OHLC Plot for AAPL)}\n      - ${ref(OHLC Plot for MSFT)}\n    layout:\n      title:\n        text: OHLC Chart with Multiple Stocks&lt;br&gt;&lt;sub&gt;Comparing AAPL and MSFT Stock Prices&lt;/sub&gt;\n      xaxis:\n        title:\n          text: \"Date\"\n      yaxis:\n        title:\n          text: \"Price\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Ohlc/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>ohlc</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>close: 'array' #(1)!\nclosesrc: 'string' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\ndecreasing:\n  line:\n    color: 'any' #(5)!\n    dash: 'string' #(6)!\n    width: 'number' #(7)!\nhigh: 'array' #(8)!\nhighsrc: 'string' #(9)!\nhoverinfo: 'array' #(10)!\nhoverinfosrc: 'string' #(11)!\nhoverlabel:\n  align: 'array' #(12)!\n  alignsrc: 'string' #(13)!\n  bgcolor: 'color | array' #(14)!\n  bgcolorsrc: 'string' #(15)!\n  bordercolor: 'color | array' #(16)!\n  bordercolorsrc: 'string' #(17)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(18)!\n    family: 'string | array' #(19)!\n    familysrc: 'string' #(20)!\n    lineposition: 'array' #(21)!\n    linepositionsrc: 'string' #(22)!\n    shadow: 'string | array' #(23)!\n    shadowsrc: 'string' #(24)!\n    size: number | array\n    sizesrc: 'string' #(25)!\n    style: 'array' #(26)!\n    stylesrc: 'string' #(27)!\n    textcase: 'array' #(28)!\n    textcasesrc: 'string' #(29)!\n    variant: 'array' #(30)!\n    variantsrc: 'string' #(31)!\n    weight: 'integer | array' #(32)!\n    weightsrc: 'string' #(33)!\n  namelength: 'integer | array' #(34)!\n  namelengthsrc: 'string' #(35)!\n  split: 'boolean' #(36)!\nhovertext: 'string | array' #(37)!\nhovertextsrc: 'string' #(38)!\nids: 'array' #(39)!\nidssrc: 'string' #(40)!\nincreasing:\n  line:\n    color: 'any' #(41)!\n    dash: 'string' #(42)!\n    width: 'number' #(43)!\nlegend: 'string' #(44)!\nlegendgroup: 'string' #(45)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(46)!\n    lineposition: 'string' #(47)!\n    shadow: 'string' #(48)!\n    size: number\n    style: 'any' #(49)!\n    textcase: 'any' #(50)!\n    variant: 'any' #(51)!\n    weight: 'integer' #(52)!\n  text: 'string' #(53)!\nlegendrank: 'number' #(54)!\nlegendwidth: 'number' #(55)!\nline:\n  dash: 'string' #(56)!\n  width: 'number' #(57)!\nlow: 'array' #(58)!\nlowsrc: 'string' #(59)!\nmetasrc: 'string' #(60)!\nname: 'string' #(61)!\nopacity: 'number' #(62)!\nopen: 'array' #(63)!\nopensrc: 'string' #(64)!\nshowlegend: 'boolean' #(65)!\nstream:\n  maxpoints: 'number' #(66)!\n  token: 'string' #(67)!\ntext: 'string | array' #(68)!\ntextsrc: 'string' #(69)!\ntickwidth: 'number' #(70)!\ntype: ohlc\nuid: 'string' #(71)!\nvisible: 'any' #(72)!\nx: 'array' #(73)!\nxaxis: 'string' #(74)!\nxcalendar: 'any' #(75)!\nxhoverformat: 'string' #(76)!\nxperiodalignment: 'any' #(77)!\nxsrc: 'string' #(78)!\nyaxis: 'string' #(79)!\nyhoverformat: 'string' #(80)!\nzorder: 'integer' #(81)!\n</code></pre> <ol> <li>Sets the close values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>close</code>.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the line width (in px).</li> <li>Sets the high values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>high</code>.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Show hover information (open, close, high, low) in separate labels.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the line width (in px).</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px). Note that this style setting can also be set per direction via <code>increasing.line.dash</code> and <code>decreasing.line.dash</code>.</li> <li>[object Object] Note that this style setting can also be set per direction via <code>increasing.line.width</code> and <code>decreasing.line.width</code>.</li> <li>Sets the low values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>low</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the open values.</li> <li>Sets the source reference on Chart Studio Cloud for <code>open</code>.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Sets the width of the open/close tick marks relative to the x minimal interval.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the x coordinates. If absent, linear coordinate will be generated.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Parcats/","title":"Parcats","text":""},{"location":"reference/configuration/Trace/Props/Parcats/#parcats","title":"Parcats","text":""},{"location":"reference/configuration/Trace/Props/Parcats/#overview","title":"Overview","text":"<p>The <code>parcats</code> trace type is used to create parallel categories diagrams, which are useful for visualizing categorical data across multiple dimensions. It allows you to see how data flows through different categories and compare the distribution of values across them.</p> <p>You can customize the colors, line widths, and category order to represent your data and patterns effectively.</p> <p>Common Uses</p> <ul> <li>Categorical Data Visualization: Visualizing relationships between different categorical variables.</li> <li>Flow Analysis: Showing how data is distributed across multiple dimensions and comparing those paths.</li> <li>Segmentation: Visualizing how different segments of data flow through categories.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Parcats/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Parcats PlotParcats with Multiple DimensionsParcats with Custom Line Widths <p>Here's a simple <code>parcats</code> plot showing how data flows across two categorical variables:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: parcats-data\n    args:\n      - echo\n      - |\n        category_1,category_2,value\n        A,X,30\n        A,Y,20\n        B,X,25\n        B,Y,25\ntraces:\n  - name: Simple Parcats Plot\n    model: ${ref(parcats-data)}\n    props:\n      type: parcats\n      dimensions:\n        - label: \"Category 1\"\n          values: ?{category_1}\n        - label: \"Category 2\"\n          values: ?{category_2}\n      line:\n        color: ?{value}\n        colorscale: \"Viridis\"\ncharts:\n  - name: Simple Parcats Chart\n    traces:\n      - ${ref(Simple Parcats Plot)}\n    layout:\n      title:\n        text: Simple Parcats Chart&lt;br&gt;&lt;sub&gt;Parallel Categories Diagram&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>parcats</code> plot with multiple categorical dimensions, showing how data flows across three categories:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: parcats-data-multi\n    args:\n      - echo\n      - |\n        category_1,category_2,category_3,value\n        A,X,Alpha,30\n        A,Y,Beta,20\n        B,X,Alpha,25\n        B,Y,Gamma,25\ntraces:\n  - name: Parcats Plot with Multiple Dimensions\n    model: ${ref(parcats-data-multi)}\n    props:\n      type: parcats\n      dimensions:\n        - label: \"Category 1\"\n          values: ?{category_1}\n        - label: \"Category 2\"\n          values: ?{category_2}\n        - label: \"Category 3\"\n          values: ?{category_3}\n      line:\n        color: ?{value}\n        colorscale: \"Blues\"\ncharts:\n  - name: Parcats Chart with Multiple Dimensions\n    traces:\n      - ${ref(Parcats Plot with Multiple Dimensions)}\n    layout:\n      title:\n        text: Parcats Chart with Multiple Dimensions&lt;br&gt;&lt;sub&gt;Flow Across Three Categories&lt;/sub&gt;\n</code></pre> <p>This example shows a <code>parcats</code> plot with custom line widths based on a value, allowing for the thickness of the lines to represent the volume of data:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: parcats-data-linewidth\n    args:\n      - echo\n      - |\n        category_1,category_2,value\n        A,X,50\n        A,Y,30\n        B,X,40\n        B,Y,20\ntraces:\n  - name: Parcats Plot with Custom Line Widths\n    model: ${ref(parcats-data-linewidth)}\n    props:\n      type: parcats\n      dimensions:\n        - label: \"Category 1\"\n          values: ?{category_1}\n        - label: \"Category 2\"\n          values: ?{category_2}\n      line:\n        color: ?{value}\n        width: ?{value}\n        colorscale: \"Jet\"\ncharts:\n  - name: Parcats Chart with Custom Line Widths\n    traces:\n      - ${ref(Parcats Plot with Custom Line Widths)}\n    layout:\n      title:\n        text: Parcats Chart with Custom Line Widths&lt;br&gt;&lt;sub&gt;Custom Line Width Based on Values&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Parcats/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>parcats</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>arrangement: 'any' #(1)!\nbundlecolors: 'boolean' #(2)!\ncounts: 'number | array' #(3)!\ncountssrc: 'string' #(4)!\ndimensions: array\ndomain:\n  column: 'integer' #(5)!\n  row: 'integer' #(6)!\n  x: 'array' #(7)!\n  y: 'array' #(8)!\nhoverinfo: 'string' #(9)!\nhoveron: 'any' #(10)!\nhovertemplate: 'string' #(11)!\nlabelfont:\n  color: any\n  family: 'string' #(12)!\n  lineposition: 'string' #(13)!\n  shadow: 'string' #(14)!\n  size: number\n  style: 'any' #(15)!\n  textcase: 'any' #(16)!\n  variant: 'any' #(17)!\n  weight: 'integer' #(18)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(19)!\n    lineposition: 'string' #(20)!\n    shadow: 'string' #(21)!\n    size: number\n    style: 'any' #(22)!\n    textcase: 'any' #(23)!\n    variant: 'any' #(24)!\n    weight: 'integer' #(25)!\n  text: 'string' #(26)!\nlegendwidth: 'number' #(27)!\nline:\n  autocolorscale: 'boolean' #(28)!\n  cauto: 'boolean' #(29)!\n  cmax: 'number' #(30)!\n  cmid: 'number' #(31)!\n  cmin: 'number' #(32)!\n  color: 'color | array' #(33)!\n  coloraxis: 'string' #(34)!\n  colorbar:\n    bgcolor: 'any' #(35)!\n    bordercolor: 'any' #(36)!\n    borderwidth: 'number' #(37)!\n    exponentformat: 'any' #(38)!\n    len: 'number' #(39)!\n    lenmode: 'any' #(40)!\n    minexponent: 'number' #(41)!\n    nticks: 'integer' #(42)!\n    orientation: 'any' #(43)!\n    outlinecolor: 'any' #(44)!\n    outlinewidth: 'number' #(45)!\n    separatethousands: 'boolean' #(46)!\n    showexponent: 'any' #(47)!\n    showticklabels: 'boolean' #(48)!\n    showtickprefix: 'any' #(49)!\n    showticksuffix: 'any' #(50)!\n    thickness: 'number' #(51)!\n    thicknessmode: 'any' #(52)!\n    tickangle: 'number' #(53)!\n    tickcolor: 'any' #(54)!\n    tickfont:\n      color: any\n      family: 'string' #(55)!\n      lineposition: 'string' #(56)!\n      shadow: 'string' #(57)!\n      size: number\n      style: 'any' #(58)!\n      textcase: 'any' #(59)!\n      variant: 'any' #(60)!\n      weight: 'integer' #(61)!\n    tickformat: 'string' #(62)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(63)!\n    ticklabelposition: 'any' #(64)!\n    ticklabelstep: 'integer' #(65)!\n    ticklen: 'number' #(66)!\n    tickmode: 'any' #(67)!\n    tickprefix: 'string' #(68)!\n    ticks: 'any' #(69)!\n    ticksuffix: 'string' #(70)!\n    ticktext: 'array' #(71)!\n    ticktextsrc: 'string' #(72)!\n    tickvals: 'array' #(73)!\n    tickvalssrc: 'string' #(74)!\n    tickwidth: 'number' #(75)!\n    title:\n      font:\n        color: any\n        family: 'string' #(76)!\n        lineposition: 'string' #(77)!\n        shadow: 'string' #(78)!\n        size: number\n        style: 'any' #(79)!\n        textcase: 'any' #(80)!\n        variant: 'any' #(81)!\n        weight: 'integer' #(82)!\n      side: 'any' #(83)!\n      text: 'string' #(84)!\n    x: 'number' #(85)!\n    xanchor: 'any' #(86)!\n    xpad: 'number' #(87)!\n    xref: 'any' #(88)!\n    y: 'number' #(89)!\n    yanchor: 'any' #(90)!\n    ypad: 'number' #(91)!\n    yref: 'any' #(92)!\n  colorscale: 'any' #(93)!\n  colorsrc: 'string' #(94)!\n  hovertemplate: 'string' #(95)!\n  reversescale: 'boolean' #(96)!\n  shape: 'any' #(97)!\n  showscale: 'boolean' #(98)!\nmetasrc: 'string' #(99)!\nname: 'string' #(100)!\nsortpaths: 'any' #(101)!\nstream:\n  maxpoints: 'number' #(102)!\n  token: 'string' #(103)!\ntickfont:\n  color: any\n  family: 'string' #(104)!\n  lineposition: 'string' #(105)!\n  shadow: 'string' #(106)!\n  size: number\n  style: 'any' #(107)!\n  textcase: 'any' #(108)!\n  variant: 'any' #(109)!\n  weight: 'integer' #(110)!\ntype: parcats\nuid: 'string' #(111)!\nvisible: 'any' #(112)!\n</code></pre> <ol> <li>Sets the drag interaction mode for categories and dimensions. If <code>perpendicular</code>, the categories can only move along a line perpendicular to the paths. If <code>freeform</code>, the categories can freely move on the plane. If <code>fixed</code>, the categories and dimensions are stationary.</li> <li>Sort paths so that like colors are bundled together within each category.</li> <li>The number of observations represented by each state. Defaults to 1 so that each state represents one observation</li> <li>Sets the source reference on Chart Studio Cloud for <code>counts</code>.</li> <li>If there is a layout grid, use the domain for this column in the grid for this parcats trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this parcats trace .</li> <li>Sets the horizontal domain of this parcats trace (in plot fraction).</li> <li>Sets the vertical domain of this parcats trace (in plot fraction).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the hover interaction mode for the parcats diagram. If <code>category</code>, hover interaction take place per category. If <code>color</code>, hover interactions take place per color per category. If <code>dimension</code>, hover interactions take place across all categories per dimension.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  This value here applies when hovering over dimensions. Note that <code>*categorycount</code>, colorcount and bandcolorcount are only available when <code>hoveron</code> contains the color flagFinally, the template string has access to variables <code>count</code>, <code>probability</code>, <code>category</code>, <code>categorycount</code>, <code>colorcount</code> and <code>bandcolorcount</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>line.colorscale</code>. Has an effect only if in <code>line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>line.color</code>) or the bounds set in <code>line.cmin</code> and <code>line.cmax</code> Has an effect only if in <code>line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>line.cmin</code> and <code>line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code> and if set, <code>line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>line.cmin</code> and/or <code>line.cmax</code> to be equidistant to this point. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code>. Has no effect when <code>line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code> and if set, <code>line.cmax</code> must be set as well.</li> <li>Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>line.cmin</code> and <code>line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>line.cmin</code> and <code>line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  This value here applies when hovering over lines.Finally, the template string has access to variables <code>count</code> and <code>probability</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>line.color</code> is set to a numerical array. If true, <code>line.cmin</code> will correspond to the last color in the array and <code>line.cmax</code> will correspond to the first color.</li> <li>Sets the shape of the paths. If <code>linear</code>, paths are composed of straight lines. If <code>hspline</code>, paths are composed of horizontal curved splines</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>line.color</code> is set to a numerical array.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the path sorting algorithm. If <code>forward</code>, sort paths based on dimension categories from left to right. If <code>backward</code>, sort paths based on dimensions categories from right to left.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Parcoords/","title":"Parcoords","text":""},{"location":"reference/configuration/Trace/Props/Parcoords/#parcoords","title":"Parcoords","text":""},{"location":"reference/configuration/Trace/Props/Parcoords/#overview","title":"Overview","text":"<p>The <code>parcoords</code> trace type is used to create parallel coordinates plots, which are useful for visualizing multi-dimensional numerical data. In parallel coordinates plots, each variable is represented as a vertical axis, and each data point is a line connecting its values across the different axes.</p> <p>You can customize the axis scaling, color mapping, and line properties to represent your data effectively.</p> <p>Common Uses</p> <ul> <li>Multivariate Data Analysis: Visualizing relationships between multiple variables.</li> <li>Data Exploration: Exploring patterns and outliers in high-dimensional datasets.</li> <li>Decision Making: Identifying optimal points or anomalies in multi-variable data.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Parcoords/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Parcoords PlotParcoords with Custom RangesParcoords Plot with Custom Colorscale <p>Here's a simple <code>parcoords</code> plot visualizing three numerical variables:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: parcoords-data\n    args:\n      - echo\n      - |\n        variable_1,variable_2,variable_3\n        1,4,7\n        2,5,8\n        3,6,9\ntraces:\n  - name: Simple Parcoords Plot\n    model: ${ref(parcoords-data)}\n    props:\n      type: parcoords\n      dimensions:\n        - label: \"Variable 1\"\n          values: ?{variable_1}\n        - label: \"Variable 2\"\n          values: ?{variable_2}\n        - label: \"Variable 3\"\n          values: ?{variable_3}\n      line:\n        color: ?{variable_3}\n        colorscale: \"Viridis\"\ncharts:\n  - name: Simple Parcoords Chart\n    traces:\n      - ${ref(Simple Parcoords Plot)}\n    layout:\n      title:\n        text: Simple Parcoords Plot&lt;br&gt;&lt;sub&gt;Parallel Coordinates with Three Variables&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>parcoords</code> plot with custom axis ranges, allowing you to focus on specific data ranges:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: parcoords-data-ranges\n    args:\n      - echo\n      - |\n        variable_1,variable_2,variable_3\n        5,10,15\n        10,20,25\n        15,30,35\ntraces:\n  - name: Parcoords Plot with Custom Ranges\n    model: ${ref(parcoords-data-ranges)}\n    props:\n      type: parcoords\n      dimensions:\n        - label: \"Variable 1\"\n          values: ?{variable_1}\n          range: [5, 15]\n        - label: \"Variable 2\"\n          values: ?{variable_2}\n          range: [10, 30]\n        - label: \"Variable 3\"\n          values: ?{variable_3}\n          range: [15, 35]\n      line:\n        color: ?{variable_3}\n        colorscale: \"Blues\"\ncharts:\n  - name: Parcoords Chart with Custom Ranges\n    traces:\n      - ${ref(Parcoords Plot with Custom Ranges)}\n    layout:\n      title:\n        text: Parcoords Plot with Custom Ranges&lt;br&gt;&lt;sub&gt;Custom Ranges for Each Variable&lt;/sub&gt;\n</code></pre> <p>Here's a <code>parcoords</code> plot with a custom colorscale for the lines, highlighting the variations across the third variable:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: parcoords-data-colorscale\n    args:\n      - echo\n      - |\n        variable_1,variable_2,variable_3\n        1,2,3\n        2,3,4\n        3,4,5\ntraces:\n  - name: Parcoords Plot with Custom Colorscale\n    model: ${ref(parcoords-data-colorscale)}\n    props:\n      type: parcoords\n      dimensions:\n        - label: \"Variable 1\"\n          values: ?{variable_1}\n        - label: \"Variable 2\"\n          values: ?{variable_2}\n        - label: \"Variable 3\"\n          values: ?{variable_3}\n      line:\n        color: ?{variable_3}\n        colorscale: \"Jet\"\ncharts:\n  - name: Parcoords Chart with Custom Colorscale\n    traces:\n      - ${ref(Parcoords Plot with Custom Colorscale)}\n    layout:\n      title:\n        text: Parcoords Plot with Custom Colorscale&lt;br&gt;&lt;sub&gt;Custom Colors for Line Based on Variable 3&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Parcoords/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>parcoords</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>customdata: 'array' #(1)!\ncustomdatasrc: 'string' #(2)!\ndimensions: array\ndomain:\n  column: 'integer' #(3)!\n  row: 'integer' #(4)!\n  x: 'array' #(5)!\n  y: 'array' #(6)!\nids: 'array' #(7)!\nidssrc: 'string' #(8)!\nlabelangle: 'number' #(9)!\nlabelfont:\n  color: any\n  family: 'string' #(10)!\n  lineposition: 'string' #(11)!\n  shadow: 'string' #(12)!\n  size: number\n  style: 'any' #(13)!\n  textcase: 'any' #(14)!\n  variant: 'any' #(15)!\n  weight: 'integer' #(16)!\nlabelside: 'any' #(17)!\nlegend: 'string' #(18)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(19)!\n    lineposition: 'string' #(20)!\n    shadow: 'string' #(21)!\n    size: number\n    style: 'any' #(22)!\n    textcase: 'any' #(23)!\n    variant: 'any' #(24)!\n    weight: 'integer' #(25)!\n  text: 'string' #(26)!\nlegendrank: 'number' #(27)!\nlegendwidth: 'number' #(28)!\nline:\n  autocolorscale: 'boolean' #(29)!\n  cauto: 'boolean' #(30)!\n  cmax: 'number' #(31)!\n  cmid: 'number' #(32)!\n  cmin: 'number' #(33)!\n  color: 'color | array' #(34)!\n  coloraxis: 'string' #(35)!\n  colorbar:\n    bgcolor: 'any' #(36)!\n    bordercolor: 'any' #(37)!\n    borderwidth: 'number' #(38)!\n    exponentformat: 'any' #(39)!\n    len: 'number' #(40)!\n    lenmode: 'any' #(41)!\n    minexponent: 'number' #(42)!\n    nticks: 'integer' #(43)!\n    orientation: 'any' #(44)!\n    outlinecolor: 'any' #(45)!\n    outlinewidth: 'number' #(46)!\n    separatethousands: 'boolean' #(47)!\n    showexponent: 'any' #(48)!\n    showticklabels: 'boolean' #(49)!\n    showtickprefix: 'any' #(50)!\n    showticksuffix: 'any' #(51)!\n    thickness: 'number' #(52)!\n    thicknessmode: 'any' #(53)!\n    tickangle: 'number' #(54)!\n    tickcolor: 'any' #(55)!\n    tickfont:\n      color: any\n      family: 'string' #(56)!\n      lineposition: 'string' #(57)!\n      shadow: 'string' #(58)!\n      size: number\n      style: 'any' #(59)!\n      textcase: 'any' #(60)!\n      variant: 'any' #(61)!\n      weight: 'integer' #(62)!\n    tickformat: 'string' #(63)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(64)!\n    ticklabelposition: 'any' #(65)!\n    ticklabelstep: 'integer' #(66)!\n    ticklen: 'number' #(67)!\n    tickmode: 'any' #(68)!\n    tickprefix: 'string' #(69)!\n    ticks: 'any' #(70)!\n    ticksuffix: 'string' #(71)!\n    ticktext: 'array' #(72)!\n    ticktextsrc: 'string' #(73)!\n    tickvals: 'array' #(74)!\n    tickvalssrc: 'string' #(75)!\n    tickwidth: 'number' #(76)!\n    title:\n      font:\n        color: any\n        family: 'string' #(77)!\n        lineposition: 'string' #(78)!\n        shadow: 'string' #(79)!\n        size: number\n        style: 'any' #(80)!\n        textcase: 'any' #(81)!\n        variant: 'any' #(82)!\n        weight: 'integer' #(83)!\n      side: 'any' #(84)!\n      text: 'string' #(85)!\n    x: 'number' #(86)!\n    xanchor: 'any' #(87)!\n    xpad: 'number' #(88)!\n    xref: 'any' #(89)!\n    y: 'number' #(90)!\n    yanchor: 'any' #(91)!\n    ypad: 'number' #(92)!\n    yref: 'any' #(93)!\n  colorscale: 'any' #(94)!\n  colorsrc: 'string' #(95)!\n  reversescale: 'boolean' #(96)!\n  showscale: 'boolean' #(97)!\nmetasrc: 'string' #(98)!\nname: 'string' #(99)!\nrangefont:\n  color: any\n  family: 'string' #(100)!\n  lineposition: 'string' #(101)!\n  shadow: 'string' #(102)!\n  size: number\n  style: 'any' #(103)!\n  textcase: 'any' #(104)!\n  variant: 'any' #(105)!\n  weight: 'integer' #(106)!\nstream:\n  maxpoints: 'number' #(107)!\n  token: 'string' #(108)!\ntickfont:\n  color: any\n  family: 'string' #(109)!\n  lineposition: 'string' #(110)!\n  shadow: 'string' #(111)!\n  size: number\n  style: 'any' #(112)!\n  textcase: 'any' #(113)!\n  variant: 'any' #(114)!\n  weight: 'integer' #(115)!\ntype: parcoords\nuid: 'string' #(116)!\nunselected:\n  line:\n    color: 'any' #(117)!\n    opacity: 'number' #(118)!\nvisible: 'any' #(119)!\n</code></pre> <ol> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>If there is a layout grid, use the domain for this column in the grid for this parcoords trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this parcoords trace .</li> <li>Sets the horizontal domain of this parcoords trace (in plot fraction).</li> <li>Sets the vertical domain of this parcoords trace (in plot fraction).</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the angle of the labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the labels vertically. Tilted labels with labelangle may be positioned better inside margins when <code>labelposition</code> is set to bottom.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Specifies the location of the <code>label</code>. top positions labels above, next to the title bottom positions labels below the graph Tilted labels with labelangle may be positioned better inside margins when <code>labelposition</code> is set to bottom.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>line.colorscale</code>. Has an effect only if in <code>line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>line.color</code>) or the bounds set in <code>line.cmin</code> and <code>line.cmax</code> Has an effect only if in <code>line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>line.cmin</code> and <code>line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code> and if set, <code>line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>line.cmin</code> and/or <code>line.cmax</code> to be equidistant to this point. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code>. Has no effect when <code>line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code> and if set, <code>line.cmax</code> must be set as well.</li> <li>Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>line.cmin</code> and <code>line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>line.cmin</code> and <code>line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>line.color</code> is set to a numerical array. If true, <code>line.cmin</code> will correspond to the last color in the array and <code>line.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>line.color</code> is set to a numerical array.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the base color of unselected lines. in connection with <code>unselected.line.opacity</code>.</li> <li>Sets the opacity of unselected lines. The default auto decreases the opacity smoothly as the number of lines increases. Use 1 to achieve exact <code>unselected.line.color</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Pie/","title":"Pie","text":""},{"location":"reference/configuration/Trace/Props/Pie/#pie","title":"Pie","text":""},{"location":"reference/configuration/Trace/Props/Pie/#overview","title":"Overview","text":"<p>The <code>pie</code> trace type is used to create pie charts, which are circular charts divided into sectors representing proportions of a whole. Each sector\u2019s arc length is proportional to the quantity it represents. Pie charts are great for visualizing part-to-whole relationships.</p> <p>You can customize the colors, labels, and hover information to display your data effectively.</p> <p>Common Uses</p> <ul> <li>Part-to-Whole Relationships: Visualizing how different parts contribute to the whole.</li> <li>Categorical Data: Showing the proportions of different categories in a dataset.</li> <li>Survey Data: Visualizing how responses are distributed among categories.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Pie/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Pie ChartPie Chart with Custom ColorsPie Chart with Hover Info <p>Here's a simple <code>pie</code> chart showing the distribution of categories:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: pie-data\n    args:\n      - echo\n      - |\n        category,value\n        A,30\n        B,20\n        C,50\ntraces:\n  - name: Simple Pie Chart Trace\n    model: ${ref(pie-data)}\n    props:\n      type: pie\n      labels: ?{category}\n      values: ?{value}\ncharts:\n  - name: Simple Pie Chart\n    traces:\n      - ${ref(Simple Pie Chart Trace)}\n    layout:\n      title:\n        text: Simple Pie Chart&lt;br&gt;&lt;sub&gt;Distribution of Categories&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>pie</code> chart with custom colors for each category:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: pie-data-colors\n    args:\n      - echo\n      - |\n        category,value,color\n        A,40,#1f77b4\n        B,30,#ff7f0e\n        C,30,#2ca02c\ntraces:\n  - name: Pie Chart with Custom Colors Trace\n    model: ${ref(pie-data-colors)}\n    props:\n      type: pie\n      labels: ?{category}\n      values: ?{value}\n      marker:\n        colors: ?{color}\ncharts:\n  - name: Pie Chart with Custom Colors\n    traces:\n      - ${ref(Pie Chart with Custom Colors Trace)}\n    layout:\n      title:\n        text: Pie Chart with Custom Colors&lt;br&gt;&lt;sub&gt;Customized Coloring for Each Category&lt;/sub&gt;\n</code></pre> <p>This example shows a <code>pie</code> chart with hover information that displays both the percentage and the value for each category:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: pie-data-hover\n    args:\n      - echo\n      - |\n        category,value\n        X,60\n        Y,25\n        Z,15\ntraces:\n  - name: Pie Chart with Hover Info Trace\n    model: ${ref(pie-data-hover)}\n    props:\n      type: pie\n      labels: ?{category}\n      values: ?{value}\n      hoverinfo: \"label+value+percent\"\ncharts:\n  - name: Pie Chart with Hover Info\n    traces:\n      - ${ref(Pie Chart with Hover Info Trace)}\n    layout:\n      title:\n        text: Pie Chart with Hover Info&lt;br&gt;&lt;sub&gt;Hover Info Showing Value and Percentage&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Pie/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>pie</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>automargin: 'boolean' #(1)!\ncustomdata: 'array' #(2)!\ncustomdatasrc: 'string' #(3)!\ndirection: 'any' #(4)!\ndlabel: 'number' #(5)!\ndomain:\n  column: 'integer' #(6)!\n  row: 'integer' #(7)!\n  x: 'array' #(8)!\n  y: 'array' #(9)!\nhole: 'number' #(10)!\nhoverinfo: 'array' #(11)!\nhoverinfosrc: 'string' #(12)!\nhoverlabel:\n  align: 'array' #(13)!\n  alignsrc: 'string' #(14)!\n  bgcolor: 'color | array' #(15)!\n  bgcolorsrc: 'string' #(16)!\n  bordercolor: 'color | array' #(17)!\n  bordercolorsrc: 'string' #(18)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(19)!\n    family: 'string | array' #(20)!\n    familysrc: 'string' #(21)!\n    lineposition: 'array' #(22)!\n    linepositionsrc: 'string' #(23)!\n    shadow: 'string | array' #(24)!\n    shadowsrc: 'string' #(25)!\n    size: number | array\n    sizesrc: 'string' #(26)!\n    style: 'array' #(27)!\n    stylesrc: 'string' #(28)!\n    textcase: 'array' #(29)!\n    textcasesrc: 'string' #(30)!\n    variant: 'array' #(31)!\n    variantsrc: 'string' #(32)!\n    weight: 'integer | array' #(33)!\n    weightsrc: 'string' #(34)!\n  namelength: 'integer | array' #(35)!\n  namelengthsrc: 'string' #(36)!\nhovertemplate: 'string | array' #(37)!\nhovertemplatesrc: 'string' #(38)!\nhovertext: 'string | array' #(39)!\nhovertextsrc: 'string' #(40)!\nids: 'array' #(41)!\nidssrc: 'string' #(42)!\ninsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(43)!\n  family: 'string | array' #(44)!\n  familysrc: 'string' #(45)!\n  lineposition: 'array' #(46)!\n  linepositionsrc: 'string' #(47)!\n  shadow: 'string | array' #(48)!\n  shadowsrc: 'string' #(49)!\n  size: number | array\n  sizesrc: 'string' #(50)!\n  style: 'array' #(51)!\n  stylesrc: 'string' #(52)!\n  textcase: 'array' #(53)!\n  textcasesrc: 'string' #(54)!\n  variant: 'array' #(55)!\n  variantsrc: 'string' #(56)!\n  weight: 'integer | array' #(57)!\n  weightsrc: 'string' #(58)!\ninsidetextorientation: 'any' #(59)!\nlabel0: 'number' #(60)!\nlabels: 'array' #(61)!\nlabelssrc: 'string' #(62)!\nlegend: 'string' #(63)!\nlegendgroup: 'string' #(64)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(65)!\n    lineposition: 'string' #(66)!\n    shadow: 'string' #(67)!\n    size: number\n    style: 'any' #(68)!\n    textcase: 'any' #(69)!\n    variant: 'any' #(70)!\n    weight: 'integer' #(71)!\n  text: 'string' #(72)!\nlegendrank: 'number' #(73)!\nlegendwidth: 'number' #(74)!\nmarker:\n  colors: 'array' #(75)!\n  colorssrc: 'string' #(76)!\n  line:\n    color: 'color | array' #(77)!\n    colorsrc: 'string' #(78)!\n    width: 'number | array' #(79)!\n    widthsrc: 'string' #(80)!\n  pattern:\n    bgcolor: 'color | array' #(81)!\n    bgcolorsrc: 'string' #(82)!\n    fgcolor: 'color | array' #(83)!\n    fgcolorsrc: 'string' #(84)!\n    fgopacity: 'number' #(85)!\n    fillmode: 'any' #(86)!\n    shape: 'array' #(87)!\n    shapesrc: 'string' #(88)!\n    size: 'number | array' #(89)!\n    sizesrc: 'string' #(90)!\n    solidity: 'number | array' #(91)!\n    soliditysrc: 'string' #(92)!\nmetasrc: 'string' #(93)!\nname: 'string' #(94)!\nopacity: 'number' #(95)!\noutsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(96)!\n  family: 'string | array' #(97)!\n  familysrc: 'string' #(98)!\n  lineposition: 'array' #(99)!\n  linepositionsrc: 'string' #(100)!\n  shadow: 'string | array' #(101)!\n  shadowsrc: 'string' #(102)!\n  size: number | array\n  sizesrc: 'string' #(103)!\n  style: 'array' #(104)!\n  stylesrc: 'string' #(105)!\n  textcase: 'array' #(106)!\n  textcasesrc: 'string' #(107)!\n  variant: 'array' #(108)!\n  variantsrc: 'string' #(109)!\n  weight: 'integer | array' #(110)!\n  weightsrc: 'string' #(111)!\npull: 'number | array' #(112)!\npullsrc: 'string' #(113)!\nrotation: 'number' #(114)!\nscalegroup: 'string' #(115)!\nshowlegend: 'boolean' #(116)!\nsort: 'boolean' #(117)!\nstream:\n  maxpoints: 'number' #(118)!\n  token: 'string' #(119)!\ntext: 'array' #(120)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(121)!\n  family: 'string | array' #(122)!\n  familysrc: 'string' #(123)!\n  lineposition: 'array' #(124)!\n  linepositionsrc: 'string' #(125)!\n  shadow: 'string | array' #(126)!\n  shadowsrc: 'string' #(127)!\n  size: number | array\n  sizesrc: 'string' #(128)!\n  style: 'array' #(129)!\n  stylesrc: 'string' #(130)!\n  textcase: 'array' #(131)!\n  textcasesrc: 'string' #(132)!\n  variant: 'array' #(133)!\n  variantsrc: 'string' #(134)!\n  weight: 'integer | array' #(135)!\n  weightsrc: 'string' #(136)!\ntextinfo: 'string' #(137)!\ntextposition: 'array' #(138)!\ntextpositionsrc: 'string' #(139)!\ntextsrc: 'string' #(140)!\ntexttemplate: 'string | array' #(141)!\ntexttemplatesrc: 'string' #(142)!\ntitle:\n  font:\n    color: color | array\n    colorsrc: 'string' #(143)!\n    family: 'string | array' #(144)!\n    familysrc: 'string' #(145)!\n    lineposition: 'array' #(146)!\n    linepositionsrc: 'string' #(147)!\n    shadow: 'string | array' #(148)!\n    shadowsrc: 'string' #(149)!\n    size: number | array\n    sizesrc: 'string' #(150)!\n    style: 'array' #(151)!\n    stylesrc: 'string' #(152)!\n    textcase: 'array' #(153)!\n    textcasesrc: 'string' #(154)!\n    variant: 'array' #(155)!\n    variantsrc: 'string' #(156)!\n    weight: 'integer | array' #(157)!\n    weightsrc: 'string' #(158)!\n  position: 'any' #(159)!\n  text: 'string' #(160)!\ntype: pie\nuid: 'string' #(161)!\nvalues: 'array' #(162)!\nvaluessrc: 'string' #(163)!\nvisible: 'any' #(164)!\n</code></pre> <ol> <li>Determines whether outside text labels can push the margins.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Specifies the direction at which succeeding sectors follow one another.</li> <li>Sets the label step. See <code>label0</code> for more info.</li> <li>If there is a layout grid, use the domain for this column in the grid for this pie trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this pie trace .</li> <li>Sets the horizontal domain of this pie trace (in plot fraction).</li> <li>Sets the vertical domain of this pie trace (in plot fraction).</li> <li>Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>label</code>, <code>color</code>, <code>value</code>, <code>percent</code> and <code>text</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Controls the orientation of the text inside chart sectors. When set to auto, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The horizontal option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The radial option orients text along the radius of the sector. The tangential option orients text perpendicular to the radius of the sector.</li> <li>Alternate to <code>labels</code>. Builds a numeric set of labels. Use with <code>dlabel</code> where <code>label0</code> is the starting label and <code>dlabel</code> the step.</li> <li>Sets the sector labels. If <code>labels</code> entries are duplicated, we sum associated <code>values</code> or simply count occurrences if <code>values</code> is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.</li> <li>Sets the source reference on Chart Studio Cloud for <code>labels</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.</li> <li>Sets the source reference on Chart Studio Cloud for <code>colors</code>.</li> <li>Sets the color of the line enclosing each sector.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the line enclosing each sector.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</li> <li>Sets the source reference on Chart Studio Cloud for <code>pull</code>.</li> <li>Instead of the first slice starting at 12 o'clock, rotate to some other angle.</li> <li>If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not the sectors are reordered from largest to smallest.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each sector. If trace <code>textinfo</code> contains a text flag, these elements will be seen on the chart. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines which trace information appear on the graph.</li> <li>Specifies the location of the <code>textinfo</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>label</code>, <code>color</code>, <code>value</code>, <code>percent</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Specifies the location of the <code>title</code>.</li> <li>Sets the title of the chart. If it is empty, no title is displayed.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the values of the sectors. If omitted, we count occurrences of each label.</li> <li>Sets the source reference on Chart Studio Cloud for <code>values</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Sankey/","title":"Sankey","text":""},{"location":"reference/configuration/Trace/Props/Sankey/#sankey","title":"Sankey","text":""},{"location":"reference/configuration/Trace/Props/Sankey/#overview","title":"Overview","text":"<p>The <code>sankey</code> trace type is used to create Sankey diagrams, which visualize the flow of quantities between different nodes (or categories). Sankey diagrams are commonly used to show the transfer of resources or values, with the width of the flow lines being proportional to the size of the flow.</p> <p>You can customize the colors, labels, and flow paths to represent your data and flows effectively.</p> <p>Common Uses</p> <ul> <li>Flow of Resources: Visualizing how resources (e.g., money, energy, or materials) move between stages.</li> <li>Part-to-Part Relationships: Displaying how parts contribute to other parts rather than the whole.</li> <li>Energy or Supply Chains: Showing energy transfers or supply chain processes.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Sankey/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Sankey DiagramSankey Diagram with Custom ColorsSankey Diagram with Hover Information <p>Here's a simple <code>sankey</code> diagram showing how values flow between different categories:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: sankey-data\n    args:\n      - echo\n      - |\n        source,target,value\n        0,1,10\n        0,2,5\n        1,3,15\n        2,3,5\ntraces:\n  - name: Simple Sankey Diagram\n    model: ${ref(sankey-data)}\n    props:\n      type: sankey\n      node:\n        label: [\"A\", \"B\", \"C\", \"D\"]\n      link:\n        source: ?{source}\n        target: ?{target}\n        value: ?{value}\ncharts:\n  - name: Simple Sankey Diagram\n    traces:\n      - ${ref(Simple Sankey Diagram)}\n    layout:\n      title:\n        text: Simple Sankey Diagram&lt;br&gt;&lt;sub&gt;Flow of Resources Between Nodes&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>sankey</code> diagram with custom node and link colors:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: sankey-data-colors\n    args:\n      - echo\n      - |\n        source,target,value,color\n        0,1,10,#1f77b4\n        0,2,5,#ff7f0e\n        1,3,15,#2ca02c\n        2,3,5,#d62728\ntraces:\n  - name: Sankey Diagram with Custom Colors\n    model: ${ref(sankey-data-colors)}\n    props:\n      type: sankey\n      node:\n        label: [\"X\", \"Y\", \"Z\", \"W\"]\n        color: ?{color}\n      link:\n        source: ?{source}\n        target: ?{target}\n        value: ?{value}\ncharts:\n  - name: Sankey Diagram with Custom Colors\n    traces:\n      - ${ref(Sankey Diagram with Custom Colors)}\n    layout:\n      title:\n        text: Sankey Diagram with Custom Colors&lt;br&gt;&lt;sub&gt;Custom Colors for Nodes and Links&lt;/sub&gt;\n</code></pre> <p>This example shows a <code>sankey</code> diagram where hover information displays both the value and the source-target relationship:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: sankey-data-hover\n    args:\n      - echo\n      - |\n        source,target,value\n        0,1,20\n        0,2,10\n        1,3,15\n        2,3,5\ntraces:\n  - name: Sankey Diagram with Hover Information\n    model: ${ref(sankey-data-hover)}\n    props:\n      type: sankey\n      node:\n        label: [\"P\", \"Q\", \"R\", \"S\"]\n      link:\n        source: ?{source}\n        target: ?{target}\n        value: ?{value}\n        hoverinfo: \"source+target+value\"\ncharts:\n  - name: Sankey Diagram with Hover Information\n    traces:\n      - ${ref(Sankey Diagram with Hover Information)}\n    layout:\n      title:\n        text: Sankey Diagram with Hover Information&lt;br&gt;&lt;sub&gt;Hover Info Displaying Value and Relationships&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Sankey/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>sankey</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>arrangement: 'any' #(1)!\ncustomdata: 'array' #(2)!\ncustomdatasrc: 'string' #(3)!\ndomain:\n  column: 'integer' #(4)!\n  row: 'integer' #(5)!\n  x: 'array' #(6)!\n  y: 'array' #(7)!\nhoverinfo: 'string' #(8)!\nhoverlabel:\n  align: 'array' #(9)!\n  alignsrc: 'string' #(10)!\n  bgcolor: 'color | array' #(11)!\n  bgcolorsrc: 'string' #(12)!\n  bordercolor: 'color | array' #(13)!\n  bordercolorsrc: 'string' #(14)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(15)!\n    family: 'string | array' #(16)!\n    familysrc: 'string' #(17)!\n    lineposition: 'array' #(18)!\n    linepositionsrc: 'string' #(19)!\n    shadow: 'string | array' #(20)!\n    shadowsrc: 'string' #(21)!\n    size: number | array\n    sizesrc: 'string' #(22)!\n    style: 'array' #(23)!\n    stylesrc: 'string' #(24)!\n    textcase: 'array' #(25)!\n    textcasesrc: 'string' #(26)!\n    variant: 'array' #(27)!\n    variantsrc: 'string' #(28)!\n    weight: 'integer | array' #(29)!\n    weightsrc: 'string' #(30)!\n  namelength: 'integer | array' #(31)!\n  namelengthsrc: 'string' #(32)!\nids: 'array' #(33)!\nidssrc: 'string' #(34)!\nlegend: 'string' #(35)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(36)!\n    lineposition: 'string' #(37)!\n    shadow: 'string' #(38)!\n    size: number\n    style: 'any' #(39)!\n    textcase: 'any' #(40)!\n    variant: 'any' #(41)!\n    weight: 'integer' #(42)!\n  text: 'string' #(43)!\nlegendrank: 'number' #(44)!\nlegendwidth: 'number' #(45)!\nlink:\n  arrowlen: 'number' #(46)!\n  color: 'color | array' #(47)!\n  colorscales: array\n  colorsrc: 'string' #(48)!\n  customdata: 'array' #(49)!\n  customdatasrc: 'string' #(50)!\n  hovercolor: 'color | array' #(51)!\n  hovercolorsrc: 'string' #(52)!\n  hoverinfo: 'any' #(53)!\n  hoverlabel:\n    align: 'array' #(54)!\n    alignsrc: 'string' #(55)!\n    bgcolor: 'color | array' #(56)!\n    bgcolorsrc: 'string' #(57)!\n    bordercolor: 'color | array' #(58)!\n    bordercolorsrc: 'string' #(59)!\n    font:\n      color: color | array\n      colorsrc: 'string' #(60)!\n      family: 'string | array' #(61)!\n      familysrc: 'string' #(62)!\n      lineposition: 'array' #(63)!\n      linepositionsrc: 'string' #(64)!\n      shadow: 'string | array' #(65)!\n      shadowsrc: 'string' #(66)!\n      size: number | array\n      sizesrc: 'string' #(67)!\n      style: 'array' #(68)!\n      stylesrc: 'string' #(69)!\n      textcase: 'array' #(70)!\n      textcasesrc: 'string' #(71)!\n      variant: 'array' #(72)!\n      variantsrc: 'string' #(73)!\n      weight: 'integer | array' #(74)!\n      weightsrc: 'string' #(75)!\n    namelength: 'integer | array' #(76)!\n    namelengthsrc: 'string' #(77)!\n  hovertemplate: 'string | array' #(78)!\n  hovertemplatesrc: 'string' #(79)!\n  label: 'array' #(80)!\n  labelsrc: 'string' #(81)!\n  line:\n    color: 'color | array' #(82)!\n    colorsrc: 'string' #(83)!\n    width: 'number | array' #(84)!\n    widthsrc: 'string' #(85)!\n  source: 'array' #(86)!\n  sourcesrc: 'string' #(87)!\n  target: 'array' #(88)!\n  targetsrc: 'string' #(89)!\n  value: 'array' #(90)!\n  valuesrc: 'string' #(91)!\nmetasrc: 'string' #(92)!\nname: 'string' #(93)!\nnode:\n  align: 'any' #(94)!\n  color: 'color | array' #(95)!\n  colorsrc: 'string' #(96)!\n  customdata: 'array' #(97)!\n  customdatasrc: 'string' #(98)!\n  groups: 'array' #(99)!\n  hoverinfo: 'any' #(100)!\n  hoverlabel:\n    align: 'array' #(101)!\n    alignsrc: 'string' #(102)!\n    bgcolor: 'color | array' #(103)!\n    bgcolorsrc: 'string' #(104)!\n    bordercolor: 'color | array' #(105)!\n    bordercolorsrc: 'string' #(106)!\n    font:\n      color: color | array\n      colorsrc: 'string' #(107)!\n      family: 'string | array' #(108)!\n      familysrc: 'string' #(109)!\n      lineposition: 'array' #(110)!\n      linepositionsrc: 'string' #(111)!\n      shadow: 'string | array' #(112)!\n      shadowsrc: 'string' #(113)!\n      size: number | array\n      sizesrc: 'string' #(114)!\n      style: 'array' #(115)!\n      stylesrc: 'string' #(116)!\n      textcase: 'array' #(117)!\n      textcasesrc: 'string' #(118)!\n      variant: 'array' #(119)!\n      variantsrc: 'string' #(120)!\n      weight: 'integer | array' #(121)!\n      weightsrc: 'string' #(122)!\n    namelength: 'integer | array' #(123)!\n    namelengthsrc: 'string' #(124)!\n  hovertemplate: 'string | array' #(125)!\n  hovertemplatesrc: 'string' #(126)!\n  label: 'array' #(127)!\n  labelsrc: 'string' #(128)!\n  line:\n    color: 'color | array' #(129)!\n    colorsrc: 'string' #(130)!\n    width: 'number | array' #(131)!\n    widthsrc: 'string' #(132)!\n  pad: 'number' #(133)!\n  thickness: 'number' #(134)!\n  x: 'array' #(135)!\n  xsrc: 'string' #(136)!\n  y: 'array' #(137)!\n  ysrc: 'string' #(138)!\norientation: 'any' #(139)!\nstream:\n  maxpoints: 'number' #(140)!\n  token: 'string' #(141)!\ntextfont:\n  color: any\n  family: 'string' #(142)!\n  lineposition: 'string' #(143)!\n  shadow: 'string' #(144)!\n  size: number\n  style: 'any' #(145)!\n  textcase: 'any' #(146)!\n  variant: 'any' #(147)!\n  weight: 'integer' #(148)!\ntype: sankey\nuid: 'string' #(149)!\nvalueformat: 'string' #(150)!\nvaluesuffix: 'string' #(151)!\nvisible: 'any' #(152)!\n</code></pre> <ol> <li>If value is <code>snap</code> (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via <code>nodepad</code>. If value is <code>perpendicular</code>, the nodes can only move along a line perpendicular to the flow. If value is <code>freeform</code>, the nodes can freely move on the plane. If value is <code>fixed</code>, the nodes are stationary.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>If there is a layout grid, use the domain for this column in the grid for this sankey trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this sankey trace .</li> <li>Sets the horizontal domain of this sankey trace (in plot fraction).</li> <li>Sets the vertical domain of this sankey trace (in plot fraction).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired. Note that this attribute is superseded by <code>node.hoverinfo</code> and <code>node.hoverinfo</code> for nodes and links respectively.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the length (in px) of the links arrow, if 0 no arrow will be drawn.</li> <li>Sets the <code>link</code> color. It can be a single value, or an array for specifying color for each <code>link</code>. If <code>link.color</code> is omitted, then by default, a translucent grey link will be used.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Assigns extra data to each link.</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the <code>link</code> hover color. It can be a single value, or an array for specifying hover colors for each <code>link</code>. If <code>link.hovercolor</code> is omitted, then by default, links will become slightly more opaque when hovered over.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovercolor</code>.</li> <li>Determines which trace information appear when hovering links. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Variables <code>source</code> and <code>target</code> are node objects.Finally, the template string has access to variables <code>value</code> and <code>label</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>The shown name of the link.</li> <li>Sets the source reference on Chart Studio Cloud for <code>label</code>.</li> <li>Sets the color of the <code>line</code> around each <code>link</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the <code>line</code> around each <code>link</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>An integer number <code>[0..nodes.length - 1]</code> that represents the source node.</li> <li>Sets the source reference on Chart Studio Cloud for <code>source</code>.</li> <li>An integer number <code>[0..nodes.length - 1]</code> that represents the target node.</li> <li>Sets the source reference on Chart Studio Cloud for <code>target</code>.</li> <li>A numeric value representing the flow volume value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>value</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the alignment method used to position the nodes along the horizontal axis.</li> <li>Sets the <code>node</code> color. It can be a single value, or an array for specifying color for each <code>node</code>. If <code>node.color</code> is omitted, then the default <code>Plotly</code> color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Assigns extra data to each node.</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Groups of nodes. Each group is defined by an array with the indices of the nodes it contains. Multiple groups can be specified.</li> <li>Determines which trace information appear when hovering nodes. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Variables <code>sourceLinks</code> and <code>targetLinks</code> are arrays of link objects.Finally, the template string has access to variables <code>value</code> and <code>label</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>The shown name of the node.</li> <li>Sets the source reference on Chart Studio Cloud for <code>label</code>.</li> <li>Sets the color of the <code>line</code> around each <code>node</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the <code>line</code> around each <code>node</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the padding (in px) between the <code>nodes</code>.</li> <li>Sets the thickness (in px) of the <code>nodes</code>.</li> <li>The normalized horizontal position of the node.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>The normalized vertical position of the node.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the orientation of the Sankey diagram.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</li> <li>Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scatter/","title":"Scatter (line, area &amp; scatter)","text":""},{"location":"reference/configuration/Trace/Props/Scatter/#scatter-line-area-scatter","title":"Scatter (line, area &amp; scatter)","text":""},{"location":"reference/configuration/Trace/Props/Scatter/#overview","title":"Overview","text":"<p>The <code>scatter</code> trace type is used to create scatter plots, which visualize data points based on two numerical variables. Scatter plots are widely used for analyzing relationships between variables, identifying trends, and detecting outliers.</p> <p>Gotchas</p> <ol> <li>Scatter traces are also used to generate area and line traces.</li> <li>The line connections of a scatter trace are determined by the <code>trace.order_by</code> attribute. Make sure to set that to get a deterministic trace for lines and area permutations. </li> </ol> <p>You can customize the marker size, color, and add lines to connect the points to represent the data in various forms like scatter plots, line charts, and more.</p> <p>Common Uses</p> <ul> <li>Relationship Analysis: Exploring the relationship between two variables.</li> <li>Trend Detection: Identifying trends or patterns in data.</li> <li>Outlier Identification: Spotting outliers in data distributions.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scatter/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple ScatterLinesScatter Plot with Custom Marker Sizes and ColorsArea Plot <p>Here's a simple <code>scatter</code> plot showing data points on a 2D plane:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scatter-data\n    args:\n      - echo\n      - |\n        x,y\n        1,10\n        2,20\n        3,15\n        4,25\n        5,30\n        1.5,5\n        2.5,22\n        3.5,9\n        4.5,21\n        5.5,15\n\ntraces:\n  - name: Simple Scatter Plot\n    model: ${ref(scatter-data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: \"markers\"\n      marker: \n        size: 10\n    order_by: \n      - ?{x asc}\ncharts:\n  - name: Simple Scatter Chart\n    traces:\n      - ${ref(Simple Scatter Plot)}\n    layout:\n      title:\n        text: Simple Scatter Plot&lt;br&gt;&lt;sub&gt;2D Data Points&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scatter</code> plot with lines connecting the data points to show trends:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatter-data-lines\n    args:\n      - echo\n      - |\n        x,y\n        1,5\n        2,10\n        3,8\n        4,15\n        5,12\ntraces:\n  - name: Markers and Line\n    model: ${ref(scatter-data-lines)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: \"lines+markers\"\n    order_by: \n      - ?{x asc}\n  - name: Spline No Markers\n    model: ${ref(scatter-data-lines)}\n    props:\n      type: scatter\n      x: ?{x+3 - (x*x)/3}\n      y: ?{y*1.5}\n      mode: \"lines\"\n      line: \n        shape: spline\n        smoothing: .5 #Sets spline bend\n    order_by: \n      - ?{x+3 - (x*x)/3}\ncharts:\n  - name: Scatter Chart with Lines\n    traces:\n      - ${ref(Markers and Line)}\n      - ${ref(Spline No Markers)}\n    layout:\n      title:\n        text: Scatter Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Data Points with Lines&lt;/sub&gt;\n      legend: \n        orientation: h\n</code></pre> <p>Here's a <code>scatter</code> plot with custom marker sizes and colors, giving more visual weight to each data point:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatter-data-custom\n    args:\n      - echo\n      - |\n        x,y,size,color\n        1,5,10,#1f77b4\n        2,10,15,#ff7f0e\n        3,8,20,#2ca02c\n        4,15,25,#d62728\n        5,12,30,#9467bd\ntraces:\n  - name: Scatter Plot with Custom Markers\n    model: ${ref(scatter-data-custom)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\n    order_by: \n      - ?{x asc}\ncharts:\n  - name: Scatter Chart with Custom Markers\n    traces:\n      - ${ref(Scatter Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scatter Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Data Points&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scatter</code> plot used to create an area plot, filling the area under the line:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: area-plot-data\n    args:\n      - echo\n      - |\n        x,y\n        1,5\n        2,7\n        3,10\n        4,8\n        5,12\n        6,9\n        7,11\ntraces:\n  - name: Area Plot\n    model: ${ref(area-plot-data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: \"lines\"\n      fill: \"tozeroy\"\n      fillcolor: \"rgba(55, 126, 184, 0.2)\"\n      line:\n        color: \"rgb(55, 126, 184)\"\n        width: 2\n    order_by: \n      - ?{x asc}\ncharts:\n  - name: Area Plot Chart\n    traces:\n      - ${ref(Area Plot)}\n    layout:\n      title:\n        text: Area Plot&lt;br&gt;&lt;sub&gt;Filled Area Under the Line&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scatter/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scatter</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>alignmentgroup: 'string' #(1)!\ncliponaxis: 'boolean' #(2)!\nconnectgaps: 'boolean' #(3)!\ncustomdata: 'array' #(4)!\ncustomdatasrc: 'string' #(5)!\ndx: 'number' #(6)!\ndy: 'number' #(7)!\nerror_x:\n  array: 'array' #(8)!\n  arrayminus: 'array' #(9)!\n  arrayminussrc: 'string' #(10)!\n  arraysrc: 'string' #(11)!\n  color: 'any' #(12)!\n  copy_ystyle: boolean\n  symmetric: 'boolean' #(13)!\n  thickness: 'number' #(14)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(15)!\n  value: 'number' #(16)!\n  valueminus: 'number' #(17)!\n  visible: 'boolean' #(18)!\n  width: 'number' #(19)!\nerror_y:\n  array: 'array' #(20)!\n  arrayminus: 'array' #(21)!\n  arrayminussrc: 'string' #(22)!\n  arraysrc: 'string' #(23)!\n  color: 'any' #(24)!\n  symmetric: 'boolean' #(25)!\n  thickness: 'number' #(26)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(27)!\n  value: 'number' #(28)!\n  valueminus: 'number' #(29)!\n  visible: 'boolean' #(30)!\n  width: 'number' #(31)!\nfill: 'any' #(32)!\nfillcolor: 'any' #(33)!\nfillgradient:\n  colorscale: 'any' #(34)!\n  start: 'number' #(35)!\n  stop: 'number' #(36)!\n  type: 'any' #(37)!\nfillpattern:\n  bgcolor: 'color | array' #(38)!\n  bgcolorsrc: 'string' #(39)!\n  fgcolor: 'color | array' #(40)!\n  fgcolorsrc: 'string' #(41)!\n  fgopacity: 'number' #(42)!\n  fillmode: 'any' #(43)!\n  shape: 'array' #(44)!\n  shapesrc: 'string' #(45)!\n  size: 'number | array' #(46)!\n  sizesrc: 'string' #(47)!\n  solidity: 'number | array' #(48)!\n  soliditysrc: 'string' #(49)!\ngroupnorm: 'any' #(50)!\nhoverinfo: 'array' #(51)!\nhoverinfosrc: 'string' #(52)!\nhoverlabel:\n  align: 'array' #(53)!\n  alignsrc: 'string' #(54)!\n  bgcolor: 'color | array' #(55)!\n  bgcolorsrc: 'string' #(56)!\n  bordercolor: 'color | array' #(57)!\n  bordercolorsrc: 'string' #(58)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(59)!\n    family: 'string | array' #(60)!\n    familysrc: 'string' #(61)!\n    lineposition: 'array' #(62)!\n    linepositionsrc: 'string' #(63)!\n    shadow: 'string | array' #(64)!\n    shadowsrc: 'string' #(65)!\n    size: number | array\n    sizesrc: 'string' #(66)!\n    style: 'array' #(67)!\n    stylesrc: 'string' #(68)!\n    textcase: 'array' #(69)!\n    textcasesrc: 'string' #(70)!\n    variant: 'array' #(71)!\n    variantsrc: 'string' #(72)!\n    weight: 'integer | array' #(73)!\n    weightsrc: 'string' #(74)!\n  namelength: 'integer | array' #(75)!\n  namelengthsrc: 'string' #(76)!\nhoveron: 'string' #(77)!\nhovertemplate: 'string | array' #(78)!\nhovertemplatesrc: 'string' #(79)!\nhovertext: 'string | array' #(80)!\nhovertextsrc: 'string' #(81)!\nids: 'array' #(82)!\nidssrc: 'string' #(83)!\nlegend: 'string' #(84)!\nlegendgroup: 'string' #(85)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(86)!\n    lineposition: 'string' #(87)!\n    shadow: 'string' #(88)!\n    size: number\n    style: 'any' #(89)!\n    textcase: 'any' #(90)!\n    variant: 'any' #(91)!\n    weight: 'integer' #(92)!\n  text: 'string' #(93)!\nlegendrank: 'number' #(94)!\nlegendwidth: 'number' #(95)!\nline:\n  backoff: 'number | array' #(96)!\n  backoffsrc: 'string' #(97)!\n  color: 'any' #(98)!\n  dash: 'string' #(99)!\n  shape: 'any' #(100)!\n  simplify: 'boolean' #(101)!\n  smoothing: 'number' #(102)!\n  width: 'number' #(103)!\nmarker:\n  angle: 'number | array' #(104)!\n  angleref: 'any' #(105)!\n  anglesrc: 'string' #(106)!\n  autocolorscale: 'boolean' #(107)!\n  cauto: 'boolean' #(108)!\n  cmax: 'number' #(109)!\n  cmid: 'number' #(110)!\n  cmin: 'number' #(111)!\n  color: 'color | array' #(112)!\n  coloraxis: 'string' #(113)!\n  colorbar:\n    bgcolor: 'any' #(114)!\n    bordercolor: 'any' #(115)!\n    borderwidth: 'number' #(116)!\n    exponentformat: 'any' #(117)!\n    len: 'number' #(118)!\n    lenmode: 'any' #(119)!\n    minexponent: 'number' #(120)!\n    nticks: 'integer' #(121)!\n    orientation: 'any' #(122)!\n    outlinecolor: 'any' #(123)!\n    outlinewidth: 'number' #(124)!\n    separatethousands: 'boolean' #(125)!\n    showexponent: 'any' #(126)!\n    showticklabels: 'boolean' #(127)!\n    showtickprefix: 'any' #(128)!\n    showticksuffix: 'any' #(129)!\n    thickness: 'number' #(130)!\n    thicknessmode: 'any' #(131)!\n    tickangle: 'number' #(132)!\n    tickcolor: 'any' #(133)!\n    tickfont:\n      color: any\n      family: 'string' #(134)!\n      lineposition: 'string' #(135)!\n      shadow: 'string' #(136)!\n      size: number\n      style: 'any' #(137)!\n      textcase: 'any' #(138)!\n      variant: 'any' #(139)!\n      weight: 'integer' #(140)!\n    tickformat: 'string' #(141)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(142)!\n    ticklabelposition: 'any' #(143)!\n    ticklabelstep: 'integer' #(144)!\n    ticklen: 'number' #(145)!\n    tickmode: 'any' #(146)!\n    tickprefix: 'string' #(147)!\n    ticks: 'any' #(148)!\n    ticksuffix: 'string' #(149)!\n    ticktext: 'array' #(150)!\n    ticktextsrc: 'string' #(151)!\n    tickvals: 'array' #(152)!\n    tickvalssrc: 'string' #(153)!\n    tickwidth: 'number' #(154)!\n    title:\n      font:\n        color: any\n        family: 'string' #(155)!\n        lineposition: 'string' #(156)!\n        shadow: 'string' #(157)!\n        size: number\n        style: 'any' #(158)!\n        textcase: 'any' #(159)!\n        variant: 'any' #(160)!\n        weight: 'integer' #(161)!\n      side: 'any' #(162)!\n      text: 'string' #(163)!\n    x: 'number' #(164)!\n    xanchor: 'any' #(165)!\n    xpad: 'number' #(166)!\n    xref: 'any' #(167)!\n    y: 'number' #(168)!\n    yanchor: 'any' #(169)!\n    ypad: 'number' #(170)!\n    yref: 'any' #(171)!\n  colorscale: 'any' #(172)!\n  colorsrc: 'string' #(173)!\n  gradient:\n    color: 'color | array' #(174)!\n    colorsrc: 'string' #(175)!\n    type: 'array' #(176)!\n    typesrc: 'string' #(177)!\n  line:\n    autocolorscale: 'boolean' #(178)!\n    cauto: 'boolean' #(179)!\n    cmax: 'number' #(180)!\n    cmid: 'number' #(181)!\n    cmin: 'number' #(182)!\n    color: 'color | array' #(183)!\n    coloraxis: 'string' #(184)!\n    colorscale: 'any' #(185)!\n    colorsrc: 'string' #(186)!\n    reversescale: 'boolean' #(187)!\n    width: 'number | array' #(188)!\n    widthsrc: 'string' #(189)!\n  maxdisplayed: 'number' #(190)!\n  opacity: 'number | array' #(191)!\n  opacitysrc: 'string' #(192)!\n  reversescale: 'boolean' #(193)!\n  showscale: 'boolean' #(194)!\n  size: 'number | array' #(195)!\n  sizemin: 'number' #(196)!\n  sizemode: 'any' #(197)!\n  sizeref: 'number' #(198)!\n  sizesrc: 'string' #(199)!\n  standoff: 'number | array' #(200)!\n  standoffsrc: 'string' #(201)!\n  symbol: 'array' #(202)!\n  symbolsrc: 'string' #(203)!\nmetasrc: 'string' #(204)!\nmode: 'string' #(205)!\nname: 'string' #(206)!\noffsetgroup: 'string' #(207)!\nopacity: 'number' #(208)!\norientation: 'any' #(209)!\nselected:\n  marker:\n    color: 'any' #(210)!\n    opacity: 'number' #(211)!\n    size: 'number' #(212)!\n  textfont:\n    color: 'any' #(213)!\nshowlegend: 'boolean' #(214)!\nstackgaps: 'any' #(215)!\nstackgroup: 'string' #(216)!\nstream:\n  maxpoints: 'number' #(217)!\n  token: 'string' #(218)!\ntext: 'string | array' #(219)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(220)!\n  family: 'string | array' #(221)!\n  familysrc: 'string' #(222)!\n  lineposition: 'array' #(223)!\n  linepositionsrc: 'string' #(224)!\n  shadow: 'string | array' #(225)!\n  shadowsrc: 'string' #(226)!\n  size: number | array\n  sizesrc: 'string' #(227)!\n  style: 'array' #(228)!\n  stylesrc: 'string' #(229)!\n  textcase: 'array' #(230)!\n  textcasesrc: 'string' #(231)!\n  variant: 'array' #(232)!\n  variantsrc: 'string' #(233)!\n  weight: 'integer | array' #(234)!\n  weightsrc: 'string' #(235)!\ntextposition: 'array' #(236)!\ntextpositionsrc: 'string' #(237)!\ntextsrc: 'string' #(238)!\ntexttemplate: 'string | array' #(239)!\ntexttemplatesrc: 'string' #(240)!\ntype: scatter\nuid: 'string' #(241)!\nunselected:\n  marker:\n    color: 'any' #(242)!\n    opacity: 'number' #(243)!\n    size: 'number' #(244)!\n  textfont:\n    color: 'any' #(245)!\nvisible: 'any' #(246)!\nx: 'array' #(247)!\nxaxis: 'string' #(248)!\nxcalendar: 'any' #(249)!\nxhoverformat: 'string' #(250)!\nxperiodalignment: 'any' #(251)!\nxsrc: 'string' #(252)!\ny: 'array' #(253)!\nyaxis: 'string' #(254)!\nycalendar: 'any' #(255)!\nyhoverformat: 'string' #(256)!\nyperiodalignment: 'any' #(257)!\nysrc: 'string' #(258)!\nzorder: 'integer' #(259)!\n</code></pre> <ol> <li>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</li> <li>Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set <code>xaxis.layer</code> and <code>yaxis.layer</code> to below traces.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the x coordinate step. See <code>x0</code> for more info.</li> <li>Sets the y coordinate step. See <code>y0</code> for more info.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Sets the area to fill with a solid color. Defaults to none unless this trace is stacked, then it gets tonexty (tonextx) if <code>orientation</code> is v (h) Use with <code>fillcolor</code> if not none. tozerox and tozeroy fill to x=0 and y=0 respectively. tonextx and tonexty fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like tozerox and tozeroy. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. tonext fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like toself if there is no trace before it. tonext should not be used if one trace does not enclose the other. Traces in a <code>stackgroup</code> will only fill to (or be filled to) other traces in the same group. With multiple <code>stackgroup</code>s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available. If fillgradient is specified, fillcolor is ignored except for setting the background color of the hover label, if any.</li> <li>Sets the fill gradient colors as a color scale. The color scale is interpreted as a gradient applied in the direction specified by orientation, from the lowest to the highest value of the scatter plot along that axis, or from the center to the most distant point from it, if orientation is radial.</li> <li>Sets the gradient start value. It is given as the absolute position on the axis determined by the orientation. E.g., if orientation is horizontal, the gradient will be horizontal and start from the x-position given by start. If omitted, the gradient starts at the lowest value of the trace along the respective axis. Ignored if orientation is radial.</li> <li>Sets the gradient end value. It is given as the absolute position on the axis determined by the orientation. E.g., if orientation is horizontal, the gradient will be horizontal and end at the x-position given by end. If omitted, the gradient ends at the highest value of the trace along the respective axis. Ignored if orientation is radial.</li> <li>Sets the type/orientation of the color gradient for the fill. Defaults to none.</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Only relevant when <code>stackgroup</code> is used, and only the first <code>groupnorm</code> found in the <code>stackgroup</code> will be used - including if <code>visible</code> is legendonly but not if it is <code>false</code>. Sets the normalization for the sum of this <code>stackgroup</code>. With fraction, the value of each trace at each location is divided by the sum of all trace values at that location. percent is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple <code>stackgroup</code>s on one subplot, each will be normalized within its own set.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is toself or tonext and there are no markers or text, then the default is fills, otherwise it is points.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With auto the lines would trim before markers if <code>marker.angleref</code> is set to previous.</li> <li>Sets the source reference on Chart Studio Cloud for <code>backoff</code>.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Determines the line shape. With spline the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</li> <li>Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.</li> <li>Has an effect only if <code>shape</code> is set to spline Sets the amount of smoothing. 0 corresponds to no smoothing (equivalent to a linear shape).</li> <li>Sets the line width (in px).</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the reference for marker angle. With previous, angle 0 points along the line from the previous point to this one. With up, angle 0 points toward the top of the screen.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the type of gradient used to fill the markers</li> <li>Sets the source reference on Chart Studio Cloud for <code>type</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets a maximum number of points to be drawn on the graph. 0 corresponds to no limit.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Moves the marker away from the data point in the direction of <code>angle</code> (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</li> <li>Sets the source reference on Chart Studio Cloud for <code>standoff</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is lines+markers. Otherwise, lines.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</li> <li>Sets the opacity of the trace.</li> <li>Only relevant in the following cases: 1. when <code>scattermode</code> is set to group. 2. when <code>stackgroup</code> is used, and only the first <code>orientation</code> found in the <code>stackgroup</code> will be used - including if <code>visible</code> is legendonly but not if it is <code>false</code>. Sets the stacking direction. With v (h), the y (x) values of subsequent traces are added. Also affects the default value of <code>fill</code>.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Only relevant when <code>stackgroup</code> is used, and only the first <code>stackgaps</code> found in the <code>stackgroup</code> will be used - including if <code>visible</code> is legendonly but not if it is <code>false</code>. Determines how we handle locations at which other traces in this group have data but this one does not. With infer zero we insert a zero at these locations. With interpolate we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.</li> <li>Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if <code>orientation</code> is h). If blank or omitted this trace will not be stacked. Stacking also turns <code>fill</code> on by default, using tonexty (tonextx) if <code>orientation</code> is h (v) and sets the default <code>mode</code> to lines irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a <code>stackgroup</code> will only fill to (or be filled to) other traces in the same group. With multiple <code>stackgroup</code>s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. </li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the x coordinates.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the y axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scatter3d/","title":"Scatter3d","text":""},{"location":"reference/configuration/Trace/Props/Scatter3d/#scatter3d","title":"Scatter3d","text":""},{"location":"reference/configuration/Trace/Props/Scatter3d/#overview","title":"Overview","text":"<p>The <code>scatter3d</code> trace type is used to create 3D scatter plots, which visualize data points based on three numerical variables (x, y, and z axes). 3D scatter plots are useful for exploring relationships between three variables and detecting patterns or outliers in higher-dimensional data.</p> <p>You can customize the marker size, color, and add lines to connect points in 3D space to represent the data effectively.</p> <p>Common Uses</p> <ul> <li>3D Relationship Analysis: Exploring the relationship between three numerical variables.</li> <li>Pattern Detection: Identifying trends and clusters in three dimensions.</li> <li>High-Dimensional Data: Visualizing higher-dimensional datasets.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scatter3d/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scatter3D PlotScatter3D Plot with LinesScatter3D Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scatter3d</code> plot showing data points in 3D space:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scatter3d-data\n    args:\n      - echo\n      - |\n        x,y,z\n        1,10,15\n        2,20,25\n        3,15,30\n        4,25,35\n        5,30,40\ntraces:\n  - name: Simple Scatter3D Plot\n    model: ${ref(scatter3d-data)}\n    props:\n      type: scatter3d\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      mode: \"markers\"\ncharts:\n  - name: Simple Scatter3D Chart\n    traces:\n      - ${ref(Simple Scatter3D Plot)}\n    layout:\n      title:\n        text: Simple Scatter3D Plot&lt;br&gt;&lt;sub&gt;3D Data Points&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scatter3d</code> plot with lines connecting the data points in 3D space:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatter3d-data-lines\n    args:\n      - echo\n      - |\n        x,y,z\n        1,5,7\n        2,10,12\n        3,8,10\n        4,15,18\n        5,12,17\ntraces:\n  - name: Scatter3D Plot with Lines\n    model: ${ref(scatter3d-data-lines)}\n    props:\n      type: scatter3d\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      mode: \"lines+markers\"\ncharts:\n  - name: Scatter3D Chart with Lines\n    traces:\n      - ${ref(Scatter3D Plot with Lines)}\n    layout:\n      title:\n        text: Scatter3D Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Data Points with Lines&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scatter3d</code> plot with custom marker sizes and colors, giving more visual weight to each data point in 3D space:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatter3d-data-custom\n    args:\n      - echo\n      - |\n        x,y,z,size,color\n        1,5,10,15,#1f77b4\n        2,10,12,20,#ff7f0e\n        3,8,10,25,#2ca02c\n        4,15,18,30,#d62728\n        5,12,20,35,#9467bd\ntraces:\n  - name: Scatter3D Plot with Custom Markers\n    model: ${ref(scatter3d-data-custom)}\n    props:\n      type: scatter3d\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scatter3D Chart with Custom Markers\n    traces:\n      - ${ref(Scatter3D Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scatter3D Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for 3D Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scatter3d/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scatter3d</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>connectgaps: 'boolean' #(1)!\ncustomdata: 'array' #(2)!\ncustomdatasrc: 'string' #(3)!\nerror_x:\n  array: 'array' #(4)!\n  arrayminus: 'array' #(5)!\n  arrayminussrc: 'string' #(6)!\n  arraysrc: 'string' #(7)!\n  color: 'any' #(8)!\n  copy_zstyle: boolean\n  symmetric: 'boolean' #(9)!\n  thickness: 'number' #(10)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(11)!\n  value: 'number' #(12)!\n  valueminus: 'number' #(13)!\n  visible: 'boolean' #(14)!\n  width: 'number' #(15)!\nerror_y:\n  array: 'array' #(16)!\n  arrayminus: 'array' #(17)!\n  arrayminussrc: 'string' #(18)!\n  arraysrc: 'string' #(19)!\n  color: 'any' #(20)!\n  copy_zstyle: boolean\n  symmetric: 'boolean' #(21)!\n  thickness: 'number' #(22)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(23)!\n  value: 'number' #(24)!\n  valueminus: 'number' #(25)!\n  visible: 'boolean' #(26)!\n  width: 'number' #(27)!\nerror_z:\n  array: 'array' #(28)!\n  arrayminus: 'array' #(29)!\n  arrayminussrc: 'string' #(30)!\n  arraysrc: 'string' #(31)!\n  color: 'any' #(32)!\n  symmetric: 'boolean' #(33)!\n  thickness: 'number' #(34)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(35)!\n  value: 'number' #(36)!\n  valueminus: 'number' #(37)!\n  visible: 'boolean' #(38)!\n  width: 'number' #(39)!\nhoverinfo: 'array' #(40)!\nhoverinfosrc: 'string' #(41)!\nhoverlabel:\n  align: 'array' #(42)!\n  alignsrc: 'string' #(43)!\n  bgcolor: 'color | array' #(44)!\n  bgcolorsrc: 'string' #(45)!\n  bordercolor: 'color | array' #(46)!\n  bordercolorsrc: 'string' #(47)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(48)!\n    family: 'string | array' #(49)!\n    familysrc: 'string' #(50)!\n    lineposition: 'array' #(51)!\n    linepositionsrc: 'string' #(52)!\n    shadow: 'string | array' #(53)!\n    shadowsrc: 'string' #(54)!\n    size: number | array\n    sizesrc: 'string' #(55)!\n    style: 'array' #(56)!\n    stylesrc: 'string' #(57)!\n    textcase: 'array' #(58)!\n    textcasesrc: 'string' #(59)!\n    variant: 'array' #(60)!\n    variantsrc: 'string' #(61)!\n    weight: 'integer | array' #(62)!\n    weightsrc: 'string' #(63)!\n  namelength: 'integer | array' #(64)!\n  namelengthsrc: 'string' #(65)!\nhovertemplate: 'string | array' #(66)!\nhovertemplatesrc: 'string' #(67)!\nhovertext: 'string | array' #(68)!\nhovertextsrc: 'string' #(69)!\nids: 'array' #(70)!\nidssrc: 'string' #(71)!\nlegend: 'string' #(72)!\nlegendgroup: 'string' #(73)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(74)!\n    lineposition: 'string' #(75)!\n    shadow: 'string' #(76)!\n    size: number\n    style: 'any' #(77)!\n    textcase: 'any' #(78)!\n    variant: 'any' #(79)!\n    weight: 'integer' #(80)!\n  text: 'string' #(81)!\nlegendrank: 'number' #(82)!\nlegendwidth: 'number' #(83)!\nline:\n  autocolorscale: 'boolean' #(84)!\n  cauto: 'boolean' #(85)!\n  cmax: 'number' #(86)!\n  cmid: 'number' #(87)!\n  cmin: 'number' #(88)!\n  color: 'color | array' #(89)!\n  coloraxis: 'string' #(90)!\n  colorbar:\n    bgcolor: 'any' #(91)!\n    bordercolor: 'any' #(92)!\n    borderwidth: 'number' #(93)!\n    exponentformat: 'any' #(94)!\n    len: 'number' #(95)!\n    lenmode: 'any' #(96)!\n    minexponent: 'number' #(97)!\n    nticks: 'integer' #(98)!\n    orientation: 'any' #(99)!\n    outlinecolor: 'any' #(100)!\n    outlinewidth: 'number' #(101)!\n    separatethousands: 'boolean' #(102)!\n    showexponent: 'any' #(103)!\n    showticklabels: 'boolean' #(104)!\n    showtickprefix: 'any' #(105)!\n    showticksuffix: 'any' #(106)!\n    thickness: 'number' #(107)!\n    thicknessmode: 'any' #(108)!\n    tickangle: 'number' #(109)!\n    tickcolor: 'any' #(110)!\n    tickfont:\n      color: any\n      family: 'string' #(111)!\n      lineposition: 'string' #(112)!\n      shadow: 'string' #(113)!\n      size: number\n      style: 'any' #(114)!\n      textcase: 'any' #(115)!\n      variant: 'any' #(116)!\n      weight: 'integer' #(117)!\n    tickformat: 'string' #(118)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(119)!\n    ticklabelposition: 'any' #(120)!\n    ticklabelstep: 'integer' #(121)!\n    ticklen: 'number' #(122)!\n    tickmode: 'any' #(123)!\n    tickprefix: 'string' #(124)!\n    ticks: 'any' #(125)!\n    ticksuffix: 'string' #(126)!\n    ticktext: 'array' #(127)!\n    ticktextsrc: 'string' #(128)!\n    tickvals: 'array' #(129)!\n    tickvalssrc: 'string' #(130)!\n    tickwidth: 'number' #(131)!\n    title:\n      font:\n        color: any\n        family: 'string' #(132)!\n        lineposition: 'string' #(133)!\n        shadow: 'string' #(134)!\n        size: number\n        style: 'any' #(135)!\n        textcase: 'any' #(136)!\n        variant: 'any' #(137)!\n        weight: 'integer' #(138)!\n      side: 'any' #(139)!\n      text: 'string' #(140)!\n    x: 'number' #(141)!\n    xanchor: 'any' #(142)!\n    xpad: 'number' #(143)!\n    xref: 'any' #(144)!\n    y: 'number' #(145)!\n    yanchor: 'any' #(146)!\n    ypad: 'number' #(147)!\n    yref: 'any' #(148)!\n  colorscale: 'any' #(149)!\n  colorsrc: 'string' #(150)!\n  dash: 'any' #(151)!\n  reversescale: 'boolean' #(152)!\n  showscale: 'boolean' #(153)!\n  width: 'number' #(154)!\nmarker:\n  autocolorscale: 'boolean' #(155)!\n  cauto: 'boolean' #(156)!\n  cmax: 'number' #(157)!\n  cmid: 'number' #(158)!\n  cmin: 'number' #(159)!\n  color: 'color | array' #(160)!\n  coloraxis: 'string' #(161)!\n  colorbar:\n    bgcolor: 'any' #(162)!\n    bordercolor: 'any' #(163)!\n    borderwidth: 'number' #(164)!\n    exponentformat: 'any' #(165)!\n    len: 'number' #(166)!\n    lenmode: 'any' #(167)!\n    minexponent: 'number' #(168)!\n    nticks: 'integer' #(169)!\n    orientation: 'any' #(170)!\n    outlinecolor: 'any' #(171)!\n    outlinewidth: 'number' #(172)!\n    separatethousands: 'boolean' #(173)!\n    showexponent: 'any' #(174)!\n    showticklabels: 'boolean' #(175)!\n    showtickprefix: 'any' #(176)!\n    showticksuffix: 'any' #(177)!\n    thickness: 'number' #(178)!\n    thicknessmode: 'any' #(179)!\n    tickangle: 'number' #(180)!\n    tickcolor: 'any' #(181)!\n    tickfont:\n      color: any\n      family: 'string' #(182)!\n      lineposition: 'string' #(183)!\n      shadow: 'string' #(184)!\n      size: number\n      style: 'any' #(185)!\n      textcase: 'any' #(186)!\n      variant: 'any' #(187)!\n      weight: 'integer' #(188)!\n    tickformat: 'string' #(189)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(190)!\n    ticklabelposition: 'any' #(191)!\n    ticklabelstep: 'integer' #(192)!\n    ticklen: 'number' #(193)!\n    tickmode: 'any' #(194)!\n    tickprefix: 'string' #(195)!\n    ticks: 'any' #(196)!\n    ticksuffix: 'string' #(197)!\n    ticktext: 'array' #(198)!\n    ticktextsrc: 'string' #(199)!\n    tickvals: 'array' #(200)!\n    tickvalssrc: 'string' #(201)!\n    tickwidth: 'number' #(202)!\n    title:\n      font:\n        color: any\n        family: 'string' #(203)!\n        lineposition: 'string' #(204)!\n        shadow: 'string' #(205)!\n        size: number\n        style: 'any' #(206)!\n        textcase: 'any' #(207)!\n        variant: 'any' #(208)!\n        weight: 'integer' #(209)!\n      side: 'any' #(210)!\n      text: 'string' #(211)!\n    x: 'number' #(212)!\n    xanchor: 'any' #(213)!\n    xpad: 'number' #(214)!\n    xref: 'any' #(215)!\n    y: 'number' #(216)!\n    yanchor: 'any' #(217)!\n    ypad: 'number' #(218)!\n    yref: 'any' #(219)!\n  colorscale: 'any' #(220)!\n  colorsrc: 'string' #(221)!\n  line:\n    autocolorscale: 'boolean' #(222)!\n    cauto: 'boolean' #(223)!\n    cmax: 'number' #(224)!\n    cmid: 'number' #(225)!\n    cmin: 'number' #(226)!\n    color: 'color | array' #(227)!\n    coloraxis: 'string' #(228)!\n    colorscale: 'any' #(229)!\n    colorsrc: 'string' #(230)!\n    reversescale: 'boolean' #(231)!\n    width: 'number' #(232)!\n  opacity: 'number' #(233)!\n  reversescale: 'boolean' #(234)!\n  showscale: 'boolean' #(235)!\n  size: 'number | array' #(236)!\n  sizemin: 'number' #(237)!\n  sizemode: 'any' #(238)!\n  sizeref: 'number' #(239)!\n  sizesrc: 'string' #(240)!\n  symbol: 'array' #(241)!\n  symbolsrc: 'string' #(242)!\nmetasrc: 'string' #(243)!\nmode: 'string' #(244)!\nname: 'string' #(245)!\nopacity: 'number' #(246)!\nprojection:\n  x:\n    opacity: 'number' #(247)!\n    scale: 'number' #(248)!\n    show: 'boolean' #(249)!\n  y:\n    opacity: 'number' #(250)!\n    scale: 'number' #(251)!\n    show: 'boolean' #(252)!\n  z:\n    opacity: 'number' #(253)!\n    scale: 'number' #(254)!\n    show: 'boolean' #(255)!\nscene: 'string' #(256)!\nshowlegend: 'boolean' #(257)!\nstream:\n  maxpoints: 'number' #(258)!\n  token: 'string' #(259)!\nsurfaceaxis: 'any' #(260)!\nsurfacecolor: 'any' #(261)!\ntext: 'string | array' #(262)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(263)!\n  family: 'string | array' #(264)!\n  familysrc: 'string' #(265)!\n  size: number | array\n  sizesrc: 'string' #(266)!\n  style: 'array' #(267)!\n  stylesrc: 'string' #(268)!\n  variant: 'array' #(269)!\n  variantsrc: 'string' #(270)!\n  weight: 'integer | array' #(271)!\n  weightsrc: 'string' #(272)!\ntextposition: 'array' #(273)!\ntextpositionsrc: 'string' #(274)!\ntextsrc: 'string' #(275)!\ntexttemplate: 'string | array' #(276)!\ntexttemplatesrc: 'string' #(277)!\ntype: scatter3d\nuid: 'string' #(278)!\nvisible: 'any' #(279)!\nx: 'array' #(280)!\nxcalendar: 'any' #(281)!\nxhoverformat: 'string' #(282)!\nxsrc: 'string' #(283)!\ny: 'array' #(284)!\nycalendar: 'any' #(285)!\nyhoverformat: 'string' #(286)!\nysrc: 'string' #(287)!\nz: 'array' #(288)!\nzcalendar: 'any' #(289)!\nzhoverformat: 'string' #(290)!\nzsrc: 'string' #(291)!\n</code></pre> <ol> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>line.colorscale</code>. Has an effect only if in <code>line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>line.color</code>) or the bounds set in <code>line.cmin</code> and <code>line.cmax</code> Has an effect only if in <code>line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>line.cmin</code> and <code>line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code> and if set, <code>line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>line.cmin</code> and/or <code>line.cmax</code> to be equidistant to this point. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code>. Has no effect when <code>line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>line.color</code> is set to a numerical array. Value should have the same units as in <code>line.color</code> and if set, <code>line.cmax</code> must be set as well.</li> <li>Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>line.cmin</code> and <code>line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>line.cmin</code> and <code>line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the dash style of the lines.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>line.color</code> is set to a numerical array. If true, <code>line.cmin</code> will correspond to the last color in the array and <code>line.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>line.color</code> is set to a numerical array.</li> <li>Sets the line width (in px).</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set marker.color to an rgba color and use its alpha channel.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the marker symbol type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is lines+markers. Otherwise, lines.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the projection color.</li> <li>Sets the scale factor determining the size of the projection marker points.</li> <li>Sets whether or not projections are shown along the x axis.</li> <li>Sets the projection color.</li> <li>Sets the scale factor determining the size of the projection marker points.</li> <li>Sets whether or not projections are shown along the y axis.</li> <li>Sets the projection color.</li> <li>Sets the scale factor determining the size of the projection marker points.</li> <li>Sets whether or not projections are shown along the z axis.</li> <li>Sets a reference between this trace's 3D coordinate system and a 3D scene. If scene (the default value), the (x,y,z) coordinates refer to <code>layout.scene</code>. If scene2, the (x,y,z) coordinates refer to <code>layout.scene2</code>, and so on.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>If -1, the scatter points are not fill with a surface If 0, 1, 2, the scatter points are filled with a Delaunay surface about the x, y, z respectively.</li> <li>Sets the surface fill color.</li> <li>Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. </li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the x coordinates.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the z coordinates.</li> <li>Sets the calendar system to use with <code>z</code> date data.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>zaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scattercarpet/","title":"Scattercarpet","text":""},{"location":"reference/configuration/Trace/Props/Scattercarpet/#scattercarpet","title":"Scattercarpet","text":""},{"location":"reference/configuration/Trace/Props/Scattercarpet/#overview","title":"Overview","text":"<p>The <code>scattercarpet</code> trace type is used to create scatter plots on a 2D carpet axis, which allows for more complex and non-linear grids. This trace type is useful for visualizing relationships between variables when the x and y axes are not evenly spaced, such as in polar or distortion grids.</p> <p>You can customize the marker size, color, and line connections, similar to standard scatter plots but on a carpet axis.</p> <p>Common Uses</p> <ul> <li>Non-Linear Grids: Visualizing data points on non-standard grids where the x and y axes are distorted or uneven.</li> <li>Data Visualization with Carpet Axes: Displaying data points in cases where the relationships between variables are non-linear or require a more flexible grid.</li> <li>Heatmap-Like Data: Scatter plots combined with other traces like <code>carpet</code> for advanced visualizations.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scattercarpet/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scattercarpet PlotScattercarpet Plot with LinesScattercarpet Plot with Custom Marker Sizes and Colors <p>This example shows a <code>scattercarpet</code> plot with a visible carpet grid. The carpet trace defines the non-linear grid, and the scattercarpet trace plots points on that grid:</p> <pre><code>models:\n  - name: carpet-grid\n    args:\n      - echo\n      - |\n        a,b,y\n        4,1,2\n        4,2,3.5\n        4,3,4\n        4.5,1,3\n        4.5,2,4.5\n        4.5,3,5\n        5,1,5.5\n        5,2,6.5\n        5,3,7.5\n        6,1,8\n        6,2,8.5\n        6,3,10\n  - name: scattercarpet-data\n    args:\n      - echo\n      - |\n        a,b,value\n        4,1.5,15\n        4.5,2.5,25\n        5,1.5,30\n        6,2.5,40\ntraces:\n  - name: Carpet Grid\n    model: ${ref(carpet-grid)}\n    props:\n      type: carpet\n      a: ?{a}\n      b: ?{b}\n      y: ?{y}\n      aaxis:\n        tickprefix: 'a = '\n        ticksuffix: 'm'\n        smoothing: 1\n        minorgridcount: 9\n      baxis:\n        tickprefix: 'b = '\n        ticksuffix: 'Pa'\n        smoothing: 1\n        minorgridcount: 9\n  - name: Simple Scattercarpet Plot\n    model: ${ref(scattercarpet-data)}\n    props:\n      type: scattercarpet\n      a: ?{a}\n      b: ?{b}\n      mode: \"markers\"\ncharts:\n  - name: Simple Scattercarpet Chart\n    traces:\n      - ${ref(Carpet Grid)}\n      - ${ref(Simple Scattercarpet Plot)}\n    layout:\n      title:\n        text: Simple Scattercarpet Plot&lt;br&gt;&lt;sub&gt;2D Data Points on Carpet Axis&lt;/sub&gt;\n</code></pre> <p>This example shows a <code>scattercarpet</code> plot with lines+markers, using a unique carpet grid for context:</p> <pre><code>models:\n  - name: carpet-grid-lines\n    args:\n      - echo\n      - |\n        a,b,y\n        4,1,2\n        4,2,3.5\n        4,3,4\n        4.5,1,3\n        4.5,2,4.5\n        4.5,3,5\n        5,1,5.5\n        5,2,6.5\n        5,3,7.5\n        6,1,8\n        6,2,8.5\n        6,3,10\n  - name: scattercarpet-data-lines\n    args:\n      - echo\n      - |\n        a,b,value\n        4,1,7\n        4.5,2,12\n        5,1.5,10\n        6,2.5,18\n        5,2,17\ntraces:\n  - name: Carpet Grid Lines\n    model: ${ref(carpet-grid-lines)}\n    props:\n      type: carpet\n      a: ?{a}\n      b: ?{b}\n      y: ?{y}\n      aaxis:\n        tickprefix: 'a = '\n        ticksuffix: 'm'\n        smoothing: 1\n        minorgridcount: 9\n      baxis:\n        tickprefix: 'b = '\n        ticksuffix: 'Pa'\n        smoothing: 1\n        minorgridcount: 9\n  - name: Scattercarpet Plot with Lines\n    model: ${ref(scattercarpet-data-lines)}\n    props:\n      type: scattercarpet\n      a: ?{a}\n      b: ?{b}\n      mode: \"lines+markers\"\ncharts:\n  - name: Scattercarpet Chart with Lines\n    traces:\n      - ${ref(Carpet Grid Lines)}\n      - ${ref(Scattercarpet Plot with Lines)}\n    layout:\n      title:\n        text: Scattercarpet Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Data Points on Carpet Axis&lt;/sub&gt;\n</code></pre> <p>This example shows a <code>scattercarpet</code> plot with custom marker sizes and colors, using a unique carpet grid for context:</p> <pre><code>models:\n  - name: carpet-grid-markers\n    args:\n      - echo\n      - |\n        a,b,y\n        4,1,2\n        4,2,3.5\n        4,3,4\n        4.5,1,3\n        4.5,2,4.5\n        4.5,3,5\n        5,1,5.5\n        5,2,6.5\n        5,3,7.5\n        6,1,8\n        6,2,8.5\n        6,3,10\n  - name: scattercarpet-data-custom\n    args:\n      - echo\n      - |\n        a,b,size,color\n        4,1,10,#1f77b4\n        4.5,2,15,#ff7f0e\n        5,1.5,20,#2ca02c\n        6,2.5,25,#d62728\n        5,2,30,#9467bd\ntraces:\n  - name: Carpet Grid Markers\n    model: ${ref(carpet-grid-markers)}\n    props:\n      type: carpet\n      a: ?{a}\n      b: ?{b}\n      y: ?{y}\n      aaxis:\n        tickprefix: 'a = '\n        ticksuffix: 'm'\n        smoothing: 1\n        minorgridcount: 9\n      baxis:\n        tickprefix: 'b = '\n        ticksuffix: 'Pa'\n        smoothing: 1\n        minorgridcount: 9\n  - name: Scattercarpet Plot with Custom Markers\n    model: ${ref(scattercarpet-data-custom)}\n    props:\n      type: scattercarpet\n      a: ?{a}\n      b: ?{b}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scattercarpet Chart with Custom Markers\n    traces:\n      - ${ref(Carpet Grid Markers)}\n      - ${ref(Scattercarpet Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scattercarpet Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Carpet Axis Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scattercarpet/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scattercarpet</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>a: 'array' #(1)!\nasrc: 'string' #(2)!\nb: 'array' #(3)!\nbsrc: 'string' #(4)!\ncarpet: 'string' #(5)!\nconnectgaps: 'boolean' #(6)!\ncustomdata: 'array' #(7)!\ncustomdatasrc: 'string' #(8)!\nfill: 'any' #(9)!\nfillcolor: 'any' #(10)!\nhoverinfo: 'array' #(11)!\nhoverinfosrc: 'string' #(12)!\nhoverlabel:\n  align: 'array' #(13)!\n  alignsrc: 'string' #(14)!\n  bgcolor: 'color | array' #(15)!\n  bgcolorsrc: 'string' #(16)!\n  bordercolor: 'color | array' #(17)!\n  bordercolorsrc: 'string' #(18)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(19)!\n    family: 'string | array' #(20)!\n    familysrc: 'string' #(21)!\n    lineposition: 'array' #(22)!\n    linepositionsrc: 'string' #(23)!\n    shadow: 'string | array' #(24)!\n    shadowsrc: 'string' #(25)!\n    size: number | array\n    sizesrc: 'string' #(26)!\n    style: 'array' #(27)!\n    stylesrc: 'string' #(28)!\n    textcase: 'array' #(29)!\n    textcasesrc: 'string' #(30)!\n    variant: 'array' #(31)!\n    variantsrc: 'string' #(32)!\n    weight: 'integer | array' #(33)!\n    weightsrc: 'string' #(34)!\n  namelength: 'integer | array' #(35)!\n  namelengthsrc: 'string' #(36)!\nhoveron: 'string' #(37)!\nhovertemplate: 'string | array' #(38)!\nhovertemplatesrc: 'string' #(39)!\nhovertext: 'string | array' #(40)!\nhovertextsrc: 'string' #(41)!\nids: 'array' #(42)!\nidssrc: 'string' #(43)!\nlegend: 'string' #(44)!\nlegendgroup: 'string' #(45)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(46)!\n    lineposition: 'string' #(47)!\n    shadow: 'string' #(48)!\n    size: number\n    style: 'any' #(49)!\n    textcase: 'any' #(50)!\n    variant: 'any' #(51)!\n    weight: 'integer' #(52)!\n  text: 'string' #(53)!\nlegendrank: 'number' #(54)!\nlegendwidth: 'number' #(55)!\nline:\n  backoff: 'number | array' #(56)!\n  backoffsrc: 'string' #(57)!\n  color: 'any' #(58)!\n  dash: 'string' #(59)!\n  shape: 'any' #(60)!\n  smoothing: 'number' #(61)!\n  width: 'number' #(62)!\nmarker:\n  angle: 'number | array' #(63)!\n  angleref: 'any' #(64)!\n  anglesrc: 'string' #(65)!\n  autocolorscale: 'boolean' #(66)!\n  cauto: 'boolean' #(67)!\n  cmax: 'number' #(68)!\n  cmid: 'number' #(69)!\n  cmin: 'number' #(70)!\n  color: 'color | array' #(71)!\n  coloraxis: 'string' #(72)!\n  colorbar:\n    bgcolor: 'any' #(73)!\n    bordercolor: 'any' #(74)!\n    borderwidth: 'number' #(75)!\n    exponentformat: 'any' #(76)!\n    len: 'number' #(77)!\n    lenmode: 'any' #(78)!\n    minexponent: 'number' #(79)!\n    nticks: 'integer' #(80)!\n    orientation: 'any' #(81)!\n    outlinecolor: 'any' #(82)!\n    outlinewidth: 'number' #(83)!\n    separatethousands: 'boolean' #(84)!\n    showexponent: 'any' #(85)!\n    showticklabels: 'boolean' #(86)!\n    showtickprefix: 'any' #(87)!\n    showticksuffix: 'any' #(88)!\n    thickness: 'number' #(89)!\n    thicknessmode: 'any' #(90)!\n    tickangle: 'number' #(91)!\n    tickcolor: 'any' #(92)!\n    tickfont:\n      color: any\n      family: 'string' #(93)!\n      lineposition: 'string' #(94)!\n      shadow: 'string' #(95)!\n      size: number\n      style: 'any' #(96)!\n      textcase: 'any' #(97)!\n      variant: 'any' #(98)!\n      weight: 'integer' #(99)!\n    tickformat: 'string' #(100)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(101)!\n    ticklabelposition: 'any' #(102)!\n    ticklabelstep: 'integer' #(103)!\n    ticklen: 'number' #(104)!\n    tickmode: 'any' #(105)!\n    tickprefix: 'string' #(106)!\n    ticks: 'any' #(107)!\n    ticksuffix: 'string' #(108)!\n    ticktext: 'array' #(109)!\n    ticktextsrc: 'string' #(110)!\n    tickvals: 'array' #(111)!\n    tickvalssrc: 'string' #(112)!\n    tickwidth: 'number' #(113)!\n    title:\n      font:\n        color: any\n        family: 'string' #(114)!\n        lineposition: 'string' #(115)!\n        shadow: 'string' #(116)!\n        size: number\n        style: 'any' #(117)!\n        textcase: 'any' #(118)!\n        variant: 'any' #(119)!\n        weight: 'integer' #(120)!\n      side: 'any' #(121)!\n      text: 'string' #(122)!\n    x: 'number' #(123)!\n    xanchor: 'any' #(124)!\n    xpad: 'number' #(125)!\n    xref: 'any' #(126)!\n    y: 'number' #(127)!\n    yanchor: 'any' #(128)!\n    ypad: 'number' #(129)!\n    yref: 'any' #(130)!\n  colorscale: 'any' #(131)!\n  colorsrc: 'string' #(132)!\n  gradient:\n    color: 'color | array' #(133)!\n    colorsrc: 'string' #(134)!\n    type: 'array' #(135)!\n    typesrc: 'string' #(136)!\n  line:\n    autocolorscale: 'boolean' #(137)!\n    cauto: 'boolean' #(138)!\n    cmax: 'number' #(139)!\n    cmid: 'number' #(140)!\n    cmin: 'number' #(141)!\n    color: 'color | array' #(142)!\n    coloraxis: 'string' #(143)!\n    colorscale: 'any' #(144)!\n    colorsrc: 'string' #(145)!\n    reversescale: 'boolean' #(146)!\n    width: 'number | array' #(147)!\n    widthsrc: 'string' #(148)!\n  maxdisplayed: 'number' #(149)!\n  opacity: 'number | array' #(150)!\n  opacitysrc: 'string' #(151)!\n  reversescale: 'boolean' #(152)!\n  showscale: 'boolean' #(153)!\n  size: 'number | array' #(154)!\n  sizemin: 'number' #(155)!\n  sizemode: 'any' #(156)!\n  sizeref: 'number' #(157)!\n  sizesrc: 'string' #(158)!\n  standoff: 'number | array' #(159)!\n  standoffsrc: 'string' #(160)!\n  symbol: 'array' #(161)!\n  symbolsrc: 'string' #(162)!\nmetasrc: 'string' #(163)!\nmode: 'string' #(164)!\nname: 'string' #(165)!\nopacity: 'number' #(166)!\nselected:\n  marker:\n    color: 'any' #(167)!\n    opacity: 'number' #(168)!\n    size: 'number' #(169)!\n  textfont:\n    color: 'any' #(170)!\nshowlegend: 'boolean' #(171)!\nstream:\n  maxpoints: 'number' #(172)!\n  token: 'string' #(173)!\ntext: 'string | array' #(174)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(175)!\n  family: 'string | array' #(176)!\n  familysrc: 'string' #(177)!\n  lineposition: 'array' #(178)!\n  linepositionsrc: 'string' #(179)!\n  shadow: 'string | array' #(180)!\n  shadowsrc: 'string' #(181)!\n  size: number | array\n  sizesrc: 'string' #(182)!\n  style: 'array' #(183)!\n  stylesrc: 'string' #(184)!\n  textcase: 'array' #(185)!\n  textcasesrc: 'string' #(186)!\n  variant: 'array' #(187)!\n  variantsrc: 'string' #(188)!\n  weight: 'integer | array' #(189)!\n  weightsrc: 'string' #(190)!\ntextposition: 'array' #(191)!\ntextpositionsrc: 'string' #(192)!\ntextsrc: 'string' #(193)!\ntexttemplate: 'string | array' #(194)!\ntexttemplatesrc: 'string' #(195)!\ntype: scattercarpet\nuid: 'string' #(196)!\nunselected:\n  marker:\n    color: 'any' #(197)!\n    opacity: 'number' #(198)!\n    size: 'number' #(199)!\n  textfont:\n    color: 'any' #(200)!\nvisible: 'any' #(201)!\nxaxis: 'string' #(202)!\nyaxis: 'string' #(203)!\nzorder: 'integer' #(204)!\n</code></pre> <ol> <li>Sets the a-axis coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>a</code>.</li> <li>Sets the b-axis coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>b</code>.</li> <li>An identifier for this carpet, so that <code>scattercarpet</code> and <code>contourcarpet</code> traces can specify a carpet plot on which they lie</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the area to fill with a solid color. Use with <code>fillcolor</code> if not none. scatterternary has a subset of the options available to scatter. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. tonext fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like toself if there is no trace before it. tonext should not be used if one trace does not enclose the other.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is toself or tonext and there are no markers or text, then the default is fills, otherwise it is points.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With auto the lines would trim before markers if <code>marker.angleref</code> is set to previous.</li> <li>Sets the source reference on Chart Studio Cloud for <code>backoff</code>.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Determines the line shape. With spline the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</li> <li>Has an effect only if <code>shape</code> is set to spline Sets the amount of smoothing. 0 corresponds to no smoothing (equivalent to a linear shape).</li> <li>Sets the line width (in px).</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the reference for marker angle. With previous, angle 0 points along the line from the previous point to this one. With up, angle 0 points toward the top of the screen.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the type of gradient used to fill the markers</li> <li>Sets the source reference on Chart Studio Cloud for <code>type</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets a maximum number of points to be drawn on the graph. 0 corresponds to no limit.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Moves the marker away from the data point in the direction of <code>angle</code> (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</li> <li>Sets the source reference on Chart Studio Cloud for <code>standoff</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is lines+markers. Otherwise, lines.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>a</code>, <code>b</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scattergeo/","title":"Scattergeo","text":""},{"location":"reference/configuration/Trace/Props/Scattergeo/#scattergeo","title":"Scattergeo","text":""},{"location":"reference/configuration/Trace/Props/Scattergeo/#overview","title":"Overview","text":"<p>The <code>scattergeo</code> trace type is used to create scatter plots on a geographic map. This type of plot is ideal for visualizing data points with geographic coordinates, allowing for the exploration of patterns, distributions, or trends over geographical areas.</p> <p>You can customize the marker size, color, and geo-coordinates (longitude and latitude) to effectively represent the geographic data.</p> <p>Common Uses</p> <ul> <li>Geospatial Data: Visualizing points or patterns on a geographic map.</li> <li>Location-Based Analysis: Exploring the distribution of data points across different locations.</li> <li>Mapping: Plotting geographical points such as cities, events, or regions.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scattergeo/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scattergeo PlotScattergeo Plot with LinesScattergeo Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scattergeo</code> plot showing data points at various geographic locations:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scattergeo-data\n    args:\n      - echo\n      - |\n        lon,lat\n        -75,40\n        -80,25\n        -120,47\n        -100,35\n        -90,30\ntraces:\n  - name: Simple Scattergeo Plot\n    model: ${ref(scattergeo-data)}\n    props:\n      type: scattergeo\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"markers\"\ncharts:\n  - name: Simple Scattergeo Chart\n    traces:\n      - ${ref(Simple Scattergeo Plot)}\n    layout:\n      title:\n        text: Simple Scattergeo Plot&lt;br&gt;&lt;sub&gt;Geographical Data Points&lt;/sub&gt;\n      geo:\n        scope: \"usa\"\n</code></pre> <p>This example demonstrates a <code>scattergeo</code> plot with lines connecting geographic points:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattergeo-data-lines\n    args:\n      - echo\n      - |\n        lon,lat\n        -75,40\n        -80,25\n        -120,47\n        -100,35\n        -90,30\ntraces:\n  - name: Scattergeo Plot with Lines\n    model: ${ref(scattergeo-data-lines)}\n    props:\n      type: scattergeo\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"lines+markers\"\ncharts:\n  - name: Scattergeo Chart with Lines\n    traces:\n      - ${ref(Scattergeo Plot with Lines)}\n    layout:\n      title:\n        text: Scattergeo Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Geographic Points&lt;/sub&gt;\n      geo:\n        scope: \"world\"\n</code></pre> <p>Here's a <code>scattergeo</code> plot with custom marker sizes and colors, giving more visual weight to each geographic data point:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattergeo-data-custom\n    args:\n      - echo\n      - |\n        lon,lat,size,color\n        -75,40,10,#1f77b4\n        -80,25,15,#ff7f0e\n        -120,47,20,#2ca02c\n        -100,35,25,#d62728\n        -90,30,30,#9467bd\ntraces:\n  - name: Scattergeo Plot with Custom Markers\n    model: ${ref(scattergeo-data-custom)}\n    props:\n      type: scattergeo\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scattergeo Chart with Custom Markers\n    traces:\n      - ${ref(Scattergeo Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scattergeo Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Geographic Data Points&lt;/sub&gt;\n      geo:\n        scope: \"north america\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scattergeo/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scattergeo</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>connectgaps: 'boolean' #(1)!\ncustomdata: 'array' #(2)!\ncustomdatasrc: 'string' #(3)!\nfeatureidkey: 'string' #(4)!\nfill: 'any' #(5)!\nfillcolor: 'any' #(6)!\ngeo: 'string' #(7)!\nhoverinfo: 'array' #(8)!\nhoverinfosrc: 'string' #(9)!\nhoverlabel:\n  align: 'array' #(10)!\n  alignsrc: 'string' #(11)!\n  bgcolor: 'color | array' #(12)!\n  bgcolorsrc: 'string' #(13)!\n  bordercolor: 'color | array' #(14)!\n  bordercolorsrc: 'string' #(15)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(16)!\n    family: 'string | array' #(17)!\n    familysrc: 'string' #(18)!\n    lineposition: 'array' #(19)!\n    linepositionsrc: 'string' #(20)!\n    shadow: 'string | array' #(21)!\n    shadowsrc: 'string' #(22)!\n    size: number | array\n    sizesrc: 'string' #(23)!\n    style: 'array' #(24)!\n    stylesrc: 'string' #(25)!\n    textcase: 'array' #(26)!\n    textcasesrc: 'string' #(27)!\n    variant: 'array' #(28)!\n    variantsrc: 'string' #(29)!\n    weight: 'integer | array' #(30)!\n    weightsrc: 'string' #(31)!\n  namelength: 'integer | array' #(32)!\n  namelengthsrc: 'string' #(33)!\nhovertemplate: 'string | array' #(34)!\nhovertemplatesrc: 'string' #(35)!\nhovertext: 'string | array' #(36)!\nhovertextsrc: 'string' #(37)!\nids: 'array' #(38)!\nidssrc: 'string' #(39)!\nlat: 'array' #(40)!\nlatsrc: 'string' #(41)!\nlegend: 'string' #(42)!\nlegendgroup: 'string' #(43)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(44)!\n    lineposition: 'string' #(45)!\n    shadow: 'string' #(46)!\n    size: number\n    style: 'any' #(47)!\n    textcase: 'any' #(48)!\n    variant: 'any' #(49)!\n    weight: 'integer' #(50)!\n  text: 'string' #(51)!\nlegendrank: 'number' #(52)!\nlegendwidth: 'number' #(53)!\nline:\n  color: 'any' #(54)!\n  dash: 'string' #(55)!\n  width: 'number' #(56)!\nlocationmode: 'any' #(57)!\nlocations: 'array' #(58)!\nlocationssrc: 'string' #(59)!\nlon: 'array' #(60)!\nlonsrc: 'string' #(61)!\nmarker:\n  angle: 'number | array' #(62)!\n  angleref: 'any' #(63)!\n  anglesrc: 'string' #(64)!\n  autocolorscale: 'boolean' #(65)!\n  cauto: 'boolean' #(66)!\n  cmax: 'number' #(67)!\n  cmid: 'number' #(68)!\n  cmin: 'number' #(69)!\n  color: 'color | array' #(70)!\n  coloraxis: 'string' #(71)!\n  colorbar:\n    bgcolor: 'any' #(72)!\n    bordercolor: 'any' #(73)!\n    borderwidth: 'number' #(74)!\n    exponentformat: 'any' #(75)!\n    len: 'number' #(76)!\n    lenmode: 'any' #(77)!\n    minexponent: 'number' #(78)!\n    nticks: 'integer' #(79)!\n    orientation: 'any' #(80)!\n    outlinecolor: 'any' #(81)!\n    outlinewidth: 'number' #(82)!\n    separatethousands: 'boolean' #(83)!\n    showexponent: 'any' #(84)!\n    showticklabels: 'boolean' #(85)!\n    showtickprefix: 'any' #(86)!\n    showticksuffix: 'any' #(87)!\n    thickness: 'number' #(88)!\n    thicknessmode: 'any' #(89)!\n    tickangle: 'number' #(90)!\n    tickcolor: 'any' #(91)!\n    tickfont:\n      color: any\n      family: 'string' #(92)!\n      lineposition: 'string' #(93)!\n      shadow: 'string' #(94)!\n      size: number\n      style: 'any' #(95)!\n      textcase: 'any' #(96)!\n      variant: 'any' #(97)!\n      weight: 'integer' #(98)!\n    tickformat: 'string' #(99)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(100)!\n    ticklabelposition: 'any' #(101)!\n    ticklabelstep: 'integer' #(102)!\n    ticklen: 'number' #(103)!\n    tickmode: 'any' #(104)!\n    tickprefix: 'string' #(105)!\n    ticks: 'any' #(106)!\n    ticksuffix: 'string' #(107)!\n    ticktext: 'array' #(108)!\n    ticktextsrc: 'string' #(109)!\n    tickvals: 'array' #(110)!\n    tickvalssrc: 'string' #(111)!\n    tickwidth: 'number' #(112)!\n    title:\n      font:\n        color: any\n        family: 'string' #(113)!\n        lineposition: 'string' #(114)!\n        shadow: 'string' #(115)!\n        size: number\n        style: 'any' #(116)!\n        textcase: 'any' #(117)!\n        variant: 'any' #(118)!\n        weight: 'integer' #(119)!\n      side: 'any' #(120)!\n      text: 'string' #(121)!\n    x: 'number' #(122)!\n    xanchor: 'any' #(123)!\n    xpad: 'number' #(124)!\n    xref: 'any' #(125)!\n    y: 'number' #(126)!\n    yanchor: 'any' #(127)!\n    ypad: 'number' #(128)!\n    yref: 'any' #(129)!\n  colorscale: 'any' #(130)!\n  colorsrc: 'string' #(131)!\n  gradient:\n    color: 'color | array' #(132)!\n    colorsrc: 'string' #(133)!\n    type: 'array' #(134)!\n    typesrc: 'string' #(135)!\n  line:\n    autocolorscale: 'boolean' #(136)!\n    cauto: 'boolean' #(137)!\n    cmax: 'number' #(138)!\n    cmid: 'number' #(139)!\n    cmin: 'number' #(140)!\n    color: 'color | array' #(141)!\n    coloraxis: 'string' #(142)!\n    colorscale: 'any' #(143)!\n    colorsrc: 'string' #(144)!\n    reversescale: 'boolean' #(145)!\n    width: 'number | array' #(146)!\n    widthsrc: 'string' #(147)!\n  opacity: 'number | array' #(148)!\n  opacitysrc: 'string' #(149)!\n  reversescale: 'boolean' #(150)!\n  showscale: 'boolean' #(151)!\n  size: 'number | array' #(152)!\n  sizemin: 'number' #(153)!\n  sizemode: 'any' #(154)!\n  sizeref: 'number' #(155)!\n  sizesrc: 'string' #(156)!\n  standoff: 'number | array' #(157)!\n  standoffsrc: 'string' #(158)!\n  symbol: 'array' #(159)!\n  symbolsrc: 'string' #(160)!\nmetasrc: 'string' #(161)!\nmode: 'string' #(162)!\nname: 'string' #(163)!\nopacity: 'number' #(164)!\nselected:\n  marker:\n    color: 'any' #(165)!\n    opacity: 'number' #(166)!\n    size: 'number' #(167)!\n  textfont:\n    color: 'any' #(168)!\nshowlegend: 'boolean' #(169)!\nstream:\n  maxpoints: 'number' #(170)!\n  token: 'string' #(171)!\ntext: 'string | array' #(172)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(173)!\n  family: 'string | array' #(174)!\n  familysrc: 'string' #(175)!\n  lineposition: 'array' #(176)!\n  linepositionsrc: 'string' #(177)!\n  shadow: 'string | array' #(178)!\n  shadowsrc: 'string' #(179)!\n  size: number | array\n  sizesrc: 'string' #(180)!\n  style: 'array' #(181)!\n  stylesrc: 'string' #(182)!\n  textcase: 'array' #(183)!\n  textcasesrc: 'string' #(184)!\n  variant: 'array' #(185)!\n  variantsrc: 'string' #(186)!\n  weight: 'integer | array' #(187)!\n  weightsrc: 'string' #(188)!\ntextposition: 'array' #(189)!\ntextpositionsrc: 'string' #(190)!\ntextsrc: 'string' #(191)!\ntexttemplate: 'string | array' #(192)!\ntexttemplatesrc: 'string' #(193)!\ntype: scattergeo\nuid: 'string' #(194)!\nunselected:\n  marker:\n    color: 'any' #(195)!\n    opacity: 'number' #(196)!\n    size: 'number' #(197)!\n  textfont:\n    color: 'any' #(198)!\nvisible: 'any' #(199)!\n</code></pre> <ol> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the key in GeoJSON features which is used as id to match the items included in the <code>locations</code> array. Only has an effect when <code>geojson</code> is set. Support nested property, for example properties.name.</li> <li>Sets the area to fill with a solid color. Use with <code>fillcolor</code> if not none. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Sets a reference between this trace's geospatial coordinates and a geographic map. If geo (the default value), the geospatial coordinates refer to <code>layout.geo</code>. If geo2, the geospatial coordinates refer to <code>layout.geo2</code>, and so on.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (lon,lat) pair or item in <code>locations</code>. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or <code>locations</code> coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the latitude coordinates (in degrees North).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lat</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the line width (in px).</li> <li>Determines the set of locations used to match entries in <code>locations</code> to regions on the map. Values ISO-3, USA-states, country names correspond to features on the base map and value geojson-id corresponds to features from a custom GeoJSON linked to the <code>geojson</code> attribute.</li> <li>Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See <code>locationmode</code> for more info.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Sets the longitude coordinates (in degrees East).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lon</code>.</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the reference for marker angle. With previous, angle 0 points along the line from the previous point to this one. With up, angle 0 points toward the top of the screen. With north, angle 0 points north based on the current map projection.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the type of gradient used to fill the markers</li> <li>Sets the source reference on Chart Studio Cloud for <code>type</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Moves the marker away from the data point in the direction of <code>angle</code> (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</li> <li>Sets the source reference on Chart Studio Cloud for <code>standoff</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is lines+markers. Otherwise, lines.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each (lon,lat) pair or item in <code>locations</code>. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or <code>locations</code> coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>lat</code>, <code>lon</code>, <code>location</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scattergl/","title":"Scattergl","text":""},{"location":"reference/configuration/Trace/Props/Scattergl/#scattergl","title":"Scattergl","text":""},{"location":"reference/configuration/Trace/Props/Scattergl/#overview","title":"Overview","text":"<p>The <code>scattergl</code> trace type is used to create scatter plots with WebGL rendering, making it ideal for handling large datasets and providing high-performance rendering of millions of data points. It supports the same features as <code>scatter</code>, including markers and lines, but with optimized rendering for better performance.</p> <p>You can customize the marker size, color, and add lines to connect points, similar to the <code>scatter</code> trace type, but with WebGL's performance advantages.</p> <p>Common Uses</p> <ul> <li>Large Datasets: Efficiently visualizing datasets with thousands or millions of points.</li> <li>Performance Optimization: Use when scatter plots with standard rendering struggle with performance.</li> <li>Real-Time Data: Useful for real-time visualizations with large or dynamic datasets.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scattergl/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scattergl PlotScattergl Plot with LinesScattergl Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scattergl</code> plot showing data points using WebGL rendering:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scattergl-data\n    args:\n      - echo\n      - |\n        x,y\n        1,10\n        2,20\n        3,15\n        4,25\n        5,30\ntraces:\n  - name: Simple Scattergl Plot\n    model: ${ref(scattergl-data)}\n    props:\n      type: scattergl\n      x: ?{x}\n      y: ?{y}\n      mode: \"markers\"\ncharts:\n  - name: Simple Scattergl Chart\n    traces:\n      - ${ref(Simple Scattergl Plot)}\n    layout:\n      title:\n        text: Simple Scattergl Plot&lt;br&gt;&lt;sub&gt;High-Performance Scatter Plot with WebGL&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scattergl</code> plot with lines connecting the data points using WebGL rendering:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattergl-data-lines\n    args:\n      - echo\n      - |\n        x,y\n        1,5\n        2,10\n        3,8\n        4,15\n        5,12\ntraces:\n  - name: Scattergl Plot with Lines\n    model: ${ref(scattergl-data-lines)}\n    props:\n      type: scattergl\n      x: ?{x}\n      y: ?{y}\n      mode: \"lines+markers\"\ncharts:\n  - name: Scattergl Chart with Lines\n    traces:\n      - ${ref(Scattergl Plot with Lines)}\n    layout:\n      title:\n        text: Scattergl Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Data Points with WebGL&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scattergl</code> plot with custom marker sizes and colors, giving more visual weight to each data point, all rendered with WebGL:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattergl-data-custom\n    args:\n      - echo\n      - |\n        x,y,size,color\n        1,5,10,#1f77b4\n        2,10,15,#ff7f0e\n        3,8,20,#2ca02c\n        4,15,25,#d62728\n        5,12,30,#9467bd\ntraces:\n  - name: Scattergl Plot with Custom Markers\n    model: ${ref(scattergl-data-custom)}\n    props:\n      type: scattergl\n      x: ?{x}\n      y: ?{y}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scattergl Chart with Custom Markers\n    traces:\n      - ${ref(Scattergl Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scattergl Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for WebGL Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scattergl/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scattergl</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>connectgaps: 'boolean' #(1)!\ncustomdata: 'array' #(2)!\ncustomdatasrc: 'string' #(3)!\ndx: 'number' #(4)!\ndy: 'number' #(5)!\nerror_x:\n  array: 'array' #(6)!\n  arrayminus: 'array' #(7)!\n  arrayminussrc: 'string' #(8)!\n  arraysrc: 'string' #(9)!\n  color: 'any' #(10)!\n  copy_ystyle: boolean\n  symmetric: 'boolean' #(11)!\n  thickness: 'number' #(12)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(13)!\n  value: 'number' #(14)!\n  valueminus: 'number' #(15)!\n  visible: 'boolean' #(16)!\n  width: 'number' #(17)!\nerror_y:\n  array: 'array' #(18)!\n  arrayminus: 'array' #(19)!\n  arrayminussrc: 'string' #(20)!\n  arraysrc: 'string' #(21)!\n  color: 'any' #(22)!\n  symmetric: 'boolean' #(23)!\n  thickness: 'number' #(24)!\n  traceref: integer\n  tracerefminus: integer\n  type: 'any' #(25)!\n  value: 'number' #(26)!\n  valueminus: 'number' #(27)!\n  visible: 'boolean' #(28)!\n  width: 'number' #(29)!\nfill: 'any' #(30)!\nfillcolor: 'any' #(31)!\nhoverinfo: 'array' #(32)!\nhoverinfosrc: 'string' #(33)!\nhoverlabel:\n  align: 'array' #(34)!\n  alignsrc: 'string' #(35)!\n  bgcolor: 'color | array' #(36)!\n  bgcolorsrc: 'string' #(37)!\n  bordercolor: 'color | array' #(38)!\n  bordercolorsrc: 'string' #(39)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(40)!\n    family: 'string | array' #(41)!\n    familysrc: 'string' #(42)!\n    lineposition: 'array' #(43)!\n    linepositionsrc: 'string' #(44)!\n    shadow: 'string | array' #(45)!\n    shadowsrc: 'string' #(46)!\n    size: number | array\n    sizesrc: 'string' #(47)!\n    style: 'array' #(48)!\n    stylesrc: 'string' #(49)!\n    textcase: 'array' #(50)!\n    textcasesrc: 'string' #(51)!\n    variant: 'array' #(52)!\n    variantsrc: 'string' #(53)!\n    weight: 'integer | array' #(54)!\n    weightsrc: 'string' #(55)!\n  namelength: 'integer | array' #(56)!\n  namelengthsrc: 'string' #(57)!\nhovertemplate: 'string | array' #(58)!\nhovertemplatesrc: 'string' #(59)!\nhovertext: 'string | array' #(60)!\nhovertextsrc: 'string' #(61)!\nids: 'array' #(62)!\nidssrc: 'string' #(63)!\nlegend: 'string' #(64)!\nlegendgroup: 'string' #(65)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(66)!\n    lineposition: 'string' #(67)!\n    shadow: 'string' #(68)!\n    size: number\n    style: 'any' #(69)!\n    textcase: 'any' #(70)!\n    variant: 'any' #(71)!\n    weight: 'integer' #(72)!\n  text: 'string' #(73)!\nlegendrank: 'number' #(74)!\nlegendwidth: 'number' #(75)!\nline:\n  color: 'any' #(76)!\n  dash: 'any' #(77)!\n  shape: 'any' #(78)!\n  width: 'number' #(79)!\nmarker:\n  angle: 'number | array' #(80)!\n  anglesrc: 'string' #(81)!\n  autocolorscale: 'boolean' #(82)!\n  cauto: 'boolean' #(83)!\n  cmax: 'number' #(84)!\n  cmid: 'number' #(85)!\n  cmin: 'number' #(86)!\n  color: 'color | array' #(87)!\n  coloraxis: 'string' #(88)!\n  colorbar:\n    bgcolor: 'any' #(89)!\n    bordercolor: 'any' #(90)!\n    borderwidth: 'number' #(91)!\n    exponentformat: 'any' #(92)!\n    len: 'number' #(93)!\n    lenmode: 'any' #(94)!\n    minexponent: 'number' #(95)!\n    nticks: 'integer' #(96)!\n    orientation: 'any' #(97)!\n    outlinecolor: 'any' #(98)!\n    outlinewidth: 'number' #(99)!\n    separatethousands: 'boolean' #(100)!\n    showexponent: 'any' #(101)!\n    showticklabels: 'boolean' #(102)!\n    showtickprefix: 'any' #(103)!\n    showticksuffix: 'any' #(104)!\n    thickness: 'number' #(105)!\n    thicknessmode: 'any' #(106)!\n    tickangle: 'number' #(107)!\n    tickcolor: 'any' #(108)!\n    tickfont:\n      color: any\n      family: 'string' #(109)!\n      lineposition: 'string' #(110)!\n      shadow: 'string' #(111)!\n      size: number\n      style: 'any' #(112)!\n      textcase: 'any' #(113)!\n      variant: 'any' #(114)!\n      weight: 'integer' #(115)!\n    tickformat: 'string' #(116)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(117)!\n    ticklabelposition: 'any' #(118)!\n    ticklabelstep: 'integer' #(119)!\n    ticklen: 'number' #(120)!\n    tickmode: 'any' #(121)!\n    tickprefix: 'string' #(122)!\n    ticks: 'any' #(123)!\n    ticksuffix: 'string' #(124)!\n    ticktext: 'array' #(125)!\n    ticktextsrc: 'string' #(126)!\n    tickvals: 'array' #(127)!\n    tickvalssrc: 'string' #(128)!\n    tickwidth: 'number' #(129)!\n    title:\n      font:\n        color: any\n        family: 'string' #(130)!\n        lineposition: 'string' #(131)!\n        shadow: 'string' #(132)!\n        size: number\n        style: 'any' #(133)!\n        textcase: 'any' #(134)!\n        variant: 'any' #(135)!\n        weight: 'integer' #(136)!\n      side: 'any' #(137)!\n      text: 'string' #(138)!\n    x: 'number' #(139)!\n    xanchor: 'any' #(140)!\n    xpad: 'number' #(141)!\n    xref: 'any' #(142)!\n    y: 'number' #(143)!\n    yanchor: 'any' #(144)!\n    ypad: 'number' #(145)!\n    yref: 'any' #(146)!\n  colorscale: 'any' #(147)!\n  colorsrc: 'string' #(148)!\n  line:\n    autocolorscale: 'boolean' #(149)!\n    cauto: 'boolean' #(150)!\n    cmax: 'number' #(151)!\n    cmid: 'number' #(152)!\n    cmin: 'number' #(153)!\n    color: 'color | array' #(154)!\n    coloraxis: 'string' #(155)!\n    colorscale: 'any' #(156)!\n    colorsrc: 'string' #(157)!\n    reversescale: 'boolean' #(158)!\n    width: 'number | array' #(159)!\n    widthsrc: 'string' #(160)!\n  opacity: 'number | array' #(161)!\n  opacitysrc: 'string' #(162)!\n  reversescale: 'boolean' #(163)!\n  showscale: 'boolean' #(164)!\n  size: 'number | array' #(165)!\n  sizemin: 'number' #(166)!\n  sizemode: 'any' #(167)!\n  sizeref: 'number' #(168)!\n  sizesrc: 'string' #(169)!\n  symbol: 'array' #(170)!\n  symbolsrc: 'string' #(171)!\nmetasrc: 'string' #(172)!\nmode: 'string' #(173)!\nname: 'string' #(174)!\nopacity: 'number' #(175)!\nselected:\n  marker:\n    color: 'any' #(176)!\n    opacity: 'number' #(177)!\n    size: 'number' #(178)!\n  textfont:\n    color: 'any' #(179)!\nshowlegend: 'boolean' #(180)!\nstream:\n  maxpoints: 'number' #(181)!\n  token: 'string' #(182)!\ntext: 'string | array' #(183)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(184)!\n  family: 'string | array' #(185)!\n  familysrc: 'string' #(186)!\n  size: number | array\n  sizesrc: 'string' #(187)!\n  style: 'array' #(188)!\n  stylesrc: 'string' #(189)!\n  variant: 'array' #(190)!\n  variantsrc: 'string' #(191)!\n  weight: 'array' #(192)!\n  weightsrc: 'string' #(193)!\ntextposition: 'array' #(194)!\ntextpositionsrc: 'string' #(195)!\ntextsrc: 'string' #(196)!\ntexttemplate: 'string | array' #(197)!\ntexttemplatesrc: 'string' #(198)!\ntype: scattergl\nuid: 'string' #(199)!\nunselected:\n  marker:\n    color: 'any' #(200)!\n    opacity: 'number' #(201)!\n    size: 'number' #(202)!\n  textfont:\n    color: 'any' #(203)!\nvisible: 'any' #(204)!\nx: 'array' #(205)!\nxaxis: 'string' #(206)!\nxcalendar: 'any' #(207)!\nxhoverformat: 'string' #(208)!\nxperiodalignment: 'any' #(209)!\nxsrc: 'string' #(210)!\ny: 'array' #(211)!\nyaxis: 'string' #(212)!\nycalendar: 'any' #(213)!\nyhoverformat: 'string' #(214)!\nyperiodalignment: 'any' #(215)!\nysrc: 'string' #(216)!\n</code></pre> <ol> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the x coordinate step. See <code>x0</code> for more info.</li> <li>Sets the y coordinate step. See <code>y0</code> for more info.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</li> <li>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</li> <li>Sets the source reference on Chart Studio Cloud for <code>arrayminus</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>array</code>.</li> <li>Sets the stroke color of the error bars.</li> <li>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</li> <li>Sets the thickness (in px) of the error bars.</li> <li>Determines the rule used to generate the error bars. If *constant<code>, the bar lengths are of a constant value. Set this constant in</code>value<code>. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in</code>value<code>. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set</code>array`.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars.</li> <li>Sets the value of either the percentage (if <code>type</code> is set to percent) or the constant (if <code>type</code> is set to constant) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</li> <li>Determines whether or not this set of error bars is visible.</li> <li>Sets the width (in px) of the cross-bar at both ends of the error bars.</li> <li>Sets the area to fill with a solid color. Defaults to none unless this trace is stacked, then it gets tonexty (tonextx) if <code>orientation</code> is v (h) Use with <code>fillcolor</code> if not none. tozerox and tozeroy fill to x=0 and y=0 respectively. tonextx and tonexty fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like tozerox and tozeroy. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. tonext fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like toself if there is no trace before it. tonext should not be used if one trace does not enclose the other. Traces in a <code>stackgroup</code> will only fill to (or be filled to) other traces in the same group. With multiple <code>stackgroup</code>s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line color.</li> <li>Sets the style of the lines.</li> <li>Determines the line shape. The values correspond to step-wise line shapes.</li> <li>Sets the line width (in px).</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. </li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the x coordinates.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the y axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scattermap/","title":"Scattermap","text":""},{"location":"reference/configuration/Trace/Props/Scattermap/#scattermap","title":"Scattermap","text":""},{"location":"reference/configuration/Trace/Props/Scattermap/#overview","title":"Overview","text":"<p>The <code>scattermap</code> trace type is used to create scatter plots on a MapLibre map. This is ideal for visualizing geospatial data with the added customization and interactivity that MapLibre provides, including satellite imagery and street maps. </p> <p>You can plot geographic points with latitude and longitude and customize the marker size, color, and labels to represent data effectively.</p> <p>Common Uses</p> <ul> <li>Geospatial Analysis: Plotting geographic points on an interactive map.</li> <li>Location-Based Data: Visualizing locations and patterns on a MapLibre map.</li> <li>Mapping Events: Plotting real-world events, like earthquakes or delivery points.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scattermap/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scattermap PlotScattermap Plot with LinesScattermap Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scattermap</code> plot showing data points on a MapLibre map:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scattermap-data\n    args:\n      - echo\n      - |\n        lon,lat\n        -73.9857,40.7484\n        -118.2437,34.0522\n        -0.1276,51.5074\n        139.6917,35.6895\ntraces:\n  - name: Simple Scattermap Plot\n    model: ${ref(scattermap-data)}\n    props:\n      type: scattermap\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"markers\"\n      marker:\n        size: 10\ncharts:\n  - name: Simple Scattermap Chart\n    traces:\n      - ${ref(Simple Scattermap Plot)}\n    layout:\n      mapbox:\n        style: \"open-street-map\"\n      title:\n        text: Simple Scattermap Plot&lt;br&gt;&lt;sub&gt;Geographical Data Points on MapLibre&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scattermap</code> plot with lines connecting geographic points:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattermap-data-lines\n    args:\n      - echo\n      - |\n        lon,lat\n        -73.9857,40.7484\n        -118.2437,34.0522\n        -0.1276,51.5074\n        139.6917,35.6895\ntraces:\n  - name: Scattermap Plot with Lines\n    model: ${ref(scattermap-data-lines)}\n    props:\n      type: scattermap\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"lines+markers\"\n      marker:\n        size: 10\ncharts:\n  - name: Scattermap Chart with Lines\n    traces:\n      - ${ref(Scattermap Plot with Lines)}\n    layout:\n      mapbox:\n        style: \"satellite-streets\"\n      title:\n        text: Scattermap Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Geographic Points on MapLibre&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scattermap</code> plot with custom marker sizes and colors, giving more visual weight to each geographic data point:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattermap-data-custom\n    args:\n      - echo\n      - |\n        lon,lat,size,color\n        -73.9857,40.7484,10,#1f77b4\n        -118.2437,34.0522,15,#ff7f0e\n        -0.1276,51.5074,20,#2ca02c\n        139.6917,35.6895,25,#d62728\ntraces:\n  - name: Scattermap Plot with Custom Markers\n    model: ${ref(scattermap-data-custom)}\n    props:\n      type: scattermap\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scattermap Chart with Custom Markers\n    traces:\n      - ${ref(Scattermap Plot with Custom Markers)}\n    layout:\n      mapbox:\n        style: \"dark\"\n      title:\n        text: Scattermap Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Geographic Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scattermap/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scattermap</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>below: 'string' #(1)!\ncluster:\n  color: 'color | array' #(2)!\n  colorsrc: 'string' #(3)!\n  enabled: 'boolean' #(4)!\n  maxzoom: 'number' #(5)!\n  opacity: 'number | array' #(6)!\n  opacitysrc: 'string' #(7)!\n  size: 'number | array' #(8)!\n  sizesrc: 'string' #(9)!\n  step: 'number | array' #(10)!\n  stepsrc: 'string' #(11)!\nconnectgaps: 'boolean' #(12)!\ncustomdata: 'array' #(13)!\ncustomdatasrc: 'string' #(14)!\nfill: 'any' #(15)!\nfillcolor: 'any' #(16)!\nhoverinfo: 'array' #(17)!\nhoverinfosrc: 'string' #(18)!\nhoverlabel:\n  align: 'array' #(19)!\n  alignsrc: 'string' #(20)!\n  bgcolor: 'color | array' #(21)!\n  bgcolorsrc: 'string' #(22)!\n  bordercolor: 'color | array' #(23)!\n  bordercolorsrc: 'string' #(24)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(25)!\n    family: 'string | array' #(26)!\n    familysrc: 'string' #(27)!\n    lineposition: 'array' #(28)!\n    linepositionsrc: 'string' #(29)!\n    shadow: 'string | array' #(30)!\n    shadowsrc: 'string' #(31)!\n    size: number | array\n    sizesrc: 'string' #(32)!\n    style: 'array' #(33)!\n    stylesrc: 'string' #(34)!\n    textcase: 'array' #(35)!\n    textcasesrc: 'string' #(36)!\n    variant: 'array' #(37)!\n    variantsrc: 'string' #(38)!\n    weight: 'integer | array' #(39)!\n    weightsrc: 'string' #(40)!\n  namelength: 'integer | array' #(41)!\n  namelengthsrc: 'string' #(42)!\nhovertemplate: 'string | array' #(43)!\nhovertemplatesrc: 'string' #(44)!\nhovertext: 'string | array' #(45)!\nhovertextsrc: 'string' #(46)!\nids: 'array' #(47)!\nidssrc: 'string' #(48)!\nlat: 'array' #(49)!\nlatsrc: 'string' #(50)!\nlegend: 'string' #(51)!\nlegendgroup: 'string' #(52)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(53)!\n    lineposition: 'string' #(54)!\n    shadow: 'string' #(55)!\n    size: number\n    style: 'any' #(56)!\n    textcase: 'any' #(57)!\n    variant: 'any' #(58)!\n    weight: 'integer' #(59)!\n  text: 'string' #(60)!\nlegendrank: 'number' #(61)!\nlegendwidth: 'number' #(62)!\nline:\n  color: 'any' #(63)!\n  width: 'number' #(64)!\nlon: 'array' #(65)!\nlonsrc: 'string' #(66)!\nmarker:\n  allowoverlap: 'boolean' #(67)!\n  angle: 'number | array' #(68)!\n  anglesrc: 'string' #(69)!\n  autocolorscale: 'boolean' #(70)!\n  cauto: 'boolean' #(71)!\n  cmax: 'number' #(72)!\n  cmid: 'number' #(73)!\n  cmin: 'number' #(74)!\n  color: 'color | array' #(75)!\n  coloraxis: 'string' #(76)!\n  colorbar:\n    bgcolor: 'any' #(77)!\n    bordercolor: 'any' #(78)!\n    borderwidth: 'number' #(79)!\n    exponentformat: 'any' #(80)!\n    len: 'number' #(81)!\n    lenmode: 'any' #(82)!\n    minexponent: 'number' #(83)!\n    nticks: 'integer' #(84)!\n    orientation: 'any' #(85)!\n    outlinecolor: 'any' #(86)!\n    outlinewidth: 'number' #(87)!\n    separatethousands: 'boolean' #(88)!\n    showexponent: 'any' #(89)!\n    showticklabels: 'boolean' #(90)!\n    showtickprefix: 'any' #(91)!\n    showticksuffix: 'any' #(92)!\n    thickness: 'number' #(93)!\n    thicknessmode: 'any' #(94)!\n    tickangle: 'number' #(95)!\n    tickcolor: 'any' #(96)!\n    tickfont:\n      color: any\n      family: 'string' #(97)!\n      lineposition: 'string' #(98)!\n      shadow: 'string' #(99)!\n      size: number\n      style: 'any' #(100)!\n      textcase: 'any' #(101)!\n      variant: 'any' #(102)!\n      weight: 'integer' #(103)!\n    tickformat: 'string' #(104)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(105)!\n    ticklabelposition: 'any' #(106)!\n    ticklabelstep: 'integer' #(107)!\n    ticklen: 'number' #(108)!\n    tickmode: 'any' #(109)!\n    tickprefix: 'string' #(110)!\n    ticks: 'any' #(111)!\n    ticksuffix: 'string' #(112)!\n    ticktext: 'array' #(113)!\n    ticktextsrc: 'string' #(114)!\n    tickvals: 'array' #(115)!\n    tickvalssrc: 'string' #(116)!\n    tickwidth: 'number' #(117)!\n    title:\n      font:\n        color: any\n        family: 'string' #(118)!\n        lineposition: 'string' #(119)!\n        shadow: 'string' #(120)!\n        size: number\n        style: 'any' #(121)!\n        textcase: 'any' #(122)!\n        variant: 'any' #(123)!\n        weight: 'integer' #(124)!\n      side: 'any' #(125)!\n      text: 'string' #(126)!\n    x: 'number' #(127)!\n    xanchor: 'any' #(128)!\n    xpad: 'number' #(129)!\n    xref: 'any' #(130)!\n    y: 'number' #(131)!\n    yanchor: 'any' #(132)!\n    ypad: 'number' #(133)!\n    yref: 'any' #(134)!\n  colorscale: 'any' #(135)!\n  colorsrc: 'string' #(136)!\n  opacity: 'number | array' #(137)!\n  opacitysrc: 'string' #(138)!\n  reversescale: 'boolean' #(139)!\n  showscale: 'boolean' #(140)!\n  size: 'number | array' #(141)!\n  sizemin: 'number' #(142)!\n  sizemode: 'any' #(143)!\n  sizeref: 'number' #(144)!\n  sizesrc: 'string' #(145)!\n  symbol: 'string | array' #(146)!\n  symbolsrc: 'string' #(147)!\nmetasrc: 'string' #(148)!\nmode: 'string' #(149)!\nname: 'string' #(150)!\nopacity: 'number' #(151)!\nselected:\n  marker:\n    color: 'any' #(152)!\n    opacity: 'number' #(153)!\n    size: 'number' #(154)!\nshowlegend: 'boolean' #(155)!\nstream:\n  maxpoints: 'number' #(156)!\n  token: 'string' #(157)!\nsubplot: 'string' #(158)!\ntext: 'string | array' #(159)!\ntextfont:\n  color: any\n  family: 'string' #(160)!\n  size: number\n  style: 'any' #(161)!\n  weight: 'integer' #(162)!\ntextposition: 'any' #(163)!\ntextsrc: 'string' #(164)!\ntexttemplate: 'string | array' #(165)!\ntexttemplatesrc: 'string' #(166)!\ntype: scattermap\nuid: 'string' #(167)!\nunselected:\n  marker:\n    color: 'any' #(168)!\n    opacity: 'number' #(169)!\n    size: 'number' #(170)!\nvisible: 'any' #(171)!\n</code></pre> <ol> <li>Determines if this scattermap trace's layers are to be inserted before the layer with the specified ID. By default, scattermap layers are inserted above all the base layers. To place the scattermap layers above every other layer, set <code>below</code> to ''.</li> <li>Sets the color for each cluster step.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether clustering is enabled or disabled.</li> <li>Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Sets the size for each cluster step.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for <code>size</code> and / or <code>color</code>. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>step</code>.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the area to fill with a solid color. Use with <code>fillcolor</code> if not none. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the latitude coordinates (in degrees North).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lat</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line color.</li> <li>Sets the line width (in px).</li> <li>Sets the longitude coordinates (in degrees East).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lon</code>.</li> <li>Flag to draw all symbols, even if they overlap.</li> <li>Sets the marker orientation from true North, in degrees clockwise. When using the auto default, no rotation would be applied in perspective views which is different from using a zero angle.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the marker symbol. Full list: https://www.map.com/maki-icons/ Note that the array <code>marker.color</code> and <code>marker.size</code> are only available for circle symbols.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a reference between this trace's data coordinates and a map subplot. If map (the default value), the data refer to <code>layout.map</code>. If map2, the data refer to <code>layout.map2</code>, and so on.</li> <li>Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>lat</code>, <code>lon</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scattermapbox/","title":"Scattermapbox","text":""},{"location":"reference/configuration/Trace/Props/Scattermapbox/#scattermapbox","title":"Scattermapbox","text":""},{"location":"reference/configuration/Trace/Props/Scattermapbox/#overview","title":"Overview","text":"<p>The <code>scattermapbox</code> trace type is used to create scatter plots on a Mapbox map. This is ideal for visualizing geospatial data with the added customization and interactivity that Mapbox provides, including satellite imagery and street maps. </p> <p>You can plot geographic points with latitude and longitude and customize the marker size, color, and labels to represent data effectively.</p> <p>Common Uses</p> <ul> <li>Geospatial Analysis: Plotting geographic points on an interactive map.</li> <li>Location-Based Data: Visualizing locations and patterns on a Mapbox map.</li> <li>Mapping Events: Plotting real-world events, like earthquakes or delivery points.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scattermapbox/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scattermapbox PlotScattermapbox Plot with LinesScattermapbox Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scattermapbox</code> plot showing data points on a Mapbox map:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scattermapbox-data\n    args:\n      - echo\n      - |\n        lon,lat\n        -73.9857,40.7484\n        -118.2437,34.0522\n        -0.1276,51.5074\n        139.6917,35.6895\ntraces:\n  - name: Simple Scattermapbox Plot\n    model: ${ref(scattermapbox-data)}\n    props:\n      type: scattermapbox\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"markers\"\n      marker:\n        size: 10\ncharts:\n  - name: Simple Scattermapbox Chart\n    traces:\n      - ${ref(Simple Scattermapbox Plot)}\n    layout:\n      mapbox:\n        style: \"open-street-map\"\n      title:\n        text: Simple Scattermapbox Plot&lt;br&gt;&lt;sub&gt;Geographical Data Points on Mapbox&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scattermapbox</code> plot with lines connecting geographic points:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattermapbox-data-lines\n    args:\n      - echo\n      - |\n        lon,lat\n        -73.9857,40.7484\n        -118.2437,34.0522\n        -0.1276,51.5074\n        139.6917,35.6895\ntraces:\n  - name: Scattermapbox Plot with Lines\n    model: ${ref(scattermapbox-data-lines)}\n    props:\n      type: scattermapbox\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"lines+markers\"\n      marker:\n        size: 10\ncharts:\n  - name: Scattermapbox Chart with Lines\n    traces:\n      - ${ref(Scattermapbox Plot with Lines)}\n    layout:\n      mapbox:\n        style: \"satellite-streets\"\n      title:\n        text: Scattermapbox Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Geographic Points on Mapbox&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scattermapbox</code> plot with custom marker sizes and colors, giving more visual weight to each geographic data point:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattermapbox-data-custom\n    args:\n      - echo\n      - |\n        lon,lat,size,color\n        -73.9857,40.7484,10,#1f77b4\n        -118.2437,34.0522,15,#ff7f0e\n        -0.1276,51.5074,20,#2ca02c\n        139.6917,35.6895,25,#d62728\ntraces:\n  - name: Scattermapbox Plot with Custom Markers\n    model: ${ref(scattermapbox-data-custom)}\n    props:\n      type: scattermapbox\n      lon: ?{lon}\n      lat: ?{lat}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scattermapbox Chart with Custom Markers\n    traces:\n      - ${ref(Scattermapbox Plot with Custom Markers)}\n    layout:\n      mapbox:\n        style: \"dark\"\n      title:\n        text: Scattermapbox Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Geographic Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scattermapbox/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scattermapbox</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>below: 'string' #(1)!\ncluster:\n  color: 'color | array' #(2)!\n  colorsrc: 'string' #(3)!\n  enabled: 'boolean' #(4)!\n  maxzoom: 'number' #(5)!\n  opacity: 'number | array' #(6)!\n  opacitysrc: 'string' #(7)!\n  size: 'number | array' #(8)!\n  sizesrc: 'string' #(9)!\n  step: 'number | array' #(10)!\n  stepsrc: 'string' #(11)!\nconnectgaps: 'boolean' #(12)!\ncustomdata: 'array' #(13)!\ncustomdatasrc: 'string' #(14)!\nfill: 'any' #(15)!\nfillcolor: 'any' #(16)!\nhoverinfo: 'array' #(17)!\nhoverinfosrc: 'string' #(18)!\nhoverlabel:\n  align: 'array' #(19)!\n  alignsrc: 'string' #(20)!\n  bgcolor: 'color | array' #(21)!\n  bgcolorsrc: 'string' #(22)!\n  bordercolor: 'color | array' #(23)!\n  bordercolorsrc: 'string' #(24)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(25)!\n    family: 'string | array' #(26)!\n    familysrc: 'string' #(27)!\n    lineposition: 'array' #(28)!\n    linepositionsrc: 'string' #(29)!\n    shadow: 'string | array' #(30)!\n    shadowsrc: 'string' #(31)!\n    size: number | array\n    sizesrc: 'string' #(32)!\n    style: 'array' #(33)!\n    stylesrc: 'string' #(34)!\n    textcase: 'array' #(35)!\n    textcasesrc: 'string' #(36)!\n    variant: 'array' #(37)!\n    variantsrc: 'string' #(38)!\n    weight: 'integer | array' #(39)!\n    weightsrc: 'string' #(40)!\n  namelength: 'integer | array' #(41)!\n  namelengthsrc: 'string' #(42)!\nhovertemplate: 'string | array' #(43)!\nhovertemplatesrc: 'string' #(44)!\nhovertext: 'string | array' #(45)!\nhovertextsrc: 'string' #(46)!\nids: 'array' #(47)!\nidssrc: 'string' #(48)!\nlat: 'array' #(49)!\nlatsrc: 'string' #(50)!\nlegend: 'string' #(51)!\nlegendgroup: 'string' #(52)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(53)!\n    lineposition: 'string' #(54)!\n    shadow: 'string' #(55)!\n    size: number\n    style: 'any' #(56)!\n    textcase: 'any' #(57)!\n    variant: 'any' #(58)!\n    weight: 'integer' #(59)!\n  text: 'string' #(60)!\nlegendrank: 'number' #(61)!\nlegendwidth: 'number' #(62)!\nline:\n  color: 'any' #(63)!\n  width: 'number' #(64)!\nlon: 'array' #(65)!\nlonsrc: 'string' #(66)!\nmarker:\n  allowoverlap: 'boolean' #(67)!\n  angle: 'number | array' #(68)!\n  anglesrc: 'string' #(69)!\n  autocolorscale: 'boolean' #(70)!\n  cauto: 'boolean' #(71)!\n  cmax: 'number' #(72)!\n  cmid: 'number' #(73)!\n  cmin: 'number' #(74)!\n  color: 'color | array' #(75)!\n  coloraxis: 'string' #(76)!\n  colorbar:\n    bgcolor: 'any' #(77)!\n    bordercolor: 'any' #(78)!\n    borderwidth: 'number' #(79)!\n    exponentformat: 'any' #(80)!\n    len: 'number' #(81)!\n    lenmode: 'any' #(82)!\n    minexponent: 'number' #(83)!\n    nticks: 'integer' #(84)!\n    orientation: 'any' #(85)!\n    outlinecolor: 'any' #(86)!\n    outlinewidth: 'number' #(87)!\n    separatethousands: 'boolean' #(88)!\n    showexponent: 'any' #(89)!\n    showticklabels: 'boolean' #(90)!\n    showtickprefix: 'any' #(91)!\n    showticksuffix: 'any' #(92)!\n    thickness: 'number' #(93)!\n    thicknessmode: 'any' #(94)!\n    tickangle: 'number' #(95)!\n    tickcolor: 'any' #(96)!\n    tickfont:\n      color: any\n      family: 'string' #(97)!\n      lineposition: 'string' #(98)!\n      shadow: 'string' #(99)!\n      size: number\n      style: 'any' #(100)!\n      textcase: 'any' #(101)!\n      variant: 'any' #(102)!\n      weight: 'integer' #(103)!\n    tickformat: 'string' #(104)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(105)!\n    ticklabelposition: 'any' #(106)!\n    ticklabelstep: 'integer' #(107)!\n    ticklen: 'number' #(108)!\n    tickmode: 'any' #(109)!\n    tickprefix: 'string' #(110)!\n    ticks: 'any' #(111)!\n    ticksuffix: 'string' #(112)!\n    ticktext: 'array' #(113)!\n    ticktextsrc: 'string' #(114)!\n    tickvals: 'array' #(115)!\n    tickvalssrc: 'string' #(116)!\n    tickwidth: 'number' #(117)!\n    title:\n      font:\n        color: any\n        family: 'string' #(118)!\n        lineposition: 'string' #(119)!\n        shadow: 'string' #(120)!\n        size: number\n        style: 'any' #(121)!\n        textcase: 'any' #(122)!\n        variant: 'any' #(123)!\n        weight: 'integer' #(124)!\n      side: 'any' #(125)!\n      text: 'string' #(126)!\n    x: 'number' #(127)!\n    xanchor: 'any' #(128)!\n    xpad: 'number' #(129)!\n    xref: 'any' #(130)!\n    y: 'number' #(131)!\n    yanchor: 'any' #(132)!\n    ypad: 'number' #(133)!\n    yref: 'any' #(134)!\n  colorscale: 'any' #(135)!\n  colorsrc: 'string' #(136)!\n  opacity: 'number | array' #(137)!\n  opacitysrc: 'string' #(138)!\n  reversescale: 'boolean' #(139)!\n  showscale: 'boolean' #(140)!\n  size: 'number | array' #(141)!\n  sizemin: 'number' #(142)!\n  sizemode: 'any' #(143)!\n  sizeref: 'number' #(144)!\n  sizesrc: 'string' #(145)!\n  symbol: 'string | array' #(146)!\n  symbolsrc: 'string' #(147)!\nmetasrc: 'string' #(148)!\nmode: 'string' #(149)!\nname: 'string' #(150)!\nopacity: 'number' #(151)!\nselected:\n  marker:\n    color: 'any' #(152)!\n    opacity: 'number' #(153)!\n    size: 'number' #(154)!\nshowlegend: 'boolean' #(155)!\nstream:\n  maxpoints: 'number' #(156)!\n  token: 'string' #(157)!\nsubplot: 'string' #(158)!\ntext: 'string | array' #(159)!\ntextfont:\n  color: any\n  family: 'string' #(160)!\n  size: number\n  style: 'any' #(161)!\n  weight: 'integer' #(162)!\ntextposition: 'any' #(163)!\ntextsrc: 'string' #(164)!\ntexttemplate: 'string | array' #(165)!\ntexttemplatesrc: 'string' #(166)!\ntype: scattermapbox\nuid: 'string' #(167)!\nunselected:\n  marker:\n    color: 'any' #(168)!\n    opacity: 'number' #(169)!\n    size: 'number' #(170)!\nvisible: 'any' #(171)!\n</code></pre> <ol> <li>Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set <code>below</code> to ''.</li> <li>Sets the color for each cluster step.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether clustering is enabled or disabled.</li> <li>Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Sets the size for each cluster step.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for <code>size</code> and / or <code>color</code>. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>step</code>.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the area to fill with a solid color. Use with <code>fillcolor</code> if not none. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the latitude coordinates (in degrees North).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lat</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line color.</li> <li>Sets the line width (in px).</li> <li>Sets the longitude coordinates (in degrees East).</li> <li>Sets the source reference on Chart Studio Cloud for <code>lon</code>.</li> <li>Flag to draw all symbols, even if they overlap.</li> <li>Sets the marker orientation from true North, in degrees clockwise. When using the auto default, no rotation would be applied in perspective views which is different from using a zero angle.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array <code>marker.color</code> and <code>marker.size</code> are only available for circle symbols.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>mapbox subplots and traces are deprecated! Please consider switching to <code>map</code> subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If mapbox (the default value), the data refer to <code>layout.mapbox</code>. If mapbox2, the data refer to <code>layout.mapbox2</code>, and so on.</li> <li>Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>lat</code>, <code>lon</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scatterpolar/","title":"Scatterpolar","text":""},{"location":"reference/configuration/Trace/Props/Scatterpolar/#scatterpolar","title":"Scatterpolar","text":""},{"location":"reference/configuration/Trace/Props/Scatterpolar/#overview","title":"Overview","text":"<p>The <code>scatterpolar</code> trace type is used to create scatter plots on polar coordinates, which is ideal for visualizing data in a circular format. This type of plot allows data to be represented using angles and radial distances, making it useful for cyclic or directional data.</p> <p>You can customize the marker size, color, and lines to connect points, similar to standard scatter plots, but within a polar coordinate system.</p> <p>Common Uses</p> <ul> <li>Cyclic Data Visualization: Representing cyclic data such as time of day, seasonality, or wind direction.</li> <li>Directional Data: Visualizing data with directional components, such as angular measurements.</li> <li>Circular Data Analysis: Useful for data where radial distance and angle are key factors.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scatterpolar/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scatterpolar PlotScatterpolar Plot with LinesScatterpolar Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scatterpolar</code> plot showing data points on a polar coordinate system:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scatterpolar-data\n    args:\n      - echo\n      - |\n        theta,r\n        0,10\n        45,20\n        90,30\n        135,25\n        180,15\ntraces:\n  - name: Simple Scatterpolar Plot\n    model: ${ref(scatterpolar-data)}\n    props:\n      type: scatterpolar\n      theta: ?{theta}\n      r: ?{r}\n      mode: \"markers\"\ncharts:\n  - name: Simple Scatterpolar Chart\n    traces:\n      - ${ref(Simple Scatterpolar Plot)}\n    layout:\n      title:\n        text: Simple Scatterpolar Plot&lt;br&gt;&lt;sub&gt;Polar Data Points&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scatterpolar</code> plot with lines connecting the data points in polar coordinates:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatterpolar-data-lines\n    args:\n      - echo\n      - |\n        theta,r\n        0,5\n        45,15\n        90,20\n        135,10\n        180,25\ntraces:\n  - name: Scatterpolar Plot with Lines\n    model: ${ref(scatterpolar-data-lines)}\n    props:\n      type: scatterpolar\n      theta: ?{theta}\n      r: ?{r}\n      mode: \"lines+markers\"\ncharts:\n  - name: Scatterpolar Chart with Lines\n    traces:\n      - ${ref(Scatterpolar Plot with Lines)}\n    layout:\n      title:\n        text: Scatterpolar Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Data Points with Lines in Polar Coordinates&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scatterpolar</code> plot with custom marker sizes and colors, giving more visual weight to each data point in polar coordinates:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatterpolar-data-custom\n    args:\n      - echo\n      - |\n        theta,r,size,color\n        0,5,10,#1f77b4\n        45,15,15,#ff7f0e\n        90,20,20,#2ca02c\n        135,10,25,#d62728\n        180,25,30,#9467bd\ntraces:\n  - name: Scatterpolar Plot with Custom Markers\n    model: ${ref(scatterpolar-data-custom)}\n    props:\n      type: scatterpolar\n      theta: ?{theta}\n      r: ?{r}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scatterpolar Chart with Custom Markers\n    traces:\n      - ${ref(Scatterpolar Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scatterpolar Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Polar Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scatterpolar/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scatterpolar</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>cliponaxis: 'boolean' #(1)!\nconnectgaps: 'boolean' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\ndr: 'number' #(5)!\ndtheta: 'number' #(6)!\nfill: 'any' #(7)!\nfillcolor: 'any' #(8)!\nhoverinfo: 'array' #(9)!\nhoverinfosrc: 'string' #(10)!\nhoverlabel:\n  align: 'array' #(11)!\n  alignsrc: 'string' #(12)!\n  bgcolor: 'color | array' #(13)!\n  bgcolorsrc: 'string' #(14)!\n  bordercolor: 'color | array' #(15)!\n  bordercolorsrc: 'string' #(16)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(17)!\n    family: 'string | array' #(18)!\n    familysrc: 'string' #(19)!\n    lineposition: 'array' #(20)!\n    linepositionsrc: 'string' #(21)!\n    shadow: 'string | array' #(22)!\n    shadowsrc: 'string' #(23)!\n    size: number | array\n    sizesrc: 'string' #(24)!\n    style: 'array' #(25)!\n    stylesrc: 'string' #(26)!\n    textcase: 'array' #(27)!\n    textcasesrc: 'string' #(28)!\n    variant: 'array' #(29)!\n    variantsrc: 'string' #(30)!\n    weight: 'integer | array' #(31)!\n    weightsrc: 'string' #(32)!\n  namelength: 'integer | array' #(33)!\n  namelengthsrc: 'string' #(34)!\nhoveron: 'string' #(35)!\nhovertemplate: 'string | array' #(36)!\nhovertemplatesrc: 'string' #(37)!\nhovertext: 'string | array' #(38)!\nhovertextsrc: 'string' #(39)!\nids: 'array' #(40)!\nidssrc: 'string' #(41)!\nlegend: 'string' #(42)!\nlegendgroup: 'string' #(43)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(44)!\n    lineposition: 'string' #(45)!\n    shadow: 'string' #(46)!\n    size: number\n    style: 'any' #(47)!\n    textcase: 'any' #(48)!\n    variant: 'any' #(49)!\n    weight: 'integer' #(50)!\n  text: 'string' #(51)!\nlegendrank: 'number' #(52)!\nlegendwidth: 'number' #(53)!\nline:\n  backoff: 'number | array' #(54)!\n  backoffsrc: 'string' #(55)!\n  color: 'any' #(56)!\n  dash: 'string' #(57)!\n  shape: 'any' #(58)!\n  smoothing: 'number' #(59)!\n  width: 'number' #(60)!\nmarker:\n  angle: 'number | array' #(61)!\n  angleref: 'any' #(62)!\n  anglesrc: 'string' #(63)!\n  autocolorscale: 'boolean' #(64)!\n  cauto: 'boolean' #(65)!\n  cmax: 'number' #(66)!\n  cmid: 'number' #(67)!\n  cmin: 'number' #(68)!\n  color: 'color | array' #(69)!\n  coloraxis: 'string' #(70)!\n  colorbar:\n    bgcolor: 'any' #(71)!\n    bordercolor: 'any' #(72)!\n    borderwidth: 'number' #(73)!\n    exponentformat: 'any' #(74)!\n    len: 'number' #(75)!\n    lenmode: 'any' #(76)!\n    minexponent: 'number' #(77)!\n    nticks: 'integer' #(78)!\n    orientation: 'any' #(79)!\n    outlinecolor: 'any' #(80)!\n    outlinewidth: 'number' #(81)!\n    separatethousands: 'boolean' #(82)!\n    showexponent: 'any' #(83)!\n    showticklabels: 'boolean' #(84)!\n    showtickprefix: 'any' #(85)!\n    showticksuffix: 'any' #(86)!\n    thickness: 'number' #(87)!\n    thicknessmode: 'any' #(88)!\n    tickangle: 'number' #(89)!\n    tickcolor: 'any' #(90)!\n    tickfont:\n      color: any\n      family: 'string' #(91)!\n      lineposition: 'string' #(92)!\n      shadow: 'string' #(93)!\n      size: number\n      style: 'any' #(94)!\n      textcase: 'any' #(95)!\n      variant: 'any' #(96)!\n      weight: 'integer' #(97)!\n    tickformat: 'string' #(98)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(99)!\n    ticklabelposition: 'any' #(100)!\n    ticklabelstep: 'integer' #(101)!\n    ticklen: 'number' #(102)!\n    tickmode: 'any' #(103)!\n    tickprefix: 'string' #(104)!\n    ticks: 'any' #(105)!\n    ticksuffix: 'string' #(106)!\n    ticktext: 'array' #(107)!\n    ticktextsrc: 'string' #(108)!\n    tickvals: 'array' #(109)!\n    tickvalssrc: 'string' #(110)!\n    tickwidth: 'number' #(111)!\n    title:\n      font:\n        color: any\n        family: 'string' #(112)!\n        lineposition: 'string' #(113)!\n        shadow: 'string' #(114)!\n        size: number\n        style: 'any' #(115)!\n        textcase: 'any' #(116)!\n        variant: 'any' #(117)!\n        weight: 'integer' #(118)!\n      side: 'any' #(119)!\n      text: 'string' #(120)!\n    x: 'number' #(121)!\n    xanchor: 'any' #(122)!\n    xpad: 'number' #(123)!\n    xref: 'any' #(124)!\n    y: 'number' #(125)!\n    yanchor: 'any' #(126)!\n    ypad: 'number' #(127)!\n    yref: 'any' #(128)!\n  colorscale: 'any' #(129)!\n  colorsrc: 'string' #(130)!\n  gradient:\n    color: 'color | array' #(131)!\n    colorsrc: 'string' #(132)!\n    type: 'array' #(133)!\n    typesrc: 'string' #(134)!\n  line:\n    autocolorscale: 'boolean' #(135)!\n    cauto: 'boolean' #(136)!\n    cmax: 'number' #(137)!\n    cmid: 'number' #(138)!\n    cmin: 'number' #(139)!\n    color: 'color | array' #(140)!\n    coloraxis: 'string' #(141)!\n    colorscale: 'any' #(142)!\n    colorsrc: 'string' #(143)!\n    reversescale: 'boolean' #(144)!\n    width: 'number | array' #(145)!\n    widthsrc: 'string' #(146)!\n  maxdisplayed: 'number' #(147)!\n  opacity: 'number | array' #(148)!\n  opacitysrc: 'string' #(149)!\n  reversescale: 'boolean' #(150)!\n  showscale: 'boolean' #(151)!\n  size: 'number | array' #(152)!\n  sizemin: 'number' #(153)!\n  sizemode: 'any' #(154)!\n  sizeref: 'number' #(155)!\n  sizesrc: 'string' #(156)!\n  standoff: 'number | array' #(157)!\n  standoffsrc: 'string' #(158)!\n  symbol: 'array' #(159)!\n  symbolsrc: 'string' #(160)!\nmetasrc: 'string' #(161)!\nmode: 'string' #(162)!\nname: 'string' #(163)!\nopacity: 'number' #(164)!\nr: 'array' #(165)!\nrsrc: 'string' #(166)!\nselected:\n  marker:\n    color: 'any' #(167)!\n    opacity: 'number' #(168)!\n    size: 'number' #(169)!\n  textfont:\n    color: 'any' #(170)!\nshowlegend: 'boolean' #(171)!\nstream:\n  maxpoints: 'number' #(172)!\n  token: 'string' #(173)!\nsubplot: 'string' #(174)!\ntext: 'string | array' #(175)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(176)!\n  family: 'string | array' #(177)!\n  familysrc: 'string' #(178)!\n  lineposition: 'array' #(179)!\n  linepositionsrc: 'string' #(180)!\n  shadow: 'string | array' #(181)!\n  shadowsrc: 'string' #(182)!\n  size: number | array\n  sizesrc: 'string' #(183)!\n  style: 'array' #(184)!\n  stylesrc: 'string' #(185)!\n  textcase: 'array' #(186)!\n  textcasesrc: 'string' #(187)!\n  variant: 'array' #(188)!\n  variantsrc: 'string' #(189)!\n  weight: 'integer | array' #(190)!\n  weightsrc: 'string' #(191)!\ntextposition: 'array' #(192)!\ntextpositionsrc: 'string' #(193)!\ntextsrc: 'string' #(194)!\ntexttemplate: 'string | array' #(195)!\ntexttemplatesrc: 'string' #(196)!\ntheta: 'array' #(197)!\nthetasrc: 'string' #(198)!\nthetaunit: 'any' #(199)!\ntype: scatterpolar\nuid: 'string' #(200)!\nunselected:\n  marker:\n    color: 'any' #(201)!\n    opacity: 'number' #(202)!\n    size: 'number' #(203)!\n  textfont:\n    color: 'any' #(204)!\nvisible: 'any' #(205)!\n</code></pre> <ol> <li>Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set <code>xaxis.layer</code> and <code>yaxis.layer</code> to below traces.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the r coordinate step.</li> <li>Sets the theta coordinate step. By default, the <code>dtheta</code> step equals the subplot's period divided by the length of the <code>r</code> coordinates.</li> <li>Sets the area to fill with a solid color. Use with <code>fillcolor</code> if not none. scatterpolar has a subset of the options available to scatter. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. tonext fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like toself if there is no trace before it. tonext should not be used if one trace does not enclose the other.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is toself or tonext and there are no markers or text, then the default is fills, otherwise it is points.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With auto the lines would trim before markers if <code>marker.angleref</code> is set to previous.</li> <li>Sets the source reference on Chart Studio Cloud for <code>backoff</code>.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Determines the line shape. With spline the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</li> <li>Has an effect only if <code>shape</code> is set to spline Sets the amount of smoothing. 0 corresponds to no smoothing (equivalent to a linear shape).</li> <li>Sets the line width (in px).</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the reference for marker angle. With previous, angle 0 points along the line from the previous point to this one. With up, angle 0 points toward the top of the screen.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the type of gradient used to fill the markers</li> <li>Sets the source reference on Chart Studio Cloud for <code>type</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets a maximum number of points to be drawn on the graph. 0 corresponds to no limit.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Moves the marker away from the data point in the direction of <code>angle</code> (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</li> <li>Sets the source reference on Chart Studio Cloud for <code>standoff</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is lines+markers. Otherwise, lines.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the radial coordinates</li> <li>Sets the source reference on Chart Studio Cloud for <code>r</code>.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a reference between this trace's data coordinates and a polar subplot. If polar (the default value), the data refer to <code>layout.polar</code>. If polar2, the data refer to <code>layout.polar2</code>, and so on.</li> <li>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>r</code>, <code>theta</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Sets the angular coordinates</li> <li>Sets the source reference on Chart Studio Cloud for <code>theta</code>.</li> <li>Sets the unit of input theta values. Has an effect only when on linear angular axes.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scatterpolargl/","title":"Scatterpolargl","text":""},{"location":"reference/configuration/Trace/Props/Scatterpolargl/#scatterpolargl","title":"Scatterpolargl","text":""},{"location":"reference/configuration/Trace/Props/Scatterpolargl/#overview","title":"Overview","text":"<p>The <code>scatterpolargl</code> trace type is used to create scatter plots on polar coordinates using WebGL rendering. This allows for high-performance plotting of large datasets in polar coordinates, ideal for scenarios where a large number of data points need to be visualized with speed and efficiency.</p> <p>You can customize the marker size, color, and lines to connect points, similar to the <code>scatterpolar</code> trace, but with WebGL performance benefits.</p> <p>Common Uses</p> <ul> <li>Large Datasets in Polar Coordinates: Efficiently visualizing datasets with many data points in polar coordinates.</li> <li>Performance Optimization: Using WebGL for better rendering performance in polar scatter plots.</li> <li>Circular Data with Directional Components: Ideal for cyclic data where radial distance and angle are key factors.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scatterpolargl/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scatterpolargl PlotScatterpolargl Plot with LinesScatterpolargl Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scatterpolargl</code> plot showing data points on a polar coordinate system using WebGL rendering:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scatterpolargl-data\n    args:\n      - echo\n      - |\n        theta,r\n        0,10\n        45,20\n        90,30\n        135,25\n        180,15\ntraces:\n  - name: Simple Scatterpolargl Plot\n    model: ${ref(scatterpolargl-data)}\n    props:\n      type: scatterpolargl\n      theta: ?{theta}\n      r: ?{r}\n      mode: \"markers\"\ncharts:\n  - name: Simple Scatterpolargl Chart\n    traces:\n      - ${ref(Simple Scatterpolargl Plot)}\n    layout:\n      title:\n        text: Simple Scatterpolargl Plot&lt;br&gt;&lt;sub&gt;High-Performance Polar Data Points&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scatterpolargl</code> plot with lines connecting the data points in polar coordinates, rendered with WebGL:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatterpolargl-data-lines\n    args:\n      - echo\n      - |\n        theta,r\n        0,5\n        45,15\n        90,20\n        135,10\n        180,25\ntraces:\n  - name: Scatterpolargl Plot with Lines\n    model: ${ref(scatterpolargl-data-lines)}\n    props:\n      type: scatterpolargl\n      theta: ?{theta}\n      r: ?{r}\n      mode: \"lines+markers\"\ncharts:\n  - name: Scatterpolargl Chart with Lines\n    traces:\n      - ${ref(Scatterpolargl Plot with Lines)}\n    layout:\n      title:\n        text: Scatterpolargl Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Data Points with Lines in Polar Coordinates&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scatterpolargl</code> plot with custom marker sizes and colors, giving more visual weight to each data point in polar coordinates using WebGL rendering:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatterpolargl-data-custom\n    args:\n      - echo\n      - |\n        theta,r,size,color\n        0,5,10,#1f77b4\n        45,15,15,#ff7f0e\n        90,20,20,#2ca02c\n        135,10,25,#d62728\n        180,25,30,#9467bd\ntraces:\n  - name: Scatterpolargl Plot with Custom Markers\n    model: ${ref(scatterpolargl-data-custom)}\n    props:\n      type: scatterpolargl\n      theta: ?{theta}\n      r: ?{r}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scatterpolargl Chart with Custom Markers\n    traces:\n      - ${ref(Scatterpolargl Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scatterpolargl Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Polar Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scatterpolargl/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scatterpolargl</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>connectgaps: 'boolean' #(1)!\ncustomdata: 'array' #(2)!\ncustomdatasrc: 'string' #(3)!\ndr: 'number' #(4)!\ndtheta: 'number' #(5)!\nfill: 'any' #(6)!\nfillcolor: 'any' #(7)!\nhoverinfo: 'array' #(8)!\nhoverinfosrc: 'string' #(9)!\nhoverlabel:\n  align: 'array' #(10)!\n  alignsrc: 'string' #(11)!\n  bgcolor: 'color | array' #(12)!\n  bgcolorsrc: 'string' #(13)!\n  bordercolor: 'color | array' #(14)!\n  bordercolorsrc: 'string' #(15)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(16)!\n    family: 'string | array' #(17)!\n    familysrc: 'string' #(18)!\n    lineposition: 'array' #(19)!\n    linepositionsrc: 'string' #(20)!\n    shadow: 'string | array' #(21)!\n    shadowsrc: 'string' #(22)!\n    size: number | array\n    sizesrc: 'string' #(23)!\n    style: 'array' #(24)!\n    stylesrc: 'string' #(25)!\n    textcase: 'array' #(26)!\n    textcasesrc: 'string' #(27)!\n    variant: 'array' #(28)!\n    variantsrc: 'string' #(29)!\n    weight: 'integer | array' #(30)!\n    weightsrc: 'string' #(31)!\n  namelength: 'integer | array' #(32)!\n  namelengthsrc: 'string' #(33)!\nhovertemplate: 'string | array' #(34)!\nhovertemplatesrc: 'string' #(35)!\nhovertext: 'string | array' #(36)!\nhovertextsrc: 'string' #(37)!\nids: 'array' #(38)!\nidssrc: 'string' #(39)!\nlegend: 'string' #(40)!\nlegendgroup: 'string' #(41)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(42)!\n    lineposition: 'string' #(43)!\n    shadow: 'string' #(44)!\n    size: number\n    style: 'any' #(45)!\n    textcase: 'any' #(46)!\n    variant: 'any' #(47)!\n    weight: 'integer' #(48)!\n  text: 'string' #(49)!\nlegendrank: 'number' #(50)!\nlegendwidth: 'number' #(51)!\nline:\n  color: 'any' #(52)!\n  dash: 'any' #(53)!\n  width: 'number' #(54)!\nmarker:\n  angle: 'number | array' #(55)!\n  anglesrc: 'string' #(56)!\n  autocolorscale: 'boolean' #(57)!\n  cauto: 'boolean' #(58)!\n  cmax: 'number' #(59)!\n  cmid: 'number' #(60)!\n  cmin: 'number' #(61)!\n  color: 'color | array' #(62)!\n  coloraxis: 'string' #(63)!\n  colorbar:\n    bgcolor: 'any' #(64)!\n    bordercolor: 'any' #(65)!\n    borderwidth: 'number' #(66)!\n    exponentformat: 'any' #(67)!\n    len: 'number' #(68)!\n    lenmode: 'any' #(69)!\n    minexponent: 'number' #(70)!\n    nticks: 'integer' #(71)!\n    orientation: 'any' #(72)!\n    outlinecolor: 'any' #(73)!\n    outlinewidth: 'number' #(74)!\n    separatethousands: 'boolean' #(75)!\n    showexponent: 'any' #(76)!\n    showticklabels: 'boolean' #(77)!\n    showtickprefix: 'any' #(78)!\n    showticksuffix: 'any' #(79)!\n    thickness: 'number' #(80)!\n    thicknessmode: 'any' #(81)!\n    tickangle: 'number' #(82)!\n    tickcolor: 'any' #(83)!\n    tickfont:\n      color: any\n      family: 'string' #(84)!\n      lineposition: 'string' #(85)!\n      shadow: 'string' #(86)!\n      size: number\n      style: 'any' #(87)!\n      textcase: 'any' #(88)!\n      variant: 'any' #(89)!\n      weight: 'integer' #(90)!\n    tickformat: 'string' #(91)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(92)!\n    ticklabelposition: 'any' #(93)!\n    ticklabelstep: 'integer' #(94)!\n    ticklen: 'number' #(95)!\n    tickmode: 'any' #(96)!\n    tickprefix: 'string' #(97)!\n    ticks: 'any' #(98)!\n    ticksuffix: 'string' #(99)!\n    ticktext: 'array' #(100)!\n    ticktextsrc: 'string' #(101)!\n    tickvals: 'array' #(102)!\n    tickvalssrc: 'string' #(103)!\n    tickwidth: 'number' #(104)!\n    title:\n      font:\n        color: any\n        family: 'string' #(105)!\n        lineposition: 'string' #(106)!\n        shadow: 'string' #(107)!\n        size: number\n        style: 'any' #(108)!\n        textcase: 'any' #(109)!\n        variant: 'any' #(110)!\n        weight: 'integer' #(111)!\n      side: 'any' #(112)!\n      text: 'string' #(113)!\n    x: 'number' #(114)!\n    xanchor: 'any' #(115)!\n    xpad: 'number' #(116)!\n    xref: 'any' #(117)!\n    y: 'number' #(118)!\n    yanchor: 'any' #(119)!\n    ypad: 'number' #(120)!\n    yref: 'any' #(121)!\n  colorscale: 'any' #(122)!\n  colorsrc: 'string' #(123)!\n  line:\n    autocolorscale: 'boolean' #(124)!\n    cauto: 'boolean' #(125)!\n    cmax: 'number' #(126)!\n    cmid: 'number' #(127)!\n    cmin: 'number' #(128)!\n    color: 'color | array' #(129)!\n    coloraxis: 'string' #(130)!\n    colorscale: 'any' #(131)!\n    colorsrc: 'string' #(132)!\n    reversescale: 'boolean' #(133)!\n    width: 'number | array' #(134)!\n    widthsrc: 'string' #(135)!\n  opacity: 'number | array' #(136)!\n  opacitysrc: 'string' #(137)!\n  reversescale: 'boolean' #(138)!\n  showscale: 'boolean' #(139)!\n  size: 'number | array' #(140)!\n  sizemin: 'number' #(141)!\n  sizemode: 'any' #(142)!\n  sizeref: 'number' #(143)!\n  sizesrc: 'string' #(144)!\n  symbol: 'array' #(145)!\n  symbolsrc: 'string' #(146)!\nmetasrc: 'string' #(147)!\nmode: 'string' #(148)!\nname: 'string' #(149)!\nopacity: 'number' #(150)!\nr: 'array' #(151)!\nrsrc: 'string' #(152)!\nselected:\n  marker:\n    color: 'any' #(153)!\n    opacity: 'number' #(154)!\n    size: 'number' #(155)!\n  textfont:\n    color: 'any' #(156)!\nshowlegend: 'boolean' #(157)!\nstream:\n  maxpoints: 'number' #(158)!\n  token: 'string' #(159)!\nsubplot: 'string' #(160)!\ntext: 'string | array' #(161)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(162)!\n  family: 'string | array' #(163)!\n  familysrc: 'string' #(164)!\n  size: number | array\n  sizesrc: 'string' #(165)!\n  style: 'array' #(166)!\n  stylesrc: 'string' #(167)!\n  variant: 'array' #(168)!\n  variantsrc: 'string' #(169)!\n  weight: 'array' #(170)!\n  weightsrc: 'string' #(171)!\ntextposition: 'array' #(172)!\ntextpositionsrc: 'string' #(173)!\ntextsrc: 'string' #(174)!\ntexttemplate: 'string | array' #(175)!\ntexttemplatesrc: 'string' #(176)!\ntheta: 'array' #(177)!\nthetasrc: 'string' #(178)!\nthetaunit: 'any' #(179)!\ntype: scatterpolargl\nuid: 'string' #(180)!\nunselected:\n  marker:\n    color: 'any' #(181)!\n    opacity: 'number' #(182)!\n    size: 'number' #(183)!\n  textfont:\n    color: 'any' #(184)!\nvisible: 'any' #(185)!\n</code></pre> <ol> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the r coordinate step.</li> <li>Sets the theta coordinate step. By default, the <code>dtheta</code> step equals the subplot's period divided by the length of the <code>r</code> coordinates.</li> <li>Sets the area to fill with a solid color. Defaults to none unless this trace is stacked, then it gets tonexty (tonextx) if <code>orientation</code> is v (h) Use with <code>fillcolor</code> if not none. tozerox and tozeroy fill to x=0 and y=0 respectively. tonextx and tonexty fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like tozerox and tozeroy. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. tonext fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like toself if there is no trace before it. tonext should not be used if one trace does not enclose the other. Traces in a <code>stackgroup</code> will only fill to (or be filled to) other traces in the same group. With multiple <code>stackgroup</code>s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line color.</li> <li>Sets the style of the lines.</li> <li>Sets the line width (in px).</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is lines+markers. Otherwise, lines.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the radial coordinates</li> <li>Sets the source reference on Chart Studio Cloud for <code>r</code>.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a reference between this trace's data coordinates and a polar subplot. If polar (the default value), the data refer to <code>layout.polar</code>. If polar2, the data refer to <code>layout.polar2</code>, and so on.</li> <li>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>r</code>, <code>theta</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Sets the angular coordinates</li> <li>Sets the source reference on Chart Studio Cloud for <code>theta</code>.</li> <li>Sets the unit of input theta values. Has an effect only when on linear angular axes.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scattersmith/","title":"Scattersmith","text":""},{"location":"reference/configuration/Trace/Props/Scattersmith/#scattersmith","title":"Scattersmith","text":""},{"location":"reference/configuration/Trace/Props/Scattersmith/#overview","title":"Overview","text":"<p>The <code>scattersmith</code> trace type is used to create scatter plots on a Smith chart, which is typically used in electrical engineering to represent complex impedance and reflection coefficients in transmission lines. It allows for plotting data in terms of complex numbers (real and imaginary components), making it ideal for analyzing electrical circuits.</p> <p>You can customize the marker size, color, and lines to connect points, similar to scatter plots, but specifically tailored for Smith charts.</p> <p>Common Uses</p> <ul> <li>Impedance and Reflection Coefficients: Visualizing electrical properties in transmission lines.</li> <li>Complex Data Visualization: Representing data points in terms of complex numbers in a specialized format.</li> <li>Electrical Engineering Analysis: Ideal for RF and microwave engineering applications.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scattersmith/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scattersmith PlotScattersmith Plot with LinesScattersmith Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scattersmith</code> plot showing data points on a Smith chart:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scattersmith-data\n    args:\n      - echo\n      - |\n        real,imaginary\n        0.5,0.2\n        0.8,0.3\n        1.0,0.5\n        1.2,0.7\ntraces:\n  - name: Simple Scattersmith Plot\n    model: ${ref(scattersmith-data)}\n    props:\n      type: scattersmith\n      real: ?{real}\n      imag: ?{imaginary}\n      mode: \"markers\"\ncharts:\n  - name: Simple Scattersmith Chart\n    traces:\n      - ${ref(Simple Scattersmith Plot)}\n    layout:\n      title:\n        text: Simple Scattersmith Plot&lt;br&gt;&lt;sub&gt;Data Points on Smith Chart&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scattersmith</code> plot with lines connecting the data points on a Smith chart:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattersmith-data-lines\n    args:\n      - echo\n      - |\n        real,imaginary\n        0.2,0.1\n        0.5,0.4\n        0.7,0.6\n        1.0,0.8\ntraces:\n  - name: Scattersmith Plot with Lines\n    model: ${ref(scattersmith-data-lines)}\n    props:\n      type: scattersmith\n      real: ?{real}\n      imag: ?{imaginary}\n      mode: \"lines+markers\"\ncharts:\n  - name: Scattersmith Chart with Lines\n    traces:\n      - ${ref(Scattersmith Plot with Lines)}\n    layout:\n      title:\n        text: Scattersmith Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Data Points on Smith Chart&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scattersmith</code> plot with custom marker sizes and colors, giving more visual weight to each data point on a Smith chart:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: scattersmith-data-custom\n    args:\n      - echo\n      - |\n        real,imaginary,size,color\n        0.5,0.2,10,#1f77b4\n        0.8,0.3,15,#ff7f0e\n        1.0,0.5,20,#2ca02c\n        1.2,0.7,25,#d62728\ntraces:\n  - name: Scattersmith Plot with Custom Markers\n    model: ${ref(scattersmith-data-custom)}\n    props:\n      type: scattersmith\n      real: ?{real}\n      imag: ?{imaginary}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scattersmith Chart with Custom Markers\n    traces:\n      - ${ref(Scattersmith Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scattersmith Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Smith Chart Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scattersmith/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scattersmith</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>cliponaxis: 'boolean' #(1)!\nconnectgaps: 'boolean' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\nfill: 'any' #(5)!\nfillcolor: 'any' #(6)!\nhoverinfo: 'array' #(7)!\nhoverinfosrc: 'string' #(8)!\nhoverlabel:\n  align: 'array' #(9)!\n  alignsrc: 'string' #(10)!\n  bgcolor: 'color | array' #(11)!\n  bgcolorsrc: 'string' #(12)!\n  bordercolor: 'color | array' #(13)!\n  bordercolorsrc: 'string' #(14)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(15)!\n    family: 'string | array' #(16)!\n    familysrc: 'string' #(17)!\n    lineposition: 'array' #(18)!\n    linepositionsrc: 'string' #(19)!\n    shadow: 'string | array' #(20)!\n    shadowsrc: 'string' #(21)!\n    size: number | array\n    sizesrc: 'string' #(22)!\n    style: 'array' #(23)!\n    stylesrc: 'string' #(24)!\n    textcase: 'array' #(25)!\n    textcasesrc: 'string' #(26)!\n    variant: 'array' #(27)!\n    variantsrc: 'string' #(28)!\n    weight: 'integer | array' #(29)!\n    weightsrc: 'string' #(30)!\n  namelength: 'integer | array' #(31)!\n  namelengthsrc: 'string' #(32)!\nhoveron: 'string' #(33)!\nhovertemplate: 'string | array' #(34)!\nhovertemplatesrc: 'string' #(35)!\nhovertext: 'string | array' #(36)!\nhovertextsrc: 'string' #(37)!\nids: 'array' #(38)!\nidssrc: 'string' #(39)!\nimag: 'array' #(40)!\nimagsrc: 'string' #(41)!\nlegend: 'string' #(42)!\nlegendgroup: 'string' #(43)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(44)!\n    lineposition: 'string' #(45)!\n    shadow: 'string' #(46)!\n    size: number\n    style: 'any' #(47)!\n    textcase: 'any' #(48)!\n    variant: 'any' #(49)!\n    weight: 'integer' #(50)!\n  text: 'string' #(51)!\nlegendrank: 'number' #(52)!\nlegendwidth: 'number' #(53)!\nline:\n  backoff: 'number | array' #(54)!\n  backoffsrc: 'string' #(55)!\n  color: 'any' #(56)!\n  dash: 'string' #(57)!\n  shape: 'any' #(58)!\n  smoothing: 'number' #(59)!\n  width: 'number' #(60)!\nmarker:\n  angle: 'number | array' #(61)!\n  angleref: 'any' #(62)!\n  anglesrc: 'string' #(63)!\n  autocolorscale: 'boolean' #(64)!\n  cauto: 'boolean' #(65)!\n  cmax: 'number' #(66)!\n  cmid: 'number' #(67)!\n  cmin: 'number' #(68)!\n  color: 'color | array' #(69)!\n  coloraxis: 'string' #(70)!\n  colorbar:\n    bgcolor: 'any' #(71)!\n    bordercolor: 'any' #(72)!\n    borderwidth: 'number' #(73)!\n    exponentformat: 'any' #(74)!\n    len: 'number' #(75)!\n    lenmode: 'any' #(76)!\n    minexponent: 'number' #(77)!\n    nticks: 'integer' #(78)!\n    orientation: 'any' #(79)!\n    outlinecolor: 'any' #(80)!\n    outlinewidth: 'number' #(81)!\n    separatethousands: 'boolean' #(82)!\n    showexponent: 'any' #(83)!\n    showticklabels: 'boolean' #(84)!\n    showtickprefix: 'any' #(85)!\n    showticksuffix: 'any' #(86)!\n    thickness: 'number' #(87)!\n    thicknessmode: 'any' #(88)!\n    tickangle: 'number' #(89)!\n    tickcolor: 'any' #(90)!\n    tickfont:\n      color: any\n      family: 'string' #(91)!\n      lineposition: 'string' #(92)!\n      shadow: 'string' #(93)!\n      size: number\n      style: 'any' #(94)!\n      textcase: 'any' #(95)!\n      variant: 'any' #(96)!\n      weight: 'integer' #(97)!\n    tickformat: 'string' #(98)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(99)!\n    ticklabelposition: 'any' #(100)!\n    ticklabelstep: 'integer' #(101)!\n    ticklen: 'number' #(102)!\n    tickmode: 'any' #(103)!\n    tickprefix: 'string' #(104)!\n    ticks: 'any' #(105)!\n    ticksuffix: 'string' #(106)!\n    ticktext: 'array' #(107)!\n    ticktextsrc: 'string' #(108)!\n    tickvals: 'array' #(109)!\n    tickvalssrc: 'string' #(110)!\n    tickwidth: 'number' #(111)!\n    title:\n      font:\n        color: any\n        family: 'string' #(112)!\n        lineposition: 'string' #(113)!\n        shadow: 'string' #(114)!\n        size: number\n        style: 'any' #(115)!\n        textcase: 'any' #(116)!\n        variant: 'any' #(117)!\n        weight: 'integer' #(118)!\n      side: 'any' #(119)!\n      text: 'string' #(120)!\n    x: 'number' #(121)!\n    xanchor: 'any' #(122)!\n    xpad: 'number' #(123)!\n    xref: 'any' #(124)!\n    y: 'number' #(125)!\n    yanchor: 'any' #(126)!\n    ypad: 'number' #(127)!\n    yref: 'any' #(128)!\n  colorscale: 'any' #(129)!\n  colorsrc: 'string' #(130)!\n  gradient:\n    color: 'color | array' #(131)!\n    colorsrc: 'string' #(132)!\n    type: 'array' #(133)!\n    typesrc: 'string' #(134)!\n  line:\n    autocolorscale: 'boolean' #(135)!\n    cauto: 'boolean' #(136)!\n    cmax: 'number' #(137)!\n    cmid: 'number' #(138)!\n    cmin: 'number' #(139)!\n    color: 'color | array' #(140)!\n    coloraxis: 'string' #(141)!\n    colorscale: 'any' #(142)!\n    colorsrc: 'string' #(143)!\n    reversescale: 'boolean' #(144)!\n    width: 'number | array' #(145)!\n    widthsrc: 'string' #(146)!\n  maxdisplayed: 'number' #(147)!\n  opacity: 'number | array' #(148)!\n  opacitysrc: 'string' #(149)!\n  reversescale: 'boolean' #(150)!\n  showscale: 'boolean' #(151)!\n  size: 'number | array' #(152)!\n  sizemin: 'number' #(153)!\n  sizemode: 'any' #(154)!\n  sizeref: 'number' #(155)!\n  sizesrc: 'string' #(156)!\n  standoff: 'number | array' #(157)!\n  standoffsrc: 'string' #(158)!\n  symbol: 'array' #(159)!\n  symbolsrc: 'string' #(160)!\nmetasrc: 'string' #(161)!\nmode: 'string' #(162)!\nname: 'string' #(163)!\nopacity: 'number' #(164)!\nreal: 'array' #(165)!\nrealsrc: 'string' #(166)!\nselected:\n  marker:\n    color: 'any' #(167)!\n    opacity: 'number' #(168)!\n    size: 'number' #(169)!\n  textfont:\n    color: 'any' #(170)!\nshowlegend: 'boolean' #(171)!\nstream:\n  maxpoints: 'number' #(172)!\n  token: 'string' #(173)!\nsubplot: 'string' #(174)!\ntext: 'string | array' #(175)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(176)!\n  family: 'string | array' #(177)!\n  familysrc: 'string' #(178)!\n  lineposition: 'array' #(179)!\n  linepositionsrc: 'string' #(180)!\n  shadow: 'string | array' #(181)!\n  shadowsrc: 'string' #(182)!\n  size: number | array\n  sizesrc: 'string' #(183)!\n  style: 'array' #(184)!\n  stylesrc: 'string' #(185)!\n  textcase: 'array' #(186)!\n  textcasesrc: 'string' #(187)!\n  variant: 'array' #(188)!\n  variantsrc: 'string' #(189)!\n  weight: 'integer | array' #(190)!\n  weightsrc: 'string' #(191)!\ntextposition: 'array' #(192)!\ntextpositionsrc: 'string' #(193)!\ntextsrc: 'string' #(194)!\ntexttemplate: 'string | array' #(195)!\ntexttemplatesrc: 'string' #(196)!\ntype: scattersmith\nuid: 'string' #(197)!\nunselected:\n  marker:\n    color: 'any' #(198)!\n    opacity: 'number' #(199)!\n    size: 'number' #(200)!\n  textfont:\n    color: 'any' #(201)!\nvisible: 'any' #(202)!\n</code></pre> <ol> <li>Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set <code>xaxis.layer</code> and <code>yaxis.layer</code> to below traces.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the area to fill with a solid color. Use with <code>fillcolor</code> if not none. scattersmith has a subset of the options available to scatter. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. tonext fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like toself if there is no trace before it. tonext should not be used if one trace does not enclose the other.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is toself or tonext and there are no markers or text, then the default is fills, otherwise it is points.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</li> <li>Sets the source reference on Chart Studio Cloud for <code>imag</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With auto the lines would trim before markers if <code>marker.angleref</code> is set to previous.</li> <li>Sets the source reference on Chart Studio Cloud for <code>backoff</code>.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Determines the line shape. With spline the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</li> <li>Has an effect only if <code>shape</code> is set to spline Sets the amount of smoothing. 0 corresponds to no smoothing (equivalent to a linear shape).</li> <li>Sets the line width (in px).</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the reference for marker angle. With previous, angle 0 points along the line from the previous point to this one. With up, angle 0 points toward the top of the screen.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the type of gradient used to fill the markers</li> <li>Sets the source reference on Chart Studio Cloud for <code>type</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets a maximum number of points to be drawn on the graph. 0 corresponds to no limit.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Moves the marker away from the data point in the direction of <code>angle</code> (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</li> <li>Sets the source reference on Chart Studio Cloud for <code>standoff</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is lines+markers. Otherwise, lines.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</li> <li>Sets the source reference on Chart Studio Cloud for <code>real</code>.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a reference between this trace's data coordinates and a smith subplot. If smith (the default value), the data refer to <code>layout.smith</code>. If smith2, the data refer to <code>layout.smith2</code>, and so on.</li> <li>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>real</code>, <code>imag</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Scatterternary/","title":"Scatterternary","text":""},{"location":"reference/configuration/Trace/Props/Scatterternary/#scatterternary","title":"Scatterternary","text":""},{"location":"reference/configuration/Trace/Props/Scatterternary/#overview","title":"Overview","text":"<p>The <code>scatterternary</code> trace type is used to create scatter plots on ternary plots, which are used for visualizing proportions that sum to a constant, such as in chemistry or economics where three components are involved. Ternary plots are useful for showing the relationship between three variables that are interdependent.</p> <p>You can customize the marker size, color, and lines to connect points, similar to scatter plots but within a ternary plot.</p> <p>Common Uses</p> <ul> <li>Proportional Data Visualization: Visualizing data that involves proportions of three components.</li> <li>Ternary Relationship Analysis: Exploring how three components relate to one another.</li> <li>Chemistry and Economics: Commonly used in fields like chemistry, soil science, and economics for visualizing compositional data.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Scatterternary/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Scatterternary PlotScatterternary Plot with LinesScatterternary Plot with Custom Marker Sizes and Colors <p>Here's a simple <code>scatterternary</code> plot showing data points on a ternary plot:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: scatterternary-data\n    args:\n      - echo\n      - |\n        a,b,c\n        0.1,0.5,0.4\n        0.3,0.4,0.3\n        0.5,0.3,0.2\n        0.7,0.2,0.1\ntraces:\n  - name: Simple Scatterternary Plot\n    model: ${ref(scatterternary-data)}\n    props:\n      type: scatterternary\n      a: ?{a}\n      b: ?{b}\n      c: ?{c}\n      mode: \"markers\"\ncharts:\n  - name: Simple Scatterternary Chart\n    traces:\n      - ${ref(Simple Scatterternary Plot)}\n    layout:\n      title:\n        text: Simple Scatterternary Plot&lt;br&gt;&lt;sub&gt;Data Points on a Ternary Plot&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>scatterternary</code> plot with lines connecting the data points on a ternary plot:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatterternary-data-lines\n    args:\n      - echo\n      - |\n        a,b,c\n        0.2,0.6,0.2\n        0.4,0.3,0.3\n        0.6,0.2,0.2\n        0.8,0.1,0.1\ntraces:\n  - name: Scatterternary Plot with Lines\n    model: ${ref(scatterternary-data-lines)}\n    props:\n      type: scatterternary\n      a: ?{a}\n      b: ?{b}\n      c: ?{c}\n      mode: \"lines+markers\"\ncharts:\n  - name: Scatterternary Chart with Lines\n    traces:\n      - ${ref(Scatterternary Plot with Lines)}\n    layout:\n      title:\n        text: Scatterternary Plot with Lines&lt;br&gt;&lt;sub&gt;Connecting Data Points on a Ternary Plot&lt;/sub&gt;\n</code></pre> <p>Here's a <code>scatterternary</code> plot with custom marker sizes and colors, giving more visual weight to each data point on a ternary plot:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: scatterternary-data-custom\n    args:\n      - echo\n      - |\n        a,b,c,size,color\n        0.1,0.5,0.4,10,#1f77b4\n        0.3,0.4,0.3,15,#ff7f0e\n        0.5,0.3,0.2,20,#2ca02c\n        0.7,0.2,0.1,25,#d62728\ntraces:\n  - name: Scatterternary Plot with Custom Markers\n    model: ${ref(scatterternary-data-custom)}\n    props:\n      type: scatterternary\n      a: ?{a}\n      b: ?{b}\n      c: ?{c}\n      mode: \"markers\"\n      marker:\n        size: ?{size}\n        color: ?{color}\ncharts:\n  - name: Scatterternary Chart with Custom Markers\n    traces:\n      - ${ref(Scatterternary Plot with Custom Markers)}\n    layout:\n      title:\n        text: Scatterternary Plot with Custom Markers&lt;br&gt;&lt;sub&gt;Custom Sizes and Colors for Ternary Data Points&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Scatterternary/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>scatterternary</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>a: 'array' #(1)!\nasrc: 'string' #(2)!\nb: 'array' #(3)!\nbsrc: 'string' #(4)!\nc: 'array' #(5)!\ncliponaxis: 'boolean' #(6)!\nconnectgaps: 'boolean' #(7)!\ncsrc: 'string' #(8)!\ncustomdata: 'array' #(9)!\ncustomdatasrc: 'string' #(10)!\nfill: 'any' #(11)!\nfillcolor: 'any' #(12)!\nhoverinfo: 'array' #(13)!\nhoverinfosrc: 'string' #(14)!\nhoverlabel:\n  align: 'array' #(15)!\n  alignsrc: 'string' #(16)!\n  bgcolor: 'color | array' #(17)!\n  bgcolorsrc: 'string' #(18)!\n  bordercolor: 'color | array' #(19)!\n  bordercolorsrc: 'string' #(20)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(21)!\n    family: 'string | array' #(22)!\n    familysrc: 'string' #(23)!\n    lineposition: 'array' #(24)!\n    linepositionsrc: 'string' #(25)!\n    shadow: 'string | array' #(26)!\n    shadowsrc: 'string' #(27)!\n    size: number | array\n    sizesrc: 'string' #(28)!\n    style: 'array' #(29)!\n    stylesrc: 'string' #(30)!\n    textcase: 'array' #(31)!\n    textcasesrc: 'string' #(32)!\n    variant: 'array' #(33)!\n    variantsrc: 'string' #(34)!\n    weight: 'integer | array' #(35)!\n    weightsrc: 'string' #(36)!\n  namelength: 'integer | array' #(37)!\n  namelengthsrc: 'string' #(38)!\nhoveron: 'string' #(39)!\nhovertemplate: 'string | array' #(40)!\nhovertemplatesrc: 'string' #(41)!\nhovertext: 'string | array' #(42)!\nhovertextsrc: 'string' #(43)!\nids: 'array' #(44)!\nidssrc: 'string' #(45)!\nlegend: 'string' #(46)!\nlegendgroup: 'string' #(47)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(48)!\n    lineposition: 'string' #(49)!\n    shadow: 'string' #(50)!\n    size: number\n    style: 'any' #(51)!\n    textcase: 'any' #(52)!\n    variant: 'any' #(53)!\n    weight: 'integer' #(54)!\n  text: 'string' #(55)!\nlegendrank: 'number' #(56)!\nlegendwidth: 'number' #(57)!\nline:\n  backoff: 'number | array' #(58)!\n  backoffsrc: 'string' #(59)!\n  color: 'any' #(60)!\n  dash: 'string' #(61)!\n  shape: 'any' #(62)!\n  smoothing: 'number' #(63)!\n  width: 'number' #(64)!\nmarker:\n  angle: 'number | array' #(65)!\n  angleref: 'any' #(66)!\n  anglesrc: 'string' #(67)!\n  autocolorscale: 'boolean' #(68)!\n  cauto: 'boolean' #(69)!\n  cmax: 'number' #(70)!\n  cmid: 'number' #(71)!\n  cmin: 'number' #(72)!\n  color: 'color | array' #(73)!\n  coloraxis: 'string' #(74)!\n  colorbar:\n    bgcolor: 'any' #(75)!\n    bordercolor: 'any' #(76)!\n    borderwidth: 'number' #(77)!\n    exponentformat: 'any' #(78)!\n    len: 'number' #(79)!\n    lenmode: 'any' #(80)!\n    minexponent: 'number' #(81)!\n    nticks: 'integer' #(82)!\n    orientation: 'any' #(83)!\n    outlinecolor: 'any' #(84)!\n    outlinewidth: 'number' #(85)!\n    separatethousands: 'boolean' #(86)!\n    showexponent: 'any' #(87)!\n    showticklabels: 'boolean' #(88)!\n    showtickprefix: 'any' #(89)!\n    showticksuffix: 'any' #(90)!\n    thickness: 'number' #(91)!\n    thicknessmode: 'any' #(92)!\n    tickangle: 'number' #(93)!\n    tickcolor: 'any' #(94)!\n    tickfont:\n      color: any\n      family: 'string' #(95)!\n      lineposition: 'string' #(96)!\n      shadow: 'string' #(97)!\n      size: number\n      style: 'any' #(98)!\n      textcase: 'any' #(99)!\n      variant: 'any' #(100)!\n      weight: 'integer' #(101)!\n    tickformat: 'string' #(102)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(103)!\n    ticklabelposition: 'any' #(104)!\n    ticklabelstep: 'integer' #(105)!\n    ticklen: 'number' #(106)!\n    tickmode: 'any' #(107)!\n    tickprefix: 'string' #(108)!\n    ticks: 'any' #(109)!\n    ticksuffix: 'string' #(110)!\n    ticktext: 'array' #(111)!\n    ticktextsrc: 'string' #(112)!\n    tickvals: 'array' #(113)!\n    tickvalssrc: 'string' #(114)!\n    tickwidth: 'number' #(115)!\n    title:\n      font:\n        color: any\n        family: 'string' #(116)!\n        lineposition: 'string' #(117)!\n        shadow: 'string' #(118)!\n        size: number\n        style: 'any' #(119)!\n        textcase: 'any' #(120)!\n        variant: 'any' #(121)!\n        weight: 'integer' #(122)!\n      side: 'any' #(123)!\n      text: 'string' #(124)!\n    x: 'number' #(125)!\n    xanchor: 'any' #(126)!\n    xpad: 'number' #(127)!\n    xref: 'any' #(128)!\n    y: 'number' #(129)!\n    yanchor: 'any' #(130)!\n    ypad: 'number' #(131)!\n    yref: 'any' #(132)!\n  colorscale: 'any' #(133)!\n  colorsrc: 'string' #(134)!\n  gradient:\n    color: 'color | array' #(135)!\n    colorsrc: 'string' #(136)!\n    type: 'array' #(137)!\n    typesrc: 'string' #(138)!\n  line:\n    autocolorscale: 'boolean' #(139)!\n    cauto: 'boolean' #(140)!\n    cmax: 'number' #(141)!\n    cmid: 'number' #(142)!\n    cmin: 'number' #(143)!\n    color: 'color | array' #(144)!\n    coloraxis: 'string' #(145)!\n    colorscale: 'any' #(146)!\n    colorsrc: 'string' #(147)!\n    reversescale: 'boolean' #(148)!\n    width: 'number | array' #(149)!\n    widthsrc: 'string' #(150)!\n  maxdisplayed: 'number' #(151)!\n  opacity: 'number | array' #(152)!\n  opacitysrc: 'string' #(153)!\n  reversescale: 'boolean' #(154)!\n  showscale: 'boolean' #(155)!\n  size: 'number | array' #(156)!\n  sizemin: 'number' #(157)!\n  sizemode: 'any' #(158)!\n  sizeref: 'number' #(159)!\n  sizesrc: 'string' #(160)!\n  standoff: 'number | array' #(161)!\n  standoffsrc: 'string' #(162)!\n  symbol: 'array' #(163)!\n  symbolsrc: 'string' #(164)!\nmetasrc: 'string' #(165)!\nmode: 'string' #(166)!\nname: 'string' #(167)!\nopacity: 'number' #(168)!\nselected:\n  marker:\n    color: 'any' #(169)!\n    opacity: 'number' #(170)!\n    size: 'number' #(171)!\n  textfont:\n    color: 'any' #(172)!\nshowlegend: 'boolean' #(173)!\nstream:\n  maxpoints: 'number' #(174)!\n  token: 'string' #(175)!\nsubplot: 'string' #(176)!\nsum: 'number' #(177)!\ntext: 'string | array' #(178)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(179)!\n  family: 'string | array' #(180)!\n  familysrc: 'string' #(181)!\n  lineposition: 'array' #(182)!\n  linepositionsrc: 'string' #(183)!\n  shadow: 'string | array' #(184)!\n  shadowsrc: 'string' #(185)!\n  size: number | array\n  sizesrc: 'string' #(186)!\n  style: 'array' #(187)!\n  stylesrc: 'string' #(188)!\n  textcase: 'array' #(189)!\n  textcasesrc: 'string' #(190)!\n  variant: 'array' #(191)!\n  variantsrc: 'string' #(192)!\n  weight: 'integer | array' #(193)!\n  weightsrc: 'string' #(194)!\ntextposition: 'array' #(195)!\ntextpositionsrc: 'string' #(196)!\ntextsrc: 'string' #(197)!\ntexttemplate: 'string | array' #(198)!\ntexttemplatesrc: 'string' #(199)!\ntype: scatterternary\nuid: 'string' #(200)!\nunselected:\n  marker:\n    color: 'any' #(201)!\n    opacity: 'number' #(202)!\n    size: 'number' #(203)!\n  textfont:\n    color: 'any' #(204)!\nvisible: 'any' #(205)!\n</code></pre> <ol> <li>Sets the quantity of component <code>a</code> in each data point. If <code>a</code>, <code>b</code>, and <code>c</code> are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match <code>ternary&lt;i&gt;.sum</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>a</code>.</li> <li>Sets the quantity of component <code>a</code> in each data point. If <code>a</code>, <code>b</code>, and <code>c</code> are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match <code>ternary&lt;i&gt;.sum</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>b</code>.</li> <li>Sets the quantity of component <code>a</code> in each data point. If <code>a</code>, <code>b</code>, and <code>c</code> are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match <code>ternary&lt;i&gt;.sum</code>.</li> <li>Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set <code>xaxis.layer</code> and <code>yaxis.layer</code> to below traces.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</li> <li>Sets the source reference on Chart Studio Cloud for <code>c</code>.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the area to fill with a solid color. Use with <code>fillcolor</code> if not none. scatterternary has a subset of the options available to scatter. toself connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. tonext fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like toself if there is no trace before it. tonext should not be used if one trace does not enclose the other.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is toself or tonext and there are no markers or text, then the default is fills, otherwise it is points.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With auto the lines would trim before markers if <code>marker.angleref</code> is set to previous.</li> <li>Sets the source reference on Chart Studio Cloud for <code>backoff</code>.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Determines the line shape. With spline the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</li> <li>Has an effect only if <code>shape</code> is set to spline Sets the amount of smoothing. 0 corresponds to no smoothing (equivalent to a linear shape).</li> <li>Sets the line width (in px).</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the reference for marker angle. With previous, angle 0 points along the line from the previous point to this one. With up, angle 0 points toward the top of the screen.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the type of gradient used to fill the markers</li> <li>Sets the source reference on Chart Studio Cloud for <code>type</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets a maximum number of points to be drawn on the graph. 0 corresponds to no limit.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Moves the marker away from the data point in the direction of <code>angle</code> (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</li> <li>Sets the source reference on Chart Studio Cloud for <code>standoff</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Determines the drawing mode for this scatter trace. If the provided <code>mode</code> includes text then the <code>text</code> elements appear at the coordinates. Otherwise, the <code>text</code> elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is lines+markers. Otherwise, lines.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Sets the text font color of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a reference between this trace's data coordinates and a ternary subplot. If ternary (the default value), the data refer to <code>layout.ternary</code>. If ternary2, the data refer to <code>layout.ternary2</code>, and so on.</li> <li>The number each triplet should sum to, if only two of <code>a</code>, <code>b</code>, and <code>c</code> are provided. This overrides <code>ternary&lt;i&gt;.sum</code> to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary.sum</li> <li>Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the positions of the <code>text</code> elements with respects to the (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>a</code>, <code>b</code>, <code>c</code> and <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Sets the text font color of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Splom/","title":"Splom","text":""},{"location":"reference/configuration/Trace/Props/Splom/#splom","title":"Splom","text":""},{"location":"reference/configuration/Trace/Props/Splom/#overview","title":"Overview","text":"<p>The <code>splom</code> trace type is used to create scatter plot matrices, which are useful for visualizing pairwise relationships between multiple variables. A scatter plot matrix shows scatter plots for each pair of variables, making it a great tool for exploring correlations and patterns in multi-dimensional data.</p> <p>You can customize the marker size, color, and lines, similar to scatter plots, but for each pair of variables in the matrix.</p> <p>Common Uses</p> <ul> <li>Pairwise Relationship Analysis: Exploring relationships between multiple variables simultaneously.</li> <li>Correlation Visualization: Identifying patterns, clusters, or outliers in high-dimensional datasets.</li> <li>Multivariate Data Exploration: Useful in statistics, machine learning, and data science for analyzing multiple variables at once.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Splom/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Splom PlotSplom Plot with Custom ColorsSplom Plot with Custom Marker Sizes <p>Here's a simple <code>splom</code> plot showing pairwise scatter plots between four variables:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: splom-data\n    args:\n      - curl\n      - \"-s\"\n      - \"https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/iris.csv\"\ntraces:\n  - name: Simple Splom Plot\n    model: ${ref(splom-data)}\n    cohort_on: species\n    props:\n      type: splom\n      dimensions:\n        - label: \"Sepal Length\"\n          values: ?{sepal_length}\n        - label: \"Sepal Width\"\n          values: ?{sepal_width}\n        - label: \"Petal Length\"\n          values: ?{petal_length}\n        - label: \"Petal Width\"\n          values: ?{petal_width}\n      diagonal:\n        visible: false\n      showupperhalf: false\ncharts:\n  - name: Simple Splom Chart\n    traces:\n      - ${ref(Simple Splom Plot)}\n    layout:\n      title:\n        text: Simple Splom Plot&lt;br&gt;&lt;sub&gt;Scatter Plot Matrix of Four Variables &amp; Three Cohorts&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>splom</code> plot where different colors represent different categories:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: splom-data-colors\n    args:\n      - echo\n      - |\n        var1,var2,var3,category\n        1,2,3,A\n        2,3,4,B\n        3,4,5,A\n        4,5,6,B\n        5,6,7,A\ntraces:\n  - name: Splom Plot with Custom Colors\n    model: ${ref(splom-data-colors)}\n    props:\n      type: splom\n      dimensions:\n        - label: \"Variable 1\"\n          values: ?{var1}\n        - label: \"Variable 2\"\n          values: ?{var2}\n        - label: \"Variable 3\"\n          values: ?{var3}\n      marker:\n        color: ?{case when category = 'A' THEN 'red' else 'green' end}\n        size: 20\ncharts:\n  - name: Splom Chart with Custom Colors\n    traces:\n      - ${ref(Splom Plot with Custom Colors)}\n    layout:\n      title:\n        text: Splom Plot with Custom Colors&lt;br&gt;&lt;sub&gt;Color-Coded Scatter Plot Matrix&lt;/sub&gt;\n</code></pre> <p>Here's a <code>splom</code> plot where marker sizes are customized based on a fourth variable:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: splom-data-sizes\n    args:\n      - echo\n      - |\n        var1,var2,var3,size\n        1,2,3,10\n        2,3,4,15\n        3,4,5,20\n        4,5,6,25\n        5,6,7,30\ntraces:\n  - name: Splom Plot with Custom Sizes\n    model: ${ref(splom-data-sizes)}\n    props:\n      type: splom\n      dimensions:\n        - label: \"Variable 1\"\n          values: ?{var1}\n        - label: \"Variable 2\"\n          values: ?{var2}\n        - label: \"Variable 3\"\n          values: ?{var3}\n      marker:\n        size: ?{size}\ncharts:\n  - name: Splom Chart with Custom Sizes\n    traces:\n      - ${ref(Splom Plot with Custom Sizes)}\n    layout:\n      title:\n        text: Splom Plot with Custom Sizes&lt;br&gt;&lt;sub&gt;Scatter Plot Matrix with Custom Marker Sizes&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Splom/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>splom</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>customdata: 'array' #(1)!\ncustomdatasrc: 'string' #(2)!\ndiagonal:\n  visible: 'boolean' #(3)!\ndimensions: array\nhoverinfo: 'array' #(4)!\nhoverinfosrc: 'string' #(5)!\nhoverlabel:\n  align: 'array' #(6)!\n  alignsrc: 'string' #(7)!\n  bgcolor: 'color | array' #(8)!\n  bgcolorsrc: 'string' #(9)!\n  bordercolor: 'color | array' #(10)!\n  bordercolorsrc: 'string' #(11)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(12)!\n    family: 'string | array' #(13)!\n    familysrc: 'string' #(14)!\n    lineposition: 'array' #(15)!\n    linepositionsrc: 'string' #(16)!\n    shadow: 'string | array' #(17)!\n    shadowsrc: 'string' #(18)!\n    size: number | array\n    sizesrc: 'string' #(19)!\n    style: 'array' #(20)!\n    stylesrc: 'string' #(21)!\n    textcase: 'array' #(22)!\n    textcasesrc: 'string' #(23)!\n    variant: 'array' #(24)!\n    variantsrc: 'string' #(25)!\n    weight: 'integer | array' #(26)!\n    weightsrc: 'string' #(27)!\n  namelength: 'integer | array' #(28)!\n  namelengthsrc: 'string' #(29)!\nhovertemplate: 'string | array' #(30)!\nhovertemplatesrc: 'string' #(31)!\nhovertext: 'string | array' #(32)!\nhovertextsrc: 'string' #(33)!\nids: 'array' #(34)!\nidssrc: 'string' #(35)!\nlegend: 'string' #(36)!\nlegendgroup: 'string' #(37)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(38)!\n    lineposition: 'string' #(39)!\n    shadow: 'string' #(40)!\n    size: number\n    style: 'any' #(41)!\n    textcase: 'any' #(42)!\n    variant: 'any' #(43)!\n    weight: 'integer' #(44)!\n  text: 'string' #(45)!\nlegendrank: 'number' #(46)!\nlegendwidth: 'number' #(47)!\nmarker:\n  angle: 'number | array' #(48)!\n  anglesrc: 'string' #(49)!\n  autocolorscale: 'boolean' #(50)!\n  cauto: 'boolean' #(51)!\n  cmax: 'number' #(52)!\n  cmid: 'number' #(53)!\n  cmin: 'number' #(54)!\n  color: 'color | array' #(55)!\n  coloraxis: 'string' #(56)!\n  colorbar:\n    bgcolor: 'any' #(57)!\n    bordercolor: 'any' #(58)!\n    borderwidth: 'number' #(59)!\n    exponentformat: 'any' #(60)!\n    len: 'number' #(61)!\n    lenmode: 'any' #(62)!\n    minexponent: 'number' #(63)!\n    nticks: 'integer' #(64)!\n    orientation: 'any' #(65)!\n    outlinecolor: 'any' #(66)!\n    outlinewidth: 'number' #(67)!\n    separatethousands: 'boolean' #(68)!\n    showexponent: 'any' #(69)!\n    showticklabels: 'boolean' #(70)!\n    showtickprefix: 'any' #(71)!\n    showticksuffix: 'any' #(72)!\n    thickness: 'number' #(73)!\n    thicknessmode: 'any' #(74)!\n    tickangle: 'number' #(75)!\n    tickcolor: 'any' #(76)!\n    tickfont:\n      color: any\n      family: 'string' #(77)!\n      lineposition: 'string' #(78)!\n      shadow: 'string' #(79)!\n      size: number\n      style: 'any' #(80)!\n      textcase: 'any' #(81)!\n      variant: 'any' #(82)!\n      weight: 'integer' #(83)!\n    tickformat: 'string' #(84)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(85)!\n    ticklabelposition: 'any' #(86)!\n    ticklabelstep: 'integer' #(87)!\n    ticklen: 'number' #(88)!\n    tickmode: 'any' #(89)!\n    tickprefix: 'string' #(90)!\n    ticks: 'any' #(91)!\n    ticksuffix: 'string' #(92)!\n    ticktext: 'array' #(93)!\n    ticktextsrc: 'string' #(94)!\n    tickvals: 'array' #(95)!\n    tickvalssrc: 'string' #(96)!\n    tickwidth: 'number' #(97)!\n    title:\n      font:\n        color: any\n        family: 'string' #(98)!\n        lineposition: 'string' #(99)!\n        shadow: 'string' #(100)!\n        size: number\n        style: 'any' #(101)!\n        textcase: 'any' #(102)!\n        variant: 'any' #(103)!\n        weight: 'integer' #(104)!\n      side: 'any' #(105)!\n      text: 'string' #(106)!\n    x: 'number' #(107)!\n    xanchor: 'any' #(108)!\n    xpad: 'number' #(109)!\n    xref: 'any' #(110)!\n    y: 'number' #(111)!\n    yanchor: 'any' #(112)!\n    ypad: 'number' #(113)!\n    yref: 'any' #(114)!\n  colorscale: 'any' #(115)!\n  colorsrc: 'string' #(116)!\n  line:\n    autocolorscale: 'boolean' #(117)!\n    cauto: 'boolean' #(118)!\n    cmax: 'number' #(119)!\n    cmid: 'number' #(120)!\n    cmin: 'number' #(121)!\n    color: 'color | array' #(122)!\n    coloraxis: 'string' #(123)!\n    colorscale: 'any' #(124)!\n    colorsrc: 'string' #(125)!\n    reversescale: 'boolean' #(126)!\n    width: 'number | array' #(127)!\n    widthsrc: 'string' #(128)!\n  opacity: 'number | array' #(129)!\n  opacitysrc: 'string' #(130)!\n  reversescale: 'boolean' #(131)!\n  showscale: 'boolean' #(132)!\n  size: 'number | array' #(133)!\n  sizemin: 'number' #(134)!\n  sizemode: 'any' #(135)!\n  sizeref: 'number' #(136)!\n  sizesrc: 'string' #(137)!\n  symbol: 'array' #(138)!\n  symbolsrc: 'string' #(139)!\nmetasrc: 'string' #(140)!\nname: 'string' #(141)!\nopacity: 'number' #(142)!\nselected:\n  marker:\n    color: 'any' #(143)!\n    opacity: 'number' #(144)!\n    size: 'number' #(145)!\nshowlegend: 'boolean' #(146)!\nshowlowerhalf: 'boolean' #(147)!\nshowupperhalf: 'boolean' #(148)!\nstream:\n  maxpoints: 'number' #(149)!\n  token: 'string' #(150)!\ntext: 'string | array' #(151)!\ntextsrc: 'string' #(152)!\ntype: splom\nuid: 'string' #(153)!\nunselected:\n  marker:\n    color: 'any' #(154)!\n    opacity: 'number' #(155)!\n    size: 'number' #(156)!\nvisible: 'any' #(157)!\nxaxes: 'array' #(158)!\nxhoverformat: 'string' #(159)!\nyaxes: 'array' #(160)!\nyhoverformat: 'string' #(161)!\n</code></pre> <ol> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Determines whether or not subplots on the diagonal are displayed.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>angle</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if in <code>marker.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.color</code>) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if in <code>marker.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code>. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.color</code> is set to a numerical array. Value should have the same units as in <code>marker.color</code> and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.line.colorscale</code>. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here in <code>marker.line.color</code>) or the bounds set in <code>marker.line.cmin</code> and <code>marker.line.cmax</code> Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Defaults to <code>false</code> when <code>marker.line.cmin</code> and <code>marker.line.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.line.cmin</code> and/or <code>marker.line.cmax</code> to be equidistant to this point. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code>. Has no effect when <code>marker.line.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. Value should have the same units as in <code>marker.line.color</code> and if set, <code>marker.line.cmax</code> must be set as well.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the colorscale. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.line.cmin</code> and <code>marker.line.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.line.color</code> is set to a numerical array. If true, <code>marker.line.cmin</code> will correspond to the last color in the array and <code>marker.line.cmax</code> will correspond to the first color.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the marker opacity.</li> <li>Sets the source reference on Chart Studio Cloud for <code>opacity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if in <code>marker.color</code> is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in <code>marker.color</code> is set to a numerical array.</li> <li>Sets the marker size (in px).</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the rule for which the data in <code>size</code> is converted to pixels.</li> <li>Has an effect only if <code>marker.size</code> is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with <code>sizemin</code> and <code>sizemode</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the source reference on Chart Studio Cloud for <code>symbol</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not subplots on the lower half from the diagonal are displayed.</li> <li>Determines whether or not subplots on the upper half from the diagonal are displayed.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the list of x axes corresponding to dimensions of this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions. Note that, in case where <code>diagonal.visible</code> is false and <code>showupperhalf</code> or <code>showlowerhalf</code> is false, this splom trace will generate one less x-axis and one less y-axis.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the list of y axes corresponding to dimensions of this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions. Note that, in case where <code>diagonal.visible</code> is false and <code>showupperhalf</code> or <code>showlowerhalf</code> is false, this splom trace will generate one less x-axis and one less y-axis.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Streamtube/","title":"Streamtube","text":""},{"location":"reference/configuration/Trace/Props/Streamtube/#streamtube","title":"Streamtube","text":""},{"location":"reference/configuration/Trace/Props/Streamtube/#overview","title":"Overview","text":"<p>The <code>streamtube</code> trace type is used to create 3D streamtube plots, which visualize flow or vector field data in three dimensions. Streamtubes are ideal for visualizing the behavior of fluid flow, electromagnetic fields, or any vector data where the direction and magnitude of flow are important.</p> <p>You can customize the color, size, and path of the streamtubes to represent the flow data effectively.</p> <p>Common Uses</p> <ul> <li>Fluid Dynamics: Visualizing the flow of fluids in a 3D space.</li> <li>Vector Field Analysis: Analyzing vector fields like wind, magnetic, or electric fields.</li> <li>Flow Visualization: Representing flow behavior over time or space.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Streamtube/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Streamtube PlotStreamtube Plot with Color MappingStreamtube Plot with Custom Tube Sizes <p>This example uses a real, dense dataset from Plotly's sample CSV to ensure the streamtube renders properly:</p> <pre><code>models:\n  - name: streamtube-data\n    args:\n      - curl\n      - -sL\n      - https://raw.githubusercontent.com/plotly/datasets/master/streamtube-basic.csv\ntraces:\n  - name: Simple Streamtube Plot\n    model: ${ref(streamtube-data)}\n    props:\n      type: streamtube\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      u: ?{u}\n      v: ?{v}\n      w: ?{w}\ncharts:\n  - name: Simple Streamtube Chart\n    traces:\n      - ${ref(Simple Streamtube Plot)}\n    layout:\n      title:\n        text: Simple Streamtube Plot&lt;br&gt;&lt;sub&gt;3D Vector Field Visualization&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a streamtube plot using the same CSV, with color mapping enabled:</p> <pre><code>models:\n  - name: streamtube-data\n    args:\n      - curl\n      - -sL\n      - https://raw.githubusercontent.com/plotly/datasets/master/streamtube-basic.csv\ntraces:\n  - name: Streamtube Plot with Color Mapping\n    model: ${ref(streamtube-data)}\n    props:\n      type: streamtube\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      u: ?{u}\n      v: ?{v}\n      w: ?{w}\n      colorscale: \"Viridis\"\ncharts:\n  - name: Streamtube Chart with Color Mapping\n    traces:\n      - ${ref(Streamtube Plot with Color Mapping)}\n    layout:\n      title:\n        text: Streamtube Plot with Color Mapping&lt;br&gt;&lt;sub&gt;Vector Magnitude Represented by Color&lt;/sub&gt;\n</code></pre> <p>This example uses the same CSV and sets a custom tube size reference:</p> <pre><code>models:\n  - name: streamtube-data\n    args:\n      - curl\n      - -sL\n      - https://raw.githubusercontent.com/plotly/datasets/master/streamtube-basic.csv\ntraces:\n  - name: Streamtube Plot with Custom Tube Sizes\n    model: ${ref(streamtube-data)}\n    props:\n      type: streamtube\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      u: ?{u}\n      v: ?{v}\n      w: ?{w}\n      sizeref: 0.5\ncharts:\n  - name: Streamtube Chart with Custom Tube Sizes\n    traces:\n      - ${ref(Streamtube Plot with Custom Tube Sizes)}\n    layout:\n      title:\n        text: Streamtube Plot with Custom Tube Sizes&lt;br&gt;&lt;sub&gt;Vector Magnitude Represented by Tube Size&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Streamtube/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>streamtube</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\ncauto: 'boolean' #(2)!\ncmax: 'number' #(3)!\ncmid: 'number' #(4)!\ncmin: 'number' #(5)!\ncoloraxis: 'string' #(6)!\ncolorbar:\n  bgcolor: 'any' #(7)!\n  bordercolor: 'any' #(8)!\n  borderwidth: 'number' #(9)!\n  exponentformat: 'any' #(10)!\n  len: 'number' #(11)!\n  lenmode: 'any' #(12)!\n  minexponent: 'number' #(13)!\n  nticks: 'integer' #(14)!\n  orientation: 'any' #(15)!\n  outlinecolor: 'any' #(16)!\n  outlinewidth: 'number' #(17)!\n  separatethousands: 'boolean' #(18)!\n  showexponent: 'any' #(19)!\n  showticklabels: 'boolean' #(20)!\n  showtickprefix: 'any' #(21)!\n  showticksuffix: 'any' #(22)!\n  thickness: 'number' #(23)!\n  thicknessmode: 'any' #(24)!\n  tickangle: 'number' #(25)!\n  tickcolor: 'any' #(26)!\n  tickfont:\n    color: any\n    family: 'string' #(27)!\n    lineposition: 'string' #(28)!\n    shadow: 'string' #(29)!\n    size: number\n    style: 'any' #(30)!\n    textcase: 'any' #(31)!\n    variant: 'any' #(32)!\n    weight: 'integer' #(33)!\n  tickformat: 'string' #(34)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(35)!\n  ticklabelposition: 'any' #(36)!\n  ticklabelstep: 'integer' #(37)!\n  ticklen: 'number' #(38)!\n  tickmode: 'any' #(39)!\n  tickprefix: 'string' #(40)!\n  ticks: 'any' #(41)!\n  ticksuffix: 'string' #(42)!\n  ticktext: 'array' #(43)!\n  ticktextsrc: 'string' #(44)!\n  tickvals: 'array' #(45)!\n  tickvalssrc: 'string' #(46)!\n  tickwidth: 'number' #(47)!\n  title:\n    font:\n      color: any\n      family: 'string' #(48)!\n      lineposition: 'string' #(49)!\n      shadow: 'string' #(50)!\n      size: number\n      style: 'any' #(51)!\n      textcase: 'any' #(52)!\n      variant: 'any' #(53)!\n      weight: 'integer' #(54)!\n    side: 'any' #(55)!\n    text: 'string' #(56)!\n  x: 'number' #(57)!\n  xanchor: 'any' #(58)!\n  xpad: 'number' #(59)!\n  xref: 'any' #(60)!\n  y: 'number' #(61)!\n  yanchor: 'any' #(62)!\n  ypad: 'number' #(63)!\n  yref: 'any' #(64)!\ncolorscale: 'any' #(65)!\ncustomdata: 'array' #(66)!\ncustomdatasrc: 'string' #(67)!\nhoverinfo: 'array' #(68)!\nhoverinfosrc: 'string' #(69)!\nhoverlabel:\n  align: 'array' #(70)!\n  alignsrc: 'string' #(71)!\n  bgcolor: 'color | array' #(72)!\n  bgcolorsrc: 'string' #(73)!\n  bordercolor: 'color | array' #(74)!\n  bordercolorsrc: 'string' #(75)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(76)!\n    family: 'string | array' #(77)!\n    familysrc: 'string' #(78)!\n    lineposition: 'array' #(79)!\n    linepositionsrc: 'string' #(80)!\n    shadow: 'string | array' #(81)!\n    shadowsrc: 'string' #(82)!\n    size: number | array\n    sizesrc: 'string' #(83)!\n    style: 'array' #(84)!\n    stylesrc: 'string' #(85)!\n    textcase: 'array' #(86)!\n    textcasesrc: 'string' #(87)!\n    variant: 'array' #(88)!\n    variantsrc: 'string' #(89)!\n    weight: 'integer | array' #(90)!\n    weightsrc: 'string' #(91)!\n  namelength: 'integer | array' #(92)!\n  namelengthsrc: 'string' #(93)!\nhovertemplate: 'string | array' #(94)!\nhovertemplatesrc: 'string' #(95)!\nhovertext: 'string' #(96)!\nids: 'array' #(97)!\nidssrc: 'string' #(98)!\nlegend: 'string' #(99)!\nlegendgroup: 'string' #(100)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(101)!\n    lineposition: 'string' #(102)!\n    shadow: 'string' #(103)!\n    size: number\n    style: 'any' #(104)!\n    textcase: 'any' #(105)!\n    variant: 'any' #(106)!\n    weight: 'integer' #(107)!\n  text: 'string' #(108)!\nlegendrank: 'number' #(109)!\nlegendwidth: 'number' #(110)!\nlighting:\n  ambient: 'number' #(111)!\n  diffuse: 'number' #(112)!\n  facenormalsepsilon: 'number' #(113)!\n  fresnel: 'number' #(114)!\n  roughness: 'number' #(115)!\n  specular: 'number' #(116)!\n  vertexnormalsepsilon: 'number' #(117)!\nlightposition:\n  x: 'number' #(118)!\n  y: 'number' #(119)!\n  z: 'number' #(120)!\nmaxdisplayed: 'integer' #(121)!\nmetasrc: 'string' #(122)!\nname: 'string' #(123)!\nopacity: 'number' #(124)!\nreversescale: 'boolean' #(125)!\nscene: 'string' #(126)!\nshowlegend: 'boolean' #(127)!\nshowscale: 'boolean' #(128)!\nsizeref: 'number' #(129)!\nstarts:\n  x: 'array' #(130)!\n  xsrc: 'string' #(131)!\n  y: 'array' #(132)!\n  ysrc: 'string' #(133)!\n  z: 'array' #(134)!\n  zsrc: 'string' #(135)!\nstream:\n  maxpoints: 'number' #(136)!\n  token: 'string' #(137)!\ntext: 'string' #(138)!\ntype: streamtube\nu: 'array' #(139)!\nuhoverformat: 'string' #(140)!\nuid: 'string' #(141)!\nusrc: 'string' #(142)!\nv: 'array' #(143)!\nvhoverformat: 'string' #(144)!\nvisible: 'any' #(145)!\nvsrc: 'string' #(146)!\nw: 'array' #(147)!\nwhoverformat: 'string' #(148)!\nwsrc: 'string' #(149)!\nx: 'array' #(150)!\nxhoverformat: 'string' #(151)!\nxsrc: 'string' #(152)!\ny: 'array' #(153)!\nyhoverformat: 'string' #(154)!\nysrc: 'string' #(155)!\nz: 'array' #(156)!\nzhoverformat: 'string' #(157)!\nzsrc: 'string' #(158)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in <code>cmin</code> and <code>cmax</code> Defaults to <code>false</code> when <code>cmin</code> and <code>cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, <code>cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>cmin</code> and/or <code>cmax</code> to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when <code>cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, <code>cmax</code> must be set as well.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>cmin</code> and <code>cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>tubex</code>, <code>tubey</code>, <code>tubez</code>, <code>tubeu</code>, <code>tubev</code>, <code>tubew</code>, <code>norm</code> and <code>divergence</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Ambient light increases overall color visibility but can wash out the image.</li> <li>Represents the extent that incident rays are reflected in a range of angles.</li> <li>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</li> <li>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</li> <li>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</li> <li>Represents the level that incident rays are reflected in a single direction, causing shine.</li> <li>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</li> <li>Numeric vector, representing the X coordinate for each vertex.</li> <li>Numeric vector, representing the Y coordinate for each vertex.</li> <li>Numeric vector, representing the Z coordinate for each vertex.</li> <li>The maximum number of displayed segments in a streamtube.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the surface. Please note that in the case of using high <code>opacity</code> values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</li> <li>Reverses the color mapping if true. If true, <code>cmin</code> will correspond to the last color in the array and <code>cmax</code> will correspond to the first color.</li> <li>Sets a reference between this trace's 3D coordinate system and a 3D scene. If scene (the default value), the (x,y,z) coordinates refer to <code>layout.scene</code>. If scene2, the (x,y,z) coordinates refer to <code>layout.scene2</code>, and so on.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.</li> <li>Sets the x components of the starting position of the streamtubes</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y components of the starting position of the streamtubes</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the z components of the starting position of the streamtubes</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets a text element associated with this trace. If trace <code>hoverinfo</code> contains a text flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array <code>text</code> values.</li> <li>Sets the x components of the vector field.</li> <li>Sets the hover text formatting rulefor <code>u</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the source reference on Chart Studio Cloud for <code>u</code>.</li> <li>Sets the y components of the vector field.</li> <li>Sets the hover text formatting rulefor <code>v</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the source reference on Chart Studio Cloud for <code>v</code>.</li> <li>Sets the z components of the vector field.</li> <li>Sets the hover text formatting rulefor <code>w</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Sets the source reference on Chart Studio Cloud for <code>w</code>.</li> <li>Sets the x coordinates of the vector field.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates of the vector field.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the z coordinates of the vector field.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>zaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Sunburst/","title":"Sunburst","text":""},{"location":"reference/configuration/Trace/Props/Sunburst/#sunburst","title":"Sunburst","text":""},{"location":"reference/configuration/Trace/Props/Sunburst/#overview","title":"Overview","text":"<p>The <code>sunburst</code> trace type is used to create sunburst charts, which visualize hierarchical data in a circular format. Sunburst charts are useful for showing relationships between parts and the whole, with nested levels of data radiating outward from the center.</p> <p>You can customize the colors, labels, and hierarchy of the chart to represent your data effectively.</p> <p>Common Uses</p> <ul> <li>Hierarchical Data Visualization: Displaying relationships between different levels of data.</li> <li>Part-to-Whole Relationships: Visualizing how parts contribute to the whole across multiple levels.</li> <li>Categorical Data: Showing categorical breakdowns with nested data.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Sunburst/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Sunburst PlotSunburst Plot with Custom ColorsSunburst Plot with Custom Sizes <p>Here's a simple <code>sunburst</code> plot showing a hierarchy of categories:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: sunburst-data\n    args:\n      - echo\n      - |\n        labels,parents,values\n        Total,,100\n        A,Total,40\n        B,Total,30\n        C,Total,30\n        D,A,10\n        E,A,20\n        F,B,10\ntraces:\n  - name: Simple Sunburst Plot\n    model: ${ref(sunburst-data)}\n    props:\n      type: sunburst\n      labels: ?{labels}\n      parents: ?{parents}\n      values: ?{\"values\"}\ncharts:\n  - name: Simple Sunburst Chart\n    traces:\n      - ${ref(Simple Sunburst Plot)}\n    layout:\n      title:\n        text: Simple Sunburst Chart&lt;br&gt;&lt;sub&gt;Hierarchical Data Visualization&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>sunburst</code> plot where each category has custom colors:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: sunburst-data-colors\n    args:\n      - echo\n      - |\n        labels,parents,values,colors\n        Total,,100,#1f77b4\n        A,Total,40,#ff7f0e\n        B,Total,30,#2ca02c\n        C,Total,30,#d62728\n        D,A,10,#9467bd\n        E,A,20,#8c564b\n        F,B,10,#e377c2\ntraces:\n  - name: Sunburst Plot with Custom Colors\n    model: ${ref(sunburst-data-colors)}\n    props:\n      type: sunburst\n      labels: ?{labels}\n      parents: ?{parents}\n      values: ?{\"values\"}\n      marker:\n        colors: ?{colors}\ncharts:\n  - name: Sunburst Chart with Custom Colors\n    traces:\n      - ${ref(Sunburst Plot with Custom Colors)}\n    layout:\n      title:\n        text: Sunburst Plot with Custom Colors&lt;br&gt;&lt;sub&gt;Custom Colors for Each Category&lt;/sub&gt;\n</code></pre> <p>Here's a <code>sunburst</code> plot where the size of each segment is customized based on additional values:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: sunburst-data-sizes\n    args:\n      - echo\n      - |\n        labels,parents,values,size\n        Total,,100,1\n        A,Total,40,2\n        B,Total,30,3\n        C,Total,30,4\n        D,A,10,5\n        E,A,20,6\n        F,B,10,7\ntraces:\n  - name: Sunburst Plot with Custom Sizes\n    model: ${ref(sunburst-data-sizes)}\n    props:\n      type: sunburst\n      labels: ?{labels}\n      parents: ?{parents}\n      values: ?{\"values\"}\n      marker:\n        line:\n          width: ?{size}\n          color: black\ncharts:\n  - name: Sunburst Chart with Custom Sizes\n    traces:\n      - ${ref(Sunburst Plot with Custom Sizes)}\n    layout:\n      title:\n        text: Sunburst Plot with Custom Sizes&lt;br&gt;&lt;sub&gt;Custom Sizes for Each Segment&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Sunburst/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>sunburst</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>branchvalues: 'any' #(1)!\ncount: 'string' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\ndomain:\n  column: 'integer' #(5)!\n  row: 'integer' #(6)!\n  x: 'array' #(7)!\n  y: 'array' #(8)!\nhoverinfo: 'array' #(9)!\nhoverinfosrc: 'string' #(10)!\nhoverlabel:\n  align: 'array' #(11)!\n  alignsrc: 'string' #(12)!\n  bgcolor: 'color | array' #(13)!\n  bgcolorsrc: 'string' #(14)!\n  bordercolor: 'color | array' #(15)!\n  bordercolorsrc: 'string' #(16)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(17)!\n    family: 'string | array' #(18)!\n    familysrc: 'string' #(19)!\n    lineposition: 'array' #(20)!\n    linepositionsrc: 'string' #(21)!\n    shadow: 'string | array' #(22)!\n    shadowsrc: 'string' #(23)!\n    size: number | array\n    sizesrc: 'string' #(24)!\n    style: 'array' #(25)!\n    stylesrc: 'string' #(26)!\n    textcase: 'array' #(27)!\n    textcasesrc: 'string' #(28)!\n    variant: 'array' #(29)!\n    variantsrc: 'string' #(30)!\n    weight: 'integer | array' #(31)!\n    weightsrc: 'string' #(32)!\n  namelength: 'integer | array' #(33)!\n  namelengthsrc: 'string' #(34)!\nhovertemplate: 'string | array' #(35)!\nhovertemplatesrc: 'string' #(36)!\nhovertext: 'string | array' #(37)!\nhovertextsrc: 'string' #(38)!\nids: 'array' #(39)!\nidssrc: 'string' #(40)!\ninsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(41)!\n  family: 'string | array' #(42)!\n  familysrc: 'string' #(43)!\n  lineposition: 'array' #(44)!\n  linepositionsrc: 'string' #(45)!\n  shadow: 'string | array' #(46)!\n  shadowsrc: 'string' #(47)!\n  size: number | array\n  sizesrc: 'string' #(48)!\n  style: 'array' #(49)!\n  stylesrc: 'string' #(50)!\n  textcase: 'array' #(51)!\n  textcasesrc: 'string' #(52)!\n  variant: 'array' #(53)!\n  variantsrc: 'string' #(54)!\n  weight: 'integer | array' #(55)!\n  weightsrc: 'string' #(56)!\ninsidetextorientation: 'any' #(57)!\nlabels: 'array' #(58)!\nlabelssrc: 'string' #(59)!\nleaf:\n  opacity: 'number' #(60)!\nlegend: 'string' #(61)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(62)!\n    lineposition: 'string' #(63)!\n    shadow: 'string' #(64)!\n    size: number\n    style: 'any' #(65)!\n    textcase: 'any' #(66)!\n    variant: 'any' #(67)!\n    weight: 'integer' #(68)!\n  text: 'string' #(69)!\nlegendrank: 'number' #(70)!\nlegendwidth: 'number' #(71)!\nmarker:\n  autocolorscale: 'boolean' #(72)!\n  cauto: 'boolean' #(73)!\n  cmax: 'number' #(74)!\n  cmid: 'number' #(75)!\n  cmin: 'number' #(76)!\n  coloraxis: 'string' #(77)!\n  colorbar:\n    bgcolor: 'any' #(78)!\n    bordercolor: 'any' #(79)!\n    borderwidth: 'number' #(80)!\n    exponentformat: 'any' #(81)!\n    len: 'number' #(82)!\n    lenmode: 'any' #(83)!\n    minexponent: 'number' #(84)!\n    nticks: 'integer' #(85)!\n    orientation: 'any' #(86)!\n    outlinecolor: 'any' #(87)!\n    outlinewidth: 'number' #(88)!\n    separatethousands: 'boolean' #(89)!\n    showexponent: 'any' #(90)!\n    showticklabels: 'boolean' #(91)!\n    showtickprefix: 'any' #(92)!\n    showticksuffix: 'any' #(93)!\n    thickness: 'number' #(94)!\n    thicknessmode: 'any' #(95)!\n    tickangle: 'number' #(96)!\n    tickcolor: 'any' #(97)!\n    tickfont:\n      color: any\n      family: 'string' #(98)!\n      lineposition: 'string' #(99)!\n      shadow: 'string' #(100)!\n      size: number\n      style: 'any' #(101)!\n      textcase: 'any' #(102)!\n      variant: 'any' #(103)!\n      weight: 'integer' #(104)!\n    tickformat: 'string' #(105)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(106)!\n    ticklabelposition: 'any' #(107)!\n    ticklabelstep: 'integer' #(108)!\n    ticklen: 'number' #(109)!\n    tickmode: 'any' #(110)!\n    tickprefix: 'string' #(111)!\n    ticks: 'any' #(112)!\n    ticksuffix: 'string' #(113)!\n    ticktext: 'array' #(114)!\n    ticktextsrc: 'string' #(115)!\n    tickvals: 'array' #(116)!\n    tickvalssrc: 'string' #(117)!\n    tickwidth: 'number' #(118)!\n    title:\n      font:\n        color: any\n        family: 'string' #(119)!\n        lineposition: 'string' #(120)!\n        shadow: 'string' #(121)!\n        size: number\n        style: 'any' #(122)!\n        textcase: 'any' #(123)!\n        variant: 'any' #(124)!\n        weight: 'integer' #(125)!\n      side: 'any' #(126)!\n      text: 'string' #(127)!\n    x: 'number' #(128)!\n    xanchor: 'any' #(129)!\n    xpad: 'number' #(130)!\n    xref: 'any' #(131)!\n    y: 'number' #(132)!\n    yanchor: 'any' #(133)!\n    ypad: 'number' #(134)!\n    yref: 'any' #(135)!\n  colors: 'array' #(136)!\n  colorscale: 'any' #(137)!\n  colorssrc: 'string' #(138)!\n  line:\n    color: 'color | array' #(139)!\n    colorsrc: 'string' #(140)!\n    width: 'number | array' #(141)!\n    widthsrc: 'string' #(142)!\n  pattern:\n    bgcolor: 'color | array' #(143)!\n    bgcolorsrc: 'string' #(144)!\n    fgcolor: 'color | array' #(145)!\n    fgcolorsrc: 'string' #(146)!\n    fgopacity: 'number' #(147)!\n    fillmode: 'any' #(148)!\n    shape: 'array' #(149)!\n    shapesrc: 'string' #(150)!\n    size: 'number | array' #(151)!\n    sizesrc: 'string' #(152)!\n    solidity: 'number | array' #(153)!\n    soliditysrc: 'string' #(154)!\n  reversescale: 'boolean' #(155)!\n  showscale: 'boolean' #(156)!\nmaxdepth: 'integer' #(157)!\nmetasrc: 'string' #(158)!\nname: 'string' #(159)!\nopacity: 'number' #(160)!\noutsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(161)!\n  family: 'string | array' #(162)!\n  familysrc: 'string' #(163)!\n  lineposition: 'array' #(164)!\n  linepositionsrc: 'string' #(165)!\n  shadow: 'string | array' #(166)!\n  shadowsrc: 'string' #(167)!\n  size: number | array\n  sizesrc: 'string' #(168)!\n  style: 'array' #(169)!\n  stylesrc: 'string' #(170)!\n  textcase: 'array' #(171)!\n  textcasesrc: 'string' #(172)!\n  variant: 'array' #(173)!\n  variantsrc: 'string' #(174)!\n  weight: 'integer | array' #(175)!\n  weightsrc: 'string' #(176)!\nparents: 'array' #(177)!\nparentssrc: 'string' #(178)!\nroot:\n  color: 'any' #(179)!\nrotation: 'number' #(180)!\nsort: 'boolean' #(181)!\nstream:\n  maxpoints: 'number' #(182)!\n  token: 'string' #(183)!\ntext: 'array' #(184)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(185)!\n  family: 'string | array' #(186)!\n  familysrc: 'string' #(187)!\n  lineposition: 'array' #(188)!\n  linepositionsrc: 'string' #(189)!\n  shadow: 'string | array' #(190)!\n  shadowsrc: 'string' #(191)!\n  size: number | array\n  sizesrc: 'string' #(192)!\n  style: 'array' #(193)!\n  stylesrc: 'string' #(194)!\n  textcase: 'array' #(195)!\n  textcasesrc: 'string' #(196)!\n  variant: 'array' #(197)!\n  variantsrc: 'string' #(198)!\n  weight: 'integer | array' #(199)!\n  weightsrc: 'string' #(200)!\ntextinfo: 'string' #(201)!\ntextsrc: 'string' #(202)!\ntexttemplate: 'string | array' #(203)!\ntexttemplatesrc: 'string' #(204)!\ntype: sunburst\nuid: 'string' #(205)!\nvalues: 'array' #(206)!\nvaluessrc: 'string' #(207)!\nvisible: 'any' #(208)!\n</code></pre> <ol> <li>Determines how the items in <code>values</code> are summed. When set to total, items in <code>values</code> are taken to be value of all its descendants. When set to remainder, items in <code>values</code> corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</li> <li>Determines default for <code>values</code> when it is not provided, by inferring a 1 for each of the leaves and/or branches, otherwise 0.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>If there is a layout grid, use the domain for this column in the grid for this sunburst trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this sunburst trace .</li> <li>Sets the horizontal domain of this sunburst trace (in plot fraction).</li> <li>Sets the vertical domain of this sunburst trace (in plot fraction).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>currentPath</code>, <code>root</code>, <code>entry</code>, <code>percentRoot</code>, <code>percentEntry</code> and <code>percentParent</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Controls the orientation of the text inside chart sectors. When set to auto, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The horizontal option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The radial option orients text along the radius of the sector. The tangential option orients text perpendicular to the radius of the sector.</li> <li>Sets the labels of each of the sectors.</li> <li>Sets the source reference on Chart Studio Cloud for <code>labels</code>.</li> <li>Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if colors is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if colors is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.</li> <li>Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>colors</code>.</li> <li>Sets the color of the line enclosing each sector. Defaults to the <code>paper_bgcolor</code> value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the line enclosing each sector.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.</li> <li>Sets the number of rendered sectors from any given <code>level</code>. Set <code>maxdepth</code> to -1 to render all the levels in the hierarchy.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If <code>ids</code> is filled, <code>parents</code> items are understood to be \"ids\" themselves. When <code>ids</code> is not set, plotly attempts to find matching items in <code>labels</code>, but beware they must be unique.</li> <li>Sets the source reference on Chart Studio Cloud for <code>parents</code>.</li> <li>sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.</li> <li>Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.</li> <li>Determines whether or not the sectors are reordered from largest to smallest.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each sector. If trace <code>textinfo</code> contains a text flag, these elements will be seen on the chart. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines which trace information appear on the graph.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>currentPath</code>, <code>root</code>, <code>entry</code>, <code>percentRoot</code>, <code>percentEntry</code>, <code>percentParent</code>, <code>label</code> and <code>value</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the values associated with each of the sectors. Use with <code>branchvalues</code> to determine how the values are summed.</li> <li>Sets the source reference on Chart Studio Cloud for <code>values</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Surface/","title":"Surface","text":""},{"location":"reference/configuration/Trace/Props/Surface/#surface","title":"Surface","text":""},{"location":"reference/configuration/Trace/Props/Surface/#overview","title":"Overview","text":"<p>The <code>surface</code> trace type is used to create 3D surface plots, which visualize 3D data on a continuous surface. Surface plots are ideal for visualizing the relationship between three variables, often showing the interaction of two independent variables on a dependent variable. These plots are useful for understanding the shape of the data in three dimensions.</p> <p>You can customize the colorscale, lighting, and contours to represent the surface data effectively.</p> <p>Common Uses</p> <ul> <li>3D Data Visualization: Visualizing three variables with two independent variables and one dependent variable.</li> <li>Topographical Maps: Representing elevations or contours of landscapes.</li> <li>Heatmaps in 3D: Showing intensity variations in a 3D format.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Surface/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Surface PlotSurface Plot with Custom ColorscaleSurface Plot with Contours <p>Here's a simple <code>surface</code> plot showing a continuous 3D surface:</p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: surface-data\n    args:\n      - echo\n      - |\n        x,y,z\n        1,1,1\n        1,2,2\n        1,3,3\n        2,1,4\n        2,2,5\n        2,3,6\n        3,1,7\n        3,2,8\n        3,3,9\ntraces:\n  - name: Simple Surface Plot\n    model: ${ref(surface-data)}\n    props:\n      type: surface\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\ncharts:\n  - name: Simple Surface Chart\n    traces:\n      - ${ref(Simple Surface Plot)}\n    layout:\n      title:\n        text: Simple Surface Plot&lt;br&gt;&lt;sub&gt;3D Surface Visualization&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>surface</code> plot with a custom colorscale applied to the surface:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: surface-data-colorscale\n    args:\n      - echo\n      - |\n        x,y,z\n        1,1,1\n        1,2,2\n        1,3,3\n        2,1,4\n        2,2,5\n        2,3,6\n        3,1,7\n        3,2,8\n        3,3,9\ntraces:\n  - name: Surface Plot with Custom Colorscale\n    model: ${ref(surface-data-colorscale)}\n    props:\n      type: surface\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      colorscale: \"Viridis\"\ncharts:\n  - name: Surface Chart with Custom Colorscale\n    traces:\n      - ${ref(Surface Plot with Custom Colorscale)}\n    layout:\n      title:\n        text: Surface Plot with Custom Colorscale&lt;br&gt;&lt;sub&gt;Custom Colorscale for 3D Surface&lt;/sub&gt;\n</code></pre> <p>Here's a <code>surface</code> plot where contour lines are added to the surface, highlighting the shape of the surface more clearly:</p> <p>Here's the code:</p> <pre><code>models:\n  - name: surface-data-contours\n    args:\n      - echo\n      - |\n        x,y,z\n        1,1,1\n        1,2,2\n        1,3,3\n        2,1,4\n        2,2,5\n        2,3,6\n        3,1,7\n        3,2,8\n        3,3,9\ntraces:\n  - name: Surface Plot with Contours\n    model: ${ref(surface-data-contours)}\n    props:\n      type: surface\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      contours:\n        z:\n          show: true\n          usecolormap: true\n          highlightcolor: \"#ff0000\"\ncharts:\n  - name: Surface Chart with Contours\n    traces:\n      - ${ref(Surface Plot with Contours)}\n    layout:\n      title:\n        text: Surface Plot with Contours&lt;br&gt;&lt;sub&gt;3D Surface with Contour Lines&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Surface/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>surface</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\ncauto: 'boolean' #(2)!\ncmax: 'number' #(3)!\ncmid: 'number' #(4)!\ncmin: 'number' #(5)!\ncoloraxis: 'string' #(6)!\ncolorbar:\n  bgcolor: 'any' #(7)!\n  bordercolor: 'any' #(8)!\n  borderwidth: 'number' #(9)!\n  exponentformat: 'any' #(10)!\n  len: 'number' #(11)!\n  lenmode: 'any' #(12)!\n  minexponent: 'number' #(13)!\n  nticks: 'integer' #(14)!\n  orientation: 'any' #(15)!\n  outlinecolor: 'any' #(16)!\n  outlinewidth: 'number' #(17)!\n  separatethousands: 'boolean' #(18)!\n  showexponent: 'any' #(19)!\n  showticklabels: 'boolean' #(20)!\n  showtickprefix: 'any' #(21)!\n  showticksuffix: 'any' #(22)!\n  thickness: 'number' #(23)!\n  thicknessmode: 'any' #(24)!\n  tickangle: 'number' #(25)!\n  tickcolor: 'any' #(26)!\n  tickfont:\n    color: any\n    family: 'string' #(27)!\n    lineposition: 'string' #(28)!\n    shadow: 'string' #(29)!\n    size: number\n    style: 'any' #(30)!\n    textcase: 'any' #(31)!\n    variant: 'any' #(32)!\n    weight: 'integer' #(33)!\n  tickformat: 'string' #(34)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(35)!\n  ticklabelposition: 'any' #(36)!\n  ticklabelstep: 'integer' #(37)!\n  ticklen: 'number' #(38)!\n  tickmode: 'any' #(39)!\n  tickprefix: 'string' #(40)!\n  ticks: 'any' #(41)!\n  ticksuffix: 'string' #(42)!\n  ticktext: 'array' #(43)!\n  ticktextsrc: 'string' #(44)!\n  tickvals: 'array' #(45)!\n  tickvalssrc: 'string' #(46)!\n  tickwidth: 'number' #(47)!\n  title:\n    font:\n      color: any\n      family: 'string' #(48)!\n      lineposition: 'string' #(49)!\n      shadow: 'string' #(50)!\n      size: number\n      style: 'any' #(51)!\n      textcase: 'any' #(52)!\n      variant: 'any' #(53)!\n      weight: 'integer' #(54)!\n    side: 'any' #(55)!\n    text: 'string' #(56)!\n  x: 'number' #(57)!\n  xanchor: 'any' #(58)!\n  xpad: 'number' #(59)!\n  xref: 'any' #(60)!\n  y: 'number' #(61)!\n  yanchor: 'any' #(62)!\n  ypad: 'number' #(63)!\n  yref: 'any' #(64)!\ncolorscale: 'any' #(65)!\nconnectgaps: 'boolean' #(66)!\ncontours:\n  x:\n    color: 'any' #(67)!\n    end: 'number' #(68)!\n    highlight: 'boolean' #(69)!\n    highlightcolor: 'any' #(70)!\n    highlightwidth: 'number' #(71)!\n    project:\n      x: 'boolean' #(72)!\n      y: 'boolean' #(73)!\n      z: 'boolean' #(74)!\n    show: 'boolean' #(75)!\n    size: 'number' #(76)!\n    start: 'number' #(77)!\n    usecolormap: 'boolean' #(78)!\n    width: 'number' #(79)!\n  y:\n    color: 'any' #(80)!\n    end: 'number' #(81)!\n    highlight: 'boolean' #(82)!\n    highlightcolor: 'any' #(83)!\n    highlightwidth: 'number' #(84)!\n    project:\n      x: 'boolean' #(85)!\n      y: 'boolean' #(86)!\n      z: 'boolean' #(87)!\n    show: 'boolean' #(88)!\n    size: 'number' #(89)!\n    start: 'number' #(90)!\n    usecolormap: 'boolean' #(91)!\n    width: 'number' #(92)!\n  z:\n    color: 'any' #(93)!\n    end: 'number' #(94)!\n    highlight: 'boolean' #(95)!\n    highlightcolor: 'any' #(96)!\n    highlightwidth: 'number' #(97)!\n    project:\n      x: 'boolean' #(98)!\n      y: 'boolean' #(99)!\n      z: 'boolean' #(100)!\n    show: 'boolean' #(101)!\n    size: 'number' #(102)!\n    start: 'number' #(103)!\n    usecolormap: 'boolean' #(104)!\n    width: 'number' #(105)!\ncustomdata: 'array' #(106)!\ncustomdatasrc: 'string' #(107)!\nhidesurface: 'boolean' #(108)!\nhoverinfo: 'array' #(109)!\nhoverinfosrc: 'string' #(110)!\nhoverlabel:\n  align: 'array' #(111)!\n  alignsrc: 'string' #(112)!\n  bgcolor: 'color | array' #(113)!\n  bgcolorsrc: 'string' #(114)!\n  bordercolor: 'color | array' #(115)!\n  bordercolorsrc: 'string' #(116)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(117)!\n    family: 'string | array' #(118)!\n    familysrc: 'string' #(119)!\n    lineposition: 'array' #(120)!\n    linepositionsrc: 'string' #(121)!\n    shadow: 'string | array' #(122)!\n    shadowsrc: 'string' #(123)!\n    size: number | array\n    sizesrc: 'string' #(124)!\n    style: 'array' #(125)!\n    stylesrc: 'string' #(126)!\n    textcase: 'array' #(127)!\n    textcasesrc: 'string' #(128)!\n    variant: 'array' #(129)!\n    variantsrc: 'string' #(130)!\n    weight: 'integer | array' #(131)!\n    weightsrc: 'string' #(132)!\n  namelength: 'integer | array' #(133)!\n  namelengthsrc: 'string' #(134)!\nhovertemplate: 'string | array' #(135)!\nhovertemplatesrc: 'string' #(136)!\nhovertext: 'string | array' #(137)!\nhovertextsrc: 'string' #(138)!\nids: 'array' #(139)!\nidssrc: 'string' #(140)!\nlegend: 'string' #(141)!\nlegendgroup: 'string' #(142)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(143)!\n    lineposition: 'string' #(144)!\n    shadow: 'string' #(145)!\n    size: number\n    style: 'any' #(146)!\n    textcase: 'any' #(147)!\n    variant: 'any' #(148)!\n    weight: 'integer' #(149)!\n  text: 'string' #(150)!\nlegendrank: 'number' #(151)!\nlegendwidth: 'number' #(152)!\nlighting:\n  ambient: 'number' #(153)!\n  diffuse: 'number' #(154)!\n  fresnel: 'number' #(155)!\n  roughness: 'number' #(156)!\n  specular: 'number' #(157)!\nlightposition:\n  x: 'number' #(158)!\n  y: 'number' #(159)!\n  z: 'number' #(160)!\nmetasrc: 'string' #(161)!\nname: 'string' #(162)!\nopacity: 'number' #(163)!\nreversescale: 'boolean' #(164)!\nscene: 'string' #(165)!\nshowlegend: 'boolean' #(166)!\nshowscale: 'boolean' #(167)!\nstream:\n  maxpoints: 'number' #(168)!\n  token: 'string' #(169)!\nsurfacecolor: 'array' #(170)!\nsurfacecolorsrc: 'string' #(171)!\ntext: 'string | array' #(172)!\ntextsrc: 'string' #(173)!\ntype: surface\nuid: 'string' #(174)!\nvisible: 'any' #(175)!\nx: 'array' #(176)!\nxcalendar: 'any' #(177)!\nxhoverformat: 'string' #(178)!\nxsrc: 'string' #(179)!\ny: 'array' #(180)!\nycalendar: 'any' #(181)!\nyhoverformat: 'string' #(182)!\nysrc: 'string' #(183)!\nz: 'array' #(184)!\nzcalendar: 'any' #(185)!\nzhoverformat: 'string' #(186)!\nzsrc: 'string' #(187)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in <code>cmin</code> and <code>cmax</code> Defaults to <code>false</code> when <code>cmin</code> and <code>cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, <code>cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>cmin</code> and/or <code>cmax</code> to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when <code>cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, <code>cmax</code> must be set as well.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>cmin</code> and <code>cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Determines whether or not gaps (i.e. {nan} or missing values) in the <code>z</code> data are filled in.</li> <li>Sets the color of the contour lines.</li> <li>Sets the end contour level value. Must be more than <code>contours.start</code></li> <li>Determines whether or not contour lines about the x dimension are highlighted on hover.</li> <li>Sets the color of the highlighted contour lines.</li> <li>Sets the width of the highlighted contour lines.</li> <li>Determines whether or not these contour lines are projected on the x plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not these contour lines are projected on the y plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not these contour lines are projected on the z plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not contour lines about the x dimension are drawn.</li> <li>Sets the step between each contour level. Must be positive.</li> <li>Sets the starting contour level value. Must be less than <code>contours.end</code></li> <li>An alternate to color. Determines whether or not the contour lines are colored using the trace colorscale.</li> <li>Sets the width of the contour lines.</li> <li>Sets the color of the contour lines.</li> <li>Sets the end contour level value. Must be more than <code>contours.start</code></li> <li>Determines whether or not contour lines about the y dimension are highlighted on hover.</li> <li>Sets the color of the highlighted contour lines.</li> <li>Sets the width of the highlighted contour lines.</li> <li>Determines whether or not these contour lines are projected on the x plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not these contour lines are projected on the y plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not these contour lines are projected on the z plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not contour lines about the y dimension are drawn.</li> <li>Sets the step between each contour level. Must be positive.</li> <li>Sets the starting contour level value. Must be less than <code>contours.end</code></li> <li>An alternate to color. Determines whether or not the contour lines are colored using the trace colorscale.</li> <li>Sets the width of the contour lines.</li> <li>Sets the color of the contour lines.</li> <li>Sets the end contour level value. Must be more than <code>contours.start</code></li> <li>Determines whether or not contour lines about the z dimension are highlighted on hover.</li> <li>Sets the color of the highlighted contour lines.</li> <li>Sets the width of the highlighted contour lines.</li> <li>Determines whether or not these contour lines are projected on the x plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not these contour lines are projected on the y plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not these contour lines are projected on the z plane. If <code>highlight</code> is set to true (the default), the projected lines are shown on hover. If <code>show</code> is set to true, the projected lines are shown in permanence.</li> <li>Determines whether or not contour lines about the z dimension are drawn.</li> <li>Sets the step between each contour level. Must be positive.</li> <li>Sets the starting contour level value. Must be less than <code>contours.end</code></li> <li>An alternate to color. Determines whether or not the contour lines are colored using the trace colorscale.</li> <li>Sets the width of the contour lines.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Determines whether or not a surface is drawn. For example, set <code>hidesurface</code> to false <code>contours.x.show</code> to true and <code>contours.y.show</code> to true to draw a wire frame plot.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Ambient light increases overall color visibility but can wash out the image.</li> <li>Represents the extent that incident rays are reflected in a range of angles.</li> <li>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</li> <li>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</li> <li>Represents the level that incident rays are reflected in a single direction, causing shine.</li> <li>Numeric vector, representing the X coordinate for each vertex.</li> <li>Numeric vector, representing the Y coordinate for each vertex.</li> <li>Numeric vector, representing the Z coordinate for each vertex.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the surface. Please note that in the case of using high <code>opacity</code> values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</li> <li>Reverses the color mapping if true. If true, <code>cmin</code> will correspond to the last color in the array and <code>cmax</code> will correspond to the first color.</li> <li>Sets a reference between this trace's 3D coordinate system and a 3D scene. If scene (the default value), the (x,y,z) coordinates refer to <code>layout.scene</code>. If scene2, the (x,y,z) coordinates refer to <code>layout.scene2</code>, and so on.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the surface color values, used for setting a color scale independent of <code>z</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>surfacecolor</code>.</li> <li>Sets the text elements associated with each z value. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the x coordinates.</li> <li>Sets the calendar system to use with <code>x</code> date data.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates.</li> <li>Sets the calendar system to use with <code>y</code> date data.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the z coordinates.</li> <li>Sets the calendar system to use with <code>z</code> date data.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>zaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Treemap/","title":"Treemap","text":""},{"location":"reference/configuration/Trace/Props/Treemap/#treemap","title":"Treemap","text":""},{"location":"reference/configuration/Trace/Props/Treemap/#overview","title":"Overview","text":"<p>The <code>treemap</code> trace type is used to create treemap charts, which visualize hierarchical data through nested rectangles. Each branch of the hierarchy is represented as a rectangle, with smaller rectangles inside representing sub-branches. Treemaps are useful for visualizing part-to-whole relationships and comparing the size of different categories.</p> <p>You can customize the colors, labels, and hierarchy to represent your data effectively.</p> <p>Common Uses</p> <ul> <li>Hierarchical Data Visualization: Displaying nested data as a set of rectangles.</li> <li>Part-to-Whole Relationships: Visualizing how different categories contribute to the whole.</li> <li>Categorical Data: Showing categorical breakdowns with nested structures.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p> <p>Unexpected Behavior</p> <p>The terminal values of a <code>treemap</code> must be unique. In other words- if you create a treemap with multiple parent-child trees, the values must be unique across all squares that have no children.</p>"},{"location":"reference/configuration/Trace/Props/Treemap/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Treemap PlotTreemap Plot with Custom ColorsTreemap Plot with Custom Tiling <p>Here's a simple <code>treemap</code> plot showing a hierarchy of categories:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: treemap-data\n    args:\n      - echo\n      - |\n        labels,parents,values\n        Total,,100\n        A,Total,40\n        B,Total,30\n        C,Total,30\n        D,A,10\n        E,A,20\n        F,B,10\ntraces:\n  - name: Simple Treemap Plot\n    model: ${ref(treemap-data)}\n    props:\n      type: treemap\n      labels: ?{labels}\n      parents: ?{parents}\n      values: ?{\"values\"}\n      marker: \n        colorscale: Blackbody\n      textposition: \"middle center\"\n      texttemplate: \"&lt;b&gt;%{label}&lt;/b&gt;\"\n      textfont:\n        size: 12\ncharts:\n  - name: Simple Treemap Chart\n    traces:\n      - ${ref(Simple Treemap Plot)}\n    layout:\n      title:\n        text: Simple Treemap Chart&lt;br&gt;&lt;sub&gt;Hierarchical Data Visualization&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>treemap</code> plot where each category has custom colors:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: treemap-data-colors\n    args:\n      - echo\n      - |\n        labels,parents,values,colors\n        Total,,100,#1f77b4\n        A,Total,40,#ff7f0e\n        B,Total,30,#2ca02c\n        C,Total,30,#d62728\n        D,A,10,#9467bd\n        E,A,20,#8c564b\n        F,B,10,#e377c2\ntraces:\n  - name: Treemap Plot with Custom Colors\n    model: ${ref(treemap-data-colors)}\n    props:\n      type: treemap\n      labels: ?{labels}\n      parents: ?{parents}\n      values: ?{\"values\"}\n      marker:\n        colors: ?{colors}\n        line: \n          color: black\ncharts:\n  - name: Treemap Chart with Custom Colors\n    traces:\n      - ${ref(Treemap Plot with Custom Colors)}\n    layout:\n      title:\n        text: Treemap Plot with Custom Colors&lt;br&gt;&lt;sub&gt;Custom Colors for Each Category&lt;/sub&gt;\n</code></pre> <p>Here's a <code>treemap</code> plot where the tiling algorithm is customized:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: treemap-data-tiling\n    args:\n      - echo\n      - |\n        labels,parents,values\n        Total,,100\n        A,Total,40\n        B,Total,30\n        C,Total,30\n        D,A,15\n        E,A,25\n        F,B,10\n        G,B,20\n        H,C,15\n        I,C,15\ntraces:\n  - name: Treemap Plot with Custom Tiling\n    model: ${ref(treemap-data-tiling)}\n    props:\n      type: treemap\n      labels: ?{labels}\n      parents: ?{parents}\n      values: ?{\"values\"}\n      tiling:\n        packing: binary\n        squarifyratio: 1.5\ncharts:\n  - name: Treemap Chart with Custom Tiling\n    traces:\n      - ${ref(Treemap Plot with Custom Tiling)}\n    layout:\n      title:\n        text: Treemap Plot with Custom Tiling&lt;br&gt;&lt;sub&gt;Binary Packing and Custom Squarify Ratio&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Treemap/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>treemap</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>branchvalues: 'any' #(1)!\ncount: 'string' #(2)!\ncustomdata: 'array' #(3)!\ncustomdatasrc: 'string' #(4)!\ndomain:\n  column: 'integer' #(5)!\n  row: 'integer' #(6)!\n  x: 'array' #(7)!\n  y: 'array' #(8)!\nhoverinfo: 'array' #(9)!\nhoverinfosrc: 'string' #(10)!\nhoverlabel:\n  align: 'array' #(11)!\n  alignsrc: 'string' #(12)!\n  bgcolor: 'color | array' #(13)!\n  bgcolorsrc: 'string' #(14)!\n  bordercolor: 'color | array' #(15)!\n  bordercolorsrc: 'string' #(16)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(17)!\n    family: 'string | array' #(18)!\n    familysrc: 'string' #(19)!\n    lineposition: 'array' #(20)!\n    linepositionsrc: 'string' #(21)!\n    shadow: 'string | array' #(22)!\n    shadowsrc: 'string' #(23)!\n    size: number | array\n    sizesrc: 'string' #(24)!\n    style: 'array' #(25)!\n    stylesrc: 'string' #(26)!\n    textcase: 'array' #(27)!\n    textcasesrc: 'string' #(28)!\n    variant: 'array' #(29)!\n    variantsrc: 'string' #(30)!\n    weight: 'integer | array' #(31)!\n    weightsrc: 'string' #(32)!\n  namelength: 'integer | array' #(33)!\n  namelengthsrc: 'string' #(34)!\nhovertemplate: 'string | array' #(35)!\nhovertemplatesrc: 'string' #(36)!\nhovertext: 'string | array' #(37)!\nhovertextsrc: 'string' #(38)!\nids: 'array' #(39)!\nidssrc: 'string' #(40)!\ninsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(41)!\n  family: 'string | array' #(42)!\n  familysrc: 'string' #(43)!\n  lineposition: 'array' #(44)!\n  linepositionsrc: 'string' #(45)!\n  shadow: 'string | array' #(46)!\n  shadowsrc: 'string' #(47)!\n  size: number | array\n  sizesrc: 'string' #(48)!\n  style: 'array' #(49)!\n  stylesrc: 'string' #(50)!\n  textcase: 'array' #(51)!\n  textcasesrc: 'string' #(52)!\n  variant: 'array' #(53)!\n  variantsrc: 'string' #(54)!\n  weight: 'integer | array' #(55)!\n  weightsrc: 'string' #(56)!\nlabels: 'array' #(57)!\nlabelssrc: 'string' #(58)!\nlegend: 'string' #(59)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(60)!\n    lineposition: 'string' #(61)!\n    shadow: 'string' #(62)!\n    size: number\n    style: 'any' #(63)!\n    textcase: 'any' #(64)!\n    variant: 'any' #(65)!\n    weight: 'integer' #(66)!\n  text: 'string' #(67)!\nlegendrank: 'number' #(68)!\nlegendwidth: 'number' #(69)!\nmarker:\n  autocolorscale: 'boolean' #(70)!\n  cauto: 'boolean' #(71)!\n  cmax: 'number' #(72)!\n  cmid: 'number' #(73)!\n  cmin: 'number' #(74)!\n  coloraxis: 'string' #(75)!\n  colorbar:\n    bgcolor: 'any' #(76)!\n    bordercolor: 'any' #(77)!\n    borderwidth: 'number' #(78)!\n    exponentformat: 'any' #(79)!\n    len: 'number' #(80)!\n    lenmode: 'any' #(81)!\n    minexponent: 'number' #(82)!\n    nticks: 'integer' #(83)!\n    orientation: 'any' #(84)!\n    outlinecolor: 'any' #(85)!\n    outlinewidth: 'number' #(86)!\n    separatethousands: 'boolean' #(87)!\n    showexponent: 'any' #(88)!\n    showticklabels: 'boolean' #(89)!\n    showtickprefix: 'any' #(90)!\n    showticksuffix: 'any' #(91)!\n    thickness: 'number' #(92)!\n    thicknessmode: 'any' #(93)!\n    tickangle: 'number' #(94)!\n    tickcolor: 'any' #(95)!\n    tickfont:\n      color: any\n      family: 'string' #(96)!\n      lineposition: 'string' #(97)!\n      shadow: 'string' #(98)!\n      size: number\n      style: 'any' #(99)!\n      textcase: 'any' #(100)!\n      variant: 'any' #(101)!\n      weight: 'integer' #(102)!\n    tickformat: 'string' #(103)!\n    tickformatstops: array\n    ticklabeloverflow: 'any' #(104)!\n    ticklabelposition: 'any' #(105)!\n    ticklabelstep: 'integer' #(106)!\n    ticklen: 'number' #(107)!\n    tickmode: 'any' #(108)!\n    tickprefix: 'string' #(109)!\n    ticks: 'any' #(110)!\n    ticksuffix: 'string' #(111)!\n    ticktext: 'array' #(112)!\n    ticktextsrc: 'string' #(113)!\n    tickvals: 'array' #(114)!\n    tickvalssrc: 'string' #(115)!\n    tickwidth: 'number' #(116)!\n    title:\n      font:\n        color: any\n        family: 'string' #(117)!\n        lineposition: 'string' #(118)!\n        shadow: 'string' #(119)!\n        size: number\n        style: 'any' #(120)!\n        textcase: 'any' #(121)!\n        variant: 'any' #(122)!\n        weight: 'integer' #(123)!\n      side: 'any' #(124)!\n      text: 'string' #(125)!\n    x: 'number' #(126)!\n    xanchor: 'any' #(127)!\n    xpad: 'number' #(128)!\n    xref: 'any' #(129)!\n    y: 'number' #(130)!\n    yanchor: 'any' #(131)!\n    ypad: 'number' #(132)!\n    yref: 'any' #(133)!\n  colors: 'array' #(134)!\n  colorscale: 'any' #(135)!\n  colorssrc: 'string' #(136)!\n  cornerradius: 'number' #(137)!\n  depthfade: 'any' #(138)!\n  line:\n    color: 'color | array' #(139)!\n    colorsrc: 'string' #(140)!\n    width: 'number | array' #(141)!\n    widthsrc: 'string' #(142)!\n  pad:\n    b: 'number' #(143)!\n    l: 'number' #(144)!\n    r: 'number' #(145)!\n    t: 'number' #(146)!\n  pattern:\n    bgcolor: 'color | array' #(147)!\n    bgcolorsrc: 'string' #(148)!\n    fgcolor: 'color | array' #(149)!\n    fgcolorsrc: 'string' #(150)!\n    fgopacity: 'number' #(151)!\n    fillmode: 'any' #(152)!\n    shape: 'array' #(153)!\n    shapesrc: 'string' #(154)!\n    size: 'number | array' #(155)!\n    sizesrc: 'string' #(156)!\n    solidity: 'number | array' #(157)!\n    soliditysrc: 'string' #(158)!\n  reversescale: 'boolean' #(159)!\n  showscale: 'boolean' #(160)!\nmaxdepth: 'integer' #(161)!\nmetasrc: 'string' #(162)!\nname: 'string' #(163)!\nopacity: 'number' #(164)!\noutsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(165)!\n  family: 'string | array' #(166)!\n  familysrc: 'string' #(167)!\n  lineposition: 'array' #(168)!\n  linepositionsrc: 'string' #(169)!\n  shadow: 'string | array' #(170)!\n  shadowsrc: 'string' #(171)!\n  size: number | array\n  sizesrc: 'string' #(172)!\n  style: 'array' #(173)!\n  stylesrc: 'string' #(174)!\n  textcase: 'array' #(175)!\n  textcasesrc: 'string' #(176)!\n  variant: 'array' #(177)!\n  variantsrc: 'string' #(178)!\n  weight: 'integer | array' #(179)!\n  weightsrc: 'string' #(180)!\nparents: 'array' #(181)!\nparentssrc: 'string' #(182)!\npathbar:\n  edgeshape: 'any' #(183)!\n  side: 'any' #(184)!\n  textfont:\n    color: color | array\n    colorsrc: 'string' #(185)!\n    family: 'string | array' #(186)!\n    familysrc: 'string' #(187)!\n    lineposition: 'array' #(188)!\n    linepositionsrc: 'string' #(189)!\n    shadow: 'string | array' #(190)!\n    shadowsrc: 'string' #(191)!\n    size: number | array\n    sizesrc: 'string' #(192)!\n    style: 'array' #(193)!\n    stylesrc: 'string' #(194)!\n    textcase: 'array' #(195)!\n    textcasesrc: 'string' #(196)!\n    variant: 'array' #(197)!\n    variantsrc: 'string' #(198)!\n    weight: 'integer | array' #(199)!\n    weightsrc: 'string' #(200)!\n  thickness: 'number' #(201)!\n  visible: 'boolean' #(202)!\nroot:\n  color: 'any' #(203)!\nsort: 'boolean' #(204)!\nstream:\n  maxpoints: 'number' #(205)!\n  token: 'string' #(206)!\ntext: 'array' #(207)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(208)!\n  family: 'string | array' #(209)!\n  familysrc: 'string' #(210)!\n  lineposition: 'array' #(211)!\n  linepositionsrc: 'string' #(212)!\n  shadow: 'string | array' #(213)!\n  shadowsrc: 'string' #(214)!\n  size: number | array\n  sizesrc: 'string' #(215)!\n  style: 'array' #(216)!\n  stylesrc: 'string' #(217)!\n  textcase: 'array' #(218)!\n  textcasesrc: 'string' #(219)!\n  variant: 'array' #(220)!\n  variantsrc: 'string' #(221)!\n  weight: 'integer | array' #(222)!\n  weightsrc: 'string' #(223)!\ntextinfo: 'string' #(224)!\ntextposition: 'any' #(225)!\ntextsrc: 'string' #(226)!\ntexttemplate: 'string | array' #(227)!\ntexttemplatesrc: 'string' #(228)!\ntiling:\n  flip: 'string' #(229)!\n  packing: 'any' #(230)!\n  pad: 'number' #(231)!\n  squarifyratio: 'number' #(232)!\ntype: treemap\nuid: 'string' #(233)!\nvalues: 'array' #(234)!\nvaluessrc: 'string' #(235)!\nvisible: 'any' #(236)!\n</code></pre> <ol> <li>Determines how the items in <code>values</code> are summed. When set to total, items in <code>values</code> are taken to be value of all its descendants. When set to remainder, items in <code>values</code> corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</li> <li>Determines default for <code>values</code> when it is not provided, by inferring a 1 for each of the leaves and/or branches, otherwise 0.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>If there is a layout grid, use the domain for this column in the grid for this treemap trace .</li> <li>If there is a layout grid, use the domain for this row in the grid for this treemap trace .</li> <li>Sets the horizontal domain of this treemap trace (in plot fraction).</li> <li>Sets the vertical domain of this treemap trace (in plot fraction).</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>currentPath</code>, <code>root</code>, <code>entry</code>, <code>percentRoot</code>, <code>percentEntry</code> and <code>percentParent</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the labels of each of the sectors.</li> <li>Sets the source reference on Chart Studio Cloud for <code>labels</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>marker.colorscale</code>. Has an effect only if colors is set to a numerical array. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in <code>marker.cmin</code> and <code>marker.cmax</code> Has an effect only if colors is set to a numerical array. Defaults to <code>false</code> when <code>marker.cmin</code> and <code>marker.cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, <code>marker.cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>marker.cmin</code> and/or <code>marker.cmax</code> to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when <code>marker.cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, <code>marker.cmax</code> must be set as well.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.</li> <li>Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>marker.cmin</code> and <code>marker.cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the source reference on Chart Studio Cloud for <code>colors</code>.</li> <li>Sets the maximum rounding of corners (in px).</li> <li>Determines if the sector colors are faded towards the background from the leaves up to the headers. This option is unavailable when a <code>colorscale</code> is present, defaults to false when <code>marker.colors</code> is set, but otherwise defaults to true. When set to reversed, the fading direction is inverted, that is the top elements within hierarchy are drawn with fully saturated colors while the leaves are faded towards the background color.</li> <li>Sets the color of the line enclosing each sector. Defaults to the <code>paper_bgcolor</code> value.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>Sets the width (in px) of the line enclosing each sector.</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the padding form the bottom (in px).</li> <li>Sets the padding form the left (in px).</li> <li>Sets the padding form the right (in px).</li> <li>Sets the padding form the top (in px).</li> <li>When there is no colorscale sets the color of background pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is overlay. Otherwise, defaults to a transparent background.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>When there is no colorscale sets the color of foreground pattern fill. Defaults to a <code>marker.color</code> background when <code>fillmode</code> is replace. Otherwise, defaults to dark grey or white to increase contrast with the <code>bgcolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>fgcolor</code>.</li> <li>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when <code>fillmode</code> is overlay. Otherwise, defaults to 1.</li> <li>Determines whether <code>marker.color</code> should be used as a default to <code>bgcolor</code> or a <code>fgcolor</code>.</li> <li>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shape</code>.</li> <li>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</li> <li>Sets the source reference on Chart Studio Cloud for <code>solidity</code>.</li> <li>Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, <code>marker.cmin</code> will correspond to the last color in the array and <code>marker.cmax</code> will correspond to the first color.</li> <li>Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.</li> <li>Sets the number of rendered sectors from any given <code>level</code>. Set <code>maxdepth</code> to -1 to render all the levels in the hierarchy.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If <code>ids</code> is filled, <code>parents</code> items are understood to be \"ids\" themselves. When <code>ids</code> is not set, plotly attempts to find matching items in <code>labels</code>, but beware they must be unique.</li> <li>Sets the source reference on Chart Studio Cloud for <code>parents</code>.</li> <li>Determines which shape is used for edges between <code>barpath</code> labels.</li> <li>Determines on which side of the the treemap the <code>pathbar</code> should be presented.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the thickness of <code>pathbar</code> (in px). If not specified the <code>pathbar.textfont.size</code> is used with 3 pixles extra padding on each side.</li> <li>Determines if the path bar is drawn i.e. outside the trace <code>domain</code> and with one pixel gap.</li> <li>sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.</li> <li>Determines whether or not the sectors are reordered from largest to smallest.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each sector. If trace <code>textinfo</code> contains a text flag, these elements will be seen on the chart. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines which trace information appear on the graph.</li> <li>Sets the positions of the <code>text</code> elements.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>currentPath</code>, <code>root</code>, <code>entry</code>, <code>percentRoot</code>, <code>percentEntry</code>, <code>percentParent</code>, <code>label</code> and <code>value</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Determines if the positions obtained from solver are flipped on each axis.</li> <li>Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling</li> <li>Sets the inner padding (in px).</li> <li>When using squarify <code>packing</code> algorithm, according to https://github.com/d3/d3-hierarchy/blob/v3.1.1/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using squarify, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the values associated with each of the sectors. Use with <code>branchvalues</code> to determine how the values are summed.</li> <li>Sets the source reference on Chart Studio Cloud for <code>values</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> </ol>"},{"location":"reference/configuration/Trace/Props/Violin/","title":"Violin","text":""},{"location":"reference/configuration/Trace/Props/Violin/#violin","title":"Violin","text":""},{"location":"reference/configuration/Trace/Props/Violin/#overview","title":"Overview","text":"<p>The <code>violin</code> trace type is used to create violin plots, which visualize the distribution of numerical data. Violin plots combine aspects of box plots and density plots to show the distribution of the data, including its probability density. They are ideal for comparing distributions between different categories.</p> <p>You can customize the orientation, kernel density estimation, and colors to represent the distribution data effectively.</p> <p>Common Uses</p> <ul> <li>Distribution Analysis: Visualizing the distribution of a dataset, similar to box plots but with additional information about the density of data.</li> <li>Comparing Categories: Comparing the distribution of numerical data across different categories.</li> <li>Outlier Detection: Identifying outliers and the shape of the data distribution.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Violin/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Violin PlotViolin Plot with Box OverlayViolin Plot with Split Categories <p>Here's a simple <code>violin</code> plot showing the distribution of values for two categories:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: violin-data\n    args:\n      - echo\n      - |\n        category,value\n        A,23\n        A,25\n        A,27\n        B,30\n        B,35\n        B,28\ntraces:\n  - name: Simple Violin Plot\n    model: ${ref(violin-data)}\n    props:\n      type: violin\n      x: ?{category}\n      y: ?{value}\ncharts:\n  - name: Simple Violin Chart\n    traces:\n      - ${ref(Simple Violin Plot)}\n    layout:\n      title:\n        text: Simple Violin Plot&lt;br&gt;&lt;sub&gt;Distribution of Values by Category&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>violin</code> plot with a box plot overlay and individual data points:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: violin-data-box\n    args:\n      - echo\n      - |\n        category,value\n        A,23\n        A,25\n        A,27\n        B,30\n        B,35\n        B,28\ntraces:\n  - name: Violin Plot with Box\n    model: ${ref(violin-data-box)}\n    cohort_on: category\n    props:\n      type: violin\n      y: ?{category}\n      x: ?{value}\n      orientation: h\n      box: \n        visible: true\n      points: \"all\"\n      marker:\n        symbol: \"cross-dot\"\ncharts:\n  - name: Violin Chart with Box\n    traces:\n      - ${ref(Violin Plot with Box)}\n    layout:\n      title:\n        text: Violin Plot with Box Overlay&lt;br&gt;&lt;sub&gt;Distribution with Box Plot and Data Points&lt;/sub&gt;\n</code></pre> <p>Here's a <code>violin</code> plot where the data is split by two categories, providing a side-by-side comparison of distributions:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: violin-data-split\n    args:\n      - echo\n      - |\n        category,sub_category,value\n        A,X,23\n        A,Y,25\n        A,Y,70\n        A,Y,15\n        A,X,27\n        A,X,13\n        A,X,21\n        A,X,81\n        B,X,30\n        B,X,35\n        B,X,4\n        B,Y,35\n        B,Y,6\n        B,Y,5\n        B,X,28\ntraces:\n  - name: Violin Plot Category X\n    model: ${ref(violin-data-split)}\n    cohort_on: sub_category\n    props:\n      type: violin\n      side: positive\n      x: ?{category}\n      y: ?{value}\n    filters: \n      - ?{ sub_category = 'X'}\n  - name: Violin Plot Category Y\n    model: ${ref(violin-data-split)}\n    cohort_on: sub_category\n    props:\n      type: violin\n      side: negative\n      x: ?{category}\n      y: ?{value}\n    filters: \n      - ?{ sub_category = 'Y'}\ncharts:\n  - name: Violin Chart with Split Categories\n    traces:\n      - ${ref(Violin Plot Category Y)}\n      - ${ref(Violin Plot Category X)}\n    layout:\n      title:\n        text: Violin Plot with Split Categories&lt;br&gt;&lt;sub&gt;Side-by-Side Comparison of Distributions&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Violin/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>violin</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>alignmentgroup: 'string' #(1)!\nbandwidth: 'number' #(2)!\nbox:\n  fillcolor: 'any' #(3)!\n  line:\n    color: 'any' #(4)!\n    width: 'number' #(5)!\n  visible: 'boolean' #(6)!\n  width: 'number' #(7)!\ncustomdata: 'array' #(8)!\ncustomdatasrc: 'string' #(9)!\nfillcolor: 'any' #(10)!\nhoverinfo: 'array' #(11)!\nhoverinfosrc: 'string' #(12)!\nhoverlabel:\n  align: 'array' #(13)!\n  alignsrc: 'string' #(14)!\n  bgcolor: 'color | array' #(15)!\n  bgcolorsrc: 'string' #(16)!\n  bordercolor: 'color | array' #(17)!\n  bordercolorsrc: 'string' #(18)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(19)!\n    family: 'string | array' #(20)!\n    familysrc: 'string' #(21)!\n    lineposition: 'array' #(22)!\n    linepositionsrc: 'string' #(23)!\n    shadow: 'string | array' #(24)!\n    shadowsrc: 'string' #(25)!\n    size: number | array\n    sizesrc: 'string' #(26)!\n    style: 'array' #(27)!\n    stylesrc: 'string' #(28)!\n    textcase: 'array' #(29)!\n    textcasesrc: 'string' #(30)!\n    variant: 'array' #(31)!\n    variantsrc: 'string' #(32)!\n    weight: 'integer | array' #(33)!\n    weightsrc: 'string' #(34)!\n  namelength: 'integer | array' #(35)!\n  namelengthsrc: 'string' #(36)!\nhoveron: 'string' #(37)!\nhovertemplate: 'string | array' #(38)!\nhovertemplatesrc: 'string' #(39)!\nhovertext: 'string | array' #(40)!\nhovertextsrc: 'string' #(41)!\nids: 'array' #(42)!\nidssrc: 'string' #(43)!\njitter: 'number' #(44)!\nlegend: 'string' #(45)!\nlegendgroup: 'string' #(46)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(47)!\n    lineposition: 'string' #(48)!\n    shadow: 'string' #(49)!\n    size: number\n    style: 'any' #(50)!\n    textcase: 'any' #(51)!\n    variant: 'any' #(52)!\n    weight: 'integer' #(53)!\n  text: 'string' #(54)!\nlegendrank: 'number' #(55)!\nlegendwidth: 'number' #(56)!\nline:\n  color: 'any' #(57)!\n  width: 'number' #(58)!\nmarker:\n  angle: 'number' #(59)!\n  color: 'any' #(60)!\n  line:\n    color: 'any' #(61)!\n    outliercolor: 'any' #(62)!\n    outlierwidth: 'number' #(63)!\n    width: 'number' #(64)!\n  opacity: 'number' #(65)!\n  outliercolor: 'any' #(66)!\n  size: 'number' #(67)!\n  symbol: 'any' #(68)!\nmeanline:\n  color: 'any' #(69)!\n  visible: 'boolean' #(70)!\n  width: 'number' #(71)!\nmetasrc: 'string' #(72)!\nname: 'string' #(73)!\noffsetgroup: 'string' #(74)!\nopacity: 'number' #(75)!\norientation: 'any' #(76)!\npointpos: 'number' #(77)!\npoints: 'any' #(78)!\nquartilemethod: 'any' #(79)!\nscalegroup: 'string' #(80)!\nscalemode: 'any' #(81)!\nselected:\n  marker:\n    color: 'any' #(82)!\n    opacity: 'number' #(83)!\n    size: 'number' #(84)!\nshowlegend: 'boolean' #(85)!\nside: 'any' #(86)!\nspan: 'array' #(87)!\nspanmode: 'any' #(88)!\nstream:\n  maxpoints: 'number' #(89)!\n  token: 'string' #(90)!\ntext: 'string | array' #(91)!\ntextsrc: 'string' #(92)!\ntype: violin\nuid: 'string' #(93)!\nunselected:\n  marker:\n    color: 'any' #(94)!\n    opacity: 'number' #(95)!\n    size: 'number' #(96)!\nvisible: 'any' #(97)!\nwidth: 'number' #(98)!\nx: 'array' #(99)!\nxaxis: 'string' #(100)!\nxhoverformat: 'string' #(101)!\nxsrc: 'string' #(102)!\ny: 'array' #(103)!\nyaxis: 'string' #(104)!\nyhoverformat: 'string' #(105)!\nysrc: 'string' #(106)!\nzorder: 'integer' #(107)!\n</code></pre> <ol> <li>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</li> <li>Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.</li> <li>Sets the inner box plot fill color.</li> <li>Sets the inner box plot bounding line color.</li> <li>Sets the inner box plot bounding line width.</li> <li>Determines if an miniature box plot is drawn inside the violins. </li> <li>Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the amount of jitter in the sample points drawn. If 0, the sample points align along the distribution axis. If 1, the sample points are drawn in a random jitter of width equal to the width of the violins.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Sets the color of line bounding the violin(s).</li> <li>Sets the width (in px) of line bounding the violin(s).</li> <li>Sets the marker angle in respect to <code>angleref</code>.</li> <li>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.cmin</code> and <code>marker.cmax</code> if set.</li> <li>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to <code>marker.line.cmin</code> and <code>marker.line.cmax</code> if set.</li> <li>Sets the border line color of the outlier sample points. Defaults to marker.color</li> <li>Sets the border line width (in px) of the outlier sample points.</li> <li>Sets the width (in px) of the lines bounding the marker points.</li> <li>Sets the marker opacity.</li> <li>Sets the color of the outlier sample points.</li> <li>Sets the marker size (in px).</li> <li>Sets the marker symbol type. Adding 100 is equivalent to appending -open to a symbol name. Adding 200 is equivalent to appending -dot to a symbol name. Adding 300 is equivalent to appending -open-dot or dot-open to a symbol name.</li> <li>Sets the mean line color.</li> <li>Determines if a line corresponding to the sample's mean is shown inside the violins. If <code>box.visible</code> is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.</li> <li>Sets the mean line width.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover. For violin traces, the name will also be used for the position coordinate, if <code>x</code> and <code>x0</code> (<code>y</code> and <code>y0</code> if horizontal) are missing and the position axis is categorical. Note that the trace name is also used as a default value for attribute <code>scalegroup</code> (please see its description for details).</li> <li>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</li> <li>Sets the opacity of the trace.</li> <li>Sets the orientation of the violin(s). If v (h), the distribution is visualized along the vertical (horizontal).</li> <li>Sets the position of the sample points in relation to the violins. If 0, the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.</li> <li>If outliers, only the sample points lying outside the whiskers are shown If suspectedoutliers, the outlier points are shown and points either less than 4Q1-3Q3 or greater than 4Q3-3Q1 are highlighted (see <code>outliercolor</code>) If all, all sample points are shown If false, only the violins are shown with no sample points. Defaults to suspectedoutliers when <code>marker.outliercolor</code> or <code>marker.line.outliercolor</code> is set, otherwise defaults to outliers.</li> <li>Sets the method used to compute the sample's Q1 and Q3 quartiles. The linear method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The exclusive method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The inclusive method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.</li> <li>If there are multiple violins that should be sized according to to some metric (see <code>scalemode</code>), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's <code>width</code> is undefined, <code>scalegroup</code> will default to the trace's name. In this case, violins with the same names will be linked together</li> <li>Sets the metric by which the width of each violin is determined. width means each violin has the same (max) width count means the violins are scaled by the number of sample points making up each violin.</li> <li>Sets the marker color of selected points.</li> <li>Sets the marker opacity of selected points.</li> <li>Sets the marker size of selected points.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under overlay mode, where one trace has <code>side</code> set to positive and the other to negative.</li> <li>Sets the span in data space for which the density function will be computed. Has an effect only when <code>spanmode</code> is set to manual.</li> <li>Sets the method by which the span in data space where the density function will be computed. soft means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. hard means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode manual and fill in the <code>span</code> attribute.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the marker color of unselected points, applied only when a selection exists.</li> <li>Sets the marker opacity of unselected points, applied only when a selection exists.</li> <li>Sets the marker size of unselected points, applied only when a selection exists.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the width of the violin in data coordinates. If 0 (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.</li> <li>Sets the x sample data or coordinates. See overview for more info.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y sample data or coordinates. See overview for more info.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Volume/","title":"Volume","text":""},{"location":"reference/configuration/Trace/Props/Volume/#volume","title":"Volume","text":""},{"location":"reference/configuration/Trace/Props/Volume/#overview","title":"Overview","text":"<p>The <code>volume</code> trace type is used to create 3D volume plots, which visualize 3D volumetric data. Volume plots are useful for representing datasets where the values at each (x, y, z) point in a grid represent a density or scalar field, such as medical imaging, fluid dynamics, and other scientific data.</p> <p>You can customize the opacity, surface levels, and colors to effectively visualize the internal structure of the volume.</p> <p>Common Uses</p> <ul> <li>Medical Imaging: Visualizing 3D scans such as MRI or CT data.</li> <li>Fluid Dynamics: Representing 3D fields of density or pressure.</li> <li>Scientific Visualization: Displaying any 3D scalar field or volumetric data.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Volume/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Volume Plot <p>Here's a simple <code>volume</code> plot visualizing a 3D scalar field:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: isosurface-data-simple\n    args:\n      - echo\n      - |\n        idx,x,y,z,value\n        0,0,0,1,1\n        1,0,1,1,2\n        2,0,0,0,3\n        3,0,1,0,4\n        4,1,0,1,5\n        5,1,1,1,6\n        6,1,0,0,7\n        7,1,1,0,8\n\ntraces:\n  - name: Simple Isosurface Plot Trace\n    model: ${ref(isosurface-data-simple)}\n    props:\n      type: isosurface\n      x: ?{x}\n      y: ?{y}\n      z: ?{z}\n      value: ?{value}\n      isomin: 2 \n      isomax: 6 \n      colorscale: \"Reds\"\n    order_by: \n      - ?{ idx asc }\ncharts:\n  - name: Simple Isosurface Chart\n    traces:\n      - ${ref(Simple Isosurface Plot Trace)}\n    layout:\n      title:\n        text: Simple Isosurface Plot&lt;br&gt;&lt;sub&gt;3D Volume Visualization&lt;/sub&gt;\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Volume/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>volume</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>autocolorscale: 'boolean' #(1)!\ncaps:\n  x:\n    fill: 'number' #(2)!\n    show: 'boolean' #(3)!\n  y:\n    fill: 'number' #(4)!\n    show: 'boolean' #(5)!\n  z:\n    fill: 'number' #(6)!\n    show: 'boolean' #(7)!\ncauto: 'boolean' #(8)!\ncmax: 'number' #(9)!\ncmid: 'number' #(10)!\ncmin: 'number' #(11)!\ncoloraxis: 'string' #(12)!\ncolorbar:\n  bgcolor: 'any' #(13)!\n  bordercolor: 'any' #(14)!\n  borderwidth: 'number' #(15)!\n  exponentformat: 'any' #(16)!\n  len: 'number' #(17)!\n  lenmode: 'any' #(18)!\n  minexponent: 'number' #(19)!\n  nticks: 'integer' #(20)!\n  orientation: 'any' #(21)!\n  outlinecolor: 'any' #(22)!\n  outlinewidth: 'number' #(23)!\n  separatethousands: 'boolean' #(24)!\n  showexponent: 'any' #(25)!\n  showticklabels: 'boolean' #(26)!\n  showtickprefix: 'any' #(27)!\n  showticksuffix: 'any' #(28)!\n  thickness: 'number' #(29)!\n  thicknessmode: 'any' #(30)!\n  tickangle: 'number' #(31)!\n  tickcolor: 'any' #(32)!\n  tickfont:\n    color: any\n    family: 'string' #(33)!\n    lineposition: 'string' #(34)!\n    shadow: 'string' #(35)!\n    size: number\n    style: 'any' #(36)!\n    textcase: 'any' #(37)!\n    variant: 'any' #(38)!\n    weight: 'integer' #(39)!\n  tickformat: 'string' #(40)!\n  tickformatstops: array\n  ticklabeloverflow: 'any' #(41)!\n  ticklabelposition: 'any' #(42)!\n  ticklabelstep: 'integer' #(43)!\n  ticklen: 'number' #(44)!\n  tickmode: 'any' #(45)!\n  tickprefix: 'string' #(46)!\n  ticks: 'any' #(47)!\n  ticksuffix: 'string' #(48)!\n  ticktext: 'array' #(49)!\n  ticktextsrc: 'string' #(50)!\n  tickvals: 'array' #(51)!\n  tickvalssrc: 'string' #(52)!\n  tickwidth: 'number' #(53)!\n  title:\n    font:\n      color: any\n      family: 'string' #(54)!\n      lineposition: 'string' #(55)!\n      shadow: 'string' #(56)!\n      size: number\n      style: 'any' #(57)!\n      textcase: 'any' #(58)!\n      variant: 'any' #(59)!\n      weight: 'integer' #(60)!\n    side: 'any' #(61)!\n    text: 'string' #(62)!\n  x: 'number' #(63)!\n  xanchor: 'any' #(64)!\n  xpad: 'number' #(65)!\n  xref: 'any' #(66)!\n  y: 'number' #(67)!\n  yanchor: 'any' #(68)!\n  ypad: 'number' #(69)!\n  yref: 'any' #(70)!\ncolorscale: 'any' #(71)!\ncontour:\n  color: 'any' #(72)!\n  show: 'boolean' #(73)!\n  width: 'number' #(74)!\ncustomdata: 'array' #(75)!\ncustomdatasrc: 'string' #(76)!\nflatshading: 'boolean' #(77)!\nhoverinfo: 'array' #(78)!\nhoverinfosrc: 'string' #(79)!\nhoverlabel:\n  align: 'array' #(80)!\n  alignsrc: 'string' #(81)!\n  bgcolor: 'color | array' #(82)!\n  bgcolorsrc: 'string' #(83)!\n  bordercolor: 'color | array' #(84)!\n  bordercolorsrc: 'string' #(85)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(86)!\n    family: 'string | array' #(87)!\n    familysrc: 'string' #(88)!\n    lineposition: 'array' #(89)!\n    linepositionsrc: 'string' #(90)!\n    shadow: 'string | array' #(91)!\n    shadowsrc: 'string' #(92)!\n    size: number | array\n    sizesrc: 'string' #(93)!\n    style: 'array' #(94)!\n    stylesrc: 'string' #(95)!\n    textcase: 'array' #(96)!\n    textcasesrc: 'string' #(97)!\n    variant: 'array' #(98)!\n    variantsrc: 'string' #(99)!\n    weight: 'integer | array' #(100)!\n    weightsrc: 'string' #(101)!\n  namelength: 'integer | array' #(102)!\n  namelengthsrc: 'string' #(103)!\nhovertemplate: 'string | array' #(104)!\nhovertemplatesrc: 'string' #(105)!\nhovertext: 'string | array' #(106)!\nhovertextsrc: 'string' #(107)!\nids: 'array' #(108)!\nidssrc: 'string' #(109)!\nisomax: 'number' #(110)!\nisomin: 'number' #(111)!\nlegend: 'string' #(112)!\nlegendgroup: 'string' #(113)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(114)!\n    lineposition: 'string' #(115)!\n    shadow: 'string' #(116)!\n    size: number\n    style: 'any' #(117)!\n    textcase: 'any' #(118)!\n    variant: 'any' #(119)!\n    weight: 'integer' #(120)!\n  text: 'string' #(121)!\nlegendrank: 'number' #(122)!\nlegendwidth: 'number' #(123)!\nlighting:\n  ambient: 'number' #(124)!\n  diffuse: 'number' #(125)!\n  facenormalsepsilon: 'number' #(126)!\n  fresnel: 'number' #(127)!\n  roughness: 'number' #(128)!\n  specular: 'number' #(129)!\n  vertexnormalsepsilon: 'number' #(130)!\nlightposition:\n  x: 'number' #(131)!\n  y: 'number' #(132)!\n  z: 'number' #(133)!\nmetasrc: 'string' #(134)!\nname: 'string' #(135)!\nopacity: 'number' #(136)!\nreversescale: 'boolean' #(137)!\nscene: 'string' #(138)!\nshowlegend: 'boolean' #(139)!\nshowscale: 'boolean' #(140)!\nslices:\n  x:\n    fill: 'number' #(141)!\n    locations: 'array' #(142)!\n    locationssrc: 'string' #(143)!\n    show: 'boolean' #(144)!\n  y:\n    fill: 'number' #(145)!\n    locations: 'array' #(146)!\n    locationssrc: 'string' #(147)!\n    show: 'boolean' #(148)!\n  z:\n    fill: 'number' #(149)!\n    locations: 'array' #(150)!\n    locationssrc: 'string' #(151)!\n    show: 'boolean' #(152)!\nspaceframe:\n  fill: 'number' #(153)!\n  show: 'boolean' #(154)!\nstream:\n  maxpoints: 'number' #(155)!\n  token: 'string' #(156)!\nsurface:\n  count: 'integer' #(157)!\n  fill: 'number' #(158)!\n  pattern: 'string' #(159)!\n  show: 'boolean' #(160)!\ntext: 'string | array' #(161)!\ntextsrc: 'string' #(162)!\ntype: volume\nuid: 'string' #(163)!\nvalue: 'array' #(164)!\nvaluehoverformat: 'string' #(165)!\nvaluesrc: 'string' #(166)!\nvisible: 'any' #(167)!\nx: 'array' #(168)!\nxhoverformat: 'string' #(169)!\nxsrc: 'string' #(170)!\ny: 'array' #(171)!\nyhoverformat: 'string' #(172)!\nysrc: 'string' #(173)!\nz: 'array' #(174)!\nzhoverformat: 'string' #(175)!\nzsrc: 'string' #(176)!\n</code></pre> <ol> <li>Determines whether the colorscale is a default palette (<code>autocolorscale: true</code>) or the palette determined by <code>colorscale</code>. In case <code>colorscale</code> is unspecified or <code>autocolorscale</code> is true, the default palette will be chosen according to whether numbers in the <code>color</code> array are all positive, all negative or mixed.</li> <li>Sets the fill ratio of the <code>caps</code>. The default fill value of the <code>caps</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the x <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>caps</code>. The default fill value of the <code>caps</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the y <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>caps</code>. The default fill value of the <code>caps</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the z <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Determines whether or not the color domain is computed with respect to the input data (here <code>value</code>) or the bounds set in <code>cmin</code> and <code>cmax</code> Defaults to <code>false</code> when <code>cmin</code> and <code>cmax</code> are set by the user.</li> <li>Sets the upper bound of the color domain. Value should have the same units as <code>value</code> and if set, <code>cmin</code> must be set as well.</li> <li>Sets the mid-point of the color domain by scaling <code>cmin</code> and/or <code>cmax</code> to be equidistant to this point. Value should have the same units as <code>value</code>. Has no effect when <code>cauto</code> is <code>false</code>.</li> <li>Sets the lower bound of the color domain. Value should have the same units as <code>value</code> and if set, <code>cmax</code> must be set as well.</li> <li>Sets a reference to a shared color axis. References to these shared color axes are coloraxis, coloraxis2, coloraxis3, etc. Settings for these shared color axes are set in the layout, under <code>layout.coloraxis</code>, <code>layout.coloraxis2</code>, etc. Note that multiple color scales can be linked to the same color axis.</li> <li>Sets the color of padded area.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) or the border enclosing this color bar.</li> <li>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If none, it appears as 1,000,000,000. If e, 1e+9. If E, 1E+9. If power, 1x10^9 (with 9 in a super script). If SI, 1G. If B, 1B.</li> <li>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</li> <li>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot fraction or in *pixels. Use <code>len</code> to set the value.</li> <li>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when <code>tickformat</code> is SI or B.</li> <li>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to <code>nticks</code>. Has an effect only if <code>tickmode</code> is set to auto.</li> <li>Sets the orientation of the colorbar.</li> <li>Sets the axis line color.</li> <li>Sets the width (in px) of the axis line.</li> <li>If \"true\", even 4-digit integers are separated</li> <li>If all, all exponents are shown besides their significands. If first, only the exponent of the first tick is shown. If last, only the exponent of the last tick is shown. If none, no exponents appear.</li> <li>Determines whether or not the tick labels are drawn.</li> <li>If all, all tick labels are displayed with a prefix. If first, only the first tick is displayed with a prefix. If last, only the last tick is displayed with a suffix. If none, tick prefixes are hidden.</li> <li>Same as <code>showtickprefix</code> but for tick suffixes.</li> <li>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</li> <li>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot fraction or in pixels. Use <code>thickness</code> to set the value.</li> <li>Sets the angle of the tick labels with respect to the horizontal. For example, a <code>tickangle</code> of -90 draws the tick labels vertically.</li> <li>Sets the tick color.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46</li> <li>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is hide past domain. In other cases the default is hide past div.</li> <li>Determines where tick labels are drawn relative to the ticks. Left and right options are used when <code>orientation</code> is h, top and bottom when <code>orientation</code> is v.</li> <li>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. <code>tick0</code> determines which labels are shown. Not implemented for axes with <code>type</code> log or multicategory, or when <code>tickmode</code> is array.</li> <li>Sets the tick length (in px).</li> <li>Sets the tick mode for this axis. If auto, the number of ticks is set via <code>nticks</code>. If linear, the placement of the ticks is determined by a starting position <code>tick0</code> and a tick step <code>dtick</code> (linear is the default value if <code>tick0</code> and <code>dtick</code> are provided). If array, the placement of the ticks is set via <code>tickvals</code> and the tick text is <code>ticktext</code>. (array is the default value if <code>tickvals</code> is provided).</li> <li>Sets a tick label prefix.</li> <li>Determines whether ticks are drawn or not. If , this axis' ticks are not drawn. If outside (inside), this axis' are drawn outside (inside) the axis lines.</li> <li>Sets a tick label suffix.</li> <li>Sets the text displayed at the ticks position via <code>tickvals</code>. Only has an effect if <code>tickmode</code> is set to array. Used with <code>tickvals</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ticktext</code>.</li> <li>Sets the values at which ticks on this axis appear. Only has an effect if <code>tickmode</code> is set to array. Used with <code>ticktext</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>tickvals</code>.</li> <li>Sets the tick width (in px).</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Determines the location of color bar's title with respect to the color bar. Defaults to top when <code>orientation</code> if v and  defaults to right when <code>orientation</code> if h.</li> <li>Sets the title of the color bar.</li> <li>Sets the x position with respect to <code>xref</code> of the color bar (in plot fraction). When <code>xref</code> is paper, defaults to 1.02 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. When <code>xref</code> is container, defaults to 1 when <code>orientation</code> is v and 0.5 when <code>orientation</code> is h. Must be between 0 and 1 if <code>xref</code> is container and between -2 and 3 if <code>xref</code> is paper.</li> <li>Sets this color bar's horizontal position anchor. This anchor binds the <code>x</code> position to the left, center or right of the color bar. Defaults to left when <code>orientation</code> is v and center when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the x direction.</li> <li>Sets the container <code>x</code> refers to. container spans the entire <code>width</code> of the plot. paper refers to the width of the plotting area only.</li> <li>Sets the y position with respect to <code>yref</code> of the color bar (in plot fraction). When <code>yref</code> is paper, defaults to 0.5 when <code>orientation</code> is v and 1.02 when <code>orientation</code> is h. When <code>yref</code> is container, defaults to 0.5 when <code>orientation</code> is v and 1 when <code>orientation</code> is h. Must be between 0 and 1 if <code>yref</code> is container and between -2 and 3 if <code>yref</code> is paper.</li> <li>Sets this color bar's vertical position anchor This anchor binds the <code>y</code> position to the top, middle or bottom of the color bar. Defaults to middle when <code>orientation</code> is v and bottom when <code>orientation</code> is h.</li> <li>Sets the amount of padding (in px) along the y direction.</li> <li>Sets the container <code>y</code> refers to. container spans the entire <code>height</code> of the plot. paper refers to the height of the plotting area only.</li> <li>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, <code>[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]</code>. To control the bounds of the colorscale in color space, use <code>cmin</code> and <code>cmax</code>. Alternatively, <code>colorscale</code> may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</li> <li>Sets the color of the contour lines.</li> <li>Sets whether or not dynamic contours are shown on hover</li> <li>Sets the width of the contour lines.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available.  Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Same as <code>text</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the maximum boundary for iso-surface plot.</li> <li>Sets the minimum boundary for iso-surface plot.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>Ambient light increases overall color visibility but can wash out the image.</li> <li>Represents the extent that incident rays are reflected in a range of angles.</li> <li>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</li> <li>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</li> <li>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</li> <li>Represents the level that incident rays are reflected in a single direction, causing shine.</li> <li>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</li> <li>Numeric vector, representing the X coordinate for each vertex.</li> <li>Numeric vector, representing the Y coordinate for each vertex.</li> <li>Numeric vector, representing the Z coordinate for each vertex.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Sets the opacity of the surface. Please note that in the case of using high <code>opacity</code> values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</li> <li>Reverses the color mapping if true. If true, <code>cmin</code> will correspond to the last color in the array and <code>cmax</code> will correspond to the first color.</li> <li>Sets a reference between this trace's 3D coordinate system and a 3D scene. If scene (the default value), the (x,y,z) coordinates refer to <code>layout.scene</code>. If scene2, the (x,y,z) coordinates refer to <code>layout.scene2</code>, and so on.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Determines whether or not a colorbar is displayed for this trace.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Determines whether or not slice planes about the x dimension are drawn.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Determines whether or not slice planes about the y dimension are drawn.</li> <li>Sets the fill ratio of the <code>slices</code>. The default fill value of the <code>slices</code> is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.</li> <li>Sets the source reference on Chart Studio Cloud for <code>locations</code>.</li> <li>Determines whether or not slice planes about the z dimension are drawn.</li> <li>Sets the fill ratio of the <code>spaceframe</code> elements. The default fill value is 1 meaning that they are entirely shaded. Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.</li> <li>Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a <code>fill</code> ratio less than one would allow the creation of openings parallel to the edges.</li> <li>Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is <code>all</code> meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code> and <code>E</code> may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.</li> <li>Hides/displays surfaces between minimum and maximum iso-values.</li> <li>Sets the text elements associated with the vertices. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Sets the 4th dimension (value) of the vertices.</li> <li>Sets the hover text formatting rulefor <code>value</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</li> <li>Sets the source reference on Chart Studio Cloud for <code>value</code>.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the X coordinates of the vertices on X axis.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the Y coordinates of the vertices on Y axis.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the Z coordinates of the vertices on Z axis.</li> <li>Sets the hover text formatting rulefor <code>z</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>zaxis.hoverformat</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>z</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Props/Waterfall/","title":"Waterfall","text":""},{"location":"reference/configuration/Trace/Props/Waterfall/#waterfall","title":"Waterfall","text":""},{"location":"reference/configuration/Trace/Props/Waterfall/#overview","title":"Overview","text":"<p>The <code>waterfall</code> trace type is used to create waterfall charts, which are useful for visualizing incremental changes in value over a series of categories or time. Waterfall charts are commonly used in financial and analytical contexts to show how sequential positive or negative values affect an initial value.</p> <p>You can customize the colors, connectors, and base values to represent your data effectively.</p> <p>Common Uses</p> <ul> <li>Financial Analysis: Visualizing profit and loss over time or across categories.</li> <li>Incremental Changes: Showing how individual positive or negative changes affect a starting value.</li> <li>Part-to-Whole Visualization: Highlighting how parts contribute to a cumulative total.</li> </ul> <p>Check out the Attributes for the full set of configuration options</p>"},{"location":"reference/configuration/Trace/Props/Waterfall/#examples","title":"Examples","text":"<p>Common Configurations</p> Simple Waterfall PlotWaterfall Plot with Custom ColorsFinancial Waterfall Plot <p>Here's a simple <code>waterfall</code> plot showing incremental changes across categories:</p> <p></p> <p>You can copy this code below to create this chart in your project:</p> <pre><code>models:\n  - name: waterfall-data\n    args:\n      - echo\n      - |\n        idx,label,value\n        0,Starting,1000\n        1,Increase A,200\n        2,Decrease B,-150\n        3,Increase C,300\n        4,Ending,1350\ntraces:\n  - name: Simple Waterfall Plot\n    model: ${ref(waterfall-data)}\n    props:\n      type: waterfall\n      x: ?{label}\n      y: ?{value}\n      measure: [\"initial\", \"relative\", \"relative\", \"relative\", \"total\"]\n    order_by: \n      - ?{ idx asc}\ncharts:\n  - name: Simple Waterfall Chart\n    traces:\n      - ${ref(Simple Waterfall Plot)}\n    layout:\n      title:\n        text: Simple Waterfall Plot&lt;br&gt;&lt;sub&gt;Sequential Changes in Value&lt;/sub&gt;\n</code></pre> <p>This example demonstrates a <code>waterfall</code> plot where the bars have custom colors for different categories:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: waterfall-data-colors\n    args:\n      - echo\n      - |\n        idx,label,value,color\n        0,Starting,1000,#1f77b4\n        1,Increase A,200,#2ca02c\n        2,Decrease B,-150,#d62728\n        3,Increase C,300,#ff7f0e\n        4,Ending,1350,#9467bd\ntraces:\n  - name: Waterfall Plot with Custom Colors\n    model: ${ref(waterfall-data-colors)}\n    props:\n      type: waterfall\n      x: ?{label}\n      y: ?{value}\n      measure: [\"initial\", \"relative\", \"relative\", \"relative\", \"total\"]\n      increasing:\n        marker: \n          color: 'orange'\n      decreasing: \n        marker: \n          color: 'purple'\n      totals: \n        marker: \n          color: 'grey'\n          line: \n            color: 'orange'\n            width: 4\n    order_by: \n      - ?{ idx asc}\ncharts:\n  - name: Waterfall Chart with Custom Colors\n    traces:\n      - ${ref(Waterfall Plot with Custom Colors)}\n    layout:\n      title:\n        text: Waterfall Plot with Custom Colors&lt;br&gt;&lt;sub&gt;Customized Coloring for Categories&lt;/sub&gt;\n</code></pre> <p>Here's a <code>waterfall</code> plot demonstrating a financial use case with connectors and custom formatting:</p> <p></p> <p>Here's the code:</p> <pre><code>models:\n  - name: waterfall-data-connectors\n    args:\n      - echo\n      - |\n        idx,quarter,half,value,mode\n        0,Q1,H1,1000,initial\n        1,Q2,H1,200,relative\n        2,Gross Profit,H1 Summary,0,total\n        3,Q3,H2,-150,relative\n        4,Q4,H2,300,relative\n        5,Gross Profit,FY2024,0,total\ntraces:\n  - name: Waterfall Plot with Connectors\n    model: ${ref(waterfall-data-connectors)}\n    props:\n      type: waterfall\n      x: \n        - ?{half}\n        - ?{quarter}\n      y: ?{value}\n      measure: ?{mode}\n      hovertemplate: \"%{x}: %{y:$.2f}\"\n      texttemplate: \"%{delta:$.2f}\"\n      textposition: \"outside\"\n      connector:\n        line:\n          color: \"orange\"\n          width: 5\n    order_by: \n      - ?{ idx asc}\ncharts:\n  - name: Waterfall Chart with Connectors\n    traces:\n      - ${ref(Waterfall Plot with Connectors)}\n    layout:\n      title:\n        text: Financial Waterfall\n      margin: \n        b: 50\n        t: 60\n      yaxis:\n        range: [0, 1600]\n        tickprefix: '$'\n        title: \n          text: \"Millions ($)\"\n</code></pre> <p>A schema to validate plotly trace properties</p>"},{"location":"reference/configuration/Trace/Props/Waterfall/#attributes","title":"Attributes","text":"<p>These attributes apply to traces where <code>trace.props.type</code> is set to <code>waterfall</code>. You would configure these attributes on the trace with the <code>trace.props</code> object. </p><pre><code>alignmentgroup: 'string' #(1)!\nbase: 'number' #(2)!\ncliponaxis: 'boolean' #(3)!\nconnector:\n  line:\n    color: 'any' #(4)!\n    dash: 'string' #(5)!\n    width: 'number' #(6)!\n  mode: 'any' #(7)!\n  visible: 'boolean' #(8)!\nconstraintext: 'any' #(9)!\ncustomdata: 'array' #(10)!\ncustomdatasrc: 'string' #(11)!\ndecreasing:\n  marker:\n    color: 'any' #(12)!\n    line:\n      color: 'any' #(13)!\n      width: 'number' #(14)!\ndx: 'number' #(15)!\ndy: 'number' #(16)!\nhoverinfo: 'array' #(17)!\nhoverinfosrc: 'string' #(18)!\nhoverlabel:\n  align: 'array' #(19)!\n  alignsrc: 'string' #(20)!\n  bgcolor: 'color | array' #(21)!\n  bgcolorsrc: 'string' #(22)!\n  bordercolor: 'color | array' #(23)!\n  bordercolorsrc: 'string' #(24)!\n  font:\n    color: color | array\n    colorsrc: 'string' #(25)!\n    family: 'string | array' #(26)!\n    familysrc: 'string' #(27)!\n    lineposition: 'array' #(28)!\n    linepositionsrc: 'string' #(29)!\n    shadow: 'string | array' #(30)!\n    shadowsrc: 'string' #(31)!\n    size: number | array\n    sizesrc: 'string' #(32)!\n    style: 'array' #(33)!\n    stylesrc: 'string' #(34)!\n    textcase: 'array' #(35)!\n    textcasesrc: 'string' #(36)!\n    variant: 'array' #(37)!\n    variantsrc: 'string' #(38)!\n    weight: 'integer | array' #(39)!\n    weightsrc: 'string' #(40)!\n  namelength: 'integer | array' #(41)!\n  namelengthsrc: 'string' #(42)!\nhovertemplate: 'string | array' #(43)!\nhovertemplatesrc: 'string' #(44)!\nhovertext: 'string | array' #(45)!\nhovertextsrc: 'string' #(46)!\nids: 'array' #(47)!\nidssrc: 'string' #(48)!\nincreasing:\n  marker:\n    color: 'any' #(49)!\n    line:\n      color: 'any' #(50)!\n      width: 'number' #(51)!\ninsidetextanchor: 'any' #(52)!\ninsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(53)!\n  family: 'string | array' #(54)!\n  familysrc: 'string' #(55)!\n  lineposition: 'array' #(56)!\n  linepositionsrc: 'string' #(57)!\n  shadow: 'string | array' #(58)!\n  shadowsrc: 'string' #(59)!\n  size: number | array\n  sizesrc: 'string' #(60)!\n  style: 'array' #(61)!\n  stylesrc: 'string' #(62)!\n  textcase: 'array' #(63)!\n  textcasesrc: 'string' #(64)!\n  variant: 'array' #(65)!\n  variantsrc: 'string' #(66)!\n  weight: 'integer | array' #(67)!\n  weightsrc: 'string' #(68)!\nlegend: 'string' #(69)!\nlegendgroup: 'string' #(70)!\nlegendgrouptitle:\n  font:\n    color: any\n    family: 'string' #(71)!\n    lineposition: 'string' #(72)!\n    shadow: 'string' #(73)!\n    size: number\n    style: 'any' #(74)!\n    textcase: 'any' #(75)!\n    variant: 'any' #(76)!\n    weight: 'integer' #(77)!\n  text: 'string' #(78)!\nlegendrank: 'number' #(79)!\nlegendwidth: 'number' #(80)!\nmeasure: 'array' #(81)!\nmeasuresrc: 'string' #(82)!\nmetasrc: 'string' #(83)!\nname: 'string' #(84)!\noffset: 'number | array' #(85)!\noffsetgroup: 'string' #(86)!\noffsetsrc: 'string' #(87)!\nopacity: 'number' #(88)!\norientation: 'any' #(89)!\noutsidetextfont:\n  color: color | array\n  colorsrc: 'string' #(90)!\n  family: 'string | array' #(91)!\n  familysrc: 'string' #(92)!\n  lineposition: 'array' #(93)!\n  linepositionsrc: 'string' #(94)!\n  shadow: 'string | array' #(95)!\n  shadowsrc: 'string' #(96)!\n  size: number | array\n  sizesrc: 'string' #(97)!\n  style: 'array' #(98)!\n  stylesrc: 'string' #(99)!\n  textcase: 'array' #(100)!\n  textcasesrc: 'string' #(101)!\n  variant: 'array' #(102)!\n  variantsrc: 'string' #(103)!\n  weight: 'integer | array' #(104)!\n  weightsrc: 'string' #(105)!\nshowlegend: 'boolean' #(106)!\nstream:\n  maxpoints: 'number' #(107)!\n  token: 'string' #(108)!\ntext: 'string | array' #(109)!\ntextangle: 'number' #(110)!\ntextfont:\n  color: color | array\n  colorsrc: 'string' #(111)!\n  family: 'string | array' #(112)!\n  familysrc: 'string' #(113)!\n  lineposition: 'array' #(114)!\n  linepositionsrc: 'string' #(115)!\n  shadow: 'string | array' #(116)!\n  shadowsrc: 'string' #(117)!\n  size: number | array\n  sizesrc: 'string' #(118)!\n  style: 'array' #(119)!\n  stylesrc: 'string' #(120)!\n  textcase: 'array' #(121)!\n  textcasesrc: 'string' #(122)!\n  variant: 'array' #(123)!\n  variantsrc: 'string' #(124)!\n  weight: 'integer | array' #(125)!\n  weightsrc: 'string' #(126)!\ntextinfo: 'string' #(127)!\ntextposition: 'array' #(128)!\ntextpositionsrc: 'string' #(129)!\ntextsrc: 'string' #(130)!\ntexttemplate: 'string | array' #(131)!\ntexttemplatesrc: 'string' #(132)!\ntotals:\n  marker:\n    color: 'any' #(133)!\n    line:\n      color: 'any' #(134)!\n      width: 'number' #(135)!\ntype: waterfall\nuid: 'string' #(136)!\nvisible: 'any' #(137)!\nwidth: 'number | array' #(138)!\nwidthsrc: 'string' #(139)!\nx: 'array' #(140)!\nxaxis: 'string' #(141)!\nxhoverformat: 'string' #(142)!\nxperiodalignment: 'any' #(143)!\nxsrc: 'string' #(144)!\ny: 'array' #(145)!\nyaxis: 'string' #(146)!\nyhoverformat: 'string' #(147)!\nyperiodalignment: 'any' #(148)!\nysrc: 'string' #(149)!\nzorder: 'integer' #(150)!\n</code></pre> <ol> <li>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</li> <li>Sets where the bar base is drawn (in position axis units).</li> <li>Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set <code>xaxis.layer</code> and <code>yaxis.layer</code> to below traces.</li> <li>Sets the line color.</li> <li>Sets the dash style of lines. Set to a dash type string (solid, dot, dash, longdash, dashdot, or longdashdot) or a dash length list in px (eg 5px,10px,2px,2px).</li> <li>Sets the line width (in px).</li> <li>Sets the shape of connector lines.</li> <li>Determines if connector lines are drawn. </li> <li>Constrain the size of text inside or outside a bar to be no larger than the bar itself.</li> <li>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, scatter traces also appends customdata items in the markers DOM elements</li> <li>Sets the source reference on Chart Studio Cloud for <code>customdata</code>.</li> <li>Sets the marker color of all decreasing values.</li> <li>Sets the line color of all decreasing values.</li> <li>Sets the line width of all decreasing values.</li> <li>Sets the x coordinate step. See <code>x0</code> for more info.</li> <li>Sets the y coordinate step. See <code>y0</code> for more info.</li> <li>Determines which trace information appear on hover. If <code>none</code> or <code>skip</code> are set, no information is displayed upon hovering. But, if <code>none</code> is set, click and hover events are still fired.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hoverinfo</code>.</li> <li>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</li> <li>Sets the source reference on Chart Studio Cloud for <code>align</code>.</li> <li>Sets the background color of the hover labels for this trace</li> <li>Sets the source reference on Chart Studio Cloud for <code>bgcolor</code>.</li> <li>Sets the border color of the hover labels for this trace.</li> <li>Sets the source reference on Chart Studio Cloud for <code>bordercolor</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to <code>namelength - 3</code> characters and add an ellipsis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>namelength</code>.</li> <li>Template string used for rendering the information that appear on hover box. Note that this will override <code>hoverinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%xother}, {%_xother}, {%xother_}. When showing info for several points, xother will be added to those with different x positions from the first point. An underscore before or after (x|y)other will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in <code>hovertemplate</code> are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>initial</code>, <code>delta</code> and <code>final</code>. Anything contained in tag <code>&lt;extra&gt;</code> is displayed in the secondary box, for example \"{fullData.name}\". To hide the secondary box completely, use an empty tag <code>&lt;extra&gt;&lt;/extra&gt;</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertemplate</code>.</li> <li>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace <code>hoverinfo</code> must contain a text flag.</li> <li>Sets the source reference on Chart Studio Cloud for <code>hovertext</code>.</li> <li>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</li> <li>Sets the source reference on Chart Studio Cloud for <code>ids</code>.</li> <li>Sets the marker color of all increasing values.</li> <li>Sets the line color of all increasing values.</li> <li>Sets the line width of all increasing values.</li> <li>Determines if texts are kept at center or start/end points in <code>textposition</code> inside mode.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Sets the reference to a legend to show this trace in. References to these legends are legend, legend2, legend3, etc. Settings for these legends are set in the layout, under <code>layout.legend</code>, <code>layout.legend2</code>, etc.</li> <li>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the variant of the font.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the title of the legend group.</li> <li>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with reversed <code>legend.traceorder</code> they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</li> <li>Sets the width (in px or fraction) of the legend for this trace.</li> <li>An array containing types of values. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.</li> <li>Sets the source reference on Chart Studio Cloud for <code>measure</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>meta</code>.</li> <li>Sets the trace name. The trace name appears as the legend item and on hover.</li> <li>Shifts the position where the bar is drawn (in position axis units). In group barmode, traces that set offset will be excluded and drawn in overlay mode instead.</li> <li>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</li> <li>Sets the source reference on Chart Studio Cloud for <code>offset</code>.</li> <li>Sets the opacity of the trace.</li> <li>Sets the orientation of the bars. With v (h), the value of the each bar spans along the vertical (horizontal).</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines whether or not an item corresponding to this trace is shown in the legend.</li> <li>Sets the maximum number of points to keep on the plots from an incoming stream. If <code>maxpoints</code> is set to 50, only the newest 50 points will be displayed on the plot.</li> <li>The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.</li> <li>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace <code>hoverinfo</code> contains a text flag and hovertext is not set, these elements will be seen in the hover labels.</li> <li>Sets the angle of the tick labels with respect to the bar. For example, a <code>tickangle</code> of -90 draws the tick labels vertically. With auto the texts may automatically be rotated to fit with the maximum size in bars.</li> <li>Sets the source reference on Chart Studio Cloud for <code>color</code>.</li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</li> <li>Sets the source reference on Chart Studio Cloud for <code>family</code>.</li> <li>Sets the kind of decoration line(s) with text, such as an under, over or through as well as combinations e.g. under+over, etc.</li> <li>Sets the source reference on Chart Studio Cloud for <code>lineposition</code>.</li> <li>Sets the shape and color of the shadow behind text. auto places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</li> <li>Sets the source reference on Chart Studio Cloud for <code>shadow</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>size</code>.</li> <li>Sets whether a font should be styled with a normal or italic face from its family.</li> <li>Sets the source reference on Chart Studio Cloud for <code>style</code>.</li> <li>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textcase</code>.</li> <li>Sets the variant of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>variant</code>.</li> <li>Sets the weight (or boldness) of the font.</li> <li>Sets the source reference on Chart Studio Cloud for <code>weight</code>.</li> <li>Determines which trace information appear on the graph. In the case of having multiple waterfalls, totals are computed separately (per trace).</li> <li>Specifies the location of the <code>text</code>. inside positions <code>text</code> inside, next to the bar end (rotated and scaled if needed). outside positions <code>text</code> outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. auto tries to position <code>text</code> inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If none, no text appears.</li> <li>Sets the source reference on Chart Studio Cloud for <code>textposition</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>text</code>.</li> <li>Template string used for rendering the information text that appear on points. Note that this will override <code>textinfo</code>. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are <code>arrayOk: true</code>) are available. Finally, the template string has access to variables <code>initial</code>, <code>delta</code>, <code>final</code> and <code>label</code>.</li> <li>Sets the source reference on Chart Studio Cloud for <code>texttemplate</code>.</li> <li>Sets the marker color of all intermediate sums and total values.</li> <li>Sets the line color of all intermediate sums and total values.</li> <li>Sets the line width of all intermediate sums and total values.</li> <li>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</li> <li>Determines whether or not this trace is visible. If legendonly, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</li> <li>Sets the bar width (in position axis units).</li> <li>Sets the source reference on Chart Studio Cloud for <code>width</code>.</li> <li>Sets the x coordinates.</li> <li>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If x (the default value), the x coordinates refer to <code>layout.xaxis</code>. If x2, the x coordinates refer to <code>layout.xaxis2</code>, and so on.</li> <li>Sets the hover text formatting rulefor <code>x</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>xaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the x axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>x</code>.</li> <li>Sets the y coordinates.</li> <li>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If y (the default value), the y coordinates refer to <code>layout.yaxis</code>. If y2, the y coordinates refer to <code>layout.yaxis2</code>, and so on.</li> <li>Sets the hover text formatting rulefor <code>y</code>  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: %h for half of the year as a decimal number as well as %{n}f for fractional seconds with n digits. For example, 2016-10-13 09:15:23.456 with tickformat %H~%M~%S.%2f would display 09~15~23.46By default the values are formatted using <code>yaxis.hoverformat</code>.</li> <li>Only relevant when the axis <code>type</code> is date. Sets the alignment of data points on the y axis.</li> <li>Sets the source reference on Chart Studio Cloud for <code>y</code>.</li> <li>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher <code>zorder</code> appear in front of those with lower <code>zorder</code>.</li> </ol>"},{"location":"reference/configuration/Trace/Test/","title":"Test","text":""},{"location":"reference/configuration/Trace/Test/#test","title":"Test","text":""},{"location":"reference/configuration/Trace/Test/#attributes","title":"Attributes","text":"Field Type Default Description path string None A unique path to this object name string None The unique name of the object across the entire project. file_path string None The path to the file that contains the object definition. if_ string None on_failure exit assertions array None"},{"location":"reference/configuration/Trace/TraceColumns/","title":"TraceColumns","text":""},{"location":"reference/configuration/Trace/TraceColumns/#tracecolumns","title":"TraceColumns","text":"<p>Trace Columns enable you to reuse query elements as columns throughout multiple different areas within the trace.</p> <p>Tip</p> <p>Using Trace Columns can help reduce copy and paste code!</p> <p>Trace Columns perform the same basic service that the <code>?{}</code> function does- allowing you to define sql select statements.</p> <p>Example</p> With Inline <code>?{}</code> FunctionWith Trace Columns <pre><code>- name: Simple Line\n  model: ref(test-table)\n  props:\n    type: bar\n    x: ?{ x }\n    y: ?{ y }\n    marker:\n      color: ?{ case when x &gt;= 5 then '#713B57' else 'grey' end }\n      line:\n        color: ?{ case when x &gt;= 5 then '#713B57' else 'grey' end }\n    pattern:\n      shape: ?{ case when x = 5 then '/' when x = 6 THEN 'x' else '' end }\n    line:\n      width: ?{ case when x in (5,6) then 2.5 else null end }\n</code></pre> <pre><code>- name: Simple Line\n  model: ref(test-table)\n  columns:\n    x_data: ?{ x }\n    y_data: ?{ y }\n    color: ?{ case when x &gt;= 5 then '#713B57' else 'grey' end }\n    shape: ?{ case when x = 5 then '/' when x = 6 THEN 'x' else '' end }\n    width: ?{ case when x in (5,6) then 2.5 else null end }\n  props:\n    type: bar\n    x: ${ columns.x_data }\n    y: ${ columns.y_data }\n    marker:\n      color: ${ columns.color }\n      line:\n        color: ${ columns.color }\n    pattern:\n      shape: ${ columns.shape }\n    line:\n      width: ${ columns.width }\n</code></pre>"},{"location":"reference/configuration/Trace/TraceColumns/#slicing-indexing-column-arrays","title":"Slicing &amp; Indexing Column Arrays","text":"<p>Trace Columns support slicing and indexing, enabling you to pull out sub-arrays or specific values from a given column array.</p>"},{"location":"reference/configuration/Trace/TraceColumns/#indexing","title":"Indexing","text":"<p>Some trace configurations require numbers or strings as inputs. For example indicator traces require a single number to represent as the big value in the card. Since the <code>?{}</code> and <code>column()</code> functions always return arrays, indexing allows you to grab a single value from the array to use in configurations that require a single value.</p> <p>You can index columns by using the following syntax: </p><pre><code>column(column_name)[index]\n</code></pre> The <code>index</code> is a zero-based index that represents the position in the array you want to pull out. Negative indexes are also supported, allowing you to count from the end of the array. The last value in the array is represented by -1, the second to last by -2, and so on.  <p>Example</p> <p>A great example of a situation where you would want to use Column indexing are indicator traces. </p><pre><code>- name: Indicator Trace\n  model: ref(csv)\n  columns:\n    x_data: ?{ x }\n    y_data: ?{ y }\n  props:\n    type: \"indicator\"\n    mode: \"number+delta\"\n    value: ?{ columns.y_data[0] }\n    number:\n      prefix: \"$\"\n    delta:\n      position: \"top\"\n      reference: ?{ columns.y_data[1] }\n</code></pre> In the trace above <code>column(y_data)[0]</code> is pulling the first item in the array as the value and comparing its delta to the second item in the column y_data array."},{"location":"reference/configuration/Trace/TraceColumns/#slicing","title":"Slicing","text":"<p>Slicing allows you to pull out a sub-array from a given column array. This is useful when you only want to use a portion of the array in a given configuration, but don't want to filter the whole trace.</p> <p>You can slice columns by using the following syntax: </p><pre><code>column(column_name)[start:stop]\n</code></pre> The <code>start</code> and <code>stop</code> values are zero-based indexes that represent the start and end of the slice you want to pull out. Negative indexes are also supported, allowing you to count from the end of the array. The last value in the array is represented by -1, the second to last by -2, and so on. <p>If you omit the stop value, the slice will continue to the end of the array. If you omit the start value, the slice will start at the beginning of the array.</p> <p>Example</p> <p>Surface plots can be a really useful place to utilize slicing. </p><pre><code>- name: Surface Trace\n  model: ${ ref(csv) }\n  columns:\n    x_data: ?{ x }\n    y_data: ?{ y }\n  props:\n    type: surface\n    z:\n      - ${ columns.x_data }\n      - ${ columns.x_data[0:5] }\n      - ${ columns.x_data[5:10] }\n      - ${ columns.y_data }\n      - ${ columns.y_data[0:5] }\n      - ${ columns.y_data[5:10] }\n</code></pre> The trace above is creating a surface plot with lines on the plane of different lengths that represent different portions of the x_data and y_data arrays."},{"location":"reference/configuration/Trace/TraceColumns/#attributes","title":"Attributes","text":"Field Type Default Description"},{"location":"reference/functions/jinja/","title":"Jinja2","text":""},{"location":"reference/functions/jinja/#jinja2","title":"Jinja2","text":"<p>Visivo collects all included yaml files and runs them through a Jinja2 templating engine on compile.</p> <p>Jinja2 YAML files offer a powerful tool for generating dynamic configurations. By mastering loops, you can create flexible and maintainable configurations that adapt to different environments, data sets, and conditions. Explore further to unlock the full potential of Jinja2 in your projects.</p>"},{"location":"reference/functions/jinja/#tips-tricks","title":"Tips &amp; Tricks","text":"<ul> <li>Maintain Readability: Use whitespace control(<code>{%-</code> and <code>-%}</code>) to manage the output of rendered files.</li> <li>Leverage Filters and Tests: Jinja2 offers a wide range of filters and tests that can be used within loops to filter, sort, or test conditions.</li> <li>Debugging: Use the <code>debug</code> template tag to print variables and structures during template rendering.</li> </ul>"},{"location":"reference/functions/jinja/#further-reading","title":"Further Reading","text":"<p>For more detailed information on Jinja2 and YAML, visit the Jinja2 Documentation and the YAML Spec.</p>"},{"location":"reference/functions/jinja/loops/","title":"Looping \u27bf","text":""},{"location":"reference/functions/jinja/loops/#looping","title":"Looping","text":"<p>Jinja2 loops allow you to iterate over data structures and conditionally include elements in your YAML files. This is particularly useful for:</p> <ul> <li>Generating configurations for multiple environments or instances</li> <li>Conditional inclusion based on environment variables or external data</li> <li>Dynamically constructing complex nested structures</li> </ul>"},{"location":"reference/functions/jinja/loops/#jinja2-loop-basics","title":"Jinja2 Loop Basics","text":"<p>Before diving into examples, let's review the basic syntax for Jinja2 loops:</p> <ul> <li>For Loop: <code>{% for item in iterable %} ... {% endfor %}</code></li> <li>While Loop: Jinja2 does not natively support while loops, but you can mimic their behavior using for loops and conditions.</li> </ul>"},{"location":"reference/functions/jinja/loops/#examples","title":"Examples","text":""},{"location":"reference/functions/jinja/loops/#iterating-over-a-list","title":"Iterating Over a List","text":"<p>Generate a list of users in a YAML configuration.</p> <p>Example</p> YAML with Jinja2Rendered YAML <pre><code>traces:\n  {%- for user in ['Alice', 'Bob', 'Charlie'] %}\n  - name: \"{{ user }}_weekly_orders_trace\"\n    type: bar \n    model: ${ref(orders)}\n    props:\n      x: ?{ date_trunc('week', created_at) }\n      y: ?{ orders }\n    filters:\n      - ?{ user = '{{ user }}' }\n  {%- endfor %}\n</code></pre> <pre><code>traces:\n  - name: \"Alice_weekly_orders_trace\"\n    type: bar \n    model: ${ref(orders)}\n    props:\n      x: ?{ date_trunc('week', created_at) }\n      y: ?{ orders }\n    filters:\n      - ?{ user = 'Alice' }\n  - name: \"Bob_weekly_orders_trace\"\n    type: bar \n    model: ${ref(orders)}\n    props:\n      x: ?{ date_trunc('week', created_at) }\n      y: ?{ orders }\n    filters:\n      - ?{ user = 'Bob' }\n  - name: \"Charlie_weekly_orders_trace\"\n    type: bar \n    model: ${ref(orders)}\n    props:\n      x: ?{ date_trunc('week', created_at) }\n      y: ?{ orders }\n    filters:\n      - ?{ user = 'Charlie' }\n</code></pre>"},{"location":"reference/functions/jinja/loops/#nested-loops-for-hierarchical-structures","title":"Nested Loops for Hierarchical Structures","text":"<p>Create a nested structure of departments and employees.</p> <p>Example</p> YAML with Jinja2Rendered YAML <pre><code>departments:\n  {% for department, employees in {'Sales': ['Alice', 'Bob'], 'Engineering': ['Charlie', 'Dave']}.items() %}\n  - department: \"{{ department }}\"\n    employees:\n      {% for employee in employees %}\n      - name: \"{{ employee }}\"\n      {% endfor %}\n  {% endfor %}\n</code></pre> <pre><code>departments:\n  - department: \"Sales\"\n    employees:\n      - name: \"Alice\"\n      - name: \"Bob\"\n  - department: \"Engineering\"\n    employees:\n      - name: \"Charlie\"\n      - name: \"Dave\"\n</code></pre>"},{"location":"reference/functions/jinja/macros/","title":"Macros","text":""},{"location":"reference/functions/jinja/macros/#macros","title":"Macros","text":"<p>Macros are a powerful feature that enable dynamic content generation within your Visivo configuration files on compile. They enable you to perform a wide range of operations to support your visualizations, CI/CD process &amp; architecture across multiple environments. </p>"},{"location":"reference/functions/jinja/macros/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Environment Variables (<code>env_var</code>)</li> <li>Current Time (<code>now</code>)</li> <li>Unix Timestamp Converter (<code>to_unix</code>)</li> <li>ISO 8601 Formatter (<code>to_iso</code>)</li> <li>Custom Format Time (<code>to_str_format</code>)</li> <li>Timedelta Macro (<code>timedelta</code>)</li> <li>Read Json File (<code>read_json_file</code>)</li> </ul>"},{"location":"reference/functions/jinja/macros/#environment-variables-env_var","title":"Environment Variables (<code>env_var</code>)","text":"<p>Fetches the value of an environment variable for use in YAML configurations. If the variable is not found then <code>NOT-SET</code> is returned. </p> <p><code>env_var</code> is very useful for storing secrets &amp; configuring environment specific components of your project. </p> <pre><code>Args: \n    key (str): Name of the environment variable. \nReturns:\n    object: Value of the environment variable. \n</code></pre> <p>Examples</p> <p>It's very common to use the macros in your targets to ensure connection details are kept secret.</p> RawRendered Raw<pre><code>database_url: \"{{ env_var('DATABASE_URL') }}\"\n</code></pre> Rendered<pre><code>database_url: \"postgresql://myuser:mypass@localhost:5432/mydatabase\"\n</code></pre> <p>Another way you can use the macro is to configure visivo to compile differently in different environments. For example if you have <code>DEV</code>, <code>PROD</code> and <code>STAGING</code> environments where each injects their name into an env var called <code>LOCALITY</code> and you wanted to conditionally change the trace used depending on the locality you could do something like this: </p> RawRendered <code>LOCALITY = 'DEV'</code> <pre><code>charts:\n    - name: dynamic-chart\n      traces:\n      {%- if env_var('LOCALITY') == 'DEV' %}\n        - ${ref(dev-trace)}\n      {%- elif  env_var('LOCALITY') == 'STAGING' %}\n        - ${ref(staging-trace)}\n      {% else %}\n        - ${ref(prod-trace)}\n      {% endif %}\n      layout:\n        title:\n          text: \"Dynamic Chart With Trace {{ env_var(\"LOCALITY\") }}\"\n</code></pre> <pre><code>charts:\n    - name: dynamic-chart\n      traces:\n        - ${ref(dev-trace)}\n      layout:\n        title:\n          text: \"Dyanmic Chart With Trace DEV\"\n</code></pre>"},{"location":"reference/functions/jinja/macros/#current-time-now","title":"Current Time (<code>now</code>)","text":"<p>Generates the current Unix timestamp in seconds. Enables setting dynamic date and time values in configurations. This is particularly useful for controlling default chart ranges. </p> <pre><code>Args: \n    None\nReturns:\n    float: The current UTC unix timestamp.\n</code></pre> <p>Example</p> RawRendered <pre><code>timestamp_now: \"{{ now() }}\"\n</code></pre> <pre><code>timestamp_now: \"1711928451.845498\"\n</code></pre>"},{"location":"reference/functions/jinja/macros/#unix-timestamp-converter-to_unix","title":"Unix Timestamp Converter (<code>to_unix</code>)","text":"<p>Converts date strings to UTC Unix timestamps, supporting a wide range of formats for flexible date parsing. This conversion can be useful if you want to add or subtract units of time with the Timedelta Macro.</p> <pre><code>Args:\n    date_str (str): The string representing the date or date &amp; time.\n\nReturns:\n    float: The UTC unix timestamp.\n</code></pre> <p>Examples</p> <p>You can pass a plain date.</p> RawRendered <pre><code>start_date: \"{{ to_unix('2024-01-01') }}\"\n</code></pre> <pre><code>start_date: \"1704067200.0\"\n</code></pre> <p>The function will accept common date strings too.</p> RawRendered <pre><code>end_date: \"{{ to_unix('Dec 31, 2024') }}\"\n</code></pre> <pre><code>end_date: \"1735603200.0\"\n</code></pre> <p>Common time formats will get converted to unix as well.</p> RawRendered <pre><code>event_date: {{ to_unix('2024/12/24 18:00') }}\n</code></pre> <pre><code>event_date: 1735063200.0\n</code></pre>"},{"location":"reference/functions/jinja/macros/#iso-8601-formatter-to_iso","title":"ISO 8601 Formatter (<code>to_iso</code>)","text":"<p>Transforms Unix timestamps into ISO 8601 formatted strings, offering a standard date and time format for documentation and configuration. </p><pre><code>Args:\n    unix_timestamp (float): The UTC unix timestamp.\n\nReturns:\n    str: The ISO 8601 formatted string.\n</code></pre> <p>Examples</p> Example 1Example 2Example 3 <pre><code>creation_date: \"{{ to_iso(1609459200) }}\"\n</code></pre> <pre><code>update_date: \"{{ to_iso(1612137600) }}\"\n</code></pre> <pre><code>expiration_date: \"{{ to_iso(1619827200) }}\"\n</code></pre>"},{"location":"reference/functions/jinja/macros/#custom-format-time-to_str_format","title":"Custom Format Time (<code>to_str_format</code>)","text":"<p>Provides customized date and time formatting for Unix timestamps, allowing specific date-time representations. </p><pre><code>Args:\n    unix_timestamp (float): The UTC unix timestamp.\n    str_format (str): The format string.\n\nReturns:\n    str: The formatted string. \n</code></pre> <p>Examples</p> Example 1Example 2Example 3 <pre><code>simple_date: \"{{ to_str_format(1609459200, '%Y-%m-%d') }}\"\n</code></pre> <pre><code>verbose_date: \"{{ to_str_format(1609459200, '%A, %d %B %Y') }}\"\n</code></pre> <pre><code>time_stamp: \"{{ to_str_format(1609459200, '%H:%M:%S, %d %m %Y') }}\"\n</code></pre>"},{"location":"reference/functions/jinja/macros/#timedelta-timedelta","title":"Timedelta (<code>timedelta</code>)","text":"<p>Produces the seconds corresponding to the units of time passed to the function. This enables you to perform arithmetic operations on unix timestamps through adding or subtracting time intervals from a given date or time. You can add or subtract days, hours, minutes, seconds and micro seconds from a given date or time.</p> <pre><code>Args:\n    days (float): A negative or positive number. (Default 0)\n    seconds (float): A negative or positive number. (Default 0)\n    microseconds (float): A negative or positive number. (Default 0)\n    milliseconds (float): A negative or positive number. (Default 0)\n    hours (float): A negative or positive number. (Default 0)\n    weeks (float): A negative or positive number. (Default 0)\nReturns:\n    float: The seconds that the combination of arguments add up to. \n</code></pre> <p>Examples</p> <p>You can render the raw timedelta in seconds all on its own.</p> RawRendered <pre><code>interval: {{ timedelta(days=7) }}\n</code></pre> <pre><code>interval: 604800.0\n</code></pre> <p>A more common use of timedelta is to set relative dates. </p> RawRendered <pre><code>charts:\n  - name: ranged-chart\n    traces: \n      - ${ref(trace1)}\n      - ${ref(trace2)}\n    layout \n      xaxis:\n        range: \n          {%- set current_time = now() %}\n          - \"{{ to_iso(current_time - timedelta(days=7)) }}\"\n          - \"{{ to_iso(current_time) }}\"\n</code></pre> <pre><code>charts:\n  - name: ranged-chart\n    traces:\n      - ${ref(trace1)}\n      - ${ref(trace2)}\n    layout\n    xaxis:\n      range:\n        - \"2024-03-26T14:02:40.101522+00:00\"\n        - \"2024-04-02T14:02:40.101522+00:00\"\n</code></pre>"},{"location":"reference/functions/jinja/macros/#read-json-file-read_json_file","title":"Read Json File (<code>read_json_file</code>)","text":"<p>Enables you to read a <code>.json</code> file into a jinja object from a file. </p><pre><code>Args:\n    filepath (str): The relative or absolute file path to the .json\n\nReturns:\n    obj: The json represented as a jinja object.\n</code></pre> <p>Tip</p> <p>Passing an invalid file path will lead to a compile error, so ensure your file exists! </p> <p>This function is very useful to passing in configurations to Visivo for jinja loops or conditional statements. </p> <p>Example</p> <p>Rather than creating a long list in the jinja <code>{% set %}</code> you may want to store that information in a json file and just read it into the template using the macro. </p>dir/iterables.json<pre><code>{\"accounts\":[\"Acme Co\",\"Knights of Ni LTD\"]}\n</code></pre> <p>Then in your yaml file you can read in the configuration. </p> RawRendered dir/project.visivo.yml<pre><code>{%- set accounts = read_json_file(iterables.json)['accounts'] %}\n{%- for account in accounts %}\ntraces:\n  - name: {{ account }}-orders-per-week\n    model: ${ref(orders)}\n    props:\n      type: bar \n      x: ?{ date_trunc('week', created_at) }\n      y: ?{ count(distinct id) }\n    filters:\n      - ?{ account_name = '{{ account }}'}\n{%- endfor %}\n</code></pre> dir/project.visivo.yml<pre><code>traces:\n  - name: Acme Co-orders-per-week\n    model: ${ref(orders)}\n    props:\n      type: bar \n      x: ?{ date_trunc('week', created_at) }\n      y: ?{ count(distinct id) }\n    filters:\n      - ?{ account_name = 'Acme Co'}\n  - name: Knights of Ni LTD-orders-per-week\n    model: ${ref(orders)}\n    props:\n      type: bar \n      x: ?{ date_trunc('week', created_at) }\n      y: ?{ count(distinct id) }\n    filters:\n      - ?{ account_name = 'Knights of Ni LTD'}\n</code></pre>"},{"location":"reference/functions/jinja/variables/","title":"Variables","text":""},{"location":"reference/functions/jinja/variables/#variables","title":"Variables","text":"<p>You can set variables in yaml files using the jinja <code>{% set %}</code> macro. </p> <p>This enables you to keep your code cleaner by storing variables that you can reuse across the file.</p> <p>Example</p> <pre><code>{%- set current_timestamp = to_iso(now()) %}\n{%- set seven_days_ago = to_iso(to_unix(current_timestamp) - timedelta(days=7)) %}\ncharts:\n  ...\n  - name: cool-chart\n    ...\n    layout:\n      xaxis:\n        range: \n          - '{{ current_timestamp }}'\n          - '{{ seven_days_ago }}'\ntraces:\n  ...\n  - name: awesome-trace\n    model: ${ref(model-name)}\n    props:\n        type: bar \n        ...\n    filters:\n      - ?{date_column between '{{ seven_days_ago }}'::date and '{{ current_timestamp }}'::date }\n</code></pre> <p>It also gives you to the ability to store configurations and reuse them. </p> <p>Example</p> <pre><code>{%- set bar-marker-options %}\n      marker:\n        colorscale: 'Earth'\n        line:\n          color: 'blue'\n          opacity: 0.6\n{% endset %}\ntraces:\n  - name: first-trace\n    ...\n    props:\n      type: bar\n      {{ bar-marker-options }}\n  - name: second-trace\n    ...\n    props:\n      type: bar\n      {{ bar-marker-options }}\n</code></pre>"},{"location":"reference/functions/runtime_functions/","title":"Run Time Functions","text":""},{"location":"reference/functions/runtime_functions/#run-time-functions","title":"Run Time Functions","text":"<p>Run time functions are evaluated during a visivo run rather than on compile because they impact the DAG and have downstream dependencies. </p> <p>TODO: docs &amp; examples for current run time functions of <code>ref()</code>, <code>column()</code> and <code>query()</code></p>"},{"location":"reference/props-docs/","title":"Index","text":"<p>Markdown files in this directory will be rendered as a section in the traceprop model that matches the filename. </p>"},{"location":"topics/annotations/","title":"Annotations & Shapes","text":""},{"location":"topics/annotations/#shapes-and-annotations","title":"Shapes and Annotations","text":""},{"location":"topics/annotations/#introduction","title":"Introduction","text":"<p>Shapes and annotations are powerful tools in Visivo to enhance your visualizations by adding context, emphasis, and interactivity. </p> <p>TLDR</p> <p>Shapes enable you to highlight regions and set thresholds/targets, while annotations help add explanatory notes or call attention to specific data points.</p> <p>Checkout the live examples dashboard. It brings to life the examples below.</p> <p>Both shapes and annotations are configured through the layout property of charts.</p> <p>This guide explains how to use shapes and annotations in Visivo, including practical examples you can copy and paste into your projects.</p>"},{"location":"topics/annotations/#what-are-shapes","title":"What are Shapes?","text":"<p>Shapes in Visivo allow you to draw graphical elements like lines, rectangles, and circles on your visualization. They can be used to highlight regions, denote thresholds, or emphasize trends.</p> <p>Use Cases</p> <ul> <li>Highlight a time period in a time series chart </li> <li>Mark a threshold or limit with a line </li> <li>Show regions of interest in scatter plots </li> </ul>"},{"location":"topics/annotations/#what-are-annotations","title":"What are Annotations?","text":"<p>Annotations provide a way to add textual notes or labels to your visualizations. They can point to specific data points or regions, often with optional arrows for emphasis.</p> <p>Use Cases</p> <ul> <li>Add explanatory text to a chart </li> <li>Emphasize outliers or anomalies </li> <li>Provide detailed tooltips for better data understanding </li> </ul>"},{"location":"topics/annotations/#configuration-syntax","title":"Configuration Syntax","text":"<p>Shapes and annotations are defined in your chart.layout properties.</p>"},{"location":"topics/annotations/#shapes","title":"Shapes","text":"Example <pre><code>shapes:\n - type: rectangle\n    x0: 10\n    x1: 20\n    y0: 5\n    y1: 15\n    line:\n      color: red\n      width: 2\n    fillcolor: rgba(255, 0, 0, 0.2)\n</code></pre> <p>Configuration</p> <pre><code>shapes:\n  editable: 'boolean' # (1)!\n  fillcolor: 'color' # (2)!\n  fillrule: 'enumerated , one of ( \"evenodd\" | \"nonzero\" )' # (3)!\n  layer: 'enumerated , one of ( \"below\" | \"above\" )' # (4)!\n  line:\n    color: 'color' # (5)!\n    dash: 'string' # (6)!\n    width: 'number greater than or equal to 0' #(7)!\n  name: 'string' #(8)!\n  opacity: 'number between or equal to 0 and 1' #(9)!\n  path: 'string' #(10)!\n  templateitemname: 'string' #(11)!\n  type: 'enumerated , one of ( \"circle\" | \"rect\" | \"path\" | \"line\" )' #(12)!\n  visible: 'boolean' #(13)!\n  x0: 'number or categorical coordinate string' #(14)!\n  x1: 'number or categorical coordinate string' #(15)!\n  xanchor: 'number or categorical coordinate string' #(16)!\n  xref: 'enumerated , one of ( \"paper\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" )' #(17)!\n  xsizemode: 'enumerated , one of ( \"scaled\" | \"pixel\" )' #(18)!\n  y0: 'number or categorical coordinate string' #(19)!\n  y1: 'number or categorical coordinate string' #(20)!\n  yanchor: 'number or categorical coordinate string' #(21)!\n  yref: 'enumerated , one of ( \"paper\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )' #(22)!\n  ysizemode: 'enumerated , one of ( \"scaled\" | \"pixel\" )' #(23)!\n</code></pre> <ol> <li>Determines whether the shape could be activated for edit or not. Has no effect when the older editable shapes mode is enabled via <code>config.editable</code> or <code>config.edits.shapePosition</code>. </li> <li>Sets the color filling the shape's interior. Only applies to closed shapes. </li> <li>Determines which regions of complex paths constitute the interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule </li> <li>Specifies whether shapes are drawn below or above traces. </li> <li>Sets the line color. </li> <li>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\"). </li> <li>Sets the line width (in px). </li> <li>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with <code>templateitemname</code> matching this <code>name</code> alongside your modifications (including <code>visible: false</code> or <code>enabled: false</code> to hide it). Has no effect outside of a template. </li> <li>Sets the opacity of the shape. </li> <li>For <code>type</code> \"path\" - a valid SVG path with the pixel values replaced by data values in <code>xsizemode</code>/<code>ysizemode</code> being \"scaled\" and taken unmodified as pixels relative to <code>xanchor</code> and <code>yanchor</code> in case of \"pixel\" size mode. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained \"polybezier\" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789 </li> <li>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with <code>templateitemname</code> matching its <code>name</code>, alongside your modifications (including <code>visible: false</code> or <code>enabled: false</code> to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with <code>visible: true</code>. </li> <li>Specifies the shape type to be drawn. If \"line\", a line is drawn from (<code>x0</code>,<code>y0</code>) to (<code>x1</code>,<code>y1</code>) with respect to the axes' sizing mode. If \"circle\", a circle is drawn from ((<code>x0</code>+<code>x1</code>)/2, (<code>y0</code>+<code>y1</code>)/2)) with radius (|(<code>x0</code>+<code>x1</code>)/2 - <code>x0</code>|, |(<code>y0</code>+<code>y1</code>)/2 -<code>y0</code>)|) with respect to the axes' sizing mode. If \"rect\", a rectangle is drawn linking (<code>x0</code>,<code>y0</code>), (<code>x1</code>,<code>y0</code>), (<code>x1</code>,<code>y1</code>), (<code>x0</code>,<code>y1</code>), (<code>x0</code>,<code>y0</code>) with respect to the axes' sizing mode. If \"path\", draw a custom SVG path using <code>path</code>. with respect to the axes' sizing mode. </li> <li>Determines whether or not this shape is visible. </li> <li>Sets the shape's starting x position. See <code>type</code> and <code>xsizemode</code> for more info. </li> <li>Sets the shape's end x position. See <code>type</code> and <code>xsizemode</code> for more info. </li> <li>Only relevant in conjunction with <code>xsizemode</code> set to \"pixel\". Specifies the anchor point on the x axis to which <code>x0</code>, <code>x1</code> and x coordinates within <code>path</code> are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when <code>xsizemode</code> not set to \"pixel\". </li> <li>Sets the shape's x coordinate axis. If set to a x axis id (e.g. \"x\" or \"x2\"), the <code>x</code> position refers to a x coordinate. If set to \"paper\", the <code>x</code> position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis. </li> <li>Sets the shapes's sizing mode along the x axis. If set to \"scaled\", <code>x0</code>, <code>x1</code> and x coordinates within <code>path</code> refer to data values on the x axis or a fraction of the plot area's width (<code>xref</code> set to \"paper\"). If set to \"pixel\", <code>xanchor</code> specifies the x position in terms of data or plot fraction but <code>x0</code>, <code>x1</code> and x coordinates within <code>path</code> are pixels relative to <code>xanchor</code>. This way, the shape can have a fixed width while maintaining a position relative to data or plot fraction. </li> <li>Sets the shape's starting y position. See <code>type</code> and <code>ysizemode</code> for more info. </li> <li>Sets the shape's end y position. See <code>type</code> and <code>ysizemode</code> for more info. </li> <li>Only relevant in conjunction with <code>ysizemode</code> set to \"pixel\". Specifies the anchor point on the y axis to which <code>y0</code>, <code>y1</code> and y coordinates within <code>path</code> are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when <code>ysizemode</code> not set to \"pixel\". </li> <li>Sets the shape's y coordinate axis. If set to a y axis id (e.g. \"y\" or \"y2\"), the <code>y</code> position refers to a y coordinate. If set to \"paper\", the <code>y</code> position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis. </li> <li>Sets the shapes's sizing mode along the y axis. If set to \"scaled\", <code>y0</code>, <code>y1</code> and y coordinates within <code>path</code> refer to data values on the y axis or a fraction of the plot area's height (<code>yref</code> set to \"paper\"). If set to \"pixel\", <code>yanchor</code> specifies the y position in terms of data or plot fraction but <code>y0</code>, <code>y1</code> and y coordinates within <code>path</code> are pixels relative to <code>yanchor</code>. This way, the shape can have a fixed height while maintaining a position relative to data or plot fraction.</li> </ol>"},{"location":"topics/annotations/#annotations","title":"Annotations","text":"<p>The configuration options for annotations are quite extensive; however, they are pretty simple to set up most of the time (see example).</p> Example <pre><code>annotations:\n  - x: 15\n    y: 10\n    text: \"Important Point\"\n    showarrow: true\n    arrowhead: 2\n    ax: 0\n    ay: -40\n    font:\n      size: 12\n      color: blue\n</code></pre> <p>Configuration</p> <pre><code>annotations:\n  align: 'enumerated , one of ( \"left\" | \"center\" | \"right\" )' #(1)!\n  arrowcolor: 'color' #(2)!\n  arrowhead: 'integer between or equal to 0 and 8' #(3)!\n  arrowside: 'flaglist string. any combination of \"end\", \"start\" joined with a \"+\" or \"none\".' #(4)!\n  arrowsize: 'number greater than or equal to 0.3' #(5)!\n  arrowwidth: 'number greater than or equal to 0.1' #(6)!\n  ax: 'number or categorical coordinate string' #(7)!\n  axref: 'enumerated , one of ( \"pixel\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" )' #(8)!\n  ay: 'number or categorical coordinate string' #(9)!\n  ayref: 'enumerated , one of ( \"pixel\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )' #(10)!\n  bgcolor: 'color' #(11)!\n  bordercolor: 'color' #(12)!\n  borderpad: 'number greater than or equal to 0' #(13)!\n  borderwidth: 'number greater than or equal to 0' #(14)!\n  captureevents: 'boolean' #(15)!\n  clicktoshow: 'enumerated , one of ( false | \"onoff\" | \"onout\" )' #(16)!\n  font:\n    color: color\n    family: 'string' #(17)!\n    size: number greater than or equal to 1\n  height: 'number greater than or equal to 1' #(18)!\n  hoverlabel:\n    bgcolor: 'color' #(19)!\n    bordercolor: 'color' #(20)!\n    font:\n      color: color\n      family: 'string' #(21)!\n      size: number greater than or equal to 1\n  hovertext: 'string' #(22)!\n  name: 'string' #(23)!\n  opacity: 'number between or equal to 0 and 1' #(24)!\n  showarrow: 'boolean' #(25)!\n  standoff: 'number greater than or equal to 0' #(26)!\n  startarrowhead: 'integer between or equal to 0 and 8' #(27)!\n  startarrowsize: 'number greater than or equal to 0.3' #(28)!\n  startstandoff: 'number greater than or equal to 0' #(29)!\n  templateitemname: 'string' #(30)!\n  text: 'string' #(31)!\n  textangle: 'angle' #(32)!\n  valign: 'enumerated , one of ( \"top\" | \"middle\" | \"bottom\" )' #(33)!\n  visible: 'boolean' #(34)!\n  width: 'number greater than or equal to 1' #(35)!\n  x: 'number or categorical coordinate string' #(36)!\n  xanchor: 'enumerated , one of ( \"auto\" | \"left\" | \"center\" | \"right\" )' #(37)!\n  xclick: 'number or categorical coordinate string' #(38)!\n  xref: 'enumerated , one of ( \"paper\" | \"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\" )' #(39)!\n  xshift: 'number' #(40)!\n  y: 'number or categorical coordinate string' #(41)!\n  yanchor: 'enumerated , one of ( \"auto\" | \"top\" | \"middle\" | \"bottom\" ) #(42)!\n  yclick: 'number or categorical coordinate string' #(43)!\n  yref: 'enumerated , one of ( \"paper\" | \"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\" )' #(44)!\n  yshift: 'number' #(45)!\n</code></pre> <ol> <li>HTML tags or if an explicit width is set to override the text width. </li> <li>Sets the color of the annotation arrow. </li> <li>Sets the end annotation arrow head style. </li> <li>Sets the annotation arrow head position. </li> <li>Sets the size of the end annotation arrow head, relative to <code>arrowwidth</code>. A value of 1 (default) gives a head about 3x as wide as the line. </li> <li>Sets the width (in px) of annotation arrow line. </li> <li>Sets the x component of the arrow tail about the arrow head. If <code>axref</code> is <code>pixel</code>, a positive (negative) component corresponds to an arrow pointing from right to left (left to right). If <code>axref</code> is not <code>pixel</code> and is exactly the same as <code>xref</code>, this is an absolute value on that axis, like <code>x</code>, specified in the same coordinates as <code>xref</code>. </li> <li>Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a x axis id (e.g. \"x\" or \"x2\"), the <code>x</code> position refers to a x coordinate. If set to \"paper\", the <code>x</code> position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis. In order for absolute positioning of the arrow to work, \"axref\" must be exactly the same as \"xref\", otherwise \"axref\" will revert to \"pixel\" (explained next). For relative positioning, \"axref\" can be set to \"pixel\", in which case the \"ax\" value is specified in pixels relative to \"x\". Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point. </li> <li>Sets the y component of the arrow tail about the arrow head. If <code>ayref</code> is <code>pixel</code>, a positive (negative) component corresponds to an arrow pointing from bottom to top (top to bottom). If <code>ayref</code> is not <code>pixel</code> and is exactly the same as <code>yref</code>, this is an absolute value on that axis, like <code>y</code>, specified in the same coordinates as <code>yref</code>. </li> <li>Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a y axis id (e.g. \"y\" or \"y2\"), the <code>y</code> position refers to a y coordinate. If set to \"paper\", the <code>y</code> position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis. In order for absolute positioning of the arrow to work, \"ayref\" must be exactly the same as \"yref\", otherwise \"ayref\" will revert to \"pixel\" (explained next). For relative positioning, \"ayref\" can be set to \"pixel\", in which case the \"ay\" value is specified in pixels relative to \"y\". Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point. </li> <li>Sets the background color of the annotation. </li> <li>Sets the color of the border enclosing the annotation <code>text</code>. </li> <li>Sets the padding (in px) between the <code>text</code> and the enclosing border. </li> <li>Sets the width (in px) of the border enclosing the annotation <code>text</code>. </li> <li>Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default <code>captureevents</code> is \"false\" unless <code>hovertext</code> is provided. If you use the event <code>plotly_clickannotation</code> without <code>hovertext</code> you must explicitly enable <code>captureevents</code>. </li> <li>Makes this annotation respond to clicks on the plot. If you click a data point that exactly matches the <code>x</code> and <code>y</code> values of this annotation, and it is hidden (visible: false), it will appear. In \"onoff\" mode, you must click the same point again to make it disappear, so if you click multiple points, you can show multiple annotations. In \"onout\" mode, a click anywhere else in the plot (on another data point or not) will hide this annotation. If you need to show/hide this annotation in response to different <code>x</code> or <code>y</code> values, you can set <code>xclick</code> and/or <code>yclick</code>. This is useful for example to label the side of a bar. To label markers though, <code>standoff</code> is preferred over <code>xclick</code> and <code>yclick</code>. </li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\". </li> <li>Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped. </li> <li>Sets the background color of the hover label. By default uses the annotation's <code>bgcolor</code> made opaque, or white if it was transparent. </li> <li>Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with <code>hoverlabel.bgcolor</code>. </li> <li>HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include \"Arial\", \"Balto\", \"Courier New\", \"Droid Sans\",, \"Droid Serif\", \"Droid Sans Mono\", \"Gravitas One\", \"Old Standard TT\", \"Open Sans\", \"Overpass\", \"PT Sans Narrow\", \"Raleway\", \"Times New Roman\". </li> <li>Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear. </li> <li>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with <code>templateitemname</code> matching this <code>name</code> alongside your modifications (including <code>visible: false</code> or <code>enabled: false</code> to hide it). Has no effect outside of a template. </li> <li>Sets the opacity of the annotation (text + arrow). </li> <li>Determines whether or not the annotation is drawn with an arrow. If \"true\", <code>text</code> is placed near the arrow's tail. If \"false\", <code>text</code> lines up with the <code>x</code> and <code>y</code> provided. </li> <li>Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the <code>ax</code> / <code>ay</code> vector, in contrast to <code>xshift</code> / <code>yshift</code> which moves everything by this amount. </li> <li>Sets the start annotation arrow head style. </li> <li>Sets the size of the start annotation arrow head, relative to <code>arrowwidth</code>. A value of 1 (default) gives a head about 3x as wide as the line. </li> <li>Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the <code>ax</code> / <code>ay</code> vector, in contrast to <code>xshift</code> / <code>yshift</code> which moves everything by this amount. </li> <li>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with <code>templateitemname</code> matching its <code>name</code>, alongside your modifications (including <code>visible: false</code> or <code>enabled: false</code> to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with <code>visible: true</code>. </li> <li>), bold (), italics (), hyperlinks. Tags , <sup>, <sub>  are also supported. </sub></sup></li> <li>Sets the angle at which the <code>text</code> is drawn with respect to the horizontal. </li> <li>Sets the vertical alignment of the <code>text</code> within the box. Has an effect only if an explicit height is set to override the text height. </li> <li>Determines whether or not this annotation is visible. </li> <li>to start a new line. </li> <li>Sets the annotation's x position. If the axis <code>type</code> is \"log\", then you must take the log of your desired range. If the axis <code>type</code> is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis <code>type</code> is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. </li> <li>Sets the text box's horizontal position anchor This anchor binds the <code>x</code> position to the \"left\", \"center\" or \"right\" of the annotation. For example, if <code>x</code> is set to 1, <code>xref</code> to \"paper\" and <code>xanchor</code> to \"right\" then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If \"auto\", the anchor is equivalent to \"center\" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side. </li> <li>Toggle this annotation when clicking a data point whose <code>x</code> value is <code>xclick</code> rather than the annotation's <code>x</code> value. </li> <li>Sets the annotation's x coordinate axis. If set to a x axis id (e.g. \"x\" or \"x2\"), the <code>x</code> position refers to a x coordinate. If set to \"paper\", the <code>x</code> position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis. </li> <li>Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels. </li> <li>Sets the annotation's y position. If the axis <code>type</code> is \"log\", then you must take the log of your desired range. If the axis <code>type</code> is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis <code>type</code> is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. </li> <li>Sets the text box's vertical position anchor This anchor binds the <code>y</code> position to the \"top\", \"middle\" or \"bottom\" of the annotation. For example, if <code>y</code> is set to 1, <code>yref</code> to \"paper\" and <code>yanchor</code> to \"top\" then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If \"auto\", the anchor is equivalent to \"middle\" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side. </li> <li>Toggle this annotation when clicking a data point whose <code>y</code> value is <code>yclick</code> rather than the annotation's <code>y</code> value. </li> <li>Sets the annotation's y coordinate axis. If set to a y axis id (e.g. \"y\" or \"y2\"), the <code>y</code> position refers to a y coordinate. If set to \"paper\", the <code>y</code> position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis. </li> <li>Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.</li> </ol>"},{"location":"topics/annotations/#examples","title":"Examples","text":"<p>Below are examples demonstrating how to use shapes and annotations in Visivo charts. The examples are grouped into tabs for easy navigation.</p>"},{"location":"topics/annotations/#highlighting-regions","title":"Highlighting Regions","text":"<p>Highlighting regions in your charts helps draw attention to important areas or patterns in your data. You can use shapes like rectangles or circles to emphasize specific time periods, value ranges, or clusters of data points. The transparency of the fill color allows the underlying data to remain visible while still clearly marking the region of interest.</p> Highlight a RegionMark Multiple RegionsRegion with Annotation <p>This example shows how to highlight a specific region in a scatter plot using a rectangle shape.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: scatter_data\n    args:\n      - echo\n      - |\n        x,y\n        1,2\n        2,3\n        3,4\n        4,5\n        5,6\n\ntraces:\n  - name: scatter_trace\n    model: ${ref(scatter_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: markers\n      marker:\n        color: blue\n\ncharts:\n  - name: scatter_with_rectangle\n    traces:\n      - ${ref(scatter_trace)}\n    layout:\n      title: Highlighted Region in Scatter Plot\n      shapes:\n        - type: rect\n          x0: 2\n          x1: 4\n          y0: 3\n          y1: 5\n          line:\n            color: rgba(255, 0, 0, 1)\n            width: 2\n          fillcolor: rgba(255, 0, 0, 0.2)\n</code></pre> <p>This example demonstrates how to mark multiple regions on a scatter plot using rectangles.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: scatter_data\n    args:\n      - echo\n      - |\n        x,y\n        1,2\n        2,3\n        3,4\n        4,5\n        5,6\n\ntraces:\n  - name: scatter_trace\n    model: ${ref(scatter_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: markers\n      marker:\n        color: green\n\ncharts:\n  - name: scatter_with_multiple_regions\n    traces:\n      - ${ref(scatter_trace)}\n    layout:\n      title: Multiple Highlighted Regions\n      shapes:\n        - type: rect\n          x0: 1\n          x1: 2\n          y0: 2\n          y1: 3\n          line:\n            color: rgba(0, 0, 255, 1)\n            width: 2\n          fillcolor: rgba(0, 0, 255, 0.2)\n        - type: rect\n          x0: 4\n          x1: 5\n          y0: 5\n          y1: 6\n          line:\n            color: rgba(0, 255, 0, 1)\n            width: 2\n          fillcolor: rgba(0, 255, 0, 0.2)\n</code></pre> <p>This example shows how to combine a rectangle shape with an annotation to explain its significance.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: scatter_data\n    args:\n      - echo\n      - |\n        x,y\n        1,2\n        2,3\n        3,4\n        4,5\n        5,6\n\ntraces:\n  - name: scatter_trace\n    model: ${ref(scatter_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: markers\n      marker:\n        color: purple\n\ncharts:\n  - name: scatter_with_region_annotation\n    traces:\n      - ${ref(scatter_trace)}\n    layout:\n      title: Highlighted Region with Annotation\n      shapes:\n        - type: rect\n          x0: 3\n          x1: 5\n          y0: 4\n          y1: 6\n          line:\n            color: rgba(255, 165, 0, 1)\n            width: 2\n          fillcolor: rgba(255, 165, 0, 0.2)\n      annotations:\n        - x: 4\n          y: 5\n          text: \"Key Area\"\n          showarrow: true\n          arrowhead: 2\n          ax: 0\n          ay: -40\n          font:\n            size: 12\n            color: black\n</code></pre>"},{"location":"topics/annotations/#adding-thresholds-and-limits","title":"Adding Thresholds and Limits","text":"<p>Thresholds and limits are powerful tools for tracking goals, targets, and critical boundaries in your data visualizations. They help viewers quickly identify when values cross important thresholds and provide visual context for performance metrics.</p> Threshold LineVertical ThresholdThreshold with Annotation <p>Add a horizontal threshold line to indicate a limit on the y-axis.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: line_data\n    args:\n      - echo\n      - |\n        x,y\n        1,5\n        2,8\n        3,6\n        4,10\n        5,12\n\ntraces:\n  - name: line_trace\n    model: ${ref(line_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: lines\n      line:\n        color: blue\n\ncharts:\n  - name: line_with_threshold\n    traces:\n      - ${ref(line_trace)}\n    layout:\n      title: Threshold Line Example\n      shapes:\n        - type: line\n          x0: 1\n          x1: 5\n          y0: 8\n          y1: 8\n          line:\n            color: red\n            width: 2\n            dash: dash\n</code></pre> <p>Add a vertical line for x-axis thresholds.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: vertical_threshold_data\n    args:\n      - echo\n      - |\n        x,y\n        1,2\n        2,4\n        3,8\n        4,6\n        5,10\n\ntraces:\n  - name: vertical_line_trace\n    model: ${ref(vertical_threshold_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: lines\n      line:\n        color: green\n\ncharts:\n  - name: vertical_line_threshold\n    traces:\n      - ${ref(vertical_line_trace)}\n    layout:\n      title: Vertical Threshold Line Example\n      shapes:\n        - type: line\n          x0: 3\n          x1: 3\n          y0: 0\n          y1: 10\n          line:\n            color: orange\n            width: 2\n            dash: dot\n</code></pre> <p>Combine threshold line with annotation for explanation.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: threshold_annotation_data\n    args:\n      - echo\n      - |\n        x,y\n        1,3\n        2,6\n        3,9\n        4,12\n        5,15\n\ntraces:\n  - name: threshold_annotation_trace\n    model: ${ref(threshold_annotation_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: lines\n      line:\n        color: purple\n\ncharts:\n  - name: threshold_with_annotation\n    traces:\n      - ${ref(threshold_annotation_trace)}\n    layout:\n      title: Threshold with Annotation\n      shapes:\n        - type: line\n          x0: 1\n          x1: 5\n          y0: 9\n          y1: 9\n          line:\n            color: red\n            width: 2\n            dash: solid\n      annotations:\n        - x: 3\n          y: 9\n          text: \"Critical Threshold\"\n          showarrow: true\n          arrowhead: 3\n          ax: 0\n          ay: -40\n          font:\n            size: 14\n            color: black\n</code></pre>"},{"location":"topics/annotations/#annotating-key-points","title":"Annotating Key Points","text":"<p>Key points are data points that are particularly important or noteworthy. Annotating these points helps viewers understand the significance of specific data points and draw attention to them.</p> Multiple PointsPoint with Region <p>Annotate multiple outliers or key points.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: multiple_points_data\n    args:\n      - echo\n      - |\n        x,y\n        1,5\n        2,8\n        3,3\n        4,10\n        5,6\n\ntraces:\n  - name: multiple_points_trace\n    model: ${ref(multiple_points_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: markers\n      marker:\n        color: green\n\ncharts:\n  - name: multiple_points_annotation\n    traces:\n      - ${ref(multiple_points_trace)}\n    layout:\n      title: Multiple Points Annotation\n      annotations:\n        - x: 2\n          y: 8\n          text: \"Peak\"\n          showarrow: true\n          arrowhead: 2\n          ax: 10\n          ay: -40\n          font:\n            size: 12\n            color: blue\n        - x: 4\n          y: 10\n          text: \"Outlier\"\n          showarrow: true\n          arrowhead: 3\n          ax: -20\n          ay: 30\n          font:\n            size: 12\n            color: red\n</code></pre> <p>Combine point annotation with region highlighting.</p> <p>Code</p> <pre><code>models:\n  - name: point_region_data\n    args:\n      - echo\n      - |\n        x,y\n        1,3\n        2,6\n        3,9\n        4,12\n        5,15\n\ntraces:\n  - name: point_region_trace\n    model: ${ref(point_region_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: markers\n      marker:\n        color: purple\n\ncharts:\n  - name: point_with_region\n    traces:\n      - ${ref(point_region_trace)}\n    layout:\n      title: Point with Region\n      shapes:\n        - type: rect\n          x0: 2\n          x1: 4\n          y0: 6\n          y1: 12\n          line:\n            color: rgba(255, 165, 0, 1)\n            width: 2\n          fillcolor: rgba(255, 165, 0, 0.2)\n      annotations:\n        - x: 3\n          y: 9\n          text: \"Important Area\"\n          showarrow: true\n          arrowhead: 2\n          ax: 0\n          ay: -50\n          font:\n            size: 14\n            color: black\n</code></pre>"},{"location":"topics/annotations/#emoji-hover-text","title":"Emoji Hover Text","text":"<p>Emoji annotations are a creative way to add small, non-intrusive icons to your charts. By using hover effects, they can provide additional context or explanations without overcrowding the visualization. This section demonstrates how to implement emoji annotations effectively in Visivo.</p> <p>Best Practices</p> <ul> <li>Keep emoji usage relevant and avoid overloading the chart.</li> <li>Use hover effects for additional context to avoid clutter.</li> <li>Choose emojis that clearly communicate the intended meaning.</li> </ul> <p>Below are three examples showcasing the use of emoji annotations.</p> Highlight Data Points with EmojisUse Emojis to Highlight ThresholdsCombine Emojis and Regions <p>This example shows how to annotate specific data points with emojis.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: emoji_data\n    args:\n      - echo\n      - |\n        x,y\n        1,2\n        2,4\n        3,8\n        4,6\n        5,10\n\ntraces:\n  - name: emoji_trace\n    model: ${ref(emoji_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: markers\n      marker:\n        color: green\n\ncharts:\n  - name: emoji_annotations_chart\n    traces:\n      - ${ref(emoji_trace)}\n    layout:\n      title: Emoji Annotations for Data Points\n      annotations:\n        - x: 3\n          y: 8\n          text: \"\ud83d\udd25\"\n          showarrow: true\n          arrowhead: 3\n          ax: 0\n          ay: -30\n          hovertext: \"This is the peak value\"\n          font:\n            size: 16\n        - x: 5\n          y: 10\n          text: \"\ud83c\udfaf\"\n          showarrow: true\n          arrowhead: 3\n          ax: 0\n          ay: -40\n          hovertext: \"Target achieved!\"\n          font:\n            size: 16\n</code></pre> <p>Combine emojis with threshold lines for better visualization.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: threshold_emoji_data\n    args:\n      - echo\n      - |\n        x,y\n        1,5\n        2,8\n        3,6\n        4,10\n        5,12\n\ntraces:\n  - name: threshold_emoji_trace\n    model: ${ref(threshold_emoji_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: lines\n      line:\n        color: blue\n\ncharts:\n  - name: threshold_with_emojis\n    traces:\n      - ${ref(threshold_emoji_trace)}\n    layout:\n      title: Threshold Line with Emojis\n      shapes:\n        - type: line\n          x0: 1\n          x1: 5\n          y0: 8\n          y1: 8\n          line:\n            color: red\n            width: 2\n            dash: dash\n      annotations:\n        - x: 3\n          y: 8\n          text: \"\u26a0\ufe0f\"\n          showarrow: false\n          hovertext: \"Warning: Threshold crossed\"\n          font:\n            size: 16\n</code></pre> <p>Use emojis to annotate regions of interest.</p> <p></p> <p>Code</p> <pre><code>models:\n  - name: region_emoji_data\n    args:\n      - echo\n      - |\n        x,y\n        1,2\n        2,4\n        3,6\n        4,8\n        5,10\n\ntraces:\n  - name: region_emoji_trace\n    model: ${ref(region_emoji_data)}\n    props:\n      type: scatter\n      x: ?{x}\n      y: ?{y}\n      mode: markers\n      marker:\n        color: orange\n\ncharts:\n  - name: region_with_emojis\n    traces:\n      - ${ref(region_emoji_trace)}\n    layout:\n      title: Region Highlighted with Emojis\n      shapes:\n        - type: rect\n          x0: 2\n          x1: 4\n          y0: 4\n          y1: 8\n          line:\n            color: rgba(0, 0, 255, 1)\n            width: 2\n          fillcolor: rgba(0, 0, 255, 0.2)\n      annotations:\n        - x: 3\n          y: 6\n          text: \"\ud83d\udca1\"\n          showarrow: false\n          hovertext: \"Interesting data here\"\n          font:\n            size: 16\n</code></pre> <p>With these examples, you can creatively use emoji annotations to make your charts more engaging and informative.</p>"},{"location":"topics/annotations/#best-practices","title":"Best Practices","text":""},{"location":"topics/annotations/#colors-and-styling","title":"Colors and Styling","text":"<ul> <li>Use consistent colors throughout your visualizations for better readability</li> <li>Choose contrasting colors between shapes/annotations and the underlying data</li> <li>Consider color-blind friendly palettes when selecting colors</li> <li>Use semi-transparent fill colors for shapes to avoid obscuring data points</li> <li>Maintain consistent font styles and sizes across annotations</li> </ul>"},{"location":"topics/annotations/#layout-and-positioning","title":"Layout and Positioning","text":"<ul> <li>Position annotations to minimize overlap with data points</li> <li>Use arrow positions strategically to point to exact features</li> <li>Leave adequate whitespace around annotations for readability</li> <li>Consider the chart's aspect ratio when placing shapes and annotations</li> </ul>"},{"location":"topics/annotations/#content-and-clarity","title":"Content and Clarity","text":"<ul> <li>Write clear, concise annotation text that adds meaningful context</li> <li>Avoid excessive use of shapes/annotations to prevent visual clutter</li> <li>Ensure all shapes and annotations serve a specific purpose</li> <li>Use hover text for additional details rather than cramming text into annotations</li> <li>Group related annotations visually when possible</li> </ul>"},{"location":"topics/annotations/#technical-considerations","title":"Technical Considerations","text":"<ul> <li>Test annotations at different screen sizes to ensure readability</li> <li>Verify that shapes scale appropriately with zoom levels</li> <li>Consider using templates for consistent annotation styling</li> <li>Document any custom annotation styles in your configuration</li> </ul> <p>With these examples and best practices, you can explore the full power of shapes and annotations in Visivo while creating clear and effective visualizations.</p>"},{"location":"topics/deployments/","title":"Deployment","text":""},{"location":"topics/deployments/#deployment","title":"Deployment","text":"<p>Continuous visualization testing in production  and deploying dashboards as part of a CI/CD pipeline  are critical components of a high quality data stack that stakeholders can depends on. These deployments create opportunities to prevent, discover and fix bugs proactively </p>"},{"location":"topics/deployments/#api-key","title":"API Key","text":"<p>If you plan to deploy to the Visivo cloud using <code>visivo deploy</code> then you will need an API key. </p> <p>You can get an api key by logging into your profile at app.visivo.io.</p> <p>Note</p> <p>Visivo will put your API in the right place during <code>visivo init</code> however there's a few other option if you want to store your API key differently. </p> Env VarSpecial Location <ul> <li>Store your Visivo token in an environment variable.</li> <li>Create a file called <code>profile.yml</code> anywhere in the project and include this in the first line: <code>token: '{{ env_var('YOUR_TOKEN_ENV_VAR')}}'</code>.</li> </ul> <p>The nice thing about this method is that it makes setting up a CI like github actions super easy with a different token. </p> <ul> <li>Create a file called <code>profile.yml</code> at this location: <code>~/.visivo/profile.yml</code></li> <li>Add this to the the first line of the file: `token: 'your-visivo-token'</li> </ul> <p>This approach is a little easier for those who are not sure how to configure environment variables.</p>"},{"location":"topics/deployments/#cicd","title":"CI/CD","text":"<p>It's highly recommended that you create a staging version of your project anytime that someone on your team creates a pull request. This is beneficial for a few reasons.</p> <ul> <li> <p> Preview your Project </p> <p>View how changes impact your project visually before production.</p> </li> <li> <p> Test Changes </p> <p>Understand how changes to downstream nodes impact upstream nodes.</p> </li> <li> <p> Streamline Collaboration</p> <p>Improve your peer reviews by relating code changes to visual changes.</p> </li> <li> <p> Increase Development Speed</p> <p>Gone are the days of data visualizations being built and deployed in production. </p> </li> </ul>"},{"location":"topics/deployments/#mint","title":"Mint","text":"<p>Mint is a great way to deploy Visivo. It's caching functionality, concurrency and debugging can make development of Mint workflows much easier than Git Actions. The workflows below will deploy a stage when the pull request is updated and archive it when the pull request is closed. </p>"},{"location":"topics/deployments/#configuration","title":"Configuration","text":"<ol> <li>Add your deployment token as <code>VISIVO_TOKEN</code>, database credentials and other env variables to your Mint vault.</li> <li>Add a workflow similar to the following yml. </li> </ol> Direct Target ConnectionGoogle Cloud SQL .mint/manage_ci.yml<pre><code>on:\n  github:\n    pull_request:\n      actions: [opened, reopened, synchronize, closed]\n      init:\n        commit-sha: ${{ event.git.sha }}\n        head-ref: ${{ event.git.branch  }}\n        deploy: ${{ event.github.pull_request.pull_request.merged == false &amp;&amp; event.github.pull_request.pull_request.state == 'open' }}\n        archive: ${{ event.github.pull_request.pull_request.merged == true &amp;&amp; event.github.pull_request.pull_request.state == 'closed' }}\n\ntasks:\n  - key: code\n    call: mint/git-clone 1.1.6\n    with:\n      repository: https://github.com/visivo-io/analytics.git\n      ref: ${{ init.commit-sha }}\n      github-access-token: ${{ github.token }} #(1)!\n\n  - key: python\n    call: mint/install-python 1.1.0\n    with:\n      python-version: 3.10.0\n\n  - key: install-visivo\n    use: [python]\n    run: pip install visivo #(2)!\n\n  - key: run-visivo\n    if: ${{ init.deploy }}\n    use: [install-visivo, code]\n    run: visivo run\n    env: \n      DB_PASSWORD: ${{ secrets.DB_PASSWORD }} #(4)!\n      DB_USERNAME: ${{ secrets.DB_USERNAME }} \n      DB_HOST: localhost \n\n  - key: deploy-ci-stage\n    if: ${{ init.deploy }}\n    use: [run-visivo]\n    run: visivo deploy -s ${{ init.head-ref }}\n    env: \n      VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }} \n\n  - key: archive-ci-stage\n    if: ${{ init.archive }}\n    use: [install-visivo, code]\n    run: visivo archive -s ${{ init.head-ref }}\n    env:\n      VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }} #(3)!\n</code></pre> <ol> <li>Mint automatically configures a clone token when you connect it to github. You should be able to find it in your mint vault.</li> <li>Specifying a version of visivo can be a good idea. For example- <code>pip install git+https://github.com/visivo-io/visivo.git@v1.0.9</code></li> <li>You can get your visivo token from app.visivo.io. </li> <li>This assumes that you have a target set up in your project that depends on these env variables for connection. </li> </ol> <p>Note</p> <p>The example below is for a project that runs Visivo against google cloud SQL. You will likely need to pass additional secrets and alter authentication steps to connect to your targets.</p> .mint/manage_ci_gcp_cloud_sql_target.yml<pre><code>on:\n  github:\n    pull_request:\n      actions: [opened, reopened, synchronize, closed]\n      init:\n        commit-sha: ${{ event.git.sha }}\n        head-ref: ${{ event.git.branch  }}\n        deploy: ${{ event.github.pull_request.pull_request.merged == false &amp;&amp; event.github.pull_request.pull_request.state == 'open' }}\n        archive: ${{ event.github.pull_request.pull_request.merged == true &amp;&amp; event.github.pull_request.pull_request.state == 'closed' }}\n\ntasks:\n  - key: code\n    call: mint/git-clone 1.1.6\n    with:\n      repository: https://github.com/visivo-io/analytics.git\n      ref: ${{ init.commit-sha }}\n      github-access-token: ${{ github.token }} #(3)!\n\n  - key: python\n    call: mint/install-python 1.1.0\n    with:\n      python-version: 3.10.0\n\n  - key: install-visivo\n    use: [python]\n    run: pip install visivo #(4)!\n\n  - key: gcloud-cli # (1)!\n    call: google-cloud/install-cli 1.0.1\n\n  - key: gcloud-login # (2)!\n    if: ${{ init.deploy }}\n    use: [gcloud-cli]\n    call: google-cloud/auth-credentials 1.0.1\n    with:\n      credentials-json: ${{ secrets.GCLOUD_SA_PRODUCTION_KEY }}\n\n  - key: cloud-sql-proxy-connect-and-run-visivo\n    if: ${{ init.deploy }}\n    use: [gcloud-login, install-visivo, code]\n    run: |\n      cd bin\n      ./cloud_sql_proxy \"acme-co-production:us-west1:company-database-replica\" --port 5432 &amp;&gt;/dev/null &amp; \n      cd ../visivo\n      visivo run\n    env: \n      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}\n      DB_USERNAME: ${{ secrets.DB_USERNAME }} \n      DB_HOST: localhost \n\n  - key: deploy-ci-stage\n    if: ${{ init.deploy }}\n    use: [cloud-sql-proxy-connect-and-run-visivo]\n    run: |\n      cd visivo\n      visivo deploy -s ${{ init.head-ref }}\n    env: \n      VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }} \n\n  - key: archive-ci-stage\n    if: ${{ init.archive }}\n    use: [install-visivo, code]\n    run: | \n      cd visivo \n      visivo archive -s ${{ init.head-ref }}\n    env:\n      VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }}\n</code></pre> <ol> <li>If connecting with a publicly accessible database you may not need to authentic with your cloud provider credentials.</li> <li>If connecting with a publicly accessible database you may not need to authentic with your cloud provider credentials. </li> <li>Mint automatically configures a clone token when you connect it to github. You should be able to find it in your mint vault.</li> <li>Specifying a version of visivo can be a good idea. For example- <code>pip install git+https://github.com/visivo-io/visivo.git@v1.0.9</code></li> </ol>"},{"location":"topics/deployments/#github-actions","title":"Github Actions","text":"<p>We have an example action that is used on the CLI repo. This action deploys each pull request to a stage, and then archives that stage when the pull request is closed.</p>"},{"location":"topics/deployments/#configuration_1","title":"Configuration","text":"<ol> <li>Add your deployment token to github action secrets as <code>VISIVO_TOKEN</code></li> <li>Add a workflow similar to the following yml.  </li> </ol> <p>This following can be adapted easily with the <code>env</code> variables.</p> Deploy &amp; ArchiveDeploy + Comment on PR &amp; Archive .github/workflows/visivo_deploy_archive.yml<pre><code>name: Deploy &amp; Archive CI Dashboard\n\non:\n  pull_request:\n    types: [opened, reopened, closed, synchronize]\n\nenv:\n  yml_location: . #(1)!\n  stage_name: ${{ github.head_ref }}\n  deploy: github.event.pull_request.merged == false &amp;&amp; github.event.pull_request.closed_at == null\n  archive: github.event.pull_request.merged == true || github.event.pull_request.closed_at != null\n\njobs:\n  deploy-archive-dashboard:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.10' \n\n      - name: Install Visivo\n        run: pip install visivo #(2)!\n\n      - name: Run Visivo \n        if: ${{ env.deploy }}\n        run: cd ${{ env.yml_location}} &amp;&amp; visivo run \n\n      - name: Deploy\n        id: deploy\n        if: ${{ env.deploy }} \n        run: visivo deploy -s ${{ env.stage_name }}\n        env: \n          VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }}\n\n      - name: Archive \n        if: ${{ env.archive }}\n        run: visivo archive -s ${{ env.stage_name }}\n        env: \n          VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }}\n</code></pre> <ol> <li>The relative location of your <code>project.visivo.yml</code> file. </li> <li>Specifying a version of visivo can be a good idea. For example- <code>pip install git+https://github.com/visivo-io/visivo.git@v1.0.9</code></li> <li>This step captures the stdout print of the url of the deployment that was created so that it can later be referenced to generate a github comment on the PR. Both of these steps are totally optional!</li> </ol> .github/workflows/visivo_deploy_archive.yml<pre><code>name: Deploy &amp; Archive CI Dashboard\n\non:\n  pull_request:\n    types: [opened, reopened, closed, synchronize]\n\nenv:\n  yml_location: . #(1)!\n  stage_name: ${{ github.head_ref }}\n  deploy: github.event.pull_request.merged == false &amp;&amp; github.event.pull_request.closed_at == null\n  archive: github.event.pull_request.merged == true || github.event.pull_request.closed_at != null\n\njobs:\n  deploy-archive-dashboard:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.10' \n\n      - name: Install Visivo\n        run: pip install visivo #(2)!\n\n      - name: Run Visivo \n        if: ${{ env.deploy }}\n        run: cd ${{ env.yml_location}} &amp;&amp; visivo run \n\n      - name: Deploy\n        id: deploy\n        if: ${{ env.deploy }}\n        run: | #(3)!\n          visivo deploy -s ${{ env.stage_name }} | tee /dev/stderr | grep 'Deployed to: ' &gt; deployed.txt\n          deployed=`cat deployed.txt`\n          echo \"deployed=$deployed\" &gt;&gt; \"$GITHUB_OUTPUT\"\n        env: \n          VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }}\n\n      - name: Comment\n        if: ${{ env.deploy }}\n        uses: marocchino/sticky-pull-request-comment@v2\n        with:\n          message: |\n            Visivo Dashboard:\n            ${{ steps.deploy.outputs.deployed}}\n\n      - name: Archive \n        if: ${{ env.archive }}\n        run: visivo archive -s ${{ env.stage_name }}\n        env: \n          VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }}\n</code></pre> <ol> <li>The relative location of your <code>project.visivo.yml</code> file. </li> <li>Specifying a version of visivo can be a good idea. For example- <code>pip install git+https://github.com/visivo-io/visivo.git@v1.0.9</code></li> <li>This step captures the stdout print of the url of the deployment that was created so that it can later be referenced to generate a github comment on the PR. Both of these steps are totally optional!</li> </ol>"},{"location":"topics/deployments/#production","title":"Production","text":"<p>To keep your production data fresh you will likely want to push deployments into a production stage on a regular cadence. </p> <p>Success</p> <p>One of the key differentiators between Visivo and other BI tools is that you control pushing data to Visivo rather than providing Visivo with credentials to pull data. Pushing your own data rather than trusting a vendor to pull has security and workflow benefits.</p>"},{"location":"topics/deployments/#mint_1","title":"Mint","text":"<p>With Mint Cron Schedules you can configure jobs to run on whatever cadence you need.</p>"},{"location":"topics/deployments/#configuration_2","title":"Configuration","text":"Direct Target ConnectionGoogle Cloud SQL .mint/production_refresh.yml<pre><code>on:\n  cron:\n    - key: refresh-production-every-30-minutes\n      schedule: \"*/30 * * * *\"\n      init:\n        commit-sha: ${{ event.cron.git.sha }}\n\ntasks:\n  - key: code\n    call: mint/git-clone 1.1.6\n    with:\n      repository: https://github.com/visivo-io/analytics.git\n      ref: ${{ init.commit-sha }}\n      github-access-token: ${{ github.token }} #(1)!\n\n  - key: python\n    call: mint/install-python 1.1.0\n    with:\n      python-version: 3.10.0\n\n  - key: install-visivo\n    use: [python]\n    run: pip install visivo #(2)!\n\n  - key: run-visivo\n    use: [install-visivo, code]\n    run: visivo run\n    env: \n      DB_PASSWORD: ${{ secrets.DB_PASSWORD }} #(4)!\n      DB_USERNAME: ${{ secrets.DB_USERNAME }} \n      DB_HOST: localhost \n\n  - key: deploy-production\n    use: [run-visivo]\n    run: visivo deploy -s Production\n    env: \n      VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }} #(3)!\n</code></pre> <ol> <li>Mint automatically configures a clone token when you connect it to github. You should be able to find it in your mint vault.</li> <li>Specifying a version of visivo can be a good idea. For example- <code>pip install visivo==1.0.26</code></li> <li>You can get your visivo token from app.visivo.io. </li> <li>This assumes that you have a target set up in your project that depends on these env variables for connection. </li> </ol> .mint/gcp_production_refresh.yml<pre><code>on:\n  cron:\n    - key: refresh-production-every-30-minutes\n      schedule: \"*/30 * * * *\"\n      init:\n        commit-sha: ${{ event.cron.git.sha }}\n\ntasks:\n  - key: code\n    call: mint/git-clone 1.1.6\n    with:\n      repository: https://github.com/visivo-io/analytics.git\n      ref: ${{ init.commit-sha }}\n      github-access-token: ${{ github.token }} #(1)!\n\n  - key: python\n    call: mint/install-python 1.1.0\n    with:\n      python-version: 3.10.0\n\n  - key: install-visivo\n    use: [python]\n    run: pip install visivo #(2)!\n\n  - key: gcloud-cli\n    call: google-cloud/install-cli 1.0.1\n\n  - key: gcloud-login\n    use: [gcloud-cli]\n    call: google-cloud/auth-credentials 1.0.1\n    with:\n      credentials-json: ${{ secrets.GCLOUD_SA_PRODUCTION_KEY }}\n\n  - key: cloud-sql-proxy-connect-and-run-visivo\n    use: [gcloud-login, install-visivo, code]\n    run: |\n      cd bin\n      ./cloud_sql_proxy \"acme-co-production:us-west4:acme-production-replica\" --port 5432 &amp;&gt;/dev/null &amp; \n      cd ../visivo\n      visivo run\n    env: \n      DB_PASSWORD: ${{ secrets.DB_PASSWORD }} #(4)!\n      DB_USERNAME: ${{ secrets.DB_USERNAME }} \n      DB_HOST: localhost \n\n  - key: deploy-production\n    use: [cloud-sql-proxy-connect-and-run-visivo]\n    run: |\n      cd visivo\n      visivo deploy -s Production\n    env: \n      VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }} #(3)!\n</code></pre> <ol> <li>Mint automatically configures a clone token when you connect it to github. You should be able to find it in your mint vault.</li> <li>Specifying a version of visivo can be a good idea. For example- <code>pip install visivo==1.0.26</code></li> <li>You can get your visivo token from app.visivo.io. </li> <li>This assumes that you have a target set up in your project that depends on these env variables for connection. </li> </ol>"},{"location":"topics/deployments/#github-actions_1","title":"Github Actions","text":""},{"location":"topics/deployments/#configuration_3","title":"Configuration","text":".github/workflows/production_refresh.yml<pre><code>name: Production Deployment\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"*/15 * * * *\" \n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Analytics Repo\n        uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.10' \n\n      - name: Install Visivo\n        run: pip install visivo\n\n      - name: Auth Google Cloud\n        uses: google-github-actions/auth@v2\n        with:\n          credentials_json: '${{ secrets.GCLOUD_SA_PRODUCTION_KEY }}'\n\n      - name: Cloud SQL Proxy Connect &amp; Run Visivo\n        run: |\n          cd bin\n          ./cloud_sql_proxy \"acme-co-production:us-west4:acme-production-replica\" --port 5432 &amp;&gt;/dev/null &amp; \n          cd ../visivo\n          visivo run\n        env:\n          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}\n          DB_USERNAME: ${{ secrets.DB_USERNAME }} \n          DB_HOST: localhost\n\n      - name: Deploy CI Stage \n        run: |\n          cd visivo\n          visivo deploy -s Production\n        env:\n          VISIVO_TOKEN: ${{ secrets.VISIVO_TOKEN }}\n</code></pre>"},{"location":"topics/deployments/#static","title":"Static","text":"<p>You can also manage and host the dashboard internally if you wish to manage it entirely within your systems.  To create a self-contained build all you need to do is run the <code>visivo dist</code> command.  This will create a folder that you can use to host in any manner that suits your needs.</p>"},{"location":"topics/including/","title":"Including","text":""},{"location":"topics/including/#including-other-files-and-projects","title":"Including Other Files and Projects","text":""},{"location":"topics/including/#local-files","title":"Local Files","text":"<p>A good organizational tool is to break your <code>project.visivo.yml</code> into multiple local files based on organizational needs.  An example of this would be to put all your <code>models</code> in one file and reference that file like:</p> <pre><code>includes:\n  - path: models.yml\n</code></pre> <p>You may wish to organization it along a different axis, for example one file per dashboard like:</p> <pre><code>includes:\n  - path: finance_dashboard.yml\n  - path: operation_dashboard.yml\n</code></pre> <p>Use whatever system best matches your use case. </p> <p>Your includes can include other includes, allowing for nesting.  Be wise!</p>"},{"location":"topics/including/#directory-inclusion","title":"Directory Inclusion","text":"<p>For larger projects with many YAML files, you can include entire directories instead of listing individual files. By default, Visivo will recursively search through all subdirectories and include all <code>.yml</code> and <code>.yaml</code> files:</p> <pre><code>includes:\n  - path: ./config/\n</code></pre>"},{"location":"topics/including/#controlling-directory-depth","title":"Controlling Directory Depth","text":"<p>You can control how deep Visivo searches within directories using the <code>depth</code> parameter:</p> <pre><code>includes:\n  # Include only files directly in the config directory (no subdirectories)\n  - path: ./config/\n    depth: 0\n\n  # Include files in config directory and one level of subdirectories\n  - path: ./models/\n    depth: 1\n\n  # Fully recursive search (default behavior)\n  - path: ./all-files/\n    depth: null  # or omit depth entirely\n</code></pre> <ul> <li><code>depth: 0</code> - Only files in the specified directory (no subdirectories)</li> <li><code>depth: 1</code> - Files in the directory and one level of subdirectories</li> <li><code>depth: null</code> or omitted - Fully recursive search through all subdirectories (default)</li> </ul>"},{"location":"topics/including/#excluding-files-and-directories","title":"Excluding Files and Directories","text":"<p>Use the <code>exclusions</code> parameter to skip specific files or directories. Exclusions support multiple pattern types:</p> <pre><code>includes:\n  - path: ./config/\n    exclusions:\n      - \"*.backup.yml\"        # Exclude all .backup.yml files\n      - \"temp_config.yml\"     # Exclude specific file by name\n      - \"*/temp/*\"           # Exclude anything in temp directories\n      - \"*/archive/*\"        # Exclude anything in archive directories\n      - \"*.config.yml\"       # Exclude configuration template files\n</code></pre>"},{"location":"topics/including/#advanced-directory-examples","title":"Advanced Directory Examples","text":"<p>Combine depth control and exclusions for precise file selection:</p> <pre><code>includes:\n  # Include all YAML files recursively, but skip backup and temp files\n  - path: ./project-configs/\n    exclusions:\n      - \"*.backup.yml\"\n      - \"*.temp.yml\"\n      - \"*/backup/*\"\n      - \"*/temp/*\"\n\n  # Include only top-level model files, skip nested configurations\n  - path: ./models/\n    depth: 0\n    exclusions:\n      - \"*.config.yml\"\n\n  # Include specific dashboard subdirectories but exclude test files\n  - path: ./dashboards/\n    depth: 2\n    exclusions:\n      - \"*test*\"\n      - \"*/drafts/*\"\n</code></pre>"},{"location":"topics/including/#pattern-matching-for-exclusions","title":"Pattern Matching for Exclusions","text":"<p>Exclusions support several pattern matching approaches:</p> <ul> <li>Filename patterns: <code>*.backup.yml</code>, <code>temp_*</code></li> <li>Path patterns: <code>*/temp/*</code>, <code>config/*/old/*</code></li> <li>Exact names: <code>old_config.yml</code>, <code>deprecated.yml</code></li> <li>Regex patterns: Advanced users can use regex for complex matching</li> </ul> <p>The exclusion patterns are matched against both the filename and the relative path from the include directory.</p>"},{"location":"topics/including/#external-projects","title":"External Projects","text":"<p>One of the most powerful aspects of Visivo is the ability to include public GitHub repos that contain Visivo dashboards in your project.  This gives everyone to share a useful dashboard that they may have. </p> <p>We have published a series of projects that allow you to quickly build dashboards based on some popular tools.</p> <p>Those are tagged in GitHub here. You can also build and share your own under the same <code>visivo-dashboard</code> topic in GitHub.</p> <p>Here is an example on how to include our dashboard that provides insights into your repositories' pull requests:</p> <pre><code>includes:\n  - path: visivo-io/github-dashboard.git@main\n</code></pre> <p>Once it is included then you can reference the <code>traces</code> and <code>charts</code> like you would if they were in your project like:</p> <pre><code>dashboards:\n  - name: Github Metrics\n    rows:\n      - height: medium\n        items:\n          - width: 1\n            chart:\n              name: Pull Requests by Repository\n              traces:\n                - ${ref(Pull Request by Repository)}\n              layout:\n                title: \"Pull Request by Repository\"\n</code></pre>"},{"location":"topics/interactivity/","title":"Interactivity","text":""},{"location":"topics/interactivity/#interactivity","title":"Interactivity","text":"<p>At first glance you may think that Visivo's push based architecture removes the ability to create interativity elements in your dashboard. However you can create powerful &amp; dynamic interactivity in your dashboards by utilizing the selector. </p>"},{"location":"topics/interactivity/#define-a-selector","title":"Define a Selector","text":"<p>The selector enables you to toggle between trace cohorts with single select or multi-select. The benefit of this approach is that you still get deterministic builds that you can test while also being able to create drill down, granularity options, filtering ect. </p> <p>Tip</p> <p>You can leverage jinja2 loops and macros to easily generate multiple similar trace cohorts &amp; charts.</p> <p>For example you might want to create multiple different traces for different date grains and then add those traces to a single chart. </p> Example <p></p><pre><code># {% set date_grains = ['month', 'day', 'week', 'quarter', 'year']%} \ntraces:\n# {% for date_grain in date_grains %}\n  - name: issues-created-per-{{date_grain}}\n    model: ${ref(issues)}\n    cohort_on: \"'{{date_grain}}'\"\n    props: \n      type: bar\n      x: ?{date_trunc('{{date_grain}}', created_at)::date::varchar}\n      y: ?{count(*) } \n    order_by: \n      - ?{date_trunc('{{date_grain}}', created_at)::date asc}\n#{% endfor %}   \ncharts:\n  - name: issues-created-total-over-time\n    selector: \n      name: issue_metrics_date_grain\n      type: single\n    traces:\n     #{% for date_grain in date_grains %}\n     - ${ref(issues-created-per-{{date_grain}})}\n     #{% endfor %}   \n    layout: \n      title: \n        text: Issues Created\n      barmode: stack \n      legend: \n        orientation: h\n        valign: bottom\n</code></pre>"},{"location":"topics/interactivity/#importance-of-tracecohort_on","title":"Importance of <code>trace.cohort_on</code>","text":"<p>The <code>cohort_on</code> block of the trace enables you to dynamically split out series based into distinct groups. This is super helpful for dynamcially creating multiple lines, bars, ect with a single trace. </p> Example <p>Say you have a trace that shows revenue per week defined like this:  </p><pre><code>traces: \n  - name: revenue-per-week\n    model: ${ref(orders)}\n    props:\n      type: scatter\n      x: ?{ date_trunc('week', date) } \n      y: ?{ sum(amount) }\n</code></pre> This would produce a single line with the week on the x axis and the sum of order amounts on the y axis. However, let's say you want to split this out by product type sold. To do that you can add a <code>cohort_on</code> attribute.  <pre><code>traces: \n  - name: revenue-per-week\n    model: ${ref(orders)}\n    cohort_on: product_name\n    props:\n      type: scatter\n      x: ?{ date_trunc('week', date) } \n      y: ?{ sum(amount) }\n</code></pre> <p>These cohort values are also the primary way you can create interactivity across your charts by telling a selector, when it should show different trace cohorts. </p>"},{"location":"topics/interactivity/#re-use-the-selector","title":"Re-use the Selector","text":"<p>You are able to reference selectors from across your project on multiple charts By name using the <code>ref()</code> function. This enables you to connect charts to a single selector. </p> <p>Note</p> <p>If the selector is defined within a chart, all of the trace cohort values from that chart will be used to set the options for the selector.</p> <p>However if you define the selector at the top of your project you can include as many traces as you want to pull in a broader selection of trace cohorts</p>"},{"location":"topics/interactivity/#position-the-selector-in-a-dashboard","title":"Position the Selector in a Dashboard","text":"<p>You have two options for showing your selector in the dashboard. </p> <ol> <li> <p>You can define your selector within a single chart. If you do this, your selector will be present on that charts pop down menu. This is a great option if you want to provide interactivity without adding too much noise to the main dashboard canvas. </p> </li> <li> <p>You can place the selector in a dashboard item to have it occupy a dedicated spot on the dashboard canvas.     </p> </li> </ol>"},{"location":"topics/linting/","title":"Linting","text":""},{"location":"topics/linting/#linting-projectvisivoyml","title":"Linting <code>project.visivo.yml</code>","text":"<p>We publish a json schema file for our <code>project.visivo.yml</code>. With this file you can get realtime linting &amp; feedback while developing your project.</p>"},{"location":"topics/linting/#vscode-plugin","title":"VSCode Plugin","text":"<p>Install the YAML plugin from the good people of redhat-developer. The plugin enables you to lint any yaml file that you associate a schema to.  </p>"},{"location":"topics/linting/#configuration-optional","title":"Configuration (Optional)","text":"<p>By default any file with the format <code>*.visivo.yml</code> will be linted.  If you have a file that is named differently, you can add it to the local configuration.</p> <ol> <li>Install the plugin per the instructions</li> <li>Edit the plugin settings, and click \"Edit in settings.json\" under the \"Yaml: Schemas\" section.</li> <li>Edit the \"yaml.schemas\" to include:  <pre><code>\"yaml.schemas\": {\n    \"https://docs.visivo.io/assets/visivo_schema.json\": \"name_of_file.yml\"\n},\n</code></pre></li> </ol>"},{"location":"topics/linting/#gotchas","title":"Gotchas","text":"<p>If you are using <code>env_var</code> substitution, surrounding the value with <code>\"</code> will make the linter happy. For example: <code>password: \"{{ env_var('SECRET_PASSWORD') }}\"</code></p>"},{"location":"topics/sources/","title":"Sources","text":""},{"location":"topics/sources/#source-overview","title":"Source Overview","text":"<p>Sources are connections to your data warehouses or databases. This page describes some best practices around setting up sources. </p> <p>Tip</p> <p>There is specific documentation on how to connect to a variety of databases in the Configuration documentation (ie. PostgresSQL)</p>"},{"location":"topics/sources/#supported-connectors","title":"Supported Connectors","text":"<p>Sources are typically OLAP or OLTP SQL based data warehouses and databases. </p> <p>We have pre-built connectors for the most popular databases; however, you can also connect to nosql data stores, API, script and document sources and through CsvScriptModels.</p> <ul> <li>  Docs</li> <li>  Docs</li> <li>  Docs</li> <li>  Docs</li> <li>  Docs</li> <li>  Docs</li> </ul>"},{"location":"topics/sources/#one-project-many-sources","title":"One Project Many Sources","text":"<p>Visivo enables you to configure multiple sources in a single project. </p> <p>This is really useful for joining together data that lives in different sources. </p> <p>Once your sources are set up, you can bring data together in a single chart with traces that originate from different sources, or through sqlite queries that leverage tables from multiple sources (see LocalMergeModel), or through writing csvs to stdout (see CsvScriptModels).</p>"},{"location":"topics/sources/#environments","title":"Environments","text":"<p>We recommend that you think of a source as a consistent data source you have across environments.  </p> <p>For example lets say you have an application that stores its data in a PostgreSQL database call <code>app_db</code> and runs locally, in staging, and in production. </p> <p>You have three separate databases, but they all used to run your application, so we'd recommend making that a single <code>source</code>. The following might be how you set up the source in your project:</p> <pre><code>sources:\n  - name: domain_source\n    database: app_db\n    type: postgresql\n    port: 5432\n    host:  \"{{ env_var('APP_HOST') }}\" \n    username:  \"{{ env_var('APP_DATABASE_USERNAME') }}\" \n    password:  \"{{ env_var('APP_DATABASE_USERNAME') }}\" \n</code></pre> <p>This structure then allows you to set your username, password, and host differently in each environment to connect with the right app_db. </p> <p>Tip</p> <p>You can use the <code>env_var</code> function to store any secrets or things that you would want to change dynamically in different environments. </p>"},{"location":"topics/testing/","title":"Testing","text":""},{"location":"topics/testing/#testing","title":"Testing","text":"<p>Tests enable you to quickly validate data across your project.  </p> <p>Note</p> <p>Tests are run with the <code>visivo test</code> command (docs).</p> <p>Tests can run any arbitrary python statement so long as it evaluates to <code>True</code> or <code>False</code>. Additionally tests can access trace data from across the project by using the <code>$(project)</code> context variable. By default trace data arrays will be represented as numpy arrays. </p> <p>The combination of python based boolean statements and access to all trace data makes it super fast all while enabling complex assertions about your data. </p> <p>Example</p> Revenue Sums MatchStandard DeviationAssert Value <pre><code>tests:\n  - name: revenue-date-grains-match\n    logic: \"&gt;{ numpy.sum( ${project.traces['revenue-per-week'].props.y} ) = numpy.sum( ${project.traces['revenue-per-month'].props.y} ) }\"\n</code></pre> <pre><code>tests:\n  - name: recent-std-less-double-normal\n    logic: \"&gt;{ numpy.std( ${project.traces['revenue-per-week'].props.y} ) * 2 &gt; numpy.std( ${project.traces['revenue-per-month'].props.y[:-10]} ) }\"\n</code></pre> <pre><code>tests:\n  - name: recent-std-less-double-normal\n    logic: \"&gt;{ round( ${project.traces['revenue-per-week'].props.y[10]} ) = 2901384 }\"\n</code></pre> <p>You can also define tests within the trace it's self which gives you access to the information of the trace data that you're defining the test on through the <code>${trace}</code> context variable. You can still access the <code>${project}</code> context variable from within the trace definition. </p> <p>Example</p> <pre><code>traces:\n    - name: tested-trace\n    model: ${ref(model)}\n    columns:\n        account_name: account_name\n    props:\n        type: scatter\n        x: column(project_created_at)\n        y: column(project_name)\n    tests:\n        - logic: \"&gt;{ assert_that(numpy.sum( ${trace.props.x} ).is_equal_to(7) }\"\n        - logic: \"&gt;{ 'key account' in ${trace.columns.account_name} }\"\n        - logic: \"&gt;{ numpy.unique( ${trace.columns.account_name} ) = numpy.unique( ${project.traces[another-trace].columns.account_name} ) }\n</code></pre> <p>The <code>assert_that()</code> function from the assertpy library and the numpy library are available to reference. The combination of these two libraries enable a wide array of calculations and logical assertions. </p>"}]}