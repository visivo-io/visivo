on:
  github:
    pull_request:
      actions: [opened, reopened, synchronize]
      init:
        commit-sha: ${{ event.git.sha }}

base:
  os: ubuntu 22.04
  tag: 1.0

tasks:
  - key: code
    call: mint/git-clone 1.2.8
    with:
      repository: https://github.com/visivo-io/visivo.git
      preserve-git-dir: true
      ref: ${{ init.commit-sha }}
      github-access-token: ${{ github.token }}

  - key: versions
    use: code
    run: cat .python-version | tee $MINT_VALUES/python
    filter: [.python-version]

  - key: python
    call: mint/install-python 1.2.1
    with:
      python-version: ${{ tasks.versions.values.python }}

  - key: cli-dependencies
    use: [code, python]
    run: pip install poetry && poetry install --with dev --no-root
    filter:
      - poetry.lock
      - pyproject.toml

  - key: mkdocs
    use: cli-dependencies
    run: |
      poetry install --with dev
      poetry run pytest tests/parsers/test_schema_generator.py
      find tmp -name visivo_schema.json -exec cp {} ./mkdocs/assets \;
      poetry run python mkdocs/src/write_mkdocs_markdown_files.py
      poetry run mkdocs serve > mkdocs.log 2>&1 &
      sh mkdocs/check-connection.sh
      
      # Enhanced link checking with better reporting
      echo "🔍 Checking for broken links..."
      
      # First, build a map of all pages and their links
      echo "📋 Building page-link relationship map..."
      mkdir -p /tmp/link_check
      wget --recursive --no-verbose --spider --output-file=/tmp/link_check/wget.log http://127.0.0.1:8000/
      
      # Extract all URLs and their relationships
      echo "📊 Analyzing page relationships..."
      grep -o 'http://127.0.0.1:8000/[^ ]*' /tmp/link_check/wget.log | sort | uniq > /tmp/link_check/all_urls.txt
      
      # Find broken links
      BROKEN_LINKS=$(grep -v -E 'OK$|^unlink|\.tmp\.tmp' /tmp/link_check/wget.log || true)
      
      if [ -n "$BROKEN_LINKS" ]; then
        echo "❌ Found broken links:"
        echo "$BROKEN_LINKS"
        
        # For each broken link, find which pages reference it
        echo "📋 Analyzing broken link references..."
        for link in $(echo "$BROKEN_LINKS" | grep -o 'http://[^ ]*'); do
          clean_path=$(echo "$link" | sed 's|http://127.0.0.1:8000/||' | sed 's/,$//')
          echo "🔗 Broken link: $link"
          
          # Find which pages were trying to access this link
          echo "📄 Pages attempting to access this link:"
          grep -B 1 "$link" /tmp/link_check/wget.log | grep 'http://127.0.0.1:8000/' | sort | uniq | while read -r parent_url; do
            echo "  📄 $parent_url"
            
            # Get the relative path of the parent page
            parent_path=$(echo "$parent_url" | sed 's|http://127.0.0.1:8000/||')
            
            # Find the corresponding markdown file
            if [ -f "./mkdocs/$parent_path.md" ]; then
              echo "    📄 Source: ./mkdocs/$parent_path.md"
              # Show the line containing the link
              grep -n "$clean_path" "./mkdocs/$parent_path.md" | while IFS=: read -r line_num content; do
                echo "      Line $line_num: $content"
              done
            elif [ -f "./mkdocs/$parent_path/index.md" ]; then
              echo "    📄 Source: ./mkdocs/$parent_path/index.md"
              # Show the line containing the link
              grep -n "$clean_path" "./mkdocs/$parent_path/index.md" | while IFS=: read -r line_num content; do
                echo "      Line $line_num: $content"
              done
            else
              echo "    ❌ Could not find source markdown file"
            fi
          done
        done
        
        exit 1
      else
        echo "✅ No broken links found!"
      fi
      
      PYTHONPATH=$PWD poetry run mkdocs build 2>&1 | tee build_stdout.txt

  - key: check-for-spelling-errors
    use: mkdocs
    run: sh validate_mkdocs_build.sh
    filter:
      - build_stdout.txt
      - validate_mkdocs_build.sh
