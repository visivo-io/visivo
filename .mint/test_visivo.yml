on:
  github:
    pull_request:
      actions: [opened, reopened, synchronize]
      init:
        commit-sha: ${{ event.git.sha }}
    push:
      if: ${{ event.git.branch == 'main' || event.git.ref =~ '^refs/tags/v.+$' }}
      init:
        commit-sha: ${{ event.git.sha }}

tasks:
  - key: code
    call: mint/git-clone 1.2.8
    with:
      repository: https://github.com/visivo-io/visivo.git
      ref: ${{ init.commit-sha }}
      github-access-token: ${{ github.token }}

  - key: versions
    use: code
    run: |
      cat .python-version | tee $MINT_VALUES/python
      cat viewer/.nvmrc | sed 's/^v//' | tee $MINT_VALUES/node
      cat test-projects/ror/.ruby-version | tee $MINT_VALUES/ruby
    filter:
      - .python-version
      - viewer/.nvmrc
      - test-projects/ror/.ruby-version

  - key: python
    call: mint/install-python 1.2.1
    with:
      python-version: ${{ tasks.versions.values.python }}

  - key: node
    call: mint/install-node 1.0.10
    with:
      node-version: ${{ tasks.versions.values.node }}

  - key: ruby
    call: mint/install-ruby 1.1.1
    with:
      ruby-version: ${{ tasks.versions.values.ruby }}

  - key: poetry
    use: python
    run: pip install poetry

  - key: cli-dependencies
    use: [code, poetry]
    run: poetry install --with dev --no-root
    filter:
      - poetry.lock
      - pyproject.toml

  - key: visivo-install
    use: cli-dependencies
    run: |
      poetry install --with dev
      poetry build
      pip install dist/visivo-*-py3-none-any.whl

  - key: test-cli
    use: cli-dependencies
    run: |
      poetry install --with dev
      poetry run pytest --json-report
      curl -X POST -H "Content-Type: application/json" -d @.report.json ${{ secrets.PYTEST_RESULTS_WEBHOOK }}
    env:
      STACKTRACE: true

  - key: yarn
    use: node
    run: npm install --global yarn

  - key: node-modules
    use: [code, yarn]
    run: |
      cd viewer
      yarn install
    filter:
      - viewer/package.json
      - viewer/yarn.lock

  - key: viewer-test
    use: node-modules
    run: |
      cd viewer
      yarn test --json --testLocationInResults --outputFile jest.json
    filter: [viewer]
    outputs:
      test-results:
        - path: viewer/jest.json

  - key: viewer-lint
    use: node-modules
    run: |
      cd viewer
      yarn run lint --max-warnings=0
    filter: [viewer]
    outputs:
      problems:
        - matcher: eslint

  - key: test-snowflake
    use: visivo-install
    run: |
      cd test-projects/integration
      visivo run -s remote-snowflake
    env:
      STACKTRACE: true
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      CLI_UNIT_TESTING_SNOWFLAKE_USER: ${{ secrets.CLI_UNIT_TESTING_SNOWFLAKE_USER }}
      CLI_UNIT_TESTING_SNOWFLAKE_PASSWORD: ${{ secrets.CLI_UNIT_TESTING_SNOWFLAKE_PASSWORD }}
    filter: [test-projects/integration]

  - key: test-complex-project
    use: visivo-install
    run: |
      cd test-projects/complex-project
      visivo run
    env:
      STACKTRACE: true
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      CLI_UNIT_TESTING_SNOWFLAKE_USER: ${{ secrets.CLI_UNIT_TESTING_SNOWFLAKE_USER }}
      CLI_UNIT_TESTING_SNOWFLAKE_PASSWORD: ${{ secrets.CLI_UNIT_TESTING_SNOWFLAKE_PASSWORD }}
    filter: [test-projects/complex-project]

  - key: postgres-packages
    run: |
      sudo apt-get update
      sudo apt-get install postgresql-client
      sudo apt-get clean

  - key: test-postgres
    docker: true
    use: [postgres-packages, visivo-install]
    background-processes:
      - key: postgres
        run: docker run -p 5434:5432 -e POSTGRES_PASSWORD=postgres index.docker.io/library/postgres:latest
        ready-check: PGPASSWORD=postgres psql -h localhost -p 5434 -U postgres -c 'SELECT 1'
    run: |
      PGPASSWORD=postgres psql -h localhost -p 5434 -U postgres -f tests/setup/populate_ci_postgres.sql
      cd test-projects/integration
      visivo run -s local-postgres --threads 1
    env:
      PGPASSWORD: postgres
      PG_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5434
    filter:
      - test-projects/integration
      - tests/setup/populate_ci_postgres.sql

  - key: mysql-packages
    run: |
      sudo apt-get update
      sudo apt-get install mysql-client
      sudo apt-get clean

  - key: test-mysql
    docker: true
    use: [mysql-packages, visivo-install]
    background-processes:
      - key: mysql
        run: docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mysql index.docker.io/library/mysql:latest
        ready-check: mysql --protocol tcp -h localhost -u root -pmysql -e "SELECT 1;"
    run: |
      mysql --protocol tcp -h localhost -u root -pmysql < tests/setup/populate_ci_mysql.sql
      cd test-projects/integration
      visivo run -s local-mysql --threads 1
    env:
      MYSQL_PASSWORD: mysql
      IS_MYSQL: true
    filter:
      - test-projects/integration
      - tests/setup/populate_ci_mysql.sql

  - key: gems
    use: [ruby, code]
    run: |
      cd test-projects/ror
      bundle install
    filter:
      - test-projects/ror/Gemfile
      - test-projects/ror/Gemfile.lock

  - key: test-ruby-on-rails
    use: [gems, visivo-install]
    run: |
      cd test-projects/ror
      bundle exec rspec --format json --out rspec.json --format progress
    outputs:
      test-results:
        - path: test-projects/ror/rspec.json
