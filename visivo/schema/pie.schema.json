{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[-?\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a positive or negative number"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "type": {
      "const": "pie"
    },
    "automargin": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "boolean",
          "default": false,
          "description": "Determines whether outside text labels can push the margins."
        }
      ]
    },
    "customdata": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements"
        }
      ]
    },
    "customdatasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
      "type": "string"
    },
    "direction": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "enum": [
            "clockwise",
            "counterclockwise"
          ],
          "default": "counterclockwise",
          "description": "Specifies the direction at which succeeding sectors follow one another."
        }
      ]
    },
    "dlabel": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "default": 1,
          "description": "Sets the label step. See `label0` for more info."
        }
      ]
    },
    "domain": {
      "type": "object",
      "properties": {
        "column": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "description": "If there is a layout grid, use the domain for this column in the grid for this pie trace ."
            }
          ]
        },
        "row": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "description": "If there is a layout grid, use the domain for this row in the grid for this pie trace ."
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                1
              ],
              "description": "Sets the horizontal domain of this pie trace (in plot fraction)."
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                1
              ],
              "description": "Sets the vertical domain of this pie trace (in plot fraction)."
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "hole": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 0,
          "description": "Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart."
        }
      ]
    },
    "hoverinfo": {
      "oneOf": [
        {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(label|text|value|percent|name)(\\+(label|text|value|percent|name))*$"
                }
              ],
              "default": "all",
              "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired."
            }
          ]
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/query-string"
              },
              {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(label|text|value|percent|name)(\\+(label|text|value|percent|name))*$"
                  }
                ],
                "default": "all",
                "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired."
              }
            ]
          }
        }
      ]
    },
    "hoverinfosrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
      "type": "string"
    },
    "hoverlabel": {
      "type": "object",
      "properties": {
        "align": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto",
                  "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines"
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto",
                    "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines"
                  }
                ]
              }
            }
          ]
        },
        "alignsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `align`.",
          "type": "string"
        },
        "bgcolor": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "$ref": "#/$defs/color"
                  }
                ]
              }
            }
          ]
        },
        "bgcolorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
          "type": "string"
        },
        "bordercolor": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "$ref": "#/$defs/color"
                  }
                ]
              }
            }
          ]
        },
        "bordercolorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
          "type": "string"
        },
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "$ref": "#/$defs/color"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "$ref": "#/$defs/color"
                      }
                    ]
                  }
                }
              ]
            },
            "colorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "pattern": ".*\\S.*$",
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "pattern": ".*\\S.*$",
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "familysrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `family`.",
              "type": "string"
            },
            "lineposition": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "none"
                          ]
                        },
                        {
                          "type": "string",
                          "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                        }
                      ],
                      "default": "none",
                      "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "oneOf": [
                          {
                            "type": "string",
                            "enum": [
                              "none"
                            ]
                          },
                          {
                            "type": "string",
                            "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                          }
                        ],
                        "default": "none",
                        "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                      }
                    ]
                  }
                }
              ]
            },
            "linepositionsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
              "type": "string"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "default": "none",
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "default": "none",
                    "type": "string"
                  }
                }
              ]
            },
            "shadowsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
              "type": "string"
            },
            "size": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "type": "number",
                      "minimum": 1
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 1
                      }
                    ]
                  }
                }
              ]
            },
            "sizesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            "style": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "enum": [
                        "normal",
                        "italic"
                      ],
                      "default": "normal",
                      "description": "Sets whether a font should be styled with a normal or italic face from its family."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "enum": [
                          "normal",
                          "italic"
                        ],
                        "default": "normal",
                        "description": "Sets whether a font should be styled with a normal or italic face from its family."
                      }
                    ]
                  }
                }
              ]
            },
            "stylesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `style`.",
              "type": "string"
            },
            "textcase": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "enum": [
                        "normal",
                        "word caps",
                        "upper",
                        "lower"
                      ],
                      "default": "normal",
                      "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "enum": [
                          "normal",
                          "word caps",
                          "upper",
                          "lower"
                        ],
                        "default": "normal",
                        "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                      }
                    ]
                  }
                }
              ]
            },
            "textcasesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
              "type": "string"
            },
            "variant": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "enum": [
                        "normal",
                        "small-caps",
                        "all-small-caps",
                        "all-petite-caps",
                        "petite-caps",
                        "unicase"
                      ],
                      "default": "normal",
                      "description": "Sets the variant of the font."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "enum": [
                          "normal",
                          "small-caps",
                          "all-small-caps",
                          "all-petite-caps",
                          "petite-caps",
                          "unicase"
                        ],
                        "default": "normal",
                        "description": "Sets the variant of the font."
                      }
                    ]
                  }
                }
              ]
            },
            "variantsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
              "type": "string"
            },
            "weight": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1000,
                      "default": "normal",
                      "description": "Sets the weight (or boldness) of the font."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": "normal",
                        "description": "Sets the weight (or boldness) of the font."
                      }
                    ]
                  }
                }
              ]
            },
            "weightsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "namelength": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15,
                  "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15,
                    "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis."
                  }
                ]
              }
            }
          ]
        },
        "namelengthsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "hovertemplate": {
      "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
      "oneOf": [
        {
          "default": "",
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "default": "",
            "type": "string"
          }
        }
      ]
    },
    "hovertemplatesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
      "type": "string"
    },
    "hovertext": {
      "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
      "oneOf": [
        {
          "default": "",
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "default": "",
            "type": "string"
          }
        }
      ]
    },
    "hovertextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
      "type": "string"
    },
    "ids": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type."
        }
      ]
    },
    "idssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
      "type": "string"
    },
    "insidetextfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "$ref": "#/$defs/color"
                  }
                ]
              }
            }
          ]
        },
        "colorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `color`.",
          "type": "string"
        },
        "family": {
          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
          "oneOf": [
            {
              "pattern": ".*\\S.*$",
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "pattern": ".*\\S.*$",
                "type": "string"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "familysrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `family`.",
          "type": "string"
        },
        "lineposition": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none",
                  "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none",
                    "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                  }
                ]
              }
            }
          ]
        },
        "linepositionsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
          "type": "string"
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "oneOf": [
            {
              "default": "none",
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "default": "none",
                "type": "string"
              }
            }
          ]
        },
        "shadowsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
          "type": "string"
        },
        "size": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 1
                  }
                ]
              }
            }
          ]
        },
        "sizesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `size`.",
          "type": "string"
        },
        "style": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal",
                  "description": "Sets whether a font should be styled with a normal or italic face from its family."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal",
                    "description": "Sets whether a font should be styled with a normal or italic face from its family."
                  }
                ]
              }
            }
          ]
        },
        "stylesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `style`.",
          "type": "string"
        },
        "textcase": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal",
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal",
                    "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                  }
                ]
              }
            }
          ]
        },
        "textcasesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
          "type": "string"
        },
        "variant": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal",
                  "description": "Sets the variant of the font."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal",
                    "description": "Sets the variant of the font."
                  }
                ]
              }
            }
          ]
        },
        "variantsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
          "type": "string"
        },
        "weight": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal",
                  "description": "Sets the weight (or boldness) of the font."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal",
                    "description": "Sets the weight (or boldness) of the font."
                  }
                ]
              }
            }
          ]
        },
        "weightsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "insidetextorientation": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "enum": [
            "horizontal",
            "radial",
            "tangential",
            "auto"
          ],
          "default": "auto",
          "description": "Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector."
        }
      ]
    },
    "label0": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "default": 0,
          "description": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step."
        }
      ]
    },
    "labels": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "description": "Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label."
        }
      ]
    },
    "labelssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `labels`.",
      "type": "string"
    },
    "legend": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "string",
          "default": "legend",
          "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
          "pattern": "^legend([2-9]|[1-9][0-9]+)?$"
        }
      ]
    },
    "legendgroup": {
      "default": "",
      "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
      "type": "string"
    },
    "legendgrouptitle": {
      "type": "object",
      "properties": {
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            },
            "family": {
              "pattern": ".*\\S.*$",
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "type": "string"
            },
            "lineposition": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none",
                  "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                }
              ]
            },
            "shadow": {
              "default": "none",
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string"
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal",
                  "description": "Sets whether a font should be styled with a normal or italic face from its family."
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal",
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal",
                  "description": "Sets the variant of the font."
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal",
                  "description": "Sets the weight (or boldness) of the font."
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "text": {
          "default": "",
          "description": "Sets the title of the legend group.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "legendrank": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "default": 1000,
          "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout."
        }
      ]
    },
    "legendwidth": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "minimum": 0,
          "description": "Sets the width (in px or fraction) of the legend for this trace."
        }
      ]
    },
    "marker": {
      "type": "object",
      "properties": {
        "colors": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "description": "Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors."
            }
          ]
        },
        "colorssrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `colors`.",
          "type": "string"
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "$ref": "#/$defs/color"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "$ref": "#/$defs/color"
                      }
                    ]
                  }
                }
              ]
            },
            "colorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            "width": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "type": "number",
                      "minimum": 0,
                      "default": 0,
                      "description": "Sets the width (in px) of the line enclosing each sector."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "default": 0,
                        "description": "Sets the width (in px) of the line enclosing each sector."
                      }
                    ]
                  }
                }
              ]
            },
            "widthsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `width`.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "pattern": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "$ref": "#/$defs/color"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "$ref": "#/$defs/color"
                      }
                    ]
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
              "type": "string"
            },
            "fgcolor": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "$ref": "#/$defs/color"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "$ref": "#/$defs/color"
                      }
                    ]
                  }
                }
              ]
            },
            "fgcolorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `fgcolor`.",
              "type": "string"
            },
            "fgopacity": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "description": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1."
                }
              ]
            },
            "fillmode": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "replace",
                    "overlay"
                  ],
                  "default": "replace",
                  "description": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`."
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "enum": [
                        "",
                        "/",
                        "\\",
                        "x",
                        "-",
                        "|",
                        "+",
                        "."
                      ],
                      "default": "",
                      "description": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "enum": [
                          "",
                          "/",
                          "\\",
                          "x",
                          "-",
                          "|",
                          "+",
                          "."
                        ],
                        "default": "",
                        "description": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area."
                      }
                    ]
                  }
                }
              ]
            },
            "shapesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `shape`.",
              "type": "string"
            },
            "size": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "type": "number",
                      "minimum": 0,
                      "default": 8,
                      "description": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "default": 8,
                        "description": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern."
                      }
                    ]
                  }
                }
              ]
            },
            "sizesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            "solidity": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1,
                      "default": 0.3,
                      "description": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.3,
                        "description": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern."
                      }
                    ]
                  }
                }
              ]
            },
            "soliditysrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `solidity`.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "metasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
      "type": "string"
    },
    "name": {
      "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
      "type": "string"
    },
    "opacity": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1,
          "description": "Sets the opacity of the trace."
        }
      ]
    },
    "outsidetextfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "$ref": "#/$defs/color"
                  }
                ]
              }
            }
          ]
        },
        "colorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `color`.",
          "type": "string"
        },
        "family": {
          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
          "oneOf": [
            {
              "pattern": ".*\\S.*$",
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "pattern": ".*\\S.*$",
                "type": "string"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "familysrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `family`.",
          "type": "string"
        },
        "lineposition": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none",
                  "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none",
                    "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                  }
                ]
              }
            }
          ]
        },
        "linepositionsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
          "type": "string"
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "oneOf": [
            {
              "default": "none",
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "default": "none",
                "type": "string"
              }
            }
          ]
        },
        "shadowsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
          "type": "string"
        },
        "size": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 1
                  }
                ]
              }
            }
          ]
        },
        "sizesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `size`.",
          "type": "string"
        },
        "style": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal",
                  "description": "Sets whether a font should be styled with a normal or italic face from its family."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal",
                    "description": "Sets whether a font should be styled with a normal or italic face from its family."
                  }
                ]
              }
            }
          ]
        },
        "stylesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `style`.",
          "type": "string"
        },
        "textcase": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal",
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal",
                    "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                  }
                ]
              }
            }
          ]
        },
        "textcasesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
          "type": "string"
        },
        "variant": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal",
                  "description": "Sets the variant of the font."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal",
                    "description": "Sets the variant of the font."
                  }
                ]
              }
            }
          ]
        },
        "variantsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
          "type": "string"
        },
        "weight": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal",
                  "description": "Sets the weight (or boldness) of the font."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal",
                    "description": "Sets the weight (or boldness) of the font."
                  }
                ]
              }
            }
          ]
        },
        "weightsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "pull": {
      "oneOf": [
        {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0,
              "description": "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices."
            }
          ]
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/query-string"
              },
              {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0,
                "description": "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices."
              }
            ]
          }
        }
      ]
    },
    "pullsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `pull`.",
      "type": "string"
    },
    "rotation": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "minimum": -180,
          "maximum": 180,
          "default": 0,
          "description": "Instead of the first slice starting at 12 o'clock, rotate to some other angle."
        }
      ]
    },
    "scalegroup": {
      "default": "",
      "description": "If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.",
      "type": "string"
    },
    "showlegend": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "boolean",
          "default": true,
          "description": "Determines whether or not an item corresponding to this trace is shown in the legend."
        }
      ]
    },
    "sort": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "boolean",
          "default": true,
          "description": "Determines whether or not the sectors are reordered from largest to smallest."
        }
      ]
    },
    "stream": {
      "type": "object",
      "properties": {
        "maxpoints": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "default": 500,
              "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot."
            }
          ]
        },
        "token": {
          "pattern": ".*\\S.*$",
          "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "text": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels."
        }
      ]
    },
    "textfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "$ref": "#/$defs/color"
                  }
                ]
              }
            }
          ]
        },
        "colorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `color`.",
          "type": "string"
        },
        "family": {
          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
          "oneOf": [
            {
              "pattern": ".*\\S.*$",
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "pattern": ".*\\S.*$",
                "type": "string"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "familysrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `family`.",
          "type": "string"
        },
        "lineposition": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none",
                  "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none",
                    "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                  }
                ]
              }
            }
          ]
        },
        "linepositionsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
          "type": "string"
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "oneOf": [
            {
              "default": "none",
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "default": "none",
                "type": "string"
              }
            }
          ]
        },
        "shadowsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
          "type": "string"
        },
        "size": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 1
                  }
                ]
              }
            }
          ]
        },
        "sizesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `size`.",
          "type": "string"
        },
        "style": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal",
                  "description": "Sets whether a font should be styled with a normal or italic face from its family."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal",
                    "description": "Sets whether a font should be styled with a normal or italic face from its family."
                  }
                ]
              }
            }
          ]
        },
        "stylesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `style`.",
          "type": "string"
        },
        "textcase": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal",
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal",
                    "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                  }
                ]
              }
            }
          ]
        },
        "textcasesrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
          "type": "string"
        },
        "variant": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal",
                  "description": "Sets the variant of the font."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal",
                    "description": "Sets the variant of the font."
                  }
                ]
              }
            }
          ]
        },
        "variantsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
          "type": "string"
        },
        "weight": {
          "oneOf": [
            {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal",
                  "description": "Sets the weight (or boldness) of the font."
                }
              ]
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal",
                    "description": "Sets the weight (or boldness) of the font."
                  }
                ]
              }
            }
          ]
        },
        "weightsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "textinfo": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(label|text|value|percent)(\\+(label|text|value|percent))*$"
            }
          ],
          "description": "Determines which trace information appear on the graph."
        }
      ]
    },
    "textposition": {
      "oneOf": [
        {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "inside",
                "outside",
                "auto",
                "none"
              ],
              "default": "auto",
              "description": "Specifies the location of the `textinfo`."
            }
          ]
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/$defs/query-string"
              },
              {
                "enum": [
                  "inside",
                  "outside",
                  "auto",
                  "none"
                ],
                "default": "auto",
                "description": "Specifies the location of the `textinfo`."
              }
            ]
          }
        }
      ]
    },
    "textpositionsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
      "type": "string"
    },
    "textsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `text`.",
      "type": "string"
    },
    "texttemplate": {
      "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`.",
      "oneOf": [
        {
          "default": "",
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "default": "",
            "type": "string"
          }
        }
      ]
    },
    "texttemplatesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
      "type": "string"
    },
    "title": {
      "type": "object",
      "properties": {
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "$ref": "#/$defs/color"
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "$ref": "#/$defs/color"
                      }
                    ]
                  }
                }
              ]
            },
            "colorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "pattern": ".*\\S.*$",
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "pattern": ".*\\S.*$",
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "familysrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `family`.",
              "type": "string"
            },
            "lineposition": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "none"
                          ]
                        },
                        {
                          "type": "string",
                          "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                        }
                      ],
                      "default": "none",
                      "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "oneOf": [
                          {
                            "type": "string",
                            "enum": [
                              "none"
                            ]
                          },
                          {
                            "type": "string",
                            "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                          }
                        ],
                        "default": "none",
                        "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc."
                      }
                    ]
                  }
                }
              ]
            },
            "linepositionsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
              "type": "string"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "default": "none",
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "default": "none",
                    "type": "string"
                  }
                }
              ]
            },
            "shadowsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
              "type": "string"
            },
            "size": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "type": "number",
                      "minimum": 1
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 1
                      }
                    ]
                  }
                }
              ]
            },
            "sizesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            "style": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "enum": [
                        "normal",
                        "italic"
                      ],
                      "default": "normal",
                      "description": "Sets whether a font should be styled with a normal or italic face from its family."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "enum": [
                          "normal",
                          "italic"
                        ],
                        "default": "normal",
                        "description": "Sets whether a font should be styled with a normal or italic face from its family."
                      }
                    ]
                  }
                }
              ]
            },
            "stylesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `style`.",
              "type": "string"
            },
            "textcase": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "enum": [
                        "normal",
                        "word caps",
                        "upper",
                        "lower"
                      ],
                      "default": "normal",
                      "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "enum": [
                          "normal",
                          "word caps",
                          "upper",
                          "lower"
                        ],
                        "default": "normal",
                        "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized."
                      }
                    ]
                  }
                }
              ]
            },
            "textcasesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
              "type": "string"
            },
            "variant": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "enum": [
                        "normal",
                        "small-caps",
                        "all-small-caps",
                        "all-petite-caps",
                        "petite-caps",
                        "unicase"
                      ],
                      "default": "normal",
                      "description": "Sets the variant of the font."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "enum": [
                          "normal",
                          "small-caps",
                          "all-small-caps",
                          "all-petite-caps",
                          "petite-caps",
                          "unicase"
                        ],
                        "default": "normal",
                        "description": "Sets the variant of the font."
                      }
                    ]
                  }
                }
              ]
            },
            "variantsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
              "type": "string"
            },
            "weight": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1000,
                      "default": "normal",
                      "description": "Sets the weight (or boldness) of the font."
                    }
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": "normal",
                        "description": "Sets the weight (or boldness) of the font."
                      }
                    ]
                  }
                }
              ]
            },
            "weightsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "position": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle center",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "description": "Specifies the location of the `title`."
            }
          ]
        },
        "text": {
          "default": "",
          "description": "Sets the title of the chart. If it is empty, no title is displayed.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "uid": {
      "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
      "type": "string"
    },
    "uirevision": {
      "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
    },
    "values": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "description": "Sets the values of the sectors. If omitted, we count occurrences of each label."
        }
      ]
    },
    "valuessrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `values`.",
      "type": "string"
    },
    "visible": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "enum": [
            true,
            false,
            "legendonly"
          ],
          "default": true,
          "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible)."
        }
      ]
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}