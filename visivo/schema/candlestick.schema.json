{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a number"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "type": {
      "oneOf": [
        {
          "const": "candlestick"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "close": {
      "oneOf": [
        {
          "description": "Sets the close values.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "closesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `close`.",
      "type": "string"
    },
    "customdata": {
      "oneOf": [
        {
          "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdatasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
      "type": "string"
    },
    "decreasing": {
      "type": "object",
      "properties": {
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of line bounding the box(es).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        }
      }
    },
    "high": {
      "oneOf": [
        {
          "description": "Sets the high values.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "highsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `high`.",
      "type": "string"
    },
    "hoverinfo": {
      "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
      "oneOf": [
        {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all",
                "none",
                "skip"
              ]
            },
            {
              "type": "string",
              "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
            }
          ],
          "default": "all"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "all",
                  "none",
                  "skip"
                ]
              },
              {
                "type": "string",
                "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
              }
            ],
            "default": "all"
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverinfosrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
      "type": "string"
    },
    "hoverlabel": {
      "type": "object",
      "properties": {
        "align": {
          "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
          "oneOf": [
            {
              "enum": [
                "left",
                "right",
                "auto"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "left",
                  "right",
                  "auto"
                ],
                "default": "auto"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `align`.",
          "type": "string"
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#FF4136"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#FF4136"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bgcolorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
          "type": "string"
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#FF4136"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#FF4136"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
          "type": "string"
        },
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#FF4136"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#FF4136"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "familysrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `family`.",
              "type": "string"
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "linepositionsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
              "type": "string"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
              "type": "string"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "stylesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `style`.",
              "type": "string"
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcasesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
              "type": "string"
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variantsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
              "type": "string"
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weightsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
              "type": "string"
            }
          }
        },
        "namelength": {
          "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
          "oneOf": [
            {
              "type": "integer",
              "minimum": -1,
              "default": 15
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": -1,
                "default": 15
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "namelengthsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
          "type": "string"
        },
        "split": {
          "oneOf": [
            {
              "description": "Show hover information (open, close, high, low) in separate labels.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "hovertext": {
      "description": "Same as `text`.",
      "oneOf": [
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "hovertextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
      "type": "string"
    },
    "ids": {
      "oneOf": [
        {
          "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "idssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
      "type": "string"
    },
    "increasing": {
      "type": "object",
      "properties": {
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of line bounding the box(es).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        }
      }
    },
    "legend": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
          "type": "string",
          "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
          "default": "legend"
        }
      ]
    },
    "legendgroup": {
      "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
      "type": "string",
      "default": ""
    },
    "legendgrouptitle": {
      "type": "object",
      "properties": {
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string",
              "default": "none"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the title of the legend group.",
          "type": "string",
          "default": ""
        }
      }
    },
    "legendrank": {
      "oneOf": [
        {
          "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
          "type": "number",
          "default": 1000
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendwidth": {
      "oneOf": [
        {
          "description": "Sets the width (in px or fraction) of the legend for this trace.",
          "type": "number",
          "minimum": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "line": {
      "type": "object",
      "properties": {
        "width": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.",
              "type": "number",
              "minimum": 0,
              "default": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "low": {
      "oneOf": [
        {
          "description": "Sets the low values.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "lowsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `low`.",
      "type": "string"
    },
    "metasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
      "type": "string"
    },
    "name": {
      "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
      "type": "string"
    },
    "opacity": {
      "oneOf": [
        {
          "description": "Sets the opacity of the trace.",
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "open": {
      "oneOf": [
        {
          "description": "Sets the open values.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "opensrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `open`.",
      "type": "string"
    },
    "selectedpoints": {
      "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
    },
    "showlegend": {
      "oneOf": [
        {
          "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "stream": {
      "type": "object",
      "properties": {
        "maxpoints": {
          "oneOf": [
            {
              "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "default": 500
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "token": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        }
      }
    },
    "text": {
      "description": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.",
      "oneOf": [
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "textsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `text`.",
      "type": "string"
    },
    "uid": {
      "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
      "type": "string"
    },
    "uirevision": {
      "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
    },
    "visible": {
      "oneOf": [
        {
          "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
          "enum": [
            true,
            false,
            "legendonly"
          ],
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "whiskerwidth": {
      "oneOf": [
        {
          "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).",
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "x": {
      "oneOf": [
        {
          "description": "Sets the x coordinates. If absent, linear coordinate will be generated.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xaxis": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
          "type": "string",
          "pattern": "^x([2-9]|[1-9][0-9]+)?$",
          "default": "x"
        }
      ]
    },
    "xcalendar": {
      "oneOf": [
        {
          "description": "Sets the calendar system to use with `x` date data.",
          "enum": [
            "chinese",
            "coptic",
            "discworld",
            "ethiopian",
            "gregorian",
            "hebrew",
            "islamic",
            "jalali",
            "julian",
            "mayan",
            "nanakshahi",
            "nepali",
            "persian",
            "taiwan",
            "thai",
            "ummalqura"
          ],
          "default": "gregorian"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xhoverformat": {
      "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
      "type": "string",
      "default": ""
    },
    "xperiod": {
      "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
      "default": 0
    },
    "xperiod0": {
      "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
    },
    "xperiodalignment": {
      "oneOf": [
        {
          "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
          "enum": [
            "start",
            "middle",
            "end"
          ],
          "default": "middle"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `x`.",
      "type": "string"
    },
    "yaxis": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
          "type": "string",
          "pattern": "^y([2-9]|[1-9][0-9]+)?$",
          "default": "y"
        }
      ]
    },
    "yhoverformat": {
      "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
      "type": "string",
      "default": ""
    },
    "zorder": {
      "oneOf": [
        {
          "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
          "type": "integer",
          "default": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}