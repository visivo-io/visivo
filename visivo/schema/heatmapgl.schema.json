{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a number"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "type": {
      "oneOf": [
        {
          "const": "heatmapgl"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "visible": {
      "oneOf": [
        {
          "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
          "enum": [
            true,
            false,
            "legendonly"
          ],
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "opacity": {
      "oneOf": [
        {
          "description": "Sets the opacity of the trace.",
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "name": {
      "oneOf": [
        {
          "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "uid": {
      "oneOf": [
        {
          "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "ids": {
      "oneOf": [
        {
          "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdata": {
      "oneOf": [
        {
          "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverinfo": {
      "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all",
                "none",
                "skip"
              ]
            },
            {
              "type": "string",
              "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
            }
          ],
          "default": "all"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "all",
                  "none",
                  "skip"
                ]
              },
              {
                "type": "string",
                "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
              }
            ],
            "default": "all"
          }
        }
      ]
    },
    "hoverlabel": {
      "type": "object",
      "properties": {
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#444"
              }
            }
          ]
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#444"
              }
            }
          ]
        },
        "align": {
          "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "left",
                "right",
                "auto"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "left",
                  "right",
                  "auto"
                ],
                "default": "auto"
              }
            }
          ]
        },
        "namelength": {
          "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "integer",
              "minimum": -1,
              "default": 15
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": -1,
                "default": 15
              }
            }
          ]
        },
        "bgcolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for  align .",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "namelengthsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "stream": {
      "type": "object",
      "properties": {
        "token": {
          "oneOf": [
            {
              "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
              "type": "string",
              "pattern": ".*\\S.*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "maxpoints": {
          "oneOf": [
            {
              "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "default": 500
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "uirevision": {
      "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
    },
    "z": {
      "oneOf": [
        {
          "description": "Sets the z data.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "x": {
      "oneOf": [
        {
          "description": "Sets the x coordinates.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "x0": {
      "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
      "default": 0
    },
    "dx": {
      "oneOf": [
        {
          "description": "Sets the x coordinate step. See `x0` for more info.",
          "type": "number",
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "y": {
      "oneOf": [
        {
          "description": "Sets the y coordinates.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "y0": {
      "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
      "default": 0
    },
    "dy": {
      "oneOf": [
        {
          "description": "Sets the y coordinate step. See `y0` for more info.",
          "type": "number",
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "text": {
      "oneOf": [
        {
          "description": "Sets the text elements associated with each z value.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "transpose": {
      "oneOf": [
        {
          "description": "Transposes the z data.",
          "type": "boolean",
          "default": false
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xtype": {
      "oneOf": [
        {
          "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
          "enum": [
            "array",
            "scaled"
          ]
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "ytype": {
      "oneOf": [
        {
          "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
          "enum": [
            "array",
            "scaled"
          ]
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "zsmooth": {
      "oneOf": [
        {
          "description": "Picks a smoothing algorithm use to smooth `z` data.",
          "enum": [
            "fast",
            false
          ],
          "default": "fast"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "zauto": {
      "oneOf": [
        {
          "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "zmin": {
      "oneOf": [
        {
          "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
          "type": "number",
          "default": null
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "zmax": {
      "oneOf": [
        {
          "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
          "type": "number",
          "default": null
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "zmid": {
      "oneOf": [
        {
          "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
          "type": "number",
          "default": null
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "colorscale": {
      "oneOf": [
        {
          "$ref": "#/$defs/colorscale",
          "default": null
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "autocolorscale": {
      "oneOf": [
        {
          "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
          "type": "boolean",
          "default": false
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "reversescale": {
      "oneOf": [
        {
          "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
          "type": "boolean",
          "default": false
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "showscale": {
      "oneOf": [
        {
          "description": "Determines whether or not a colorbar is displayed for this trace.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "colorbar": {
      "type": "object",
      "properties": {
        "thicknessmode": {
          "oneOf": [
            {
              "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
              "enum": [
                "fraction",
                "pixels"
              ],
              "default": "pixels"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "thickness": {
          "oneOf": [
            {
              "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
              "type": "number",
              "minimum": 0,
              "default": 30
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lenmode": {
          "oneOf": [
            {
              "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
              "enum": [
                "fraction",
                "pixels"
              ],
              "default": "fraction"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "len": {
          "oneOf": [
            {
              "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x position of the color bar (in plot fraction).",
              "type": "number",
              "minimum": -2,
              "maximum": 3,
              "default": 1.02
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xanchor": {
          "oneOf": [
            {
              "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
              "enum": [
                "left",
                "center",
                "right"
              ],
              "default": "left"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xpad": {
          "oneOf": [
            {
              "description": "Sets the amount of padding (in px) along the x direction.",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y position of the color bar (in plot fraction).",
              "type": "number",
              "minimum": -2,
              "maximum": 3,
              "default": 0.5
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yanchor": {
          "oneOf": [
            {
              "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
              "enum": [
                "top",
                "middle",
                "bottom"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ypad": {
          "oneOf": [
            {
              "description": "Sets the amount of padding (in px) along the y direction.",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outlinecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outlinewidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the axis line.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "borderwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) or the border enclosing this color bar.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickmode": {
          "oneOf": [
            {
              "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
              "enum": [
                "auto",
                "linear",
                "array"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nticks": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tick0": {
          "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
        },
        "dtick": {
          "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
        },
        "tickvals": {
          "oneOf": [
            {
              "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticktext": {
          "oneOf": [
            {
              "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticks": {
          "oneOf": [
            {
              "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
              "enum": [
                "outside",
                "inside",
                ""
              ],
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelposition": {
          "oneOf": [
            {
              "description": "Determines where tick labels are drawn.",
              "enum": [
                "outside",
                "inside",
                "outside top",
                "inside top",
                "outside bottom",
                "inside bottom"
              ],
              "default": "outside"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklen": {
          "oneOf": [
            {
              "description": "Sets the tick length (in px).",
              "type": "number",
              "minimum": 0,
              "default": 5
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickwidth": {
          "oneOf": [
            {
              "description": "Sets the tick width (in px).",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showticklabels": {
          "oneOf": [
            {
              "description": "Determines whether or not the tick labels are drawn.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickangle": {
          "oneOf": [
            {
              "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickformat": {
          "oneOf": [
            {
              "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format And for dates see: https://github.com/d3/d3-time-format#locale_format We add one item to d3's date formatter: *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickprefix": {
          "oneOf": [
            {
              "description": "Sets a tick label prefix.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showtickprefix": {
          "oneOf": [
            {
              "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticksuffix": {
          "oneOf": [
            {
              "description": "Sets a tick label suffix.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showticksuffix": {
          "oneOf": [
            {
              "description": "Same as `showtickprefix` but for tick suffixes.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "separatethousands": {
          "oneOf": [
            {
              "description": "If \"true\", even 4-digit integers are separated",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "exponentformat": {
          "oneOf": [
            {
              "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
              "enum": [
                "none",
                "e",
                "E",
                "power",
                "SI",
                "B"
              ],
              "default": "B"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "minexponent": {
          "oneOf": [
            {
              "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
              "type": "number",
              "minimum": 0,
              "default": 3
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showexponent": {
          "oneOf": [
            {
              "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickvalssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticktextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "coloraxis": {
      "oneOf": [
        {
          "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
          "type": "string",
          "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
          "default": null
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xaxis": {
      "oneOf": [
        {
          "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
          "type": "string",
          "pattern": "^x([2-9]|[1-9][0-9]+)?$",
          "default": "x"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "yaxis": {
      "oneOf": [
        {
          "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
          "type": "string",
          "pattern": "^y([2-9]|[1-9][0-9]+)?$",
          "default": "y"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "idssrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for  ids .",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdatasrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "metasrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for  meta .",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverinfosrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "zsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for  z .",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for  x .",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "ysrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for  y .",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "textsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for  text .",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}