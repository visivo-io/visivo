{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a number"
        }
      ]
    },
    "bar": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "bar"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignmentgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "base": {
          "description": "Sets where the bar base is drawn (in position axis units). In *stack* or *relative* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "default": null
            },
            {
              "type": "array",
              "items": {
                "default": null
              }
            }
          ]
        },
        "basesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `base`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cliponaxis": {
          "oneOf": [
            {
              "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "constraintext": {
          "oneOf": [
            {
              "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
              "enum": [
                "inside",
                "outside",
                "both",
                "none"
              ],
              "default": "both"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step. See `x0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step. See `y0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "error_x": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "copy_ystyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "error_y": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextanchor": {
          "oneOf": [
            {
              "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
              "enum": [
                "end",
                "middle",
                "start"
              ],
              "default": "end"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cornerradius": {
              "description": "Sets the rounding of corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %). Defaults to `layout.barcornerradius`. In stack or relative barmode, the first trace to set cornerradius is used for the whole stack."
            },
            "opacity": {
              "description": "Sets the opacity of the bars.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offset": {
          "description": "Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "default": null
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "default": null
              }
            }
          ]
        },
        "offsetgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offsetsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `offset`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
              "enum": [
                "v",
                "h"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outsidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textangle": {
          "oneOf": [
            {
              "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If *none*, no text appears.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "inside",
                "outside",
                "auto",
                "none"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "inside",
                  "outside",
                  "auto",
                  "none"
                ],
                "default": "auto"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `value` and `label`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "description": "Sets the bar width (in position axis units).",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "default": null
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "default": null
              }
            }
          ]
        },
        "widthsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `width`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
          "default": 0
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
          "default": 0
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "yperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "barpolar": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "barpolar"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "base": {
          "description": "Sets where the bar base is drawn (in radial axis units). In *stack* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "default": null
            },
            {
              "type": "array",
              "items": {
                "default": null
              }
            }
          ]
        },
        "basesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `base`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dr": {
          "oneOf": [
            {
              "description": "Sets the r coordinate step.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dtheta": {
          "oneOf": [
            {
              "description": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(r|theta|text|name)(\\+(r|theta|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(r|theta|text|name)(\\+(r|theta|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the opacity of the bars.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offset": {
          "description": "Shifts the angular position where the bar is drawn (in *thetatunit* units).",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "default": null
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "default": null
              }
            }
          ]
        },
        "offsetsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `offset`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "r": {
          "oneOf": [
            {
              "description": "Sets the radial coordinates",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "r0": {
          "description": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.",
          "default": 0
        },
        "rsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `r`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.",
              "type": "string",
              "pattern": "^polar([2-9]|[1-9][0-9]+)?$",
              "default": "polar"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "theta": {
          "oneOf": [
            {
              "description": "Sets the angular coordinates",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "theta0": {
          "description": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.",
          "default": 0
        },
        "thetasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `theta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "thetaunit": {
          "oneOf": [
            {
              "description": "Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.",
              "enum": [
                "radians",
                "degrees",
                "gradians"
              ],
              "default": "degrees"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "description": "Sets the bar angular width (in *thetaunit* units).",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "default": null
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "default": null
              }
            }
          ]
        },
        "widthsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `width`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "box": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "box"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignmentgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "boxmean": {
          "oneOf": [
            {
              "description": "If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn. Defaults to *true* when `mean` is set. Defaults to *sd* when `sd` is set Otherwise defaults to *false*.",
              "enum": [
                true,
                "sd",
                false
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "boxpoints": {
          "oneOf": [
            {
              "description": "If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points Defaults to *suspectedoutliers* when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to *all* under the q1/median/q3 signature. Otherwise defaults to *outliers*.",
              "enum": [
                "all",
                "outliers",
                "suspectedoutliers",
                false
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step for multi-box traces set using q1/median/q3.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step for multi-box traces set using q1/median/q3.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoveron": {
          "oneOf": [
            {
              "description": "Do the hover effects highlight individual boxes  or sample points or both?",
              "type": "string",
              "pattern": "^(boxes|points)(\\+(boxes|points))*$",
              "default": "boxes+points"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "jitter": {
          "oneOf": [
            {
              "description": "Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es).",
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of line bounding the box(es).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lowerfence": {
          "oneOf": [
            {
              "description": "Sets the lower fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `lowerfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point below 1.5 times the IQR.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lowerfencesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lowerfence`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "oneOf": [
                {
                  "description": "Sets the marker angle in respect to `angleref`.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "oneOf": [
                {
                  "description": "Sets the marker opacity.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outliercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "description": "Sets the marker size (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "oneOf": [
                {
                  "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "mean": {
          "oneOf": [
            {
              "description": "Sets the mean values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `mean` is not provided but a sample (in `y` or `x`) is set, we compute the mean for each box using the sample values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "meansrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `mean`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "median": {
          "oneOf": [
            {
              "description": "Sets the median values. There should be as many items as the number of boxes desired.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mediansrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `median`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "notched": {
          "oneOf": [
            {
              "description": "Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 * IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to *false* unless `notchwidth` or `notchspan` is set.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "notchspan": {
          "oneOf": [
            {
              "description": "Sets the notch span from the boxes' `median` values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `notchspan` is not provided but a sample (in `y` or `x`) is set, we compute it as 1.57 * IQR / sqrt(N), where N is the sample size.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "notchspansrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `notchspan`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "notchwidth": {
          "oneOf": [
            {
              "description": "Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).",
              "type": "number",
              "minimum": 0,
              "maximum": 0.5,
              "default": 0.25
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offsetgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal).",
              "enum": [
                "v",
                "h"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "pointpos": {
          "oneOf": [
            {
              "description": "Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes",
              "type": "number",
              "minimum": -2,
              "maximum": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "q1": {
          "oneOf": [
            {
              "description": "Sets the Quartile 1 values. There should be as many items as the number of boxes desired.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "q1src": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `q1`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "q3": {
          "oneOf": [
            {
              "description": "Sets the Quartile 3 values. There should be as many items as the number of boxes desired.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "q3src": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `q3`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "quartilemethod": {
          "oneOf": [
            {
              "description": "Sets the method used to compute the sample's Q1 and Q3 quartiles. The *linear* method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The *exclusive* method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The *inclusive* method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.",
              "enum": [
                "linear",
                "exclusive",
                "inclusive"
              ],
              "default": "linear"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sd": {
          "oneOf": [
            {
              "description": "Sets the standard deviation values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `sd` is not provided but a sample (in `y` or `x`) is set, we compute the standard deviation for each box using the sample values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sdmultiple": {
          "oneOf": [
            {
              "description": "Scales the box size when sizemode=sd Allowing boxes to be drawn across any stddev range For example 1-stddev, 3-stddev, 5-stddev",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sdsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `sd`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showwhiskers": {
          "oneOf": [
            {
              "description": "Determines whether or not whiskers are visible. Defaults to true for `sizemode` *quartiles*, false for *sd*.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sizemode": {
          "oneOf": [
            {
              "description": "Sets the upper and lower bound for the boxes quartiles means box is drawn between Q1 and Q3 SD means the box is drawn between Mean +- Standard Deviation Argument sdmultiple (default 1) to scale the box size So it could be drawn 1-stddev, 3-stddev etc",
              "enum": [
                "quartiles",
                "sd"
              ],
              "default": "quartiles"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "upperfence": {
          "oneOf": [
            {
              "description": "Sets the upper fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `upperfence` is not provided but a sample (in `y` or `x`) is set, we compute the upper as the last sample point above 1.5 times the IQR.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "upperfencesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `upperfence`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "whiskerwidth": {
          "oneOf": [
            {
              "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.5
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "oneOf": [
            {
              "description": "Sets the width of the box in data coordinate If *0* (default value) the width is automatically selected based on the positions of other box traces in the same subplot.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x sample data or coordinates. See overview for more info.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info."
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y sample data or coordinates. See overview for more info.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info."
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "yperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "candlestick": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "candlestick"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "close": {
          "oneOf": [
            {
              "description": "Sets the close values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "closesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `close`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "decreasing": {
          "type": "object",
          "properties": {
            "fillcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "high": {
          "oneOf": [
            {
              "description": "Sets the high values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "highsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `high`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0, 0, 0, 0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0, 0, 0, 0)"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0, 0, 0, 0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0, 0, 0, 0)"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "split": {
              "oneOf": [
                {
                  "description": "Show hover information (open, close, high, low) in separate labels.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "increasing": {
          "type": "object",
          "properties": {
            "fillcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "low": {
          "oneOf": [
            {
              "description": "Sets the low values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lowsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `low`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "open": {
          "oneOf": [
            {
              "description": "Sets the open values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opensrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `open`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "whiskerwidth": {
          "oneOf": [
            {
              "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates. If absent, linear coordinate will be generated.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "carpet": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "carpet"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "a": {
          "oneOf": [
            {
              "description": "An array containing values of the first parameter value",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "a0": {
          "oneOf": [
            {
              "description": "Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.",
              "type": "number",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "aaxis": {
          "type": "object",
          "properties": {
            "arraydtick": {
              "oneOf": [
                {
                  "description": "The stride between grid lines along the axis",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraytick0": {
              "oneOf": [
                {
                  "description": "The starting index of grid lines along the axis",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autorange": {
              "oneOf": [
                {
                  "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                  "enum": [
                    true,
                    false,
                    "reversed"
                  ],
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autotypenumbers": {
              "oneOf": [
                {
                  "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
                  "enum": [
                    "convert types",
                    "strict"
                  ],
                  "default": "convert types"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "categoryarray": {
              "oneOf": [
                {
                  "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "categoryarraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `categoryarray`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "categoryorder": {
              "oneOf": [
                {
                  "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                  "enum": [
                    "trace",
                    "category ascending",
                    "category descending",
                    "array"
                  ],
                  "default": "trace"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cheatertype": {
              "oneOf": [
                {
                  "enum": [
                    "index",
                    "value"
                  ],
                  "default": "value"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "oneOf": [
                {
                  "description": "The stride between grid lines along the axis",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "endline": {
              "oneOf": [
                {
                  "description": "Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "endlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "endlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the end line.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fixedrange": {
              "oneOf": [
                {
                  "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "gridcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "griddash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "gridwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "labelpadding": {
              "oneOf": [
                {
                  "description": "Extra padding between label and the axis",
                  "type": "integer",
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelprefix": {
              "oneOf": [
                {
                  "description": "Sets a axis label prefix.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelsuffix": {
              "oneOf": [
                {
                  "description": "Sets a axis label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "linecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "linewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minorgridcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minorgridcount": {
              "oneOf": [
                {
                  "description": "Sets the number of minor grid ticks per major grid tick",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minorgriddash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minorgridwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the grid lines.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "range": {
              "oneOf": [
                {
                  "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {}
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "rangemode": {
              "oneOf": [
                {
                  "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                  "enum": [
                    "normal",
                    "tozero",
                    "nonnegative"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showgrid": {
              "oneOf": [
                {
                  "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showline": {
              "oneOf": [
                {
                  "description": "Determines whether or not a line bounding this axis is drawn.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.",
                  "enum": [
                    "start",
                    "end",
                    "both",
                    "none"
                  ],
                  "default": "start"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "startline": {
              "oneOf": [
                {
                  "description": "Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "startlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "startlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the start line.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "oneOf": [
                {
                  "description": "The starting index of grid lines along the axis",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "enum": [
                    "linear",
                    "array"
                  ],
                  "default": "array"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                  "enum": [
                    "-",
                    "linear",
                    "date",
                    "category"
                  ],
                  "default": "-"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "asrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `a`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "b": {
          "oneOf": [
            {
              "description": "A two dimensional array of y coordinates at each carpet point.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "b0": {
          "oneOf": [
            {
              "description": "Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.",
              "type": "number",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "baxis": {
          "type": "object",
          "properties": {
            "arraydtick": {
              "oneOf": [
                {
                  "description": "The stride between grid lines along the axis",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraytick0": {
              "oneOf": [
                {
                  "description": "The starting index of grid lines along the axis",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autorange": {
              "oneOf": [
                {
                  "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
                  "enum": [
                    true,
                    false,
                    "reversed"
                  ],
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autotypenumbers": {
              "oneOf": [
                {
                  "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
                  "enum": [
                    "convert types",
                    "strict"
                  ],
                  "default": "convert types"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "categoryarray": {
              "oneOf": [
                {
                  "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "categoryarraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `categoryarray`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "categoryorder": {
              "oneOf": [
                {
                  "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                  "enum": [
                    "trace",
                    "category ascending",
                    "category descending",
                    "array"
                  ],
                  "default": "trace"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cheatertype": {
              "oneOf": [
                {
                  "enum": [
                    "index",
                    "value"
                  ],
                  "default": "value"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "oneOf": [
                {
                  "description": "The stride between grid lines along the axis",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "endline": {
              "oneOf": [
                {
                  "description": "Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "endlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "endlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the end line.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fixedrange": {
              "oneOf": [
                {
                  "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "gridcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "griddash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "gridwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "labelpadding": {
              "oneOf": [
                {
                  "description": "Extra padding between label and the axis",
                  "type": "integer",
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelprefix": {
              "oneOf": [
                {
                  "description": "Sets a axis label prefix.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelsuffix": {
              "oneOf": [
                {
                  "description": "Sets a axis label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "linecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "linewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minorgridcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minorgridcount": {
              "oneOf": [
                {
                  "description": "Sets the number of minor grid ticks per major grid tick",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minorgriddash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minorgridwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the grid lines.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "range": {
              "oneOf": [
                {
                  "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {}
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "rangemode": {
              "oneOf": [
                {
                  "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
                  "enum": [
                    "normal",
                    "tozero",
                    "nonnegative"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showgrid": {
              "oneOf": [
                {
                  "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showline": {
              "oneOf": [
                {
                  "description": "Determines whether or not a line bounding this axis is drawn.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.",
                  "enum": [
                    "start",
                    "end",
                    "both",
                    "none"
                  ],
                  "default": "start"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "startline": {
              "oneOf": [
                {
                  "description": "Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "startlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "startlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the start line.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "oneOf": [
                {
                  "description": "The starting index of grid lines along the axis",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "enum": [
                    "linear",
                    "array"
                  ],
                  "default": "array"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
                  "enum": [
                    "-",
                    "linear",
                    "date",
                    "category"
                  ],
                  "default": "-"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "bsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `b`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "carpet": {
          "oneOf": [
            {
              "description": "An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cheaterslope": {
          "oneOf": [
            {
              "description": "The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been omitted.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "da": {
          "oneOf": [
            {
              "description": "Sets the a coordinate step. See `a0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "db": {
          "oneOf": [
            {
              "description": "Sets the b coordinate step. See `b0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "default": "\"Open Sans\", verdana, arial, sans-serif",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1,
                  "default": 12
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "A two dimensional array of y coordinates at each carpet point.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "choropleth": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "choropleth"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "featureidkey": {
          "oneOf": [
            {
              "description": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example *properties.name*.",
              "type": "string",
              "default": "id"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "geo": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.",
              "type": "string",
              "pattern": "^geo([2-9]|[1-9][0-9]+)?$",
              "default": "geo"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "geojson": {
          "description": "Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*."
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(location|z|text|name)(\\+(location|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(location|z|text|name)(\\+(location|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locationmode": {
          "oneOf": [
            {
              "description": "Determines the set of locations used to match entries in `locations` to regions on the map. Values *ISO-3*, *USA-states*, *country names* correspond to features on the base map and value *geojson-id* corresponds to features from a custom GeoJSON linked to the `geojson` attribute.",
              "enum": [
                "ISO-3",
                "USA-states",
                "country names",
                "geojson-id"
              ],
              "default": "ISO-3"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locations": {
          "oneOf": [
            {
              "description": "Sets the coordinates via location IDs or names. See `locationmode` for more info.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locationssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `locations`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "opacity": {
              "description": "Sets the opacity of the locations.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the text elements associated with each location.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the color values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "choroplethmap": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "choroplethmap"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "below": {
          "oneOf": [
            {
              "description": "Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmap traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "featureidkey": {
          "oneOf": [
            {
              "description": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example *properties.name*.",
              "type": "string",
              "default": "id"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "geojson": {
          "description": "Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*."
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(location|z|text|name)(\\+(location|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(location|z|text|name)(\\+(location|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `properties` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locations": {
          "oneOf": [
            {
              "description": "Sets which features found in *geojson* to plot using their feature `id` field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locationssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `locations`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "opacity": {
              "description": "Sets the opacity of the locations.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's data coordinates and a map subplot. If *map* (the default value), the data refer to `layout.map`. If *map2*, the data refer to `layout.map2`, and so on.",
              "type": "string",
              "pattern": "^map([2-9]|[1-9][0-9]+)?$",
              "default": "map"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets the text elements associated with each location.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the color values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "choroplethmapbox": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "choroplethmapbox"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "below": {
          "oneOf": [
            {
              "description": "Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "featureidkey": {
          "oneOf": [
            {
              "description": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example *properties.name*.",
              "type": "string",
              "default": "id"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "geojson": {
          "description": "Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*."
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(location|z|text|name)(\\+(location|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(location|z|text|name)(\\+(location|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `properties` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locations": {
          "oneOf": [
            {
              "description": "Sets which features found in *geojson* to plot using their feature `id` field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locationssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `locations`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "opacity": {
              "description": "Sets the opacity of the locations.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.",
              "type": "string",
              "pattern": "^mapbox([2-9]|[1-9][0-9]+)?$",
              "default": "mapbox"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets the text elements associated with each location.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the color values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "cone": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "cone"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "anchor": {
          "oneOf": [
            {
              "description": "Sets the cones' anchor with respect to their x/y/z positions. Note that *cm* denote the cone's center of mass which corresponds to 1/4 from the tail to tip.",
              "enum": [
                "tip",
                "tail",
                "cm",
                "center"
              ],
              "default": "cm"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|u|v|w|norm|text|name)(\\+(x|y|z|u|v|w|norm|text|name))*$"
                }
              ],
              "default": "x+y+z+norm+text+name"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|u|v|w|norm|text|name)(\\+(x|y|z|u|v|w|norm|text|name))*$"
                  }
                ],
                "default": "x+y+z+norm+text+name"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `norm` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lighting": {
          "type": "object",
          "properties": {
            "ambient": {
              "oneOf": [
                {
                  "description": "Ambient light increases overall color visibility but can wash out the image.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "diffuse": {
              "oneOf": [
                {
                  "description": "Represents the extent that incident rays are reflected in a range of angles.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "facenormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1e-06
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fresnel": {
              "oneOf": [
                {
                  "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 5,
                  "default": 0.2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "roughness": {
              "oneOf": [
                {
                  "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "specular": {
              "oneOf": [
                {
                  "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 2,
                  "default": 0.05
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "vertexnormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1e-12
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lightposition": {
          "type": "object",
          "properties": {
            "x": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the X coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Y coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "z": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Z coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scene": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
              "type": "string",
              "pattern": "^scene([2-9]|[1-9][0-9]+)?$",
              "default": "scene"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sizemode": {
          "oneOf": [
            {
              "description": "Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as *absolute* value (in the same units as the vector field). To display sizes in actual vector length use *raw*.",
              "enum": [
                "scaled",
                "absolute",
                "raw"
              ],
              "default": "scaled"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sizeref": {
          "oneOf": [
            {
              "description": "Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`. This factor (computed internally) corresponds to the minimum \"time\" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With `sizemode` set to *raw*, its default value is *1*. With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5*. With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the text elements associated with the cones. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "u": {
          "oneOf": [
            {
              "description": "Sets the x components of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `u`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "usrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `u`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "v": {
          "oneOf": [
            {
              "description": "Sets the y components of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "vhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `v`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "vsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `v`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "w": {
          "oneOf": [
            {
              "description": "Sets the z components of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "whoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `w`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "wsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `w`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates of the vector field and of the displayed cones.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates of the vector field and of the displayed cones.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the z coordinates of the vector field and of the displayed cones.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "contour": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "contour"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocontour": {
          "oneOf": [
            {
              "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "contours": {
          "type": "object",
          "properties": {
            "coloring": {
              "oneOf": [
                {
                  "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                  "enum": [
                    "fill",
                    "heatmap",
                    "lines",
                    "none"
                  ],
                  "default": "fill"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "end": {
              "oneOf": [
                {
                  "description": "Sets the end contour level value. Must be more than `contours.start`",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelformat": {
              "oneOf": [
                {
                  "description": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "operation": {
              "oneOf": [
                {
                  "description": "Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.",
                  "enum": [
                    "=",
                    "<",
                    ">=",
                    ">",
                    "<=",
                    "[]",
                    "()",
                    "[)",
                    "(]",
                    "][",
                    ")(",
                    "](",
                    ")["
                  ],
                  "default": "="
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showlabels": {
              "oneOf": [
                {
                  "description": "Determines whether to label the contour lines with their values.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showlines": {
              "oneOf": [
                {
                  "description": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "description": "Sets the step between each contour level. Must be positive.",
                  "type": "number",
                  "minimum": 0,
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "start": {
              "oneOf": [
                {
                  "description": "Sets the starting contour level value. Must be less than `contours.end`",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.",
                  "enum": [
                    "levels",
                    "constraint"
                  ],
                  "default": "levels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "description": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.",
              "default": 0
            }
          }
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step. See `x0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step. See `y0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverongaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "oneOf": [
            {
              "description": "Same as `text`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the contour line width in (in px) Defaults to *0.5* when `contours.type` is *levels*. Defaults to *2* when `contour.type` is *constraint*.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ncontours": {
          "oneOf": [
            {
              "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
              "type": "integer",
              "minimum": 1,
              "default": 15
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets the text elements associated with each z value.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "oneOf": [
            {
              "description": "For this trace it only has an effect if `coloring` is set to *heatmap*. Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "transpose": {
          "oneOf": [
            {
              "description": "Transposes the z data.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
          "default": 0
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xtype": {
          "oneOf": [
            {
              "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
              "enum": [
                "array",
                "scaled"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
          "default": 0
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "yperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ytype": {
          "oneOf": [
            {
              "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
              "enum": [
                "array",
                "scaled"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the z data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "contourcarpet": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "contourcarpet"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "a": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "a0": {
          "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
          "default": 0
        },
        "asrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `a`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "atype": {
          "oneOf": [
            {
              "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
              "enum": [
                "array",
                "scaled"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocontour": {
          "oneOf": [
            {
              "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "b": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "b0": {
          "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
          "default": 0
        },
        "bsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `b`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "btype": {
          "oneOf": [
            {
              "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
              "enum": [
                "array",
                "scaled"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "carpet": {
          "oneOf": [
            {
              "description": "The `carpet` of the carpet axes on which this contour trace lies",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "contours": {
          "type": "object",
          "properties": {
            "coloring": {
              "oneOf": [
                {
                  "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                  "enum": [
                    "fill",
                    "lines",
                    "none"
                  ],
                  "default": "fill"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "end": {
              "oneOf": [
                {
                  "description": "Sets the end contour level value. Must be more than `contours.start`",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelformat": {
              "oneOf": [
                {
                  "description": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "operation": {
              "oneOf": [
                {
                  "description": "Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.",
                  "enum": [
                    "=",
                    "<",
                    ">=",
                    ">",
                    "<=",
                    "[]",
                    "()",
                    "[)",
                    "(]",
                    "][",
                    ")(",
                    "](",
                    ")["
                  ],
                  "default": "="
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showlabels": {
              "oneOf": [
                {
                  "description": "Determines whether to label the contour lines with their values.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showlines": {
              "oneOf": [
                {
                  "description": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "description": "Sets the step between each contour level. Must be positive.",
                  "type": "number",
                  "minimum": 0,
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "start": {
              "oneOf": [
                {
                  "description": "Sets the starting contour level value. Must be less than `contours.end`",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.",
                  "enum": [
                    "levels",
                    "constraint"
                  ],
                  "default": "levels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "description": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.",
              "default": 0
            }
          }
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "da": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step. See `x0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "db": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step. See `y0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "oneOf": [
            {
              "description": "Same as `text`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the contour line width in (in px) Defaults to *0.5* when `contours.type` is *levels*. Defaults to *2* when `contour.type` is *constraint*.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ncontours": {
          "oneOf": [
            {
              "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
              "type": "integer",
              "minimum": 1,
              "default": 15
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets the text elements associated with each z value.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "transpose": {
          "oneOf": [
            {
              "description": "Transposes the z data.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the z data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "densitymap": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "densitymap"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "below": {
          "oneOf": [
            {
              "description": "Determines if the densitymap trace will be inserted before the layer with the specified ID. By default, densitymap traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(lon|lat|z|text|name)(\\+(lon|lat|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(lon|lat|z|text|name)(\\+(lon|lat|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lat": {
          "oneOf": [
            {
              "description": "Sets the latitude coordinates (in degrees North).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "latsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lat`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lon": {
          "oneOf": [
            {
              "description": "Sets the longitude coordinates (in degrees East).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lonsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lon`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "radius": {
          "description": "Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymap trace smoother, but less detailed.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 1,
              "default": 30
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1,
                "default": 30
              }
            }
          ]
        },
        "radiussrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `radius`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's data coordinates and a map subplot. If *map* (the default value), the data refer to `layout.map`. If *map2*, the data refer to `layout.map2`, and so on.",
              "type": "string",
              "pattern": "^map([2-9]|[1-9][0-9]+)?$",
              "default": "map"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "densitymapbox": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "densitymapbox"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "below": {
          "oneOf": [
            {
              "description": "Determines if the densitymapbox trace will be inserted before the layer with the specified ID. By default, densitymapbox traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(lon|lat|z|text|name)(\\+(lon|lat|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(lon|lat|z|text|name)(\\+(lon|lat|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lat": {
          "oneOf": [
            {
              "description": "Sets the latitude coordinates (in degrees North).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "latsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lat`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lon": {
          "oneOf": [
            {
              "description": "Sets the longitude coordinates (in degrees East).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lonsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lon`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "radius": {
          "description": "Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 1,
              "default": 30
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1,
                "default": 30
              }
            }
          ]
        },
        "radiussrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `radius`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.",
              "type": "string",
              "pattern": "^mapbox([2-9]|[1-9][0-9]+)?$",
              "default": "mapbox"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "funnel": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "funnel"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignmentgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cliponaxis": {
          "oneOf": [
            {
              "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connector": {
          "type": "object",
          "properties": {
            "fillcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines if connector regions and lines are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "constraintext": {
          "oneOf": [
            {
              "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
              "enum": [
                "inside",
                "outside",
                "both",
                "none"
              ],
              "default": "both"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step. See `x0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step. See `y0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(name|x|y|text|percent initial|percent previous|percent total)(\\+(name|x|y|text|percent initial|percent previous|percent total))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(name|x|y|text|percent initial|percent previous|percent total)(\\+(name|x|y|text|percent initial|percent previous|percent total))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `percentInitial`, `percentPrevious` and `percentTotal`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextanchor": {
          "oneOf": [
            {
              "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
              "enum": [
                "end",
                "middle",
                "start"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the opacity of the bars.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offset": {
          "oneOf": [
            {
              "description": "Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offsetgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the funnels. With *v* (*h*), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only *y* array is presented or orientation is set to *v*. Also regarding graphs including only 'horizontal' funnels, *autorange* on the *y-axis* are set to *reversed*.",
              "enum": [
                "v",
                "h"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outsidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textangle": {
          "oneOf": [
            {
              "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textinfo": {
          "description": "Determines which trace information appear on the graph. In the case of having multiple funnels, percentages & totals are computed separately (per trace).",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(label|text|percent initial|percent previous|percent total|value)(\\+(label|text|percent initial|percent previous|percent total|value))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textposition": {
          "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If *none*, no text appears.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "inside",
                "outside",
                "auto",
                "none"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "inside",
                  "outside",
                  "auto",
                  "none"
                ],
                "default": "auto"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `percentInitial`, `percentPrevious`, `percentTotal`, `label` and `value`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "oneOf": [
            {
              "description": "Sets the bar width (in position axis units).",
              "type": "number",
              "minimum": 0,
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
          "default": 0
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
          "default": 0
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "yperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "funnelarea": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "funnelarea"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "aspectratio": {
          "oneOf": [
            {
              "description": "Sets the ratio between height and width",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "baseratio": {
          "oneOf": [
            {
              "description": "Sets the ratio between bottom length and maximum top length.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.333
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dlabel": {
          "oneOf": [
            {
              "description": "Sets the label step. See `label0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this funnelarea trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this funnelarea trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this funnelarea trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this funnelarea trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(label|text|value|percent|name)(\\+(label|text|value|percent|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(label|text|value|percent|name)(\\+(label|text|value|percent|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `text` and `percent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "label0": {
          "oneOf": [
            {
              "description": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.",
              "type": "number",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labels": {
          "oneOf": [
            {
              "description": "Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `labels`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "colors": {
              "oneOf": [
                {
                  "description": "Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `colors`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scalegroup": {
          "oneOf": [
            {
              "description": "If there are multiple funnelareas that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textinfo": {
          "description": "Determines which trace information appear on the graph.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(label|text|value|percent)(\\+(label|text|value|percent))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textposition": {
          "description": "Specifies the location of the `textinfo`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "inside",
                "none"
              ],
              "default": "inside"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "inside",
                  "none"
                ],
                "default": "inside"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `text` and `percent`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "title": {
          "type": "object",
          "properties": {
            "position": {
              "oneOf": [
                {
                  "description": "Specifies the location of the `title`.",
                  "enum": [
                    "top left",
                    "top center",
                    "top right"
                  ],
                  "default": "top center"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the chart. If it is empty, no title is displayed.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "values": {
          "oneOf": [
            {
              "description": "Sets the values of the sectors. If omitted, we count occurrences of each label.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuessrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `values`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "heatmap": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "heatmap"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array and `zsmooth` is not false; otherwise it is defaulted to false.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step. See `x0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step. See `y0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverongaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "oneOf": [
            {
              "description": "Same as `text`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets the text elements associated with each z value.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "oneOf": [
            {
              "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "transpose": {
          "oneOf": [
            {
              "description": "Transposes the z data.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
          "default": 0
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xgap": {
          "oneOf": [
            {
              "description": "Sets the horizontal gap (in pixels) between bricks.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xtype": {
          "oneOf": [
            {
              "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
              "enum": [
                "array",
                "scaled"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
          "default": 0
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ygap": {
          "oneOf": [
            {
              "description": "Sets the vertical gap (in pixels) between bricks.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "yperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ytype": {
          "oneOf": [
            {
              "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
              "enum": [
                "array",
                "scaled"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the z data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsmooth": {
          "oneOf": [
            {
              "description": "Picks a smoothing algorithm use to smooth `z` data.",
              "enum": [
                "fast",
                "best",
                false
              ],
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "histogram": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "histogram"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignmentgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autobinx": {
          "oneOf": [
            {
              "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.",
              "type": "boolean",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autobiny": {
          "oneOf": [
            {
              "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.",
              "type": "boolean",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bingroup": {
          "oneOf": [
            {
              "description": "Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same *orientation* under `barmode` *stack*, *relative* and *group* are forced into the same bingroup, Using `bingroup`, traces under `barmode` *overlay* and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d* trace can share the same `bingroup`",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cliponaxis": {
          "oneOf": [
            {
              "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "constraintext": {
          "oneOf": [
            {
              "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
              "enum": [
                "inside",
                "outside",
                "both",
                "none"
              ],
              "default": "both"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cumulative": {
          "type": "object",
          "properties": {
            "currentbin": {
              "oneOf": [
                {
                  "description": "Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. *include* is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. *exclude* makes the opposite half-bin bias, and *half* removes it.",
                  "enum": [
                    "include",
                    "exclude",
                    "half"
                  ],
                  "default": "include"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "direction": {
              "oneOf": [
                {
                  "description": "Only applies if cumulative is enabled. If *increasing* (default) we sum all prior bins, so the result increases from left to right. If *decreasing* we sum later bins so the result decreases from left to right.",
                  "enum": [
                    "increasing",
                    "decreasing"
                  ],
                  "default": "increasing"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "enabled": {
              "oneOf": [
                {
                  "description": "If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the *density* `histnorm` settings behave the same as their equivalents without *density*: ** and *density* both rise to the number of data points, and *probability* and *probability density* both rise to the number of sample points.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "error_x": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "copy_ystyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "error_y": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "histfunc": {
          "oneOf": [
            {
              "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
              "enum": [
                "count",
                "sum",
                "avg",
                "min",
                "max"
              ],
              "default": "count"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "histnorm": {
          "oneOf": [
            {
              "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
              "enum": [
                "",
                "percent",
                "probability",
                "density",
                "probability density"
              ],
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "auto"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "auto"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `binNumber` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextanchor": {
          "oneOf": [
            {
              "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
              "enum": [
                "end",
                "middle",
                "start"
              ],
              "default": "end"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "auto"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cornerradius": {
              "description": "Sets the rounding of corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %). Defaults to `layout.barcornerradius`. In stack or relative barmode, the first trace to set cornerradius is used for the whole stack."
            },
            "opacity": {
              "description": "Sets the opacity of the bars.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nbinsx": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nbinsy": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offsetgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
              "enum": [
                "v",
                "h"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outsidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textangle": {
          "oneOf": [
            {
              "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "oneOf": [
            {
              "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If *none*, no text appears.",
              "enum": [
                "inside",
                "outside",
                "auto",
                "none"
              ],
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "oneOf": [
            {
              "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label` and `value`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the sample data to be binned on the x axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xbins": {
          "type": "object",
          "properties": {
            "end": {
              "description": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers."
            },
            "size": {
              "description": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above."
            },
            "start": {
              "description": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins."
            }
          }
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the sample data to be binned on the y axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ybins": {
          "type": "object",
          "properties": {
            "end": {
              "description": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers."
            },
            "size": {
              "description": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above."
            },
            "start": {
              "description": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins."
            }
          }
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "histogram2d": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "histogram2d"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autobinx": {
          "oneOf": [
            {
              "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.",
              "type": "boolean",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autobiny": {
          "oneOf": [
            {
              "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.",
              "type": "boolean",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bingroup": {
          "oneOf": [
            {
              "description": "Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of *1* on two histogram2d traces will make them their x-bins and y-bins match separately.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "histfunc": {
          "oneOf": [
            {
              "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
              "enum": [
                "count",
                "sum",
                "avg",
                "min",
                "max"
              ],
              "default": "count"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "histnorm": {
          "oneOf": [
            {
              "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
              "enum": [
                "",
                "percent",
                "probability",
                "density",
                "probability density"
              ],
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "description": "Sets the aggregation data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nbinsx": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nbinsy": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "texttemplate": {
          "oneOf": [
            {
              "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z`",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the sample data to be binned on the x axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xbingroup": {
          "oneOf": [
            {
              "description": "Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xbins": {
          "type": "object",
          "properties": {
            "end": {
              "description": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers."
            },
            "size": {
              "description": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). "
            },
            "start": {
              "description": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. "
            }
          }
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xgap": {
          "oneOf": [
            {
              "description": "Sets the horizontal gap (in pixels) between bricks.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the sample data to be binned on the y axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ybingroup": {
          "oneOf": [
            {
              "description": "Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ybins": {
          "type": "object",
          "properties": {
            "end": {
              "description": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers."
            },
            "size": {
              "description": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). "
            },
            "start": {
              "description": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. "
            }
          }
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ygap": {
          "oneOf": [
            {
              "description": "Sets the vertical gap (in pixels) between bricks.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the aggregation data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsmooth": {
          "oneOf": [
            {
              "description": "Picks a smoothing algorithm use to smooth `z` data.",
              "enum": [
                "fast",
                "best",
                false
              ],
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "histogram2dcontour": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "histogram2dcontour"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autobinx": {
          "oneOf": [
            {
              "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.",
              "type": "boolean",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autobiny": {
          "oneOf": [
            {
              "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.",
              "type": "boolean",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocontour": {
          "oneOf": [
            {
              "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bingroup": {
          "oneOf": [
            {
              "description": "Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of *1* on two histogram2d traces will make them their x-bins and y-bins match separately.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "contours": {
          "type": "object",
          "properties": {
            "coloring": {
              "oneOf": [
                {
                  "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
                  "enum": [
                    "fill",
                    "heatmap",
                    "lines",
                    "none"
                  ],
                  "default": "fill"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "end": {
              "oneOf": [
                {
                  "description": "Sets the end contour level value. Must be more than `contours.start`",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelformat": {
              "oneOf": [
                {
                  "description": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "operation": {
              "oneOf": [
                {
                  "description": "Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.",
                  "enum": [
                    "=",
                    "<",
                    ">=",
                    ">",
                    "<=",
                    "[]",
                    "()",
                    "[)",
                    "(]",
                    "][",
                    ")(",
                    "](",
                    ")["
                  ],
                  "default": "="
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showlabels": {
              "oneOf": [
                {
                  "description": "Determines whether to label the contour lines with their values.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showlines": {
              "oneOf": [
                {
                  "description": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "description": "Sets the step between each contour level. Must be positive.",
                  "type": "number",
                  "minimum": 0,
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "start": {
              "oneOf": [
                {
                  "description": "Sets the starting contour level value. Must be less than `contours.end`",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.",
                  "enum": [
                    "levels",
                    "constraint"
                  ],
                  "default": "levels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "description": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.",
              "default": 0
            }
          }
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "histfunc": {
          "oneOf": [
            {
              "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
              "enum": [
                "count",
                "sum",
                "avg",
                "min",
                "max"
              ],
              "default": "count"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "histnorm": {
          "oneOf": [
            {
              "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
              "enum": [
                "",
                "percent",
                "probability",
                "density",
                "probability density"
              ],
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the contour line width in (in px)",
                  "type": "number",
                  "minimum": 0,
                  "default": 0.5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "description": "Sets the aggregation data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nbinsx": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nbinsy": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ncontours": {
          "oneOf": [
            {
              "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
              "type": "integer",
              "minimum": 1,
              "default": 15
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "texttemplate": {
          "oneOf": [
            {
              "description": "For this trace it only has an effect if `coloring` is set to *heatmap*. Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the sample data to be binned on the x axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xbingroup": {
          "oneOf": [
            {
              "description": "Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xbins": {
          "type": "object",
          "properties": {
            "end": {
              "description": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers."
            },
            "size": {
              "description": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). "
            },
            "start": {
              "description": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. "
            }
          }
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the sample data to be binned on the y axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ybingroup": {
          "oneOf": [
            {
              "description": "Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ybins": {
          "type": "object",
          "properties": {
            "end": {
              "description": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers."
            },
            "size": {
              "description": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). "
            },
            "start": {
              "description": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. "
            }
          }
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the aggregation data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "icicle": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "icicle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "branchvalues": {
          "oneOf": [
            {
              "description": "Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.",
              "enum": [
                "remainder",
                "total"
              ],
              "default": "remainder"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "count": {
          "oneOf": [
            {
              "description": "Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.",
              "type": "string",
              "pattern": "^(branches|leaves)(\\+(branches|leaves))*$",
              "default": "leaves"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this icicle trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this icicle trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this icicle trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this icicle trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(label|text|value|name|current path|percent root|percent entry|percent parent)(\\+(label|text|value|name|current path|percent root|percent entry|percent parent))*$"
                }
              ],
              "default": "label+text+value+name"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(label|text|value|name|current path|percent root|percent entry|percent parent)(\\+(label|text|value|name|current path|percent root|percent entry|percent parent))*$"
                  }
                ],
                "default": "label+text+value+name"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "auto"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "auto"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "auto"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "labels": {
          "oneOf": [
            {
              "description": "Sets the labels of each of the sectors.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `labels`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "leaf": {
          "type": "object",
          "properties": {
            "opacity": {
              "oneOf": [
                {
                  "description": "Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "level": {
          "description": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`."
        },
        "marker": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colors": {
              "oneOf": [
                {
                  "description": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `colors`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "maxdepth": {
          "oneOf": [
            {
              "description": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.",
              "type": "integer",
              "default": -1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outsidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "auto"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "parents": {
          "oneOf": [
            {
              "description": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "parentssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `parents`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "pathbar": {
          "type": "object",
          "properties": {
            "edgeshape": {
              "oneOf": [
                {
                  "description": "Determines which shape is used for edges between `barpath` labels.",
                  "enum": [
                    ">",
                    "<",
                    "|",
                    "/",
                    "\\"
                  ],
                  "default": ">"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "side": {
              "oneOf": [
                {
                  "description": "Determines on which side of the the treemap the `pathbar` should be presented.",
                  "enum": [
                    "top",
                    "bottom"
                  ],
                  "default": "top"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.",
                  "type": "number",
                  "minimum": 12
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "root": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "sort": {
          "oneOf": [
            {
              "description": "Determines whether or not the sectors are reordered from largest to smallest.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0,0,0,0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0,0,0,0)"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textinfo": {
          "description": "Determines which trace information appear on the graph.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(label|text|value|current path|percent root|percent entry|percent parent)(\\+(label|text|value|current path|percent root|percent entry|percent parent))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textposition": {
          "oneOf": [
            {
              "description": "Sets the positions of the `text` elements.",
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "top left"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tiling": {
          "type": "object",
          "properties": {
            "flip": {
              "oneOf": [
                {
                  "description": "Determines if the positions obtained from solver are flipped on each axis.",
                  "type": "string",
                  "pattern": "^(x|y)(\\+(x|y))*$",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "When set in conjunction with `tiling.flip`, determines on which side the root nodes are drawn in the chart. If `tiling.orientation` is *v* and `tiling.flip` is **, the root nodes appear at the top. If `tiling.orientation` is *v* and `tiling.flip` is *y*, the root nodes appear at the bottom. If `tiling.orientation` is *h* and `tiling.flip` is **, the root nodes appear at the left. If `tiling.orientation` is *h* and `tiling.flip` is *x*, the root nodes appear at the right.",
                  "enum": [
                    "v",
                    "h"
                  ],
                  "default": "h"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "pad": {
              "oneOf": [
                {
                  "description": "Sets the inner padding (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "values": {
          "oneOf": [
            {
              "description": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuessrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `values`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "image": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "image"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colormodel": {
          "oneOf": [
            {
              "description": "Color model used to map the numerical color components described in `z` into colors. If `source` is specified, this attribute will be set to `rgba256` otherwise it defaults to `rgb`.",
              "enum": [
                "rgb",
                "rgba",
                "rgba256",
                "hsl",
                "hsla"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Set the pixel's horizontal size.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Set the pixel's vertical size",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|color|name|text)(\\+(x|y|z|color|name|text))*$"
                }
              ],
              "default": "x+y+z+text+name"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|color|name|text)(\\+(x|y|z|color|name|text))*$"
                  }
                ],
                "default": "x+y+z+text+name"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0,0,0,0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0,0,0,0)"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0,0,0,0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0,0,0,0)"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `z`, `color` and `colormodel`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "oneOf": [
            {
              "description": "Same as `text`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "source": {
          "oneOf": [
            {
              "description": "Specifies the data URI of the image to be visualized. The URI consists of \"data:image/[<media subtype>][;base64],<data>\"",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets the text elements associated with each z value.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Set the image's x position. The left edge of the image (or the right edge if the x axis is reversed or dx is negative) will be found at xmin=x0-dx/2",
          "default": 0
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Set the image's y position. The top edge of the image (or the bottom edge if the y axis is NOT reversed or if dy is negative) will be found at ymin=y0-dy/2. By default when an image trace is included, the y axis will be reversed so that the image is right-side-up, but you can disable this by setting yaxis.autorange=true or by providing an explicit y axis range.",
          "default": 0
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmax": {
          "oneOf": [
            {
              "description": "Array defining the higher bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [255, 255, 255]. For the `rgba` colormodel, it is [255, 255, 255, 1]. For the `rgba256` colormodel, it is [255, 255, 255, 255]. For the `hsl` colormodel, it is [360, 100, 100]. For the `hsla` colormodel, it is [360, 100, 100, 1].",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "minItems": 4,
              "maxItems": 4
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zmin": {
          "oneOf": [
            {
              "description": "Array defining the lower bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [0, 0, 0]. For the `rgba` colormodel, it is [0, 0, 0, 0]. For the `rgba256` colormodel, it is [0, 0, 0, 0]. For the `hsl` colormodel, it is [0, 0, 0]. For the `hsla` colormodel, it is [0, 0, 0, 0].",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "minItems": 4,
              "maxItems": 4
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsmooth": {
          "oneOf": [
            {
              "description": "Picks a smoothing algorithm used to smooth `z` data. This only applies for image traces that use the `source` attribute.",
              "enum": [
                "fast",
                false
              ],
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "indicator": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "indicator"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "align": {
          "oneOf": [
            {
              "description": "Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered",
              "enum": [
                "left",
                "center",
                "right"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "delta": {
          "type": "object",
          "properties": {
            "position": {
              "oneOf": [
                {
                  "description": "Sets the position of delta with respect to the number.",
                  "enum": [
                    "top",
                    "bottom",
                    "left",
                    "right"
                  ],
                  "default": "bottom"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "prefix": {
              "oneOf": [
                {
                  "description": "Sets a prefix appearing before the delta.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reference": {
              "oneOf": [
                {
                  "description": "Sets the reference value to compute the delta. By default, it is set to the current value.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "relative": {
              "oneOf": [
                {
                  "description": "Show relative change",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "suffix": {
              "oneOf": [
                {
                  "description": "Sets a suffix appearing next to the delta.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueformat": {
              "oneOf": [
                {
                  "description": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this indicator trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this indicator trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this indicator trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this indicator trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "gauge": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the border enclosing the gauge.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "description": "Set the shape of the gauge",
                  "enum": [
                    "angular",
                    "bullet"
                  ],
                  "default": "angular"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "oneOf": [
            {
              "description": "Determines how the value is displayed on the graph. `number` displays the value numerically in text. `delta` displays the difference to a reference value in text. Finally, `gauge` displays the value graphically on an axis.",
              "type": "string",
              "pattern": "^(number|delta|gauge)(\\+(number|delta|gauge))*$",
              "default": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "number": {
          "type": "object",
          "properties": {
            "prefix": {
              "oneOf": [
                {
                  "description": "Sets a prefix appearing before the number.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "suffix": {
              "oneOf": [
                {
                  "description": "Sets a suffix appearing next to the number.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueformat": {
              "oneOf": [
                {
                  "description": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "title": {
          "type": "object",
          "properties": {
            "align": {
              "oneOf": [
                {
                  "description": "Sets the horizontal alignment of the title. It defaults to `center` except for bullet charts for which it defaults to right.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of this indicator.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "value": {
          "oneOf": [
            {
              "description": "Sets the number to be displayed.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "isosurface": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "isosurface"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "contour": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "show": {
              "oneOf": [
                {
                  "description": "Sets whether or not dynamic contours are shown on hover",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width of the contour lines.",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "flatshading": {
          "oneOf": [
            {
              "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "isomax": {
          "oneOf": [
            {
              "description": "Sets the maximum boundary for iso-surface plot.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "isomin": {
          "oneOf": [
            {
              "description": "Sets the minimum boundary for iso-surface plot.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lighting": {
          "type": "object",
          "properties": {
            "ambient": {
              "oneOf": [
                {
                  "description": "Ambient light increases overall color visibility but can wash out the image.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "diffuse": {
              "oneOf": [
                {
                  "description": "Represents the extent that incident rays are reflected in a range of angles.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "facenormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fresnel": {
              "oneOf": [
                {
                  "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 5,
                  "default": 0.2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "roughness": {
              "oneOf": [
                {
                  "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "specular": {
              "oneOf": [
                {
                  "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 2,
                  "default": 0.05
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "vertexnormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1e-12
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lightposition": {
          "type": "object",
          "properties": {
            "x": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the X coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Y coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "z": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Z coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scene": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
              "type": "string",
              "pattern": "^scene([2-9]|[1-9][0-9]+)?$",
              "default": "scene"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spaceframe": {
          "type": "object",
          "properties": {
            "fill": {
              "oneOf": [
                {
                  "description": "Sets the fill ratio of the `spaceframe` elements. The default fill value is 0.15 meaning that only 15% of the area of every faces of tetras would be shaded. Applying a greater `fill` ratio would allow the creation of stronger elements or could be sued to have entirely closed areas (in case of using 1).",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.15
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "show": {
              "oneOf": [
                {
                  "description": "Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "surface": {
          "type": "object",
          "properties": {
            "count": {
              "oneOf": [
                {
                  "description": "Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fill": {
              "oneOf": [
                {
                  "description": "Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "pattern": {
              "description": "Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "odd",
                    "even"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(A|B|C|D|E)(\\+(A|B|C|D|E))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "all"
            },
            "show": {
              "oneOf": [
                {
                  "description": "Hides/displays surfaces between minimum and maximum iso-values.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "value": {
          "oneOf": [
            {
              "description": "Sets the 4th dimension (value) of the vertices.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuehoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `value`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `value`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the X coordinates of the vertices on X axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the Y coordinates of the vertices on Y axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the Z coordinates of the vertices on Z axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "mesh3d": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "mesh3d"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alphahull": {
          "oneOf": [
            {
              "description": "Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.",
              "type": "number",
              "default": -1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `intensity`. Has no effect when `cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "contour": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "show": {
              "oneOf": [
                {
                  "description": "Sets whether or not dynamic contours are shown on hover",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width of the contour lines.",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "delaunayaxis": {
          "oneOf": [
            {
              "description": "Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.",
              "enum": [
                "x",
                "y",
                "z"
              ],
              "default": "z"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "facecolor": {
          "oneOf": [
            {
              "description": "Sets the color of each face Overrides *color* and *vertexcolor*.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "facecolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `facecolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "flatshading": {
          "oneOf": [
            {
              "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "i": {
          "oneOf": [
            {
              "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "intensity": {
          "oneOf": [
            {
              "description": "Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "intensitymode": {
          "oneOf": [
            {
              "description": "Determines the source of `intensity` values.",
              "enum": [
                "vertex",
                "cell"
              ],
              "default": "vertex"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "intensitysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `intensity`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "isrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `i`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "j": {
          "oneOf": [
            {
              "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "jsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `j`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "k": {
          "oneOf": [
            {
              "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ksrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `k`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lighting": {
          "type": "object",
          "properties": {
            "ambient": {
              "oneOf": [
                {
                  "description": "Ambient light increases overall color visibility but can wash out the image.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "diffuse": {
              "oneOf": [
                {
                  "description": "Represents the extent that incident rays are reflected in a range of angles.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "facenormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1e-06
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fresnel": {
              "oneOf": [
                {
                  "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 5,
                  "default": 0.2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "roughness": {
              "oneOf": [
                {
                  "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "specular": {
              "oneOf": [
                {
                  "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 2,
                  "default": 0.05
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "vertexnormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1e-12
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lightposition": {
          "type": "object",
          "properties": {
            "x": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the X coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Y coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "z": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Z coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scene": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
              "type": "string",
              "pattern": "^scene([2-9]|[1-9][0-9]+)?$",
              "default": "scene"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "vertexcolor": {
          "oneOf": [
            {
              "description": "Sets the color of each vertex Overrides *color*. While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "vertexcolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `vertexcolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `z` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "ohlc": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "ohlc"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "close": {
          "oneOf": [
            {
              "description": "Sets the close values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "closesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `close`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "high": {
          "oneOf": [
            {
              "description": "Sets the high values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "highsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `high`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "split": {
              "oneOf": [
                {
                  "description": "Show hover information (open, close, high, low) in separate labels.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*). Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "[object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "low": {
          "oneOf": [
            {
              "description": "Sets the low values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lowsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `low`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "open": {
          "oneOf": [
            {
              "description": "Sets the open values.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opensrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `open`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickwidth": {
          "oneOf": [
            {
              "description": "Sets the width of the open/close tick marks relative to the *x* minimal interval.",
              "type": "number",
              "minimum": 0,
              "maximum": 0.5,
              "default": 0.3
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates. If absent, linear coordinate will be generated.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "parcats": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "parcats"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrangement": {
          "oneOf": [
            {
              "description": "Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.",
              "enum": [
                "perpendicular",
                "freeform",
                "fixed"
              ],
              "default": "perpendicular"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bundlecolors": {
          "oneOf": [
            {
              "description": "Sort paths so that like colors are bundled together within each category.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "counts": {
          "description": "The number of observations represented by each state. Defaults to 1 so that each state represents one observation",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "default": 1
              }
            }
          ]
        },
        "countssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `counts`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this parcats trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this parcats trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this parcats trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this parcats trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all",
                "none",
                "skip"
              ]
            },
            {
              "type": "string",
              "pattern": "^(count|probability)(\\+(count|probability))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "all"
        },
        "hoveron": {
          "oneOf": [
            {
              "description": "Sets the hover interaction mode for the parcats diagram. If `category`, hover interaction take place per category. If `color`, hover interactions take place per color per category. If `dimension`, hover interactions take place across all categories per dimension.",
              "enum": [
                "category",
                "color",
                "dimension"
              ],
              "default": "category"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "oneOf": [
            {
              "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  This value here applies when hovering over dimensions. Note that `*categorycount`, *colorcount* and *bandcolorcount* are only available when `hoveron` contains the *color* flagFinally, the template string has access to variables `count`, `probability`, `category`, `categorycount`, `colorcount` and `bandcolorcount`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "hovertemplate": {
              "oneOf": [
                {
                  "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  This value here applies when hovering over lines.Finally, the template string has access to variables `count` and `probability`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "description": "Sets the shape of the paths. If `linear`, paths are composed of straight lines. If `hspline`, paths are composed of horizontal curved splines",
                  "enum": [
                    "linear",
                    "hspline"
                  ],
                  "default": "linear"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sortpaths": {
          "oneOf": [
            {
              "description": "Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.",
              "enum": [
                "forward",
                "backward"
              ],
              "default": "forward"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "tickfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "parcoords": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "parcoords"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this parcoords trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this parcoords trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this parcoords trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this parcoords trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelangle": {
          "oneOf": [
            {
              "description": "Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with *labelangle* may be positioned better inside margins when `labelposition` is set to *bottom*.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "labelside": {
          "oneOf": [
            {
              "description": "Specifies the location of the `label`. *top* positions labels above, next to the title *bottom* positions labels below the graph Tilted labels with *labelangle* may be positioned better inside margins when `labelposition` is set to *bottom*.",
              "enum": [
                "top",
                "bottom"
              ],
              "default": "top"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "rangefont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "tickfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "pie": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "pie"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "automargin": {
          "oneOf": [
            {
              "description": "Determines whether outside text labels can push the margins.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "direction": {
          "oneOf": [
            {
              "description": "Specifies the direction at which succeeding sectors follow one another.",
              "enum": [
                "clockwise",
                "counterclockwise"
              ],
              "default": "counterclockwise"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dlabel": {
          "oneOf": [
            {
              "description": "Sets the label step. See `label0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this pie trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this pie trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this pie trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this pie trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hole": {
          "oneOf": [
            {
              "description": "Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(label|text|value|percent|name)(\\+(label|text|value|percent|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(label|text|value|percent|name)(\\+(label|text|value|percent|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "insidetextorientation": {
          "oneOf": [
            {
              "description": "Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.",
              "enum": [
                "horizontal",
                "radial",
                "tangential",
                "auto"
              ],
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "label0": {
          "oneOf": [
            {
              "description": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.",
              "type": "number",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labels": {
          "oneOf": [
            {
              "description": "Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `labels`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "colors": {
              "oneOf": [
                {
                  "description": "Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `colors`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outsidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "pull": {
          "description": "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0
              }
            }
          ]
        },
        "pullsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `pull`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "rotation": {
          "oneOf": [
            {
              "description": "Instead of the first slice starting at 12 o'clock, rotate to some other angle.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scalegroup": {
          "oneOf": [
            {
              "description": "If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sort": {
          "oneOf": [
            {
              "description": "Determines whether or not the sectors are reordered from largest to smallest.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textinfo": {
          "description": "Determines which trace information appear on the graph.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(label|text|value|percent)(\\+(label|text|value|percent))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textposition": {
          "description": "Specifies the location of the `textinfo`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "inside",
                "outside",
                "auto",
                "none"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "inside",
                  "outside",
                  "auto",
                  "none"
                ],
                "default": "auto"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "title": {
          "type": "object",
          "properties": {
            "position": {
              "oneOf": [
                {
                  "description": "Specifies the location of the `title`.",
                  "enum": [
                    "top left",
                    "top center",
                    "top right",
                    "middle center",
                    "bottom left",
                    "bottom center",
                    "bottom right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the chart. If it is empty, no title is displayed.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "values": {
          "oneOf": [
            {
              "description": "Sets the values of the sectors. If omitted, we count occurrences of each label.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuessrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `values`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "sankey": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "sankey"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrangement": {
          "oneOf": [
            {
              "description": "If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.",
              "enum": [
                "snap",
                "perpendicular",
                "freeform",
                "fixed"
              ],
              "default": "snap"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this sankey trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this sankey trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this sankey trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this sankey trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired. Note that this attribute is superseded by `node.hoverinfo` and `node.hoverinfo` for nodes and links respectively.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all",
                "none",
                "skip"
              ]
            },
            {
              "type": "string",
              "pattern": "^()(\\+())*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "all"
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "link": {
          "type": "object",
          "properties": {
            "arrowlen": {
              "oneOf": [
                {
                  "description": "Sets the length (in px) of the links arrow, if 0 no arrow will be drawn.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "customdata": {
              "oneOf": [
                {
                  "description": "Assigns extra data to each link.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "customdatasrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "hovercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "hovercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `hovercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "hoverinfo": {
              "oneOf": [
                {
                  "description": "Determines which trace information appear when hovering links. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "hovertemplate": {
              "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Variables `source` and `target` are node objects.Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": ""
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": ""
                  }
                }
              ]
            },
            "hovertemplatesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "label": {
              "oneOf": [
                {
                  "description": "The shown name of the link.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `label`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "source": {
              "oneOf": [
                {
                  "description": "An integer number `[0..nodes.length - 1]` that represents the source node.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sourcesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `source`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "target": {
              "oneOf": [
                {
                  "description": "An integer number `[0..nodes.length - 1]` that represents the target node.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "targetsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `target`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "A numeric value representing the flow volume value.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valuesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `value`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "node": {
          "type": "object",
          "properties": {
            "align": {
              "oneOf": [
                {
                  "description": "Sets the alignment method used to position the nodes along the horizontal axis.",
                  "enum": [
                    "justify",
                    "left",
                    "right",
                    "center"
                  ],
                  "default": "justify"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "customdata": {
              "oneOf": [
                {
                  "description": "Assigns extra data to each node.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "customdatasrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "groups": {
              "type": "object",
              "properties": {
                "items": {
                  "oneOf": [
                    {
                      "type": "number"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                }
              }
            },
            "hoverinfo": {
              "oneOf": [
                {
                  "description": "Determines which trace information appear when hovering nodes. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "hovertemplate": {
              "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Variables `sourceLinks` and `targetLinks` are arrays of link objects.Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": ""
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": ""
                  }
                }
              ]
            },
            "hovertemplatesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "label": {
              "oneOf": [
                {
                  "description": "The shown name of the node.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `label`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "pad": {
              "oneOf": [
                {
                  "description": "Sets the padding (in px) between the `nodes`.",
                  "type": "number",
                  "minimum": 0,
                  "default": 20
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the `nodes`.",
                  "type": "number",
                  "minimum": 1,
                  "default": 20
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "The normalized horizontal position of the node.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `x`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "The normalized vertical position of the node.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `y`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the Sankey diagram.",
              "enum": [
                "v",
                "h"
              ],
              "default": "h"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "oneOf": [
                {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "valueformat": {
          "oneOf": [
            {
              "description": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
              "type": "string",
              "default": ".3s"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuesuffix": {
          "oneOf": [
            {
              "description": "Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scatter": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scatter"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignmentgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cliponaxis": {
          "oneOf": [
            {
              "description": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step. See `x0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step. See `y0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "error_x": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "copy_ystyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "error_y": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
              "enum": [
                "none",
                "tozeroy",
                "tozerox",
                "tonexty",
                "tonextx",
                "toself",
                "tonext"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillgradient": {
          "type": "object",
          "properties": {
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "start": {
              "oneOf": [
                {
                  "description": "Sets the gradient start value. It is given as the absolute position on the axis determined by the orientiation. E.g., if orientation is *horizontal*, the gradient will be horizontal and start from the x-position given by start. If omitted, the gradient starts at the lowest value of the trace along the respective axis. Ignored if orientation is *radial*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "stop": {
              "oneOf": [
                {
                  "description": "Sets the gradient end value. It is given as the absolute position on the axis determined by the orientiation. E.g., if orientation is *horizontal*, the gradient will be horizontal and end at the x-position given by end. If omitted, the gradient ends at the highest value of the trace along the respective axis. Ignored if orientation is *radial*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Sets the type/orientation of the color gradient for the fill. Defaults to *none*.",
                  "enum": [
                    "radial",
                    "horizontal",
                    "vertical",
                    "none"
                  ],
                  "default": "none"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "fillpattern": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "fgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `fgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fgopacity": {
              "oneOf": [
                {
                  "description": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fillmode": {
              "oneOf": [
                {
                  "description": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.",
                  "enum": [
                    "replace",
                    "overlay"
                  ],
                  "default": "replace"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "description": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "",
                    "/",
                    "\\",
                    "x",
                    "-",
                    "|",
                    "+",
                    "."
                  ],
                  "default": ""
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "",
                      "/",
                      "\\",
                      "x",
                      "-",
                      "|",
                      "+",
                      "."
                    ],
                    "default": ""
                  }
                }
              ]
            },
            "shapesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shape`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 8
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 8
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "solidity": {
              "description": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.3
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 0.3
                  }
                }
              ]
            },
            "soliditysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `solidity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "groupnorm": {
          "oneOf": [
            {
              "description": "Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With *fraction*, the value of each trace at each location is divided by the sum of all trace values at that location. *percent* is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.",
              "enum": [
                "",
                "fraction",
                "percent"
              ],
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoveron": {
          "oneOf": [
            {
              "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
              "type": "string",
              "pattern": "^(points|fills)(\\+(points|fills))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "backoff": {
              "description": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With *auto* the lines would trim before markers if `marker.angleref` is set to *previous*.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": "auto"
                  }
                }
              ]
            },
            "backoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `backoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                  "enum": [
                    "linear",
                    "spline",
                    "hv",
                    "vh",
                    "hvh",
                    "vhv"
                  ],
                  "default": "linear"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "simplify": {
              "oneOf": [
                {
                  "description": "Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "angleref": {
              "oneOf": [
                {
                  "description": "Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen.",
                  "enum": [
                    "previous",
                    "up"
                  ],
                  "default": "up"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "maxdisplayed": {
              "oneOf": [
                {
                  "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "standoff": {
              "description": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 0
                  }
                }
              ]
            },
            "standoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `standoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offsetgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Only relevant in the following cases: 1. when `scattermode` is set to *group*. 2. when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the stacking direction. With *v* (*h*), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.",
              "enum": [
                "v",
                "h"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stackgaps": {
          "oneOf": [
            {
              "description": "Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With *infer zero* we insert a zero at these locations. With *interpolate* we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.",
              "enum": [
                "infer zero",
                "interpolate"
              ],
              "default": "infer zero"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stackgroup": {
          "oneOf": [
            {
              "description": "Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is *h*). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using *tonexty* (*tonextx*) if `orientation` is *h* (*v*) and sets the default `mode` to *lines* irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "middle center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. ",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
          "default": 0
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
          "default": 0
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "yperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scatter3d": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scatter3d"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "error_x": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "copy_zstyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "error_y": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "copy_zstyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "error_z": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of the lines.",
                  "enum": [
                    "dash",
                    "dashdot",
                    "dot",
                    "longdash",
                    "longdashdot",
                    "solid"
                  ],
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "oneOf": [
                {
                  "description": "Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set *marker.color* to an rgba color and use its alpha channel.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 8
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 8
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "circle",
                    "circle-open",
                    "cross",
                    "diamond",
                    "diamond-open",
                    "square",
                    "square-open",
                    "x"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "circle",
                      "circle-open",
                      "cross",
                      "diamond",
                      "diamond-open",
                      "square",
                      "square-open",
                      "x"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "lines+markers"
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scene": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
              "type": "string",
              "pattern": "^scene([2-9]|[1-9][0-9]+)?$",
              "default": "scene"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "surfaceaxis": {
          "oneOf": [
            {
              "description": "If *-1*, the scatter points are not fill with a surface If *0*, *1*, *2*, the scatter points are filled with a Delaunay surface about the x, y, z respectively.",
              "enum": [
                -1,
                0,
                1,
                2
              ],
              "default": -1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "surfacecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "top center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "top center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. ",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the z coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `z` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scattercarpet": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scattercarpet"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "a": {
          "oneOf": [
            {
              "description": "Sets the a-axis coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "asrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `a`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "b": {
          "oneOf": [
            {
              "description": "Sets the b-axis coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `b`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "carpet": {
          "oneOf": [
            {
              "description": "An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
              "enum": [
                "none",
                "toself",
                "tonext"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(a|b|text|name)(\\+(a|b|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(a|b|text|name)(\\+(a|b|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoveron": {
          "oneOf": [
            {
              "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
              "type": "string",
              "pattern": "^(points|fills)(\\+(points|fills))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "backoff": {
              "description": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With *auto* the lines would trim before markers if `marker.angleref` is set to *previous*.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": "auto"
                  }
                }
              ]
            },
            "backoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `backoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                  "enum": [
                    "linear",
                    "spline"
                  ],
                  "default": "linear"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "angleref": {
              "oneOf": [
                {
                  "description": "Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen.",
                  "enum": [
                    "previous",
                    "up"
                  ],
                  "default": "up"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "maxdisplayed": {
              "oneOf": [
                {
                  "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "standoff": {
              "description": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 0
                  }
                }
              ]
            },
            "standoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `standoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "markers"
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "middle center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `a`, `b` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scattergeo": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scattergeo"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "featureidkey": {
          "oneOf": [
            {
              "description": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example *properties.name*.",
              "type": "string",
              "default": "id"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.",
              "enum": [
                "none",
                "toself"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "geo": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.",
              "type": "string",
              "pattern": "^geo([2-9]|[1-9][0-9]+)?$",
              "default": "geo"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "geojson": {
          "description": "Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when `locations` is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*."
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(lon|lat|location|text|name)(\\+(lon|lat|location|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(lon|lat|location|text|name)(\\+(lon|lat|location|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lat": {
          "oneOf": [
            {
              "description": "Sets the latitude coordinates (in degrees North).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "latsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lat`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "locationmode": {
          "oneOf": [
            {
              "description": "Determines the set of locations used to match entries in `locations` to regions on the map. Values *ISO-3*, *USA-states*, *country names* correspond to features on the base map and value *geojson-id* corresponds to features from a custom GeoJSON linked to the `geojson` attribute.",
              "enum": [
                "ISO-3",
                "USA-states",
                "country names",
                "geojson-id"
              ],
              "default": "ISO-3"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locations": {
          "oneOf": [
            {
              "description": "Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "locationssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `locations`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lon": {
          "oneOf": [
            {
              "description": "Sets the longitude coordinates (in degrees East).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lonsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lon`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "angleref": {
              "oneOf": [
                {
                  "description": "Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen. With *north*, angle 0 points north based on the current map projection.",
                  "enum": [
                    "previous",
                    "up",
                    "north"
                  ],
                  "default": "up"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "standoff": {
              "description": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 0
                  }
                }
              ]
            },
            "standoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `standoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "markers"
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "middle center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon`, `location` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scattergl": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scattergl"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step. See `x0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step. See `y0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "error_x": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "copy_ystyle": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "error_y": {
          "type": "object",
          "properties": {
            "array": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminus": {
              "oneOf": [
                {
                  "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arrayminussrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "arraysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `array`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symmetric": {
              "oneOf": [
                {
                  "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness (in px) of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "traceref": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tracerefminus": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "type": {
              "oneOf": [
                {
                  "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
                  "enum": [
                    "percent",
                    "constant",
                    "sqrt",
                    "data"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valueminus": {
              "oneOf": [
                {
                  "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not this set of error bars is visible.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
              "enum": [
                "none",
                "tozeroy",
                "tozerox",
                "tonexty",
                "tonextx",
                "toself",
                "tonext"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the style of the lines.",
                  "enum": [
                    "dash",
                    "dashdot",
                    "dot",
                    "longdash",
                    "longdashdot",
                    "solid"
                  ],
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "description": "Determines the line shape. The values correspond to step-wise line shapes.",
                  "enum": [
                    "linear",
                    "hv",
                    "vh",
                    "hvh",
                    "vhv"
                  ],
                  "default": "linear"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "bold"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "bold"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "middle center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. ",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
          "default": 0
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
          "default": 0
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "yperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scattermap": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scattermap"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "below": {
          "oneOf": [
            {
              "description": "Determines if this scattermap trace's layers are to be inserted before the layer with the specified ID. By default, scattermap layers are inserted above all the base layers. To place the scattermap layers above every other layer, set `below` to *''*.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cluster": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "enabled": {
              "oneOf": [
                {
                  "description": "Determines whether clustering is enabled or disabled.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "maxzoom": {
              "oneOf": [
                {
                  "description": "Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 24,
                  "default": 24
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the size for each cluster step.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 20
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 20
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "step": {
              "description": "Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for `size` and / or `color`. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -1,
                  "default": -1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -1,
                    "default": -1
                  }
                }
              ]
            },
            "stepsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `step`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.",
              "enum": [
                "none",
                "toself"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(lon|lat|text|name)(\\+(lon|lat|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(lon|lat|text|name)(\\+(lon|lat|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lat": {
          "oneOf": [
            {
              "description": "Sets the latitude coordinates (in degrees North).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "latsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lat`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lon": {
          "oneOf": [
            {
              "description": "Sets the longitude coordinates (in degrees East).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lonsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lon`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "allowoverlap": {
              "oneOf": [
                {
                  "description": "Flag to draw all symbols, even if they overlap.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "angle": {
              "description": "Sets the marker orientation from true North, in degrees clockwise. When using the *auto* default, no rotation would be applied in perspective views which is different from using a zero angle.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "default": "auto"
                  }
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol. Full list: https://www.map.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for *circle* symbols.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "markers"
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's data coordinates and a map subplot. If *map* (the default value), the data refer to `layout.map`. If *map2*, the data refer to `layout.map2`, and so on.",
              "type": "string",
              "pattern": "^map([2-9]|[1-9][0-9]+)?$",
              "default": "map"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "default": "Open Sans Regular, Arial Unicode MS Regular",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "oneOf": [
            {
              "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scattermapbox": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scattermapbox"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "below": {
          "oneOf": [
            {
              "description": "Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to *''*.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cluster": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "enabled": {
              "oneOf": [
                {
                  "description": "Determines whether clustering is enabled or disabled.",
                  "type": "boolean"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "maxzoom": {
              "oneOf": [
                {
                  "description": "Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 24,
                  "default": 24
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the size for each cluster step.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 20
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 20
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "step": {
              "description": "Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for `size` and / or `color`. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -1,
                  "default": -1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -1,
                    "default": -1
                  }
                }
              ]
            },
            "stepsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `step`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.",
              "enum": [
                "none",
                "toself"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(lon|lat|text|name)(\\+(lon|lat|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(lon|lat|text|name)(\\+(lon|lat|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lat": {
          "oneOf": [
            {
              "description": "Sets the latitude coordinates (in degrees North).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "latsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lat`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lon": {
          "oneOf": [
            {
              "description": "Sets the longitude coordinates (in degrees East).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lonsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lon`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "allowoverlap": {
              "oneOf": [
                {
                  "description": "Flag to draw all symbols, even if they overlap.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "angle": {
              "description": "Sets the marker orientation from true North, in degrees clockwise. When using the *auto* default, no rotation would be applied in perspective views which is different from using a zero angle.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "default": "auto"
                  }
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for *circle* symbols.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "markers"
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.",
              "type": "string",
              "pattern": "^mapbox([2-9]|[1-9][0-9]+)?$",
              "default": "mapbox"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "default": "Open Sans Regular, Arial Unicode MS Regular",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "oneOf": [
            {
              "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scatterpolar": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scatterpolar"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cliponaxis": {
          "oneOf": [
            {
              "description": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dr": {
          "oneOf": [
            {
              "description": "Sets the r coordinate step.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dtheta": {
          "oneOf": [
            {
              "description": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterpolar has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
              "enum": [
                "none",
                "toself",
                "tonext"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(r|theta|text|name)(\\+(r|theta|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(r|theta|text|name)(\\+(r|theta|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoveron": {
          "oneOf": [
            {
              "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
              "type": "string",
              "pattern": "^(points|fills)(\\+(points|fills))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "backoff": {
              "description": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With *auto* the lines would trim before markers if `marker.angleref` is set to *previous*.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": "auto"
                  }
                }
              ]
            },
            "backoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `backoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                  "enum": [
                    "linear",
                    "spline"
                  ],
                  "default": "linear"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "angleref": {
              "oneOf": [
                {
                  "description": "Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen.",
                  "enum": [
                    "previous",
                    "up"
                  ],
                  "default": "up"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "maxdisplayed": {
              "oneOf": [
                {
                  "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "standoff": {
              "description": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 0
                  }
                }
              ]
            },
            "standoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `standoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "r": {
          "oneOf": [
            {
              "description": "Sets the radial coordinates",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "r0": {
          "description": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.",
          "default": 0
        },
        "rsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `r`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.",
              "type": "string",
              "pattern": "^polar([2-9]|[1-9][0-9]+)?$",
              "default": "polar"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "middle center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `r`, `theta` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "theta": {
          "oneOf": [
            {
              "description": "Sets the angular coordinates",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "theta0": {
          "description": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.",
          "default": 0
        },
        "thetasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `theta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "thetaunit": {
          "oneOf": [
            {
              "description": "Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.",
              "enum": [
                "radians",
                "degrees",
                "gradians"
              ],
              "default": "degrees"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scatterpolargl": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scatterpolargl"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dr": {
          "oneOf": [
            {
              "description": "Sets the r coordinate step.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dtheta": {
          "oneOf": [
            {
              "description": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
              "enum": [
                "none",
                "tozeroy",
                "tozerox",
                "tonexty",
                "tonextx",
                "toself",
                "tonext"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(r|theta|text|name)(\\+(r|theta|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(r|theta|text|name)(\\+(r|theta|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the style of the lines.",
                  "enum": [
                    "dash",
                    "dashdot",
                    "dot",
                    "longdash",
                    "longdashdot",
                    "solid"
                  ],
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "r": {
          "oneOf": [
            {
              "description": "Sets the radial coordinates",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "r0": {
          "description": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.",
          "default": 0
        },
        "rsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `r`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.",
              "type": "string",
              "pattern": "^polar([2-9]|[1-9][0-9]+)?$",
              "default": "polar"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "bold"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "bold"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "middle center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `r`, `theta` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "theta": {
          "oneOf": [
            {
              "description": "Sets the angular coordinates",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "theta0": {
          "description": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.",
          "default": 0
        },
        "thetasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `theta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "thetaunit": {
          "oneOf": [
            {
              "description": "Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.",
              "enum": [
                "radians",
                "degrees",
                "gradians"
              ],
              "default": "degrees"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scattersmith": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scattersmith"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cliponaxis": {
          "oneOf": [
            {
              "description": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scattersmith has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
              "enum": [
                "none",
                "toself",
                "tonext"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(real|imag|text|name)(\\+(real|imag|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(real|imag|text|name)(\\+(real|imag|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoveron": {
          "oneOf": [
            {
              "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
              "type": "string",
              "pattern": "^(points|fills)(\\+(points|fills))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "imag": {
          "oneOf": [
            {
              "description": "Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "imagsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `imag`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "backoff": {
              "description": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With *auto* the lines would trim before markers if `marker.angleref` is set to *previous*.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": "auto"
                  }
                }
              ]
            },
            "backoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `backoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                  "enum": [
                    "linear",
                    "spline"
                  ],
                  "default": "linear"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "angleref": {
              "oneOf": [
                {
                  "description": "Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen.",
                  "enum": [
                    "previous",
                    "up"
                  ],
                  "default": "up"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "maxdisplayed": {
              "oneOf": [
                {
                  "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "standoff": {
              "description": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 0
                  }
                }
              ]
            },
            "standoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `standoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "real": {
          "oneOf": [
            {
              "description": "Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "realsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `real`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's data coordinates and a smith subplot. If *smith* (the default value), the data refer to `layout.smith`. If *smith2*, the data refer to `layout.smith2`, and so on.",
              "type": "string",
              "pattern": "^smith([2-9]|[1-9][0-9]+)?$",
              "default": "smith"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "middle center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `real`, `imag` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "scatterternary": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "scatterternary"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "a": {
          "oneOf": [
            {
              "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "asrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `a`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "b": {
          "oneOf": [
            {
              "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `b`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "c": {
          "oneOf": [
            {
              "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cliponaxis": {
          "oneOf": [
            {
              "description": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "csrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `c`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fill": {
          "oneOf": [
            {
              "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
              "enum": [
                "none",
                "toself",
                "tonext"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(a|b|c|text|name)(\\+(a|b|c|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(a|b|c|text|name)(\\+(a|b|c|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoveron": {
          "oneOf": [
            {
              "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
              "type": "string",
              "pattern": "^(points|fills)(\\+(points|fills))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "backoff": {
              "description": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With *auto* the lines would trim before markers if `marker.angleref` is set to *previous*.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": "auto"
                  }
                }
              ]
            },
            "backoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `backoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dash": {
              "oneOf": [
                {
                  "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
                  "type": "string",
                  "default": "solid"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "oneOf": [
                {
                  "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
                  "enum": [
                    "linear",
                    "spline"
                  ],
                  "default": "linear"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "smoothing": {
              "oneOf": [
                {
                  "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1.3,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the line width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "angleref": {
              "oneOf": [
                {
                  "description": "Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen.",
                  "enum": [
                    "previous",
                    "up"
                  ],
                  "default": "up"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "maxdisplayed": {
              "oneOf": [
                {
                  "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "standoff": {
              "description": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 0
                  }
                }
              ]
            },
            "standoffsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `standoff`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "markers"
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "subplot": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's data coordinates and a ternary subplot. If *ternary* (the default value), the data refer to `layout.ternary`. If *ternary2*, the data refer to `layout.ternary2`, and so on.",
              "type": "string",
              "pattern": "^ternary([2-9]|[1-9][0-9]+)?$",
              "default": "ternary"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sum": {
          "oneOf": [
            {
              "description": "The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textposition": {
          "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "middle center"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "top left",
                  "top center",
                  "top right",
                  "middle left",
                  "middle center",
                  "middle right",
                  "bottom left",
                  "bottom center",
                  "bottom right"
                ],
                "default": "middle center"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `a`, `b`, `c` and `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "splom": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "splom"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "diagonal": {
          "type": "object",
          "properties": {
            "visible": {
              "oneOf": [
                {
                  "description": "Determines whether or not subplots on the diagonal are displayed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "description": "Sets the marker angle in respect to `angleref`.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": -180,
                    "maximum": 180,
                    "default": 0
                  }
                }
              ]
            },
            "anglesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "description": "Sets the marker opacity.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              ]
            },
            "opacitysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "description": "Sets the marker size (in px).",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 6
                  }
                }
              ]
            },
            "sizemin": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizemode": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
                  "enum": [
                    "diameter",
                    "area"
                  ],
                  "default": "diameter"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizeref": {
              "oneOf": [
                {
                  "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
                  "type": "number",
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      0,
                      "0",
                      "circle",
                      100,
                      "100",
                      "circle-open",
                      200,
                      "200",
                      "circle-dot",
                      300,
                      "300",
                      "circle-open-dot",
                      1,
                      "1",
                      "square",
                      101,
                      "101",
                      "square-open",
                      201,
                      "201",
                      "square-dot",
                      301,
                      "301",
                      "square-open-dot",
                      2,
                      "2",
                      "diamond",
                      102,
                      "102",
                      "diamond-open",
                      202,
                      "202",
                      "diamond-dot",
                      302,
                      "302",
                      "diamond-open-dot",
                      3,
                      "3",
                      "cross",
                      103,
                      "103",
                      "cross-open",
                      203,
                      "203",
                      "cross-dot",
                      303,
                      "303",
                      "cross-open-dot",
                      4,
                      "4",
                      "x",
                      104,
                      "104",
                      "x-open",
                      204,
                      "204",
                      "x-dot",
                      304,
                      "304",
                      "x-open-dot",
                      5,
                      "5",
                      "triangle-up",
                      105,
                      "105",
                      "triangle-up-open",
                      205,
                      "205",
                      "triangle-up-dot",
                      305,
                      "305",
                      "triangle-up-open-dot",
                      6,
                      "6",
                      "triangle-down",
                      106,
                      "106",
                      "triangle-down-open",
                      206,
                      "206",
                      "triangle-down-dot",
                      306,
                      "306",
                      "triangle-down-open-dot",
                      7,
                      "7",
                      "triangle-left",
                      107,
                      "107",
                      "triangle-left-open",
                      207,
                      "207",
                      "triangle-left-dot",
                      307,
                      "307",
                      "triangle-left-open-dot",
                      8,
                      "8",
                      "triangle-right",
                      108,
                      "108",
                      "triangle-right-open",
                      208,
                      "208",
                      "triangle-right-dot",
                      308,
                      "308",
                      "triangle-right-open-dot",
                      9,
                      "9",
                      "triangle-ne",
                      109,
                      "109",
                      "triangle-ne-open",
                      209,
                      "209",
                      "triangle-ne-dot",
                      309,
                      "309",
                      "triangle-ne-open-dot",
                      10,
                      "10",
                      "triangle-se",
                      110,
                      "110",
                      "triangle-se-open",
                      210,
                      "210",
                      "triangle-se-dot",
                      310,
                      "310",
                      "triangle-se-open-dot",
                      11,
                      "11",
                      "triangle-sw",
                      111,
                      "111",
                      "triangle-sw-open",
                      211,
                      "211",
                      "triangle-sw-dot",
                      311,
                      "311",
                      "triangle-sw-open-dot",
                      12,
                      "12",
                      "triangle-nw",
                      112,
                      "112",
                      "triangle-nw-open",
                      212,
                      "212",
                      "triangle-nw-dot",
                      312,
                      "312",
                      "triangle-nw-open-dot",
                      13,
                      "13",
                      "pentagon",
                      113,
                      "113",
                      "pentagon-open",
                      213,
                      "213",
                      "pentagon-dot",
                      313,
                      "313",
                      "pentagon-open-dot",
                      14,
                      "14",
                      "hexagon",
                      114,
                      "114",
                      "hexagon-open",
                      214,
                      "214",
                      "hexagon-dot",
                      314,
                      "314",
                      "hexagon-open-dot",
                      15,
                      "15",
                      "hexagon2",
                      115,
                      "115",
                      "hexagon2-open",
                      215,
                      "215",
                      "hexagon2-dot",
                      315,
                      "315",
                      "hexagon2-open-dot",
                      16,
                      "16",
                      "octagon",
                      116,
                      "116",
                      "octagon-open",
                      216,
                      "216",
                      "octagon-dot",
                      316,
                      "316",
                      "octagon-open-dot",
                      17,
                      "17",
                      "star",
                      117,
                      "117",
                      "star-open",
                      217,
                      "217",
                      "star-dot",
                      317,
                      "317",
                      "star-open-dot",
                      18,
                      "18",
                      "hexagram",
                      118,
                      "118",
                      "hexagram-open",
                      218,
                      "218",
                      "hexagram-dot",
                      318,
                      "318",
                      "hexagram-open-dot",
                      19,
                      "19",
                      "star-triangle-up",
                      119,
                      "119",
                      "star-triangle-up-open",
                      219,
                      "219",
                      "star-triangle-up-dot",
                      319,
                      "319",
                      "star-triangle-up-open-dot",
                      20,
                      "20",
                      "star-triangle-down",
                      120,
                      "120",
                      "star-triangle-down-open",
                      220,
                      "220",
                      "star-triangle-down-dot",
                      320,
                      "320",
                      "star-triangle-down-open-dot",
                      21,
                      "21",
                      "star-square",
                      121,
                      "121",
                      "star-square-open",
                      221,
                      "221",
                      "star-square-dot",
                      321,
                      "321",
                      "star-square-open-dot",
                      22,
                      "22",
                      "star-diamond",
                      122,
                      "122",
                      "star-diamond-open",
                      222,
                      "222",
                      "star-diamond-dot",
                      322,
                      "322",
                      "star-diamond-open-dot",
                      23,
                      "23",
                      "diamond-tall",
                      123,
                      "123",
                      "diamond-tall-open",
                      223,
                      "223",
                      "diamond-tall-dot",
                      323,
                      "323",
                      "diamond-tall-open-dot",
                      24,
                      "24",
                      "diamond-wide",
                      124,
                      "124",
                      "diamond-wide-open",
                      224,
                      "224",
                      "diamond-wide-dot",
                      324,
                      "324",
                      "diamond-wide-open-dot",
                      25,
                      "25",
                      "hourglass",
                      125,
                      "125",
                      "hourglass-open",
                      26,
                      "26",
                      "bowtie",
                      126,
                      "126",
                      "bowtie-open",
                      27,
                      "27",
                      "circle-cross",
                      127,
                      "127",
                      "circle-cross-open",
                      28,
                      "28",
                      "circle-x",
                      128,
                      "128",
                      "circle-x-open",
                      29,
                      "29",
                      "square-cross",
                      129,
                      "129",
                      "square-cross-open",
                      30,
                      "30",
                      "square-x",
                      130,
                      "130",
                      "square-x-open",
                      31,
                      "31",
                      "diamond-cross",
                      131,
                      "131",
                      "diamond-cross-open",
                      32,
                      "32",
                      "diamond-x",
                      132,
                      "132",
                      "diamond-x-open",
                      33,
                      "33",
                      "cross-thin",
                      133,
                      "133",
                      "cross-thin-open",
                      34,
                      "34",
                      "x-thin",
                      134,
                      "134",
                      "x-thin-open",
                      35,
                      "35",
                      "asterisk",
                      135,
                      "135",
                      "asterisk-open",
                      36,
                      "36",
                      "hash",
                      136,
                      "136",
                      "hash-open",
                      236,
                      "236",
                      "hash-dot",
                      336,
                      "336",
                      "hash-open-dot",
                      37,
                      "37",
                      "y-up",
                      137,
                      "137",
                      "y-up-open",
                      38,
                      "38",
                      "y-down",
                      138,
                      "138",
                      "y-down-open",
                      39,
                      "39",
                      "y-left",
                      139,
                      "139",
                      "y-left-open",
                      40,
                      "40",
                      "y-right",
                      140,
                      "140",
                      "y-right-open",
                      41,
                      "41",
                      "line-ew",
                      141,
                      "141",
                      "line-ew-open",
                      42,
                      "42",
                      "line-ns",
                      142,
                      "142",
                      "line-ns-open",
                      43,
                      "43",
                      "line-ne",
                      143,
                      "143",
                      "line-ne-open",
                      44,
                      "44",
                      "line-nw",
                      144,
                      "144",
                      "line-nw-open",
                      45,
                      "45",
                      "arrow-up",
                      145,
                      "145",
                      "arrow-up-open",
                      46,
                      "46",
                      "arrow-down",
                      146,
                      "146",
                      "arrow-down-open",
                      47,
                      "47",
                      "arrow-left",
                      147,
                      "147",
                      "arrow-left-open",
                      48,
                      "48",
                      "arrow-right",
                      148,
                      "148",
                      "arrow-right-open",
                      49,
                      "49",
                      "arrow-bar-up",
                      149,
                      "149",
                      "arrow-bar-up-open",
                      50,
                      "50",
                      "arrow-bar-down",
                      150,
                      "150",
                      "arrow-bar-down-open",
                      51,
                      "51",
                      "arrow-bar-left",
                      151,
                      "151",
                      "arrow-bar-left-open",
                      52,
                      "52",
                      "arrow-bar-right",
                      152,
                      "152",
                      "arrow-bar-right-open",
                      53,
                      "53",
                      "arrow",
                      153,
                      "153",
                      "arrow-open",
                      54,
                      "54",
                      "arrow-wide",
                      154,
                      "154",
                      "arrow-wide-open"
                    ],
                    "default": "circle"
                  }
                }
              ]
            },
            "symbolsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlowerhalf": {
          "oneOf": [
            {
              "description": "Determines whether or not subplots on the lower half from the diagonal are displayed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showupperhalf": {
          "oneOf": [
            {
              "description": "Determines whether or not subplots on the upper half from the diagonal are displayed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xaxes": {
          "type": "object",
          "properties": {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "pattern": "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxes": {
          "type": "object",
          "properties": {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "pattern": "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "streamtube": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "streamtube"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|u|v|w|norm|divergence|text|name)(\\+(x|y|z|u|v|w|norm|divergence|text|name))*$"
                }
              ],
              "default": "x+y+z+norm+text+name"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|u|v|w|norm|divergence|text|name)(\\+(x|y|z|u|v|w|norm|divergence|text|name))*$"
                  }
                ],
                "default": "x+y+z+norm+text+name"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `tubex`, `tubey`, `tubez`, `tubeu`, `tubev`, `tubew`, `norm` and `divergence`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "oneOf": [
            {
              "description": "Same as `text`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lighting": {
          "type": "object",
          "properties": {
            "ambient": {
              "oneOf": [
                {
                  "description": "Ambient light increases overall color visibility but can wash out the image.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "diffuse": {
              "oneOf": [
                {
                  "description": "Represents the extent that incident rays are reflected in a range of angles.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "facenormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1e-06
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fresnel": {
              "oneOf": [
                {
                  "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 5,
                  "default": 0.2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "roughness": {
              "oneOf": [
                {
                  "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "specular": {
              "oneOf": [
                {
                  "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 2,
                  "default": 0.05
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "vertexnormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1e-12
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lightposition": {
          "type": "object",
          "properties": {
            "x": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the X coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Y coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "z": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Z coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "maxdisplayed": {
          "oneOf": [
            {
              "description": "The maximum number of displayed segments in a streamtube.",
              "type": "integer",
              "minimum": 0,
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scene": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
              "type": "string",
              "pattern": "^scene([2-9]|[1-9][0-9]+)?$",
              "default": "scene"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sizeref": {
          "oneOf": [
            {
              "description": "The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "starts": {
          "type": "object",
          "properties": {
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x components of the starting position of the streamtubes",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `x`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y components of the starting position of the streamtubes",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `y`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "z": {
              "oneOf": [
                {
                  "description": "Sets the z components of the starting position of the streamtubes",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "zsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `z`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets a text element associated with this trace. If trace `hoverinfo` contains a *text* flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "u": {
          "oneOf": [
            {
              "description": "Sets the x components of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `u`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "usrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `u`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "v": {
          "oneOf": [
            {
              "description": "Sets the y components of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "vhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `v`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "vsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `v`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "w": {
          "oneOf": [
            {
              "description": "Sets the z components of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "whoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `w`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "wsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `w`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the z coordinates of the vector field.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "sunburst": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "sunburst"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "branchvalues": {
          "oneOf": [
            {
              "description": "Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.",
              "enum": [
                "remainder",
                "total"
              ],
              "default": "remainder"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "count": {
          "oneOf": [
            {
              "description": "Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.",
              "type": "string",
              "pattern": "^(branches|leaves)(\\+(branches|leaves))*$",
              "default": "leaves"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this sunburst trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this sunburst trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this sunburst trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this sunburst trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(label|text|value|name|current path|percent root|percent entry|percent parent)(\\+(label|text|value|name|current path|percent root|percent entry|percent parent))*$"
                }
              ],
              "default": "label+text+value+name"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(label|text|value|name|current path|percent root|percent entry|percent parent)(\\+(label|text|value|name|current path|percent root|percent entry|percent parent))*$"
                  }
                ],
                "default": "label+text+value+name"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "insidetextorientation": {
          "oneOf": [
            {
              "description": "Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.",
              "enum": [
                "horizontal",
                "radial",
                "tangential",
                "auto"
              ],
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labels": {
          "oneOf": [
            {
              "description": "Sets the labels of each of the sectors.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `labels`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "leaf": {
          "type": "object",
          "properties": {
            "opacity": {
              "oneOf": [
                {
                  "description": "Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "level": {
          "description": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`."
        },
        "marker": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colors": {
              "oneOf": [
                {
                  "description": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `colors`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "maxdepth": {
          "oneOf": [
            {
              "description": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.",
              "type": "integer",
              "default": -1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outsidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "parents": {
          "oneOf": [
            {
              "description": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "parentssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `parents`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "root": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "rotation": {
          "oneOf": [
            {
              "description": "Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sort": {
          "oneOf": [
            {
              "description": "Determines whether or not the sectors are reordered from largest to smallest.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0,0,0,0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0,0,0,0)"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textinfo": {
          "description": "Determines which trace information appear on the graph.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(label|text|value|current path|percent root|percent entry|percent parent)(\\+(label|text|value|current path|percent root|percent entry|percent parent))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "values": {
          "oneOf": [
            {
              "description": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuessrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `values`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "surface": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "surface"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when `cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connectgaps": {
          "oneOf": [
            {
              "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hidesurface": {
          "oneOf": [
            {
              "description": "Determines whether or not a surface is drawn. For example, set `hidesurface` to *false* `contours.x.show` to *true* and `contours.y.show` to *true* to draw a wire frame plot.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lighting": {
          "type": "object",
          "properties": {
            "ambient": {
              "oneOf": [
                {
                  "description": "Ambient light increases overall color visibility but can wash out the image.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "diffuse": {
              "oneOf": [
                {
                  "description": "Represents the extent that incident rays are reflected in a range of angles.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fresnel": {
              "oneOf": [
                {
                  "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 5,
                  "default": 0.2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "roughness": {
              "oneOf": [
                {
                  "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "specular": {
              "oneOf": [
                {
                  "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 2,
                  "default": 0.05
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lightposition": {
          "type": "object",
          "properties": {
            "x": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the X coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Y coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 10000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "z": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Z coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacityscale": {
          "description": "Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'."
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scene": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
              "type": "string",
              "pattern": "^scene([2-9]|[1-9][0-9]+)?$",
              "default": "scene"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "surfacecolor": {
          "oneOf": [
            {
              "description": "Sets the surface color values, used for setting a color scale independent of `z`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "surfacecolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `surfacecolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "description": "Sets the text elements associated with each z value. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `x` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ycalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `y` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the z coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zcalendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use with `z` date data.",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "table": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "table"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cells": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ],
                  "default": "center"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ],
                    "default": "center"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "format": {
              "oneOf": [
                {
                  "description": "Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "formatsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `format`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "height": {
              "oneOf": [
                {
                  "description": "The height of cells.",
                  "type": "number",
                  "default": 20
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "prefix": {
              "description": "Prefix for cell values.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": null
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": null
                  }
                }
              ]
            },
            "prefixsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `prefix`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "suffix": {
              "description": "Suffix for cell values.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": null
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": null
                  }
                }
              ]
            },
            "suffixsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `suffix`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "values": {
              "oneOf": [
                {
                  "description": "Cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valuessrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `values`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "columnorder": {
          "oneOf": [
            {
              "description": "Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "columnordersrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `columnorder`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "columnwidth": {
          "description": "The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "default": null
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "default": null
              }
            }
          ]
        },
        "columnwidthsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `columnwidth`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this table trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this table trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this table trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this table trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "header": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ],
                  "default": "center"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "center",
                      "right"
                    ],
                    "default": "center"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "format": {
              "oneOf": [
                {
                  "description": "Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "formatsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `format`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "height": {
              "oneOf": [
                {
                  "description": "The height of cells.",
                  "type": "number",
                  "default": 28
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "prefix": {
              "description": "Prefix for cell values.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": null
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": null
                  }
                }
              ]
            },
            "prefixsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `prefix`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "suffix": {
              "description": "Suffix for cell values.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": null
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": null
                  }
                }
              ]
            },
            "suffixsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `suffix`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "values": {
              "oneOf": [
                {
                  "description": "Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "default": []
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "valuessrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `values`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "treemap": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "treemap"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "branchvalues": {
          "oneOf": [
            {
              "description": "Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.",
              "enum": [
                "remainder",
                "total"
              ],
              "default": "remainder"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "count": {
          "oneOf": [
            {
              "description": "Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.",
              "type": "string",
              "pattern": "^(branches|leaves)(\\+(branches|leaves))*$",
              "default": "leaves"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "type": "object",
          "properties": {
            "column": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this column in the grid for this treemap trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "row": {
              "oneOf": [
                {
                  "description": "If there is a layout grid, use the domain for this row in the grid for this treemap trace .",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the horizontal domain of this treemap trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the vertical domain of this treemap trace (in plot fraction).",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "default": [
                    0,
                    1
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(label|text|value|name|current path|percent root|percent entry|percent parent)(\\+(label|text|value|name|current path|percent root|percent entry|percent parent))*$"
                }
              ],
              "default": "label+text+value+name"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(label|text|value|name|current path|percent root|percent entry|percent parent)(\\+(label|text|value|name|current path|percent root|percent entry|percent parent))*$"
                  }
                ],
                "default": "label+text+value+name"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "labels": {
          "oneOf": [
            {
              "description": "Sets the labels of each of the sectors.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `labels`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "level": {
          "description": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`."
        },
        "marker": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "oneOf": [
                {
                  "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cauto": {
              "oneOf": [
                {
                  "description": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmax": {
              "oneOf": [
                {
                  "description": "Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmid": {
              "oneOf": [
                {
                  "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cmin": {
              "oneOf": [
                {
                  "description": "Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.",
                  "type": "number",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colors": {
              "oneOf": [
                {
                  "description": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorscale": {
              "oneOf": [
                {
                  "$ref": "#/$defs/colorscale",
                  "default": [
                    [
                      0,
                      "rgb(5,10,172)"
                    ],
                    [
                      0.35,
                      "rgb(40,60,190)"
                    ],
                    [
                      0.5,
                      "rgb(70,100,245)"
                    ],
                    [
                      0.6,
                      "rgb(90,120,245)"
                    ],
                    [
                      0.7,
                      "rgb(106,137,247)"
                    ],
                    [
                      1,
                      "rgb(220,220,220)"
                    ]
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `colors`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "cornerradius": {
              "oneOf": [
                {
                  "description": "Sets the maximum rounding of corners (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "depthfade": {
              "oneOf": [
                {
                  "description": "Determines if the sector colors are faded towards the background from the leaves up to the headers. This option is unavailable when a `colorscale` is present, defaults to false when `marker.colors` is set, but otherwise defaults to true. When set to *reversed*, the fading direction is inverted, that is the top elements within hierarchy are drawn with fully saturated colors while the leaves are faded towards the background color.",
                  "enum": [
                    true,
                    false,
                    "reversed"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showscale": {
              "oneOf": [
                {
                  "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "maxdepth": {
          "oneOf": [
            {
              "description": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.",
              "type": "integer",
              "default": -1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outsidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "parents": {
          "oneOf": [
            {
              "description": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "parentssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `parents`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "pathbar": {
          "type": "object",
          "properties": {
            "edgeshape": {
              "oneOf": [
                {
                  "description": "Determines which shape is used for edges between `barpath` labels.",
                  "enum": [
                    ">",
                    "<",
                    "|",
                    "/",
                    "\\"
                  ],
                  "default": ">"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "side": {
              "oneOf": [
                {
                  "description": "Determines on which side of the the treemap the `pathbar` should be presented.",
                  "enum": [
                    "top",
                    "bottom"
                  ],
                  "default": "top"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.",
                  "type": "number",
                  "minimum": 12
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "root": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "sort": {
          "oneOf": [
            {
              "description": "Determines whether or not the sectors are reordered from largest to smallest.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0,0,0,0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0,0,0,0)"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textinfo": {
          "description": "Determines which trace information appear on the graph.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(label|text|value|current path|percent root|percent entry|percent parent)(\\+(label|text|value|current path|percent root|percent entry|percent parent))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textposition": {
          "oneOf": [
            {
              "description": "Sets the positions of the `text` elements.",
              "enum": [
                "top left",
                "top center",
                "top right",
                "middle left",
                "middle center",
                "middle right",
                "bottom left",
                "bottom center",
                "bottom right"
              ],
              "default": "top left"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tiling": {
          "type": "object",
          "properties": {
            "flip": {
              "oneOf": [
                {
                  "description": "Determines if the positions obtained from solver are flipped on each axis.",
                  "type": "string",
                  "pattern": "^(x|y)(\\+(x|y))*$",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "packing": {
              "oneOf": [
                {
                  "description": "Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling",
                  "enum": [
                    "squarify",
                    "binary",
                    "dice",
                    "slice",
                    "slice-dice",
                    "dice-slice"
                  ],
                  "default": "squarify"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "pad": {
              "oneOf": [
                {
                  "description": "Sets the inner padding (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "squarifyratio": {
              "oneOf": [
                {
                  "description": "When using *squarify* `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/v3.1.1/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using *squarify*, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.",
                  "type": "number",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "values": {
          "oneOf": [
            {
              "description": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuessrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `values`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "violin": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "violin"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignmentgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bandwidth": {
          "oneOf": [
            {
              "description": "Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "box": {
          "type": "object",
          "properties": {
            "fillcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines if an miniature box plot is drawn inside the violins. ",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.25
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0,0,0,0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0,0,0,0)"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "rgba(0,0,0,0)"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "rgba(0,0,0,0)"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hoveron": {
          "description": "Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all"
              ]
            },
            {
              "type": "string",
              "pattern": "^(violins|points|kde)(\\+(violins|points|kde))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "violins+points+kde"
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "jitter": {
          "oneOf": [
            {
              "description": "Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the violins.",
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "line": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of line bounding the violin(s).",
                  "type": "number",
                  "minimum": 0,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "marker": {
          "type": "object",
          "properties": {
            "angle": {
              "oneOf": [
                {
                  "description": "Sets the marker angle in respect to `angleref`.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "oneOf": [
                {
                  "description": "Sets the marker opacity.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outliercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "description": "Sets the marker size (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 6
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "oneOf": [
                {
                  "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
                  "enum": [
                    0,
                    "0",
                    "circle",
                    100,
                    "100",
                    "circle-open",
                    200,
                    "200",
                    "circle-dot",
                    300,
                    "300",
                    "circle-open-dot",
                    1,
                    "1",
                    "square",
                    101,
                    "101",
                    "square-open",
                    201,
                    "201",
                    "square-dot",
                    301,
                    "301",
                    "square-open-dot",
                    2,
                    "2",
                    "diamond",
                    102,
                    "102",
                    "diamond-open",
                    202,
                    "202",
                    "diamond-dot",
                    302,
                    "302",
                    "diamond-open-dot",
                    3,
                    "3",
                    "cross",
                    103,
                    "103",
                    "cross-open",
                    203,
                    "203",
                    "cross-dot",
                    303,
                    "303",
                    "cross-open-dot",
                    4,
                    "4",
                    "x",
                    104,
                    "104",
                    "x-open",
                    204,
                    "204",
                    "x-dot",
                    304,
                    "304",
                    "x-open-dot",
                    5,
                    "5",
                    "triangle-up",
                    105,
                    "105",
                    "triangle-up-open",
                    205,
                    "205",
                    "triangle-up-dot",
                    305,
                    "305",
                    "triangle-up-open-dot",
                    6,
                    "6",
                    "triangle-down",
                    106,
                    "106",
                    "triangle-down-open",
                    206,
                    "206",
                    "triangle-down-dot",
                    306,
                    "306",
                    "triangle-down-open-dot",
                    7,
                    "7",
                    "triangle-left",
                    107,
                    "107",
                    "triangle-left-open",
                    207,
                    "207",
                    "triangle-left-dot",
                    307,
                    "307",
                    "triangle-left-open-dot",
                    8,
                    "8",
                    "triangle-right",
                    108,
                    "108",
                    "triangle-right-open",
                    208,
                    "208",
                    "triangle-right-dot",
                    308,
                    "308",
                    "triangle-right-open-dot",
                    9,
                    "9",
                    "triangle-ne",
                    109,
                    "109",
                    "triangle-ne-open",
                    209,
                    "209",
                    "triangle-ne-dot",
                    309,
                    "309",
                    "triangle-ne-open-dot",
                    10,
                    "10",
                    "triangle-se",
                    110,
                    "110",
                    "triangle-se-open",
                    210,
                    "210",
                    "triangle-se-dot",
                    310,
                    "310",
                    "triangle-se-open-dot",
                    11,
                    "11",
                    "triangle-sw",
                    111,
                    "111",
                    "triangle-sw-open",
                    211,
                    "211",
                    "triangle-sw-dot",
                    311,
                    "311",
                    "triangle-sw-open-dot",
                    12,
                    "12",
                    "triangle-nw",
                    112,
                    "112",
                    "triangle-nw-open",
                    212,
                    "212",
                    "triangle-nw-dot",
                    312,
                    "312",
                    "triangle-nw-open-dot",
                    13,
                    "13",
                    "pentagon",
                    113,
                    "113",
                    "pentagon-open",
                    213,
                    "213",
                    "pentagon-dot",
                    313,
                    "313",
                    "pentagon-open-dot",
                    14,
                    "14",
                    "hexagon",
                    114,
                    "114",
                    "hexagon-open",
                    214,
                    "214",
                    "hexagon-dot",
                    314,
                    "314",
                    "hexagon-open-dot",
                    15,
                    "15",
                    "hexagon2",
                    115,
                    "115",
                    "hexagon2-open",
                    215,
                    "215",
                    "hexagon2-dot",
                    315,
                    "315",
                    "hexagon2-open-dot",
                    16,
                    "16",
                    "octagon",
                    116,
                    "116",
                    "octagon-open",
                    216,
                    "216",
                    "octagon-dot",
                    316,
                    "316",
                    "octagon-open-dot",
                    17,
                    "17",
                    "star",
                    117,
                    "117",
                    "star-open",
                    217,
                    "217",
                    "star-dot",
                    317,
                    "317",
                    "star-open-dot",
                    18,
                    "18",
                    "hexagram",
                    118,
                    "118",
                    "hexagram-open",
                    218,
                    "218",
                    "hexagram-dot",
                    318,
                    "318",
                    "hexagram-open-dot",
                    19,
                    "19",
                    "star-triangle-up",
                    119,
                    "119",
                    "star-triangle-up-open",
                    219,
                    "219",
                    "star-triangle-up-dot",
                    319,
                    "319",
                    "star-triangle-up-open-dot",
                    20,
                    "20",
                    "star-triangle-down",
                    120,
                    "120",
                    "star-triangle-down-open",
                    220,
                    "220",
                    "star-triangle-down-dot",
                    320,
                    "320",
                    "star-triangle-down-open-dot",
                    21,
                    "21",
                    "star-square",
                    121,
                    "121",
                    "star-square-open",
                    221,
                    "221",
                    "star-square-dot",
                    321,
                    "321",
                    "star-square-open-dot",
                    22,
                    "22",
                    "star-diamond",
                    122,
                    "122",
                    "star-diamond-open",
                    222,
                    "222",
                    "star-diamond-dot",
                    322,
                    "322",
                    "star-diamond-open-dot",
                    23,
                    "23",
                    "diamond-tall",
                    123,
                    "123",
                    "diamond-tall-open",
                    223,
                    "223",
                    "diamond-tall-dot",
                    323,
                    "323",
                    "diamond-tall-open-dot",
                    24,
                    "24",
                    "diamond-wide",
                    124,
                    "124",
                    "diamond-wide-open",
                    224,
                    "224",
                    "diamond-wide-dot",
                    324,
                    "324",
                    "diamond-wide-open-dot",
                    25,
                    "25",
                    "hourglass",
                    125,
                    "125",
                    "hourglass-open",
                    26,
                    "26",
                    "bowtie",
                    126,
                    "126",
                    "bowtie-open",
                    27,
                    "27",
                    "circle-cross",
                    127,
                    "127",
                    "circle-cross-open",
                    28,
                    "28",
                    "circle-x",
                    128,
                    "128",
                    "circle-x-open",
                    29,
                    "29",
                    "square-cross",
                    129,
                    "129",
                    "square-cross-open",
                    30,
                    "30",
                    "square-x",
                    130,
                    "130",
                    "square-x-open",
                    31,
                    "31",
                    "diamond-cross",
                    131,
                    "131",
                    "diamond-cross-open",
                    32,
                    "32",
                    "diamond-x",
                    132,
                    "132",
                    "diamond-x-open",
                    33,
                    "33",
                    "cross-thin",
                    133,
                    "133",
                    "cross-thin-open",
                    34,
                    "34",
                    "x-thin",
                    134,
                    "134",
                    "x-thin-open",
                    35,
                    "35",
                    "asterisk",
                    135,
                    "135",
                    "asterisk-open",
                    36,
                    "36",
                    "hash",
                    136,
                    "136",
                    "hash-open",
                    236,
                    "236",
                    "hash-dot",
                    336,
                    "336",
                    "hash-open-dot",
                    37,
                    "37",
                    "y-up",
                    137,
                    "137",
                    "y-up-open",
                    38,
                    "38",
                    "y-down",
                    138,
                    "138",
                    "y-down-open",
                    39,
                    "39",
                    "y-left",
                    139,
                    "139",
                    "y-left-open",
                    40,
                    "40",
                    "y-right",
                    140,
                    "140",
                    "y-right-open",
                    41,
                    "41",
                    "line-ew",
                    141,
                    "141",
                    "line-ew-open",
                    42,
                    "42",
                    "line-ns",
                    142,
                    "142",
                    "line-ns-open",
                    43,
                    "43",
                    "line-ne",
                    143,
                    "143",
                    "line-ne-open",
                    44,
                    "44",
                    "line-nw",
                    144,
                    "144",
                    "line-nw-open",
                    45,
                    "45",
                    "arrow-up",
                    145,
                    "145",
                    "arrow-up-open",
                    46,
                    "46",
                    "arrow-down",
                    146,
                    "146",
                    "arrow-down-open",
                    47,
                    "47",
                    "arrow-left",
                    147,
                    "147",
                    "arrow-left-open",
                    48,
                    "48",
                    "arrow-right",
                    148,
                    "148",
                    "arrow-right-open",
                    49,
                    "49",
                    "arrow-bar-up",
                    149,
                    "149",
                    "arrow-bar-up-open",
                    50,
                    "50",
                    "arrow-bar-down",
                    150,
                    "150",
                    "arrow-bar-down-open",
                    51,
                    "51",
                    "arrow-bar-left",
                    151,
                    "151",
                    "arrow-bar-left-open",
                    52,
                    "52",
                    "arrow-bar-right",
                    152,
                    "152",
                    "arrow-bar-right-open",
                    53,
                    "53",
                    "arrow",
                    153,
                    "153",
                    "arrow-open",
                    54,
                    "54",
                    "arrow-wide",
                    154,
                    "154",
                    "arrow-wide-open"
                  ],
                  "default": "circle"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "meanline": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines if a line corresponding to the sample's mean is shown inside the violins. If `box.visible` is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the mean line width.",
                  "type": "number",
                  "minimum": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover. For violin traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical. Note that the trace name is also used as a default value for attribute `scalegroup` (please see its description for details).",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offsetgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the violin(s). If *v* (*h*), the distribution is visualized along the vertical (horizontal).",
              "enum": [
                "v",
                "h"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "pointpos": {
          "oneOf": [
            {
              "description": "Sets the position of the sample points in relation to the violins. If *0*, the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.",
              "type": "number",
              "minimum": -2,
              "maximum": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "points": {
          "oneOf": [
            {
              "description": "If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the violins are shown with no sample points. Defaults to *suspectedoutliers* when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to *outliers*.",
              "enum": [
                "all",
                "outliers",
                "suspectedoutliers",
                false
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "quartilemethod": {
          "oneOf": [
            {
              "description": "Sets the method used to compute the sample's Q1 and Q3 quartiles. The *linear* method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The *exclusive* method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The *inclusive* method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.",
              "enum": [
                "linear",
                "exclusive",
                "inclusive"
              ],
              "default": "linear"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scalegroup": {
          "oneOf": [
            {
              "description": "If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scalemode": {
          "oneOf": [
            {
              "description": "Sets the metric by which the width of each violin is determined. *width* means each violin has the same (max) width *count* means the violins are scaled by the number of sample points making up each violin.",
              "enum": [
                "width",
                "count"
              ],
              "default": "width"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "side": {
          "oneOf": [
            {
              "description": "Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under *overlay* mode, where one trace has `side` set to *positive* and the other to *negative*.",
              "enum": [
                "both",
                "positive",
                "negative"
              ],
              "default": "both"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "span": {
          "oneOf": [
            {
              "description": "Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to *manual*.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {}
                ]
              },
              "minItems": 2,
              "maxItems": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spanmode": {
          "oneOf": [
            {
              "description": "Sets the method by which the span in data space where the density function will be computed. *soft* means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. *hard* means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode *manual* and fill in the `span` attribute.",
              "enum": [
                "soft",
                "hard",
                "manual"
              ],
              "default": "soft"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "oneOf": [
            {
              "description": "Sets the width of the violin in data coordinates. If *0* (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x sample data or coordinates. See overview for more info.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info."
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y sample data or coordinates. See overview for more info.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info."
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "volume": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "volume"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickformat": {
              "oneOf": [
                {
                  "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "oneOf": [
                {
                  "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
                  "enum": [
                    "auto",
                    "linear",
                    "array"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickprefix": {
              "oneOf": [
                {
                  "description": "Sets a tick label prefix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "oneOf": [
                {
                  "description": "Sets a tick label suffix.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "contour": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "show": {
              "oneOf": [
                {
                  "description": "Sets whether or not dynamic contours are shown on hover",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "oneOf": [
                {
                  "description": "Sets the width of the contour lines.",
                  "type": "number",
                  "minimum": 1,
                  "maximum": 16,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "flatshading": {
          "oneOf": [
            {
              "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Same as `text`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "isomax": {
          "oneOf": [
            {
              "description": "Sets the maximum boundary for iso-surface plot.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "isomin": {
          "oneOf": [
            {
              "description": "Sets the minimum boundary for iso-surface plot.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lighting": {
          "type": "object",
          "properties": {
            "ambient": {
              "oneOf": [
                {
                  "description": "Ambient light increases overall color visibility but can wash out the image.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "diffuse": {
              "oneOf": [
                {
                  "description": "Represents the extent that incident rays are reflected in a range of angles.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.8
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "facenormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fresnel": {
              "oneOf": [
                {
                  "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 5,
                  "default": 0.2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "roughness": {
              "oneOf": [
                {
                  "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "specular": {
              "oneOf": [
                {
                  "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 2,
                  "default": 0.05
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "vertexnormalsepsilon": {
              "oneOf": [
                {
                  "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1e-12
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "lightposition": {
          "type": "object",
          "properties": {
            "x": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the X coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Y coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 100000
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "z": {
              "oneOf": [
                {
                  "description": "Numeric vector, representing the Z coordinate for each vertex.",
                  "type": "number",
                  "minimum": -100000,
                  "maximum": 100000,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacityscale": {
          "description": "Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'."
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scene": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
              "type": "string",
              "pattern": "^scene([2-9]|[1-9][0-9]+)?$",
              "default": "scene"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spaceframe": {
          "type": "object",
          "properties": {
            "fill": {
              "oneOf": [
                {
                  "description": "Sets the fill ratio of the `spaceframe` elements. The default fill value is 1 meaning that they are entirely shaded. Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "show": {
              "oneOf": [
                {
                  "description": "Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "surface": {
          "type": "object",
          "properties": {
            "count": {
              "oneOf": [
                {
                  "description": "Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fill": {
              "oneOf": [
                {
                  "description": "Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "pattern": {
              "description": "Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "odd",
                    "even"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(A|B|C|D|E)(\\+(A|B|C|D|E))*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ],
              "default": "all"
            },
            "show": {
              "oneOf": [
                {
                  "description": "Hides/displays surfaces between minimum and maximum iso-values.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "value": {
          "oneOf": [
            {
              "description": "Sets the 4th dimension (value) of the vertices.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuehoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `value`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valuesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `value`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the X coordinates of the vertices on X axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the Y coordinates of the vertices on Y axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "z": {
          "oneOf": [
            {
              "description": "Sets the Z coordinates of the vertices on Z axis.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `z`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    },
    "waterfall": {
      "type": "object",
      "properties": {
        "type": {
          "oneOf": [
            {
              "const": "waterfall"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignmentgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "base": {
          "oneOf": [
            {
              "description": "Sets where the bar base is drawn (in position axis units).",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cliponaxis": {
          "oneOf": [
            {
              "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "connector": {
          "type": "object",
          "properties": {
            "mode": {
              "oneOf": [
                {
                  "description": "Sets the shape of connector lines.",
                  "enum": [
                    "spanning",
                    "between"
                  ],
                  "default": "between"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "Determines if connector lines are drawn. ",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "constraintext": {
          "oneOf": [
            {
              "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
              "enum": [
                "inside",
                "outside",
                "both",
                "none"
              ],
              "default": "both"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdata": {
          "oneOf": [
            {
              "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "customdatasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dx": {
          "oneOf": [
            {
              "description": "Sets the x coordinate step. See `x0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dy": {
          "oneOf": [
            {
              "description": "Sets the y coordinate step. See `y0` for more info.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverinfo": {
          "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "all",
                    "none",
                    "skip"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(name|x|y|text|initial|delta|final)(\\+(name|x|y|text|initial|delta|final))*$"
                }
              ],
              "default": "all"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "all",
                      "none",
                      "skip"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(name|x|y|text|initial|delta|final)(\\+(name|x|y|text|initial|delta|final))*$"
                  }
                ],
                "default": "all"
              }
            }
          ]
        },
        "hoverinfosrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverlabel": {
          "type": "object",
          "properties": {
            "align": {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "left",
                    "right",
                    "auto"
                  ],
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "left",
                      "right",
                      "auto"
                    ],
                    "default": "auto"
                  }
                }
              ]
            },
            "alignsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `align`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bgcolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "bordercolorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "namelength": {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": -1,
                  "default": 15
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": -1,
                    "default": 15
                  }
                }
              ]
            },
            "namelengthsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `initial`, `delta` and `final`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovertext": {
          "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "hovertextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ids": {
          "oneOf": [
            {
              "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "idssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextanchor": {
          "oneOf": [
            {
              "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
              "enum": [
                "end",
                "middle",
                "start"
              ],
              "default": "end"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgrouptitle": {
          "type": "object",
          "properties": {
            "text": {
              "oneOf": [
                {
                  "description": "Sets the title of the legend group.",
                  "type": "string",
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for this trace.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "measure": {
          "oneOf": [
            {
              "description": "An array containing types of values. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "default": []
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "measuresrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `measure`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "metasrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offset": {
          "description": "Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "default": null
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "default": null
              }
            }
          ]
        },
        "offsetgroup": {
          "oneOf": [
            {
              "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "offsetsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `offset`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the trace.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
              "enum": [
                "v",
                "h"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "outsidetextfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "selectedpoints": {
          "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stream": {
          "type": "object",
          "properties": {
            "maxpoints": {
              "oneOf": [
                {
                  "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 10000,
                  "default": 500
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "token": {
              "oneOf": [
                {
                  "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "textangle": {
          "oneOf": [
            {
              "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                }
              ]
            },
            "colorsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `color`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                }
              ]
            },
            "familysrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `family`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                }
              ]
            },
            "linepositionsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "size": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                }
              ]
            },
            "sizesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `size`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "stylesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `style`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "textcasesrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                }
              ]
            },
            "variantsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                }
              ]
            },
            "weightsrc": {
              "oneOf": [
                {
                  "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
                  "type": "string"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textinfo": {
          "description": "Determines which trace information appear on the graph. In the case of having multiple waterfalls, totals are computed separately (per trace).",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(label|text|initial|delta|final)(\\+(label|text|initial|delta|final))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textposition": {
          "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If *none*, no text appears.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "inside",
                "outside",
                "auto",
                "none"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "inside",
                  "outside",
                  "auto",
                  "none"
                ],
                "default": "auto"
              }
            }
          ]
        },
        "textpositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `text`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "texttemplate": {
          "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `initial`, `delta`, `final` and `label`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "texttemplatesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uid": {
          "oneOf": [
            {
              "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "description": "Sets the bar width (in position axis units).",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "default": null
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "default": null
              }
            }
          ]
        },
        "widthsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `width`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x0": {
          "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
          "default": 0
        },
        "xaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
              "type": "string",
              "pattern": "^x([2-9]|[1-9][0-9]+)?$",
              "default": "x"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "xperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "xperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `x`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y coordinates.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y0": {
          "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
          "default": 0
        },
        "yaxis": {
          "oneOf": [
            {
              "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
              "type": "string",
              "pattern": "^y([2-9]|[1-9][0-9]+)?$",
              "default": "y"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yhoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yperiod": {
          "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
          "default": 0
        },
        "yperiod0": {
          "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
        },
        "yperiodalignment": {
          "oneOf": [
            {
              "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
              "enum": [
                "start",
                "middle",
                "end"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `y`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zorder": {
          "oneOf": [
            {
              "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "additionalProperties": false
    }
  },
  "oneOf": [
    {
      "$ref": "#/$defs/bar"
    },
    {
      "$ref": "#/$defs/barpolar"
    },
    {
      "$ref": "#/$defs/box"
    },
    {
      "$ref": "#/$defs/candlestick"
    },
    {
      "$ref": "#/$defs/carpet"
    },
    {
      "$ref": "#/$defs/choropleth"
    },
    {
      "$ref": "#/$defs/choroplethmap"
    },
    {
      "$ref": "#/$defs/choroplethmapbox"
    },
    {
      "$ref": "#/$defs/cone"
    },
    {
      "$ref": "#/$defs/contour"
    },
    {
      "$ref": "#/$defs/contourcarpet"
    },
    {
      "$ref": "#/$defs/densitymap"
    },
    {
      "$ref": "#/$defs/densitymapbox"
    },
    {
      "$ref": "#/$defs/funnel"
    },
    {
      "$ref": "#/$defs/funnelarea"
    },
    {
      "$ref": "#/$defs/heatmap"
    },
    {
      "$ref": "#/$defs/histogram"
    },
    {
      "$ref": "#/$defs/histogram2d"
    },
    {
      "$ref": "#/$defs/histogram2dcontour"
    },
    {
      "$ref": "#/$defs/icicle"
    },
    {
      "$ref": "#/$defs/image"
    },
    {
      "$ref": "#/$defs/indicator"
    },
    {
      "$ref": "#/$defs/isosurface"
    },
    {
      "$ref": "#/$defs/mesh3d"
    },
    {
      "$ref": "#/$defs/ohlc"
    },
    {
      "$ref": "#/$defs/parcats"
    },
    {
      "$ref": "#/$defs/parcoords"
    },
    {
      "$ref": "#/$defs/pie"
    },
    {
      "$ref": "#/$defs/sankey"
    },
    {
      "$ref": "#/$defs/scatter"
    },
    {
      "$ref": "#/$defs/scatter3d"
    },
    {
      "$ref": "#/$defs/scattercarpet"
    },
    {
      "$ref": "#/$defs/scattergeo"
    },
    {
      "$ref": "#/$defs/scattergl"
    },
    {
      "$ref": "#/$defs/scattermap"
    },
    {
      "$ref": "#/$defs/scattermapbox"
    },
    {
      "$ref": "#/$defs/scatterpolar"
    },
    {
      "$ref": "#/$defs/scatterpolargl"
    },
    {
      "$ref": "#/$defs/scattersmith"
    },
    {
      "$ref": "#/$defs/scatterternary"
    },
    {
      "$ref": "#/$defs/splom"
    },
    {
      "$ref": "#/$defs/streamtube"
    },
    {
      "$ref": "#/$defs/sunburst"
    },
    {
      "$ref": "#/$defs/surface"
    },
    {
      "$ref": "#/$defs/table"
    },
    {
      "$ref": "#/$defs/treemap"
    },
    {
      "$ref": "#/$defs/violin"
    },
    {
      "$ref": "#/$defs/volume"
    },
    {
      "$ref": "#/$defs/waterfall"
    }
  ]
}