{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a number"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "type": {
      "oneOf": [
        {
          "const": "barpolar"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "base": {
      "description": "Sets where the bar base is drawn (in radial axis units). In *stack* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "default": null
        },
        {
          "type": "array",
          "items": {
            "default": null
          }
        }
      ]
    },
    "basesrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `base`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdata": {
      "oneOf": [
        {
          "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdatasrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "dr": {
      "oneOf": [
        {
          "description": "Sets the r coordinate step.",
          "type": "number",
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "dtheta": {
      "oneOf": [
        {
          "description": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.",
          "type": "number"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverinfo": {
      "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all",
                "none",
                "skip"
              ]
            },
            {
              "type": "string",
              "pattern": "^(r|theta|text|name)(\\+(r|theta|text|name))*$"
            }
          ],
          "default": "all"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "all",
                  "none",
                  "skip"
                ]
              },
              {
                "type": "string",
                "pattern": "^(r|theta|text|name)(\\+(r|theta|text|name))*$"
              }
            ],
            "default": "all"
          }
        }
      ]
    },
    "hoverinfosrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverlabel": {
      "type": "object",
      "properties": {
        "align": {
          "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "left",
                "right",
                "auto"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "left",
                  "right",
                  "auto"
                ],
                "default": "auto"
              }
            }
          ]
        },
        "alignsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `align`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color"
              }
            }
          ]
        },
        "bgcolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color"
              }
            }
          ]
        },
        "bordercolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "namelength": {
          "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "integer",
              "minimum": -1,
              "default": 15
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": -1,
                "default": 15
              }
            }
          ]
        },
        "namelengthsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "hovertemplate": {
      "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "hovertemplatesrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hovertext": {
      "description": "Same as `text`.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "hovertextsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "ids": {
      "oneOf": [
        {
          "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "idssrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legend": {
      "oneOf": [
        {
          "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
          "type": "string",
          "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
          "default": "legend"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendgroup": {
      "oneOf": [
        {
          "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
          "type": "string",
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendgrouptitle": {
      "type": "object",
      "properties": {
        "text": {
          "oneOf": [
            {
              "description": "Sets the title of the legend group.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "legendrank": {
      "oneOf": [
        {
          "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
          "type": "number",
          "default": 1000
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendwidth": {
      "oneOf": [
        {
          "description": "Sets the width (in px or fraction) of the legend for this trace.",
          "type": "number",
          "minimum": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "marker": {
      "type": "object",
      "properties": {
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color"
              }
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "description": "Sets the opacity of the bars.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 1
              }
            }
          ]
        },
        "opacitysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "metasrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "name": {
      "oneOf": [
        {
          "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "offset": {
      "description": "Shifts the angular position where the bar is drawn (in *thetatunit* units).",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "default": null
        },
        {
          "type": "array",
          "items": {
            "type": "number",
            "default": null
          }
        }
      ]
    },
    "offsetsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `offset`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "opacity": {
      "oneOf": [
        {
          "description": "Sets the opacity of the trace.",
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "r": {
      "oneOf": [
        {
          "description": "Sets the radial coordinates",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "r0": {
      "description": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.",
      "default": 0
    },
    "rsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `r`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "selectedpoints": {
      "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
    },
    "showlegend": {
      "oneOf": [
        {
          "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "stream": {
      "type": "object",
      "properties": {
        "maxpoints": {
          "oneOf": [
            {
              "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "default": 500
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "token": {
          "oneOf": [
            {
              "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
              "type": "string",
              "pattern": ".*\\S.*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "subplot": {
      "oneOf": [
        {
          "description": "Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.",
          "type": "string",
          "pattern": "^polar([2-9]|[1-9][0-9]+)?$",
          "default": "polar"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "text": {
      "description": "Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "textsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `text`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "theta": {
      "oneOf": [
        {
          "description": "Sets the angular coordinates",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "theta0": {
      "description": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.",
      "default": 0
    },
    "thetasrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `theta`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "thetaunit": {
      "oneOf": [
        {
          "description": "Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.",
          "enum": [
            "radians",
            "degrees",
            "gradians"
          ],
          "default": "degrees"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "uid": {
      "oneOf": [
        {
          "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "uirevision": {
      "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
    },
    "visible": {
      "oneOf": [
        {
          "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
          "enum": [
            true,
            false,
            "legendonly"
          ],
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "width": {
      "description": "Sets the bar angular width (in *thetaunit* units).",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "number",
          "minimum": 0,
          "default": null
        },
        {
          "type": "array",
          "items": {
            "type": "number",
            "minimum": 0,
            "default": null
          }
        }
      ]
    },
    "widthsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `width`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}