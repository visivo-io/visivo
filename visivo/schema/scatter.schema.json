{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a number"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "type": {
      "oneOf": [
        {
          "const": "scatter"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "alignmentgroup": {
      "oneOf": [
        {
          "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
          "type": "string",
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "cliponaxis": {
      "oneOf": [
        {
          "description": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "connectgaps": {
      "oneOf": [
        {
          "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
          "type": "boolean",
          "default": false
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdata": {
      "oneOf": [
        {
          "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdatasrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "dx": {
      "oneOf": [
        {
          "description": "Sets the x coordinate step. See `x0` for more info.",
          "type": "number",
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "dy": {
      "oneOf": [
        {
          "description": "Sets the y coordinate step. See `y0` for more info.",
          "type": "number",
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "error_x": {
      "type": "object",
      "properties": {
        "array": {
          "oneOf": [
            {
              "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrayminus": {
          "oneOf": [
            {
              "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrayminussrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arraysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `array`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "copy_ystyle": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "symmetric": {
          "oneOf": [
            {
              "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "thickness": {
          "oneOf": [
            {
              "description": "Sets the thickness (in px) of the error bars.",
              "type": "number",
              "minimum": 0,
              "default": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "traceref": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tracerefminus": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
              "enum": [
                "percent",
                "constant",
                "sqrt",
                "data"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "value": {
          "oneOf": [
            {
              "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valueminus": {
          "oneOf": [
            {
              "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this set of error bars is visible.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "error_y": {
      "type": "object",
      "properties": {
        "array": {
          "oneOf": [
            {
              "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrayminus": {
          "oneOf": [
            {
              "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrayminussrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arraysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `array`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "symmetric": {
          "oneOf": [
            {
              "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "thickness": {
          "oneOf": [
            {
              "description": "Sets the thickness (in px) of the error bars.",
              "type": "number",
              "minimum": 0,
              "default": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "traceref": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tracerefminus": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
              "enum": [
                "percent",
                "constant",
                "sqrt",
                "data"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "value": {
          "oneOf": [
            {
              "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valueminus": {
          "oneOf": [
            {
              "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this set of error bars is visible.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "fill": {
      "oneOf": [
        {
          "description": "Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
          "enum": [
            "none",
            "tozeroy",
            "tozerox",
            "tonexty",
            "tonextx",
            "toself",
            "tonext"
          ]
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "fillcolor": {
      "oneOf": [
        {
          "$ref": "#/$defs/color",
          "default": "#444"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "fillgradient": {
      "type": "object",
      "properties": {
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "start": {
          "oneOf": [
            {
              "description": "Sets the gradient start value. It is given as the absolute position on the axis determined by the orientiation. E.g., if orientation is *horizontal*, the gradient will be horizontal and start from the x-position given by start. If omitted, the gradient starts at the lowest value of the trace along the respective axis. Ignored if orientation is *radial*.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "stop": {
          "oneOf": [
            {
              "description": "Sets the gradient end value. It is given as the absolute position on the axis determined by the orientiation. E.g., if orientation is *horizontal*, the gradient will be horizontal and end at the x-position given by end. If omitted, the gradient ends at the highest value of the trace along the respective axis. Ignored if orientation is *radial*.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "description": "Sets the type/orientation of the color gradient for the fill. Defaults to *none*.",
              "enum": [
                "radial",
                "horizontal",
                "vertical",
                "none"
              ],
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "fillpattern": {
      "type": "object",
      "properties": {
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#444"
              }
            }
          ]
        },
        "bgcolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#444"
              }
            }
          ]
        },
        "fgcolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `fgcolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fgopacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.",
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillmode": {
          "oneOf": [
            {
              "description": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.",
              "enum": [
                "replace",
                "overlay"
              ],
              "default": "replace"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "shape": {
          "description": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "",
                "/",
                "\\",
                "x",
                "-",
                "|",
                "+",
                "."
              ],
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "",
                  "/",
                  "\\",
                  "x",
                  "-",
                  "|",
                  "+",
                  "."
                ],
                "default": ""
              }
            }
          ]
        },
        "shapesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `shape`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "size": {
          "description": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "default": 8
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "default": 8
              }
            }
          ]
        },
        "sizesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "solidity": {
          "description": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.3
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 0.3
              }
            }
          ]
        },
        "soliditysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `solidity`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "groupnorm": {
      "oneOf": [
        {
          "description": "Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With *fraction*, the value of each trace at each location is divided by the sum of all trace values at that location. *percent* is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.",
          "enum": [
            "",
            "fraction",
            "percent"
          ],
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverinfo": {
      "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all",
                "none",
                "skip"
              ]
            },
            {
              "type": "string",
              "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
            }
          ],
          "default": "all"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "all",
                  "none",
                  "skip"
                ]
              },
              {
                "type": "string",
                "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
              }
            ],
            "default": "all"
          }
        }
      ]
    },
    "hoverinfosrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverlabel": {
      "type": "object",
      "properties": {
        "align": {
          "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "left",
                "right",
                "auto"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "left",
                  "right",
                  "auto"
                ],
                "default": "auto"
              }
            }
          ]
        },
        "alignsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `align`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#444"
              }
            }
          ]
        },
        "bgcolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#444"
              }
            }
          ]
        },
        "bordercolorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "namelength": {
          "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "integer",
              "minimum": -1,
              "default": 15
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": -1,
                "default": 15
              }
            }
          ]
        },
        "namelengthsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "hoveron": {
      "oneOf": [
        {
          "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
          "type": "string",
          "pattern": "^(points|fills)(\\+(points|fills))*$"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hovertemplate": {
      "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "hovertemplatesrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hovertext": {
      "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "hovertextsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "ids": {
      "oneOf": [
        {
          "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "idssrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legend": {
      "oneOf": [
        {
          "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
          "type": "string",
          "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
          "default": "legend"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendgroup": {
      "oneOf": [
        {
          "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
          "type": "string",
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendgrouptitle": {
      "type": "object",
      "properties": {
        "text": {
          "oneOf": [
            {
              "description": "Sets the title of the legend group.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "legendrank": {
      "oneOf": [
        {
          "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
          "type": "number",
          "default": 1000
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendwidth": {
      "oneOf": [
        {
          "description": "Sets the width (in px or fraction) of the legend for this trace.",
          "type": "number",
          "minimum": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "line": {
      "type": "object",
      "properties": {
        "backoff": {
          "description": "Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With *auto* the lines would trim before markers if `marker.angleref` is set to *previous*.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "default": "auto"
              }
            }
          ]
        },
        "backoffsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `backoff`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dash": {
          "oneOf": [
            {
              "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
              "type": "string",
              "default": "solid"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "shape": {
          "oneOf": [
            {
              "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
              "enum": [
                "linear",
                "spline",
                "hv",
                "vh",
                "hvh",
                "vhv"
              ],
              "default": "linear"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "simplify": {
          "oneOf": [
            {
              "description": "Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "smoothing": {
          "oneOf": [
            {
              "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
              "type": "number",
              "minimum": 0,
              "maximum": 1.3,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "oneOf": [
            {
              "description": "Sets the line width (in px).",
              "type": "number",
              "minimum": 0,
              "default": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "marker": {
      "type": "object",
      "properties": {
        "angle": {
          "description": "Sets the marker angle in respect to `angleref`.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": 0
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": -180,
                "maximum": 180,
                "default": 0
              }
            }
          ]
        },
        "angleref": {
          "oneOf": [
            {
              "description": "Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen.",
              "enum": [
                "previous",
                "up"
              ],
              "default": "up"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "anglesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `angle`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#444"
              }
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "maxdisplayed": {
          "oneOf": [
            {
              "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "description": "Sets the marker opacity.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              }
            }
          ]
        },
        "opacitysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "size": {
          "description": "Sets the marker size (in px).",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "default": 6
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "default": 6
              }
            }
          ]
        },
        "sizemin": {
          "oneOf": [
            {
              "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sizemode": {
          "oneOf": [
            {
              "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
              "enum": [
                "diameter",
                "area"
              ],
              "default": "diameter"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sizeref": {
          "oneOf": [
            {
              "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sizesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "standoff": {
          "description": "Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "default": 0
              }
            }
          ]
        },
        "standoffsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `standoff`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "symbol": {
          "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                0,
                "0",
                "circle",
                100,
                "100",
                "circle-open",
                200,
                "200",
                "circle-dot",
                300,
                "300",
                "circle-open-dot",
                1,
                "1",
                "square",
                101,
                "101",
                "square-open",
                201,
                "201",
                "square-dot",
                301,
                "301",
                "square-open-dot",
                2,
                "2",
                "diamond",
                102,
                "102",
                "diamond-open",
                202,
                "202",
                "diamond-dot",
                302,
                "302",
                "diamond-open-dot",
                3,
                "3",
                "cross",
                103,
                "103",
                "cross-open",
                203,
                "203",
                "cross-dot",
                303,
                "303",
                "cross-open-dot",
                4,
                "4",
                "x",
                104,
                "104",
                "x-open",
                204,
                "204",
                "x-dot",
                304,
                "304",
                "x-open-dot",
                5,
                "5",
                "triangle-up",
                105,
                "105",
                "triangle-up-open",
                205,
                "205",
                "triangle-up-dot",
                305,
                "305",
                "triangle-up-open-dot",
                6,
                "6",
                "triangle-down",
                106,
                "106",
                "triangle-down-open",
                206,
                "206",
                "triangle-down-dot",
                306,
                "306",
                "triangle-down-open-dot",
                7,
                "7",
                "triangle-left",
                107,
                "107",
                "triangle-left-open",
                207,
                "207",
                "triangle-left-dot",
                307,
                "307",
                "triangle-left-open-dot",
                8,
                "8",
                "triangle-right",
                108,
                "108",
                "triangle-right-open",
                208,
                "208",
                "triangle-right-dot",
                308,
                "308",
                "triangle-right-open-dot",
                9,
                "9",
                "triangle-ne",
                109,
                "109",
                "triangle-ne-open",
                209,
                "209",
                "triangle-ne-dot",
                309,
                "309",
                "triangle-ne-open-dot",
                10,
                "10",
                "triangle-se",
                110,
                "110",
                "triangle-se-open",
                210,
                "210",
                "triangle-se-dot",
                310,
                "310",
                "triangle-se-open-dot",
                11,
                "11",
                "triangle-sw",
                111,
                "111",
                "triangle-sw-open",
                211,
                "211",
                "triangle-sw-dot",
                311,
                "311",
                "triangle-sw-open-dot",
                12,
                "12",
                "triangle-nw",
                112,
                "112",
                "triangle-nw-open",
                212,
                "212",
                "triangle-nw-dot",
                312,
                "312",
                "triangle-nw-open-dot",
                13,
                "13",
                "pentagon",
                113,
                "113",
                "pentagon-open",
                213,
                "213",
                "pentagon-dot",
                313,
                "313",
                "pentagon-open-dot",
                14,
                "14",
                "hexagon",
                114,
                "114",
                "hexagon-open",
                214,
                "214",
                "hexagon-dot",
                314,
                "314",
                "hexagon-open-dot",
                15,
                "15",
                "hexagon2",
                115,
                "115",
                "hexagon2-open",
                215,
                "215",
                "hexagon2-dot",
                315,
                "315",
                "hexagon2-open-dot",
                16,
                "16",
                "octagon",
                116,
                "116",
                "octagon-open",
                216,
                "216",
                "octagon-dot",
                316,
                "316",
                "octagon-open-dot",
                17,
                "17",
                "star",
                117,
                "117",
                "star-open",
                217,
                "217",
                "star-dot",
                317,
                "317",
                "star-open-dot",
                18,
                "18",
                "hexagram",
                118,
                "118",
                "hexagram-open",
                218,
                "218",
                "hexagram-dot",
                318,
                "318",
                "hexagram-open-dot",
                19,
                "19",
                "star-triangle-up",
                119,
                "119",
                "star-triangle-up-open",
                219,
                "219",
                "star-triangle-up-dot",
                319,
                "319",
                "star-triangle-up-open-dot",
                20,
                "20",
                "star-triangle-down",
                120,
                "120",
                "star-triangle-down-open",
                220,
                "220",
                "star-triangle-down-dot",
                320,
                "320",
                "star-triangle-down-open-dot",
                21,
                "21",
                "star-square",
                121,
                "121",
                "star-square-open",
                221,
                "221",
                "star-square-dot",
                321,
                "321",
                "star-square-open-dot",
                22,
                "22",
                "star-diamond",
                122,
                "122",
                "star-diamond-open",
                222,
                "222",
                "star-diamond-dot",
                322,
                "322",
                "star-diamond-open-dot",
                23,
                "23",
                "diamond-tall",
                123,
                "123",
                "diamond-tall-open",
                223,
                "223",
                "diamond-tall-dot",
                323,
                "323",
                "diamond-tall-open-dot",
                24,
                "24",
                "diamond-wide",
                124,
                "124",
                "diamond-wide-open",
                224,
                "224",
                "diamond-wide-dot",
                324,
                "324",
                "diamond-wide-open-dot",
                25,
                "25",
                "hourglass",
                125,
                "125",
                "hourglass-open",
                26,
                "26",
                "bowtie",
                126,
                "126",
                "bowtie-open",
                27,
                "27",
                "circle-cross",
                127,
                "127",
                "circle-cross-open",
                28,
                "28",
                "circle-x",
                128,
                "128",
                "circle-x-open",
                29,
                "29",
                "square-cross",
                129,
                "129",
                "square-cross-open",
                30,
                "30",
                "square-x",
                130,
                "130",
                "square-x-open",
                31,
                "31",
                "diamond-cross",
                131,
                "131",
                "diamond-cross-open",
                32,
                "32",
                "diamond-x",
                132,
                "132",
                "diamond-x-open",
                33,
                "33",
                "cross-thin",
                133,
                "133",
                "cross-thin-open",
                34,
                "34",
                "x-thin",
                134,
                "134",
                "x-thin-open",
                35,
                "35",
                "asterisk",
                135,
                "135",
                "asterisk-open",
                36,
                "36",
                "hash",
                136,
                "136",
                "hash-open",
                236,
                "236",
                "hash-dot",
                336,
                "336",
                "hash-open-dot",
                37,
                "37",
                "y-up",
                137,
                "137",
                "y-up-open",
                38,
                "38",
                "y-down",
                138,
                "138",
                "y-down-open",
                39,
                "39",
                "y-left",
                139,
                "139",
                "y-left-open",
                40,
                "40",
                "y-right",
                140,
                "140",
                "y-right-open",
                41,
                "41",
                "line-ew",
                141,
                "141",
                "line-ew-open",
                42,
                "42",
                "line-ns",
                142,
                "142",
                "line-ns-open",
                43,
                "43",
                "line-ne",
                143,
                "143",
                "line-ne-open",
                44,
                "44",
                "line-nw",
                144,
                "144",
                "line-nw-open",
                45,
                "45",
                "arrow-up",
                145,
                "145",
                "arrow-up-open",
                46,
                "46",
                "arrow-down",
                146,
                "146",
                "arrow-down-open",
                47,
                "47",
                "arrow-left",
                147,
                "147",
                "arrow-left-open",
                48,
                "48",
                "arrow-right",
                148,
                "148",
                "arrow-right-open",
                49,
                "49",
                "arrow-bar-up",
                149,
                "149",
                "arrow-bar-up-open",
                50,
                "50",
                "arrow-bar-down",
                150,
                "150",
                "arrow-bar-down-open",
                51,
                "51",
                "arrow-bar-left",
                151,
                "151",
                "arrow-bar-left-open",
                52,
                "52",
                "arrow-bar-right",
                152,
                "152",
                "arrow-bar-right-open",
                53,
                "53",
                "arrow",
                153,
                "153",
                "arrow-open",
                54,
                "54",
                "arrow-wide",
                154,
                "154",
                "arrow-wide-open"
              ],
              "default": "circle"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  0,
                  "0",
                  "circle",
                  100,
                  "100",
                  "circle-open",
                  200,
                  "200",
                  "circle-dot",
                  300,
                  "300",
                  "circle-open-dot",
                  1,
                  "1",
                  "square",
                  101,
                  "101",
                  "square-open",
                  201,
                  "201",
                  "square-dot",
                  301,
                  "301",
                  "square-open-dot",
                  2,
                  "2",
                  "diamond",
                  102,
                  "102",
                  "diamond-open",
                  202,
                  "202",
                  "diamond-dot",
                  302,
                  "302",
                  "diamond-open-dot",
                  3,
                  "3",
                  "cross",
                  103,
                  "103",
                  "cross-open",
                  203,
                  "203",
                  "cross-dot",
                  303,
                  "303",
                  "cross-open-dot",
                  4,
                  "4",
                  "x",
                  104,
                  "104",
                  "x-open",
                  204,
                  "204",
                  "x-dot",
                  304,
                  "304",
                  "x-open-dot",
                  5,
                  "5",
                  "triangle-up",
                  105,
                  "105",
                  "triangle-up-open",
                  205,
                  "205",
                  "triangle-up-dot",
                  305,
                  "305",
                  "triangle-up-open-dot",
                  6,
                  "6",
                  "triangle-down",
                  106,
                  "106",
                  "triangle-down-open",
                  206,
                  "206",
                  "triangle-down-dot",
                  306,
                  "306",
                  "triangle-down-open-dot",
                  7,
                  "7",
                  "triangle-left",
                  107,
                  "107",
                  "triangle-left-open",
                  207,
                  "207",
                  "triangle-left-dot",
                  307,
                  "307",
                  "triangle-left-open-dot",
                  8,
                  "8",
                  "triangle-right",
                  108,
                  "108",
                  "triangle-right-open",
                  208,
                  "208",
                  "triangle-right-dot",
                  308,
                  "308",
                  "triangle-right-open-dot",
                  9,
                  "9",
                  "triangle-ne",
                  109,
                  "109",
                  "triangle-ne-open",
                  209,
                  "209",
                  "triangle-ne-dot",
                  309,
                  "309",
                  "triangle-ne-open-dot",
                  10,
                  "10",
                  "triangle-se",
                  110,
                  "110",
                  "triangle-se-open",
                  210,
                  "210",
                  "triangle-se-dot",
                  310,
                  "310",
                  "triangle-se-open-dot",
                  11,
                  "11",
                  "triangle-sw",
                  111,
                  "111",
                  "triangle-sw-open",
                  211,
                  "211",
                  "triangle-sw-dot",
                  311,
                  "311",
                  "triangle-sw-open-dot",
                  12,
                  "12",
                  "triangle-nw",
                  112,
                  "112",
                  "triangle-nw-open",
                  212,
                  "212",
                  "triangle-nw-dot",
                  312,
                  "312",
                  "triangle-nw-open-dot",
                  13,
                  "13",
                  "pentagon",
                  113,
                  "113",
                  "pentagon-open",
                  213,
                  "213",
                  "pentagon-dot",
                  313,
                  "313",
                  "pentagon-open-dot",
                  14,
                  "14",
                  "hexagon",
                  114,
                  "114",
                  "hexagon-open",
                  214,
                  "214",
                  "hexagon-dot",
                  314,
                  "314",
                  "hexagon-open-dot",
                  15,
                  "15",
                  "hexagon2",
                  115,
                  "115",
                  "hexagon2-open",
                  215,
                  "215",
                  "hexagon2-dot",
                  315,
                  "315",
                  "hexagon2-open-dot",
                  16,
                  "16",
                  "octagon",
                  116,
                  "116",
                  "octagon-open",
                  216,
                  "216",
                  "octagon-dot",
                  316,
                  "316",
                  "octagon-open-dot",
                  17,
                  "17",
                  "star",
                  117,
                  "117",
                  "star-open",
                  217,
                  "217",
                  "star-dot",
                  317,
                  "317",
                  "star-open-dot",
                  18,
                  "18",
                  "hexagram",
                  118,
                  "118",
                  "hexagram-open",
                  218,
                  "218",
                  "hexagram-dot",
                  318,
                  "318",
                  "hexagram-open-dot",
                  19,
                  "19",
                  "star-triangle-up",
                  119,
                  "119",
                  "star-triangle-up-open",
                  219,
                  "219",
                  "star-triangle-up-dot",
                  319,
                  "319",
                  "star-triangle-up-open-dot",
                  20,
                  "20",
                  "star-triangle-down",
                  120,
                  "120",
                  "star-triangle-down-open",
                  220,
                  "220",
                  "star-triangle-down-dot",
                  320,
                  "320",
                  "star-triangle-down-open-dot",
                  21,
                  "21",
                  "star-square",
                  121,
                  "121",
                  "star-square-open",
                  221,
                  "221",
                  "star-square-dot",
                  321,
                  "321",
                  "star-square-open-dot",
                  22,
                  "22",
                  "star-diamond",
                  122,
                  "122",
                  "star-diamond-open",
                  222,
                  "222",
                  "star-diamond-dot",
                  322,
                  "322",
                  "star-diamond-open-dot",
                  23,
                  "23",
                  "diamond-tall",
                  123,
                  "123",
                  "diamond-tall-open",
                  223,
                  "223",
                  "diamond-tall-dot",
                  323,
                  "323",
                  "diamond-tall-open-dot",
                  24,
                  "24",
                  "diamond-wide",
                  124,
                  "124",
                  "diamond-wide-open",
                  224,
                  "224",
                  "diamond-wide-dot",
                  324,
                  "324",
                  "diamond-wide-open-dot",
                  25,
                  "25",
                  "hourglass",
                  125,
                  "125",
                  "hourglass-open",
                  26,
                  "26",
                  "bowtie",
                  126,
                  "126",
                  "bowtie-open",
                  27,
                  "27",
                  "circle-cross",
                  127,
                  "127",
                  "circle-cross-open",
                  28,
                  "28",
                  "circle-x",
                  128,
                  "128",
                  "circle-x-open",
                  29,
                  "29",
                  "square-cross",
                  129,
                  "129",
                  "square-cross-open",
                  30,
                  "30",
                  "square-x",
                  130,
                  "130",
                  "square-x-open",
                  31,
                  "31",
                  "diamond-cross",
                  131,
                  "131",
                  "diamond-cross-open",
                  32,
                  "32",
                  "diamond-x",
                  132,
                  "132",
                  "diamond-x-open",
                  33,
                  "33",
                  "cross-thin",
                  133,
                  "133",
                  "cross-thin-open",
                  34,
                  "34",
                  "x-thin",
                  134,
                  "134",
                  "x-thin-open",
                  35,
                  "35",
                  "asterisk",
                  135,
                  "135",
                  "asterisk-open",
                  36,
                  "36",
                  "hash",
                  136,
                  "136",
                  "hash-open",
                  236,
                  "236",
                  "hash-dot",
                  336,
                  "336",
                  "hash-open-dot",
                  37,
                  "37",
                  "y-up",
                  137,
                  "137",
                  "y-up-open",
                  38,
                  "38",
                  "y-down",
                  138,
                  "138",
                  "y-down-open",
                  39,
                  "39",
                  "y-left",
                  139,
                  "139",
                  "y-left-open",
                  40,
                  "40",
                  "y-right",
                  140,
                  "140",
                  "y-right-open",
                  41,
                  "41",
                  "line-ew",
                  141,
                  "141",
                  "line-ew-open",
                  42,
                  "42",
                  "line-ns",
                  142,
                  "142",
                  "line-ns-open",
                  43,
                  "43",
                  "line-ne",
                  143,
                  "143",
                  "line-ne-open",
                  44,
                  "44",
                  "line-nw",
                  144,
                  "144",
                  "line-nw-open",
                  45,
                  "45",
                  "arrow-up",
                  145,
                  "145",
                  "arrow-up-open",
                  46,
                  "46",
                  "arrow-down",
                  146,
                  "146",
                  "arrow-down-open",
                  47,
                  "47",
                  "arrow-left",
                  147,
                  "147",
                  "arrow-left-open",
                  48,
                  "48",
                  "arrow-right",
                  148,
                  "148",
                  "arrow-right-open",
                  49,
                  "49",
                  "arrow-bar-up",
                  149,
                  "149",
                  "arrow-bar-up-open",
                  50,
                  "50",
                  "arrow-bar-down",
                  150,
                  "150",
                  "arrow-bar-down-open",
                  51,
                  "51",
                  "arrow-bar-left",
                  151,
                  "151",
                  "arrow-bar-left-open",
                  52,
                  "52",
                  "arrow-bar-right",
                  152,
                  "152",
                  "arrow-bar-right-open",
                  53,
                  "53",
                  "arrow",
                  153,
                  "153",
                  "arrow-open",
                  54,
                  "54",
                  "arrow-wide",
                  154,
                  "154",
                  "arrow-wide-open"
                ],
                "default": "circle"
              }
            }
          ]
        },
        "symbolsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `symbol`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "metasrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "mode": {
      "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "type": "string",
          "pattern": "^(lines|markers|text)(\\+(lines|markers|text))*$"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "name": {
      "oneOf": [
        {
          "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "offsetgroup": {
      "oneOf": [
        {
          "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
          "type": "string",
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "opacity": {
      "oneOf": [
        {
          "description": "Sets the opacity of the trace.",
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "orientation": {
      "oneOf": [
        {
          "description": "Only relevant in the following cases: 1. when `scattermode` is set to *group*. 2. when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the stacking direction. With *v* (*h*), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.",
          "enum": [
            "v",
            "h"
          ]
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "selectedpoints": {
      "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
    },
    "showlegend": {
      "oneOf": [
        {
          "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "stackgaps": {
      "oneOf": [
        {
          "description": "Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With *infer zero* we insert a zero at these locations. With *interpolate* we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.",
          "enum": [
            "infer zero",
            "interpolate"
          ],
          "default": "infer zero"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "stackgroup": {
      "oneOf": [
        {
          "description": "Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is *h*). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using *tonexty* (*tonextx*) if `orientation` is *h* (*v*) and sets the default `mode` to *lines* irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
          "type": "string",
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "stream": {
      "type": "object",
      "properties": {
        "maxpoints": {
          "oneOf": [
            {
              "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "default": 500
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "token": {
          "oneOf": [
            {
              "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
              "type": "string",
              "pattern": ".*\\S.*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "text": {
      "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "textfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#444"
              }
            }
          ]
        },
        "colorsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "family": {
          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "pattern": ".*\\S.*$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": ".*\\S.*$"
              }
            }
          ]
        },
        "familysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `family`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lineposition": {
          "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                }
              ],
              "default": "none"
            },
            {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "enum": [
                      "none"
                    ]
                  },
                  {
                    "type": "string",
                    "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                  }
                ],
                "default": "none"
              }
            }
          ]
        },
        "linepositionsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": "none"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": "none"
              }
            }
          ]
        },
        "shadowsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "size": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "number",
              "minimum": 1
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 1
              }
            }
          ]
        },
        "sizesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "description": "Sets whether a font should be styled with a normal or italic face from its family.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "normal",
                "italic"
              ],
              "default": "normal"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "normal",
                  "italic"
                ],
                "default": "normal"
              }
            }
          ]
        },
        "stylesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `style`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textcase": {
          "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "normal",
                "word caps",
                "upper",
                "lower"
              ],
              "default": "normal"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "normal",
                  "word caps",
                  "upper",
                  "lower"
                ],
                "default": "normal"
              }
            }
          ]
        },
        "textcasesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "variant": {
          "description": "Sets the variant of the font.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "enum": [
                "normal",
                "small-caps",
                "all-small-caps",
                "all-petite-caps",
                "petite-caps",
                "unicase"
              ],
              "default": "normal"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "normal",
                  "small-caps",
                  "all-small-caps",
                  "all-petite-caps",
                  "petite-caps",
                  "unicase"
                ],
                "default": "normal"
              }
            }
          ]
        },
        "variantsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "weight": {
          "description": "Sets the weight (or boldness) of the font.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": "normal"
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": 1,
                "maximum": 1000,
                "default": "normal"
              }
            }
          ]
        },
        "weightsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "textposition": {
      "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "enum": [
            "top left",
            "top center",
            "top right",
            "middle left",
            "middle center",
            "middle right",
            "bottom left",
            "bottom center",
            "bottom right"
          ],
          "default": "middle center"
        },
        {
          "type": "array",
          "items": {
            "enum": [
              "top left",
              "top center",
              "top right",
              "middle left",
              "middle center",
              "middle right",
              "bottom left",
              "bottom center",
              "bottom right"
            ],
            "default": "middle center"
          }
        }
      ]
    },
    "textpositionsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `textposition`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "textsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `text`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "texttemplate": {
      "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. ",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "texttemplatesrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `texttemplate`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "uid": {
      "oneOf": [
        {
          "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "uirevision": {
      "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
    },
    "visible": {
      "oneOf": [
        {
          "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
          "enum": [
            true,
            false,
            "legendonly"
          ],
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "x": {
      "oneOf": [
        {
          "description": "Sets the x coordinates.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "x0": {
      "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
      "default": 0
    },
    "xaxis": {
      "oneOf": [
        {
          "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
          "type": "string",
          "pattern": "^x([2-9]|[1-9][0-9]+)?$",
          "default": "x"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xcalendar": {
      "oneOf": [
        {
          "description": "Sets the calendar system to use with `x` date data.",
          "enum": [
            "chinese",
            "coptic",
            "discworld",
            "ethiopian",
            "gregorian",
            "hebrew",
            "islamic",
            "jalali",
            "julian",
            "mayan",
            "nanakshahi",
            "nepali",
            "persian",
            "taiwan",
            "thai",
            "ummalqura"
          ],
          "default": "gregorian"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xhoverformat": {
      "oneOf": [
        {
          "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
          "type": "string",
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xperiod": {
      "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
      "default": 0
    },
    "xperiod0": {
      "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
    },
    "xperiodalignment": {
      "oneOf": [
        {
          "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
          "enum": [
            "start",
            "middle",
            "end"
          ],
          "default": "middle"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xsrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `x`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "y": {
      "oneOf": [
        {
          "description": "Sets the y coordinates.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "y0": {
      "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
      "default": 0
    },
    "yaxis": {
      "oneOf": [
        {
          "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
          "type": "string",
          "pattern": "^y([2-9]|[1-9][0-9]+)?$",
          "default": "y"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "ycalendar": {
      "oneOf": [
        {
          "description": "Sets the calendar system to use with `y` date data.",
          "enum": [
            "chinese",
            "coptic",
            "discworld",
            "ethiopian",
            "gregorian",
            "hebrew",
            "islamic",
            "jalali",
            "julian",
            "mayan",
            "nanakshahi",
            "nepali",
            "persian",
            "taiwan",
            "thai",
            "ummalqura"
          ],
          "default": "gregorian"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "yhoverformat": {
      "oneOf": [
        {
          "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
          "type": "string",
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "yperiod": {
      "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
      "default": 0
    },
    "yperiod0": {
      "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01."
    },
    "yperiodalignment": {
      "oneOf": [
        {
          "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
          "enum": [
            "start",
            "middle",
            "end"
          ],
          "default": "middle"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "ysrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `y`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "zorder": {
      "oneOf": [
        {
          "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
          "type": "integer",
          "default": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}