{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[-?\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a positive or negative number"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "type": {
      "oneOf": [
        {
          "const": "indicator"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "align": {
      "oneOf": [
        {
          "description": "Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered",
          "enum": [
            "left",
            "center",
            "right"
          ]
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdata": {
      "oneOf": [
        {
          "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdatasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
      "type": "string"
    },
    "delta": {
      "type": "object",
      "properties": {
        "decreasing": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the symbol to display for increasing value",
              "type": "string",
              "default": "\u25bc"
            }
          }
        },
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string",
              "default": "none"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "increasing": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "symbol": {
              "description": "Sets the symbol to display for increasing value",
              "type": "string",
              "default": "\u25b2"
            }
          }
        },
        "position": {
          "oneOf": [
            {
              "description": "Sets the position of delta with respect to the number.",
              "enum": [
                "top",
                "bottom",
                "left",
                "right"
              ],
              "default": "bottom"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "prefix": {
          "description": "Sets a prefix appearing before the delta.",
          "type": "string",
          "default": ""
        },
        "reference": {
          "oneOf": [
            {
              "description": "Sets the reference value to compute the delta. By default, it is set to the current value.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "relative": {
          "oneOf": [
            {
              "description": "Show relative change",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "suffix": {
          "description": "Sets a suffix appearing next to the delta.",
          "type": "string",
          "default": ""
        },
        "valueformat": {
          "description": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
          "type": "string"
        }
      }
    },
    "domain": {
      "type": "object",
      "properties": {
        "column": {
          "oneOf": [
            {
              "description": "If there is a layout grid, use the domain for this column in the grid for this indicator trace .",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "row": {
          "oneOf": [
            {
              "description": "If there is a layout grid, use the domain for this row in the grid for this indicator trace .",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the horizontal domain of this indicator trace (in plot fraction).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                1
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the vertical domain of this indicator trace (in plot fraction).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                1
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "gauge": {
      "type": "object",
      "properties": {
        "axis": {
          "type": "object",
          "properties": {
            "dtick": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "range": {
              "oneOf": [
                {
                  "description": "Sets the range of this axis.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/$defs/query-string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "minItems": 2,
                  "maxItems": 2
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickfont": {
              "type": "object",
              "properties": {
                "color": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/color",
                      "default": "#444"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "family": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                      "type": "string",
                      "pattern": ".*\\S.*$"
                    }
                  ]
                },
                "lineposition": {
                  "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                "shadow": {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                "size": {
                  "oneOf": [
                    {
                      "type": "number",
                      "minimum": 1
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "style": {
                  "oneOf": [
                    {
                      "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                      "enum": [
                        "normal",
                        "italic"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "textcase": {
                  "oneOf": [
                    {
                      "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                      "enum": [
                        "normal",
                        "word caps",
                        "upper",
                        "lower"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "variant": {
                  "oneOf": [
                    {
                      "description": "Sets the variant of the font.",
                      "enum": [
                        "normal",
                        "small-caps",
                        "all-small-caps",
                        "all-petite-caps",
                        "petite-caps",
                        "unicase"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "weight": {
                  "oneOf": [
                    {
                      "description": "Sets the weight (or boldness) of the font.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1000,
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                }
              }
            },
            "tickformat": {
              "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
              "type": "string",
              "default": ""
            },
            "tickformatstops": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "object",
                  "properties": {
                    "tickformatstop": {
                      "type": "object",
                      "properties": {
                        "dtickrange": {
                          "oneOf": [
                            {
                              "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/$defs/query-string"
                                  },
                                  {}
                                ]
                              },
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "$ref": "#/$defs/query-string"
                            }
                          ]
                        },
                        "enabled": {
                          "oneOf": [
                            {
                              "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
                              "type": "boolean",
                              "default": true
                            },
                            {
                              "$ref": "#/$defs/query-string"
                            }
                          ]
                        },
                        "name": {
                          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
                          "type": "string"
                        },
                        "templateitemname": {
                          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
                          "type": "string"
                        },
                        "value": {
                          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                }
              }
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "tickprefix": {
              "description": "Sets a tick label prefix.",
              "type": "string",
              "default": ""
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "description": "Sets a tick label suffix.",
              "type": "string",
              "default": ""
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
              "type": "string"
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
              "type": "string"
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "visible": {
              "oneOf": [
                {
                  "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "bar": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "line": {
              "type": "object",
              "properties": {
                "color": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/color",
                      "default": "#444"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "width": {
                  "oneOf": [
                    {
                      "description": "Sets the width (in px) of the line enclosing each sector.",
                      "type": "number",
                      "minimum": 0,
                      "default": 0
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                }
              }
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the bar as a fraction of the total thickness of the gauge.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "borderwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the border enclosing the gauge.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "shape": {
          "oneOf": [
            {
              "description": "Set the shape of the gauge",
              "enum": [
                "angular",
                "bullet"
              ],
              "default": "angular"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "steps": {
          "type": "object",
          "properties": {
            "items": {
              "type": "object",
              "properties": {
                "step": {
                  "type": "object",
                  "properties": {
                    "color": {
                      "oneOf": [
                        {
                          "$ref": "#/$defs/color",
                          "default": "#444"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "line": {
                      "type": "object",
                      "properties": {
                        "color": {
                          "oneOf": [
                            {
                              "$ref": "#/$defs/color",
                              "default": "#444"
                            },
                            {
                              "$ref": "#/$defs/query-string"
                            }
                          ]
                        },
                        "width": {
                          "oneOf": [
                            {
                              "description": "Sets the width (in px) of the line enclosing each sector.",
                              "type": "number",
                              "minimum": 0,
                              "default": 0
                            },
                            {
                              "$ref": "#/$defs/query-string"
                            }
                          ]
                        }
                      }
                    },
                    "name": {
                      "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
                      "type": "string"
                    },
                    "range": {
                      "oneOf": [
                        {
                          "description": "Sets the range of this axis.",
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/$defs/query-string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "minItems": 2,
                          "maxItems": 2
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "templateitemname": {
                      "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
                      "type": "string"
                    },
                    "thickness": {
                      "oneOf": [
                        {
                          "description": "Sets the thickness of the bar as a fraction of the total thickness of the gauge.",
                          "type": "number",
                          "minimum": 0,
                          "maximum": 1,
                          "default": 1
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "threshold": {
          "type": "object",
          "properties": {
            "line": {
              "type": "object",
              "properties": {
                "color": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/color",
                      "default": "#444"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "width": {
                  "oneOf": [
                    {
                      "description": "Sets the width (in px) of the threshold line.",
                      "type": "number",
                      "minimum": 0,
                      "default": 1
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                }
              }
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the threshold line as a fraction of the thickness of the gauge.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.85
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "value": {
              "oneOf": [
                {
                  "description": "Sets a treshold value drawn as a line.",
                  "type": "number",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        }
      }
    },
    "ids": {
      "oneOf": [
        {
          "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "idssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
      "type": "string"
    },
    "legend": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
          "type": "string",
          "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
          "default": "legend"
        }
      ]
    },
    "legendgrouptitle": {
      "type": "object",
      "properties": {
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string",
              "default": "none"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the title of the legend group.",
          "type": "string",
          "default": ""
        }
      }
    },
    "legendrank": {
      "oneOf": [
        {
          "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
          "type": "number",
          "default": 1000
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendwidth": {
      "oneOf": [
        {
          "description": "Sets the width (in px or fraction) of the legend for this trace.",
          "type": "number",
          "minimum": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "metasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
      "type": "string"
    },
    "mode": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "description": "Determines how the value is displayed on the graph. `number` displays the value numerically in text. `delta` displays the difference to a reference value in text. Finally, `gauge` displays the value graphically on an axis.",
          "type": "string",
          "pattern": "^(number|delta|gauge)(\\+(number|delta|gauge))*$",
          "default": "number"
        }
      ]
    },
    "name": {
      "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
      "type": "string"
    },
    "number": {
      "type": "object",
      "properties": {
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string",
              "default": "none"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "prefix": {
          "description": "Sets a prefix appearing before the number.",
          "type": "string",
          "default": ""
        },
        "suffix": {
          "description": "Sets a suffix appearing next to the number.",
          "type": "string",
          "default": ""
        },
        "valueformat": {
          "description": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
          "type": "string",
          "default": ""
        }
      }
    },
    "stream": {
      "type": "object",
      "properties": {
        "maxpoints": {
          "oneOf": [
            {
              "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "default": 500
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "token": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        }
      }
    },
    "title": {
      "type": "object",
      "properties": {
        "align": {
          "oneOf": [
            {
              "description": "Sets the horizontal alignment of the title. It defaults to `center` except for bullet charts for which it defaults to right.",
              "enum": [
                "left",
                "center",
                "right"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string",
              "default": "none"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the title of this indicator.",
          "type": "string"
        }
      }
    },
    "uid": {
      "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
      "type": "string"
    },
    "uirevision": {
      "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
    },
    "value": {
      "oneOf": [
        {
          "description": "Sets the number to be displayed.",
          "type": "number"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "visible": {
      "oneOf": [
        {
          "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
          "enum": [
            true,
            false,
            "legendonly"
          ],
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}