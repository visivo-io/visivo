{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/layout/schema",
  "description": "A schema to validate plotly layout",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    }
  },
  "properties": {
    "activeselection": {
      "type": "object",
      "properties": {
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the active selection.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.5
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "activeshape": {
      "type": "object",
      "properties": {
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of the active shape.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.5
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "annotations": {},
    "autosize": {
      "oneOf": [
        {
          "description": "Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.",
          "type": "boolean",
          "default": false
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "autotypenumbers": {
      "oneOf": [
        {
          "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.",
          "enum": [
            "convert types",
            "strict"
          ],
          "default": "convert types"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "calendar": {
      "oneOf": [
        {
          "description": "Sets the default calendar system to use for interpreting and displaying dates throughout the plot.",
          "enum": [
            "chinese",
            "coptic",
            "discworld",
            "ethiopian",
            "gregorian",
            "hebrew",
            "islamic",
            "jalali",
            "julian",
            "mayan",
            "nanakshahi",
            "nepali",
            "persian",
            "taiwan",
            "thai",
            "ummalqura"
          ],
          "default": "gregorian"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "clickmode": {
      "description": "Determines the mode of single click interactions. *event* is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes *lasso* and *select*, but with no event data attached (kept for compatibility reasons). The *select* flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. *select* with `hovermode`: *x* can be confusing, consider explicitly setting `hovermode`: *closest* when using this feature. Selection events are sent accordingly as long as *event* flag is set as well. When the *event* flag is missing, `plotly_click` and `plotly_selected` events are not fired.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "type": "string",
          "pattern": "^(event|select)(\\+(event|select))*$"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ],
      "default": "event"
    },
    "coloraxis": {
      "type": "object",
      "properties": {
        "autocolorscale": {
          "oneOf": [
            {
              "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cauto": {
          "oneOf": [
            {
              "description": "Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmax": {
          "oneOf": [
            {
              "description": "Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmid": {
          "oneOf": [
            {
              "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "cmin": {
          "oneOf": [
            {
              "description": "Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.",
              "type": "number",
              "default": null
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "colorscale": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "colorscale": {
      "type": "object",
      "properties": {
        "diverging": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sequential": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sequentialminus": {
          "oneOf": [
            {
              "$ref": "#/$defs/colorscale",
              "default": [
                [
                  0,
                  "rgb(5,10,172)"
                ],
                [
                  0.35,
                  "rgb(40,60,190)"
                ],
                [
                  0.5,
                  "rgb(70,100,245)"
                ],
                [
                  0.6,
                  "rgb(90,120,245)"
                ],
                [
                  0.7,
                  "rgb(106,137,247)"
                ],
                [
                  1,
                  "rgb(220,220,220)"
                ]
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "colorway": {
      "oneOf": [
        {
          "description": "Sets the default trace colors.",
          "type": "array",
          "items": {
            "$ref": "#/$defs/color",
            "default": "#444"
          },
          "default": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#d62728",
            "#9467bd",
            "#8c564b",
            "#e377c2",
            "#7f7f7f",
            "#bcbd22",
            "#17becf"
          ]
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "computed": {
      "description": "Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in *full-json* mode."
    },
    "datarevision": {
      "description": "If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data."
    },
    "dragmode": {
      "oneOf": [
        {
          "description": "Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.",
          "enum": [
            "zoom",
            "pan",
            "select",
            "lasso",
            "drawclosedpath",
            "drawopenpath",
            "drawline",
            "drawrect",
            "drawcircle",
            "orbit",
            "turntable",
            false
          ],
          "default": "zoom"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "editrevision": {
      "description": "Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`."
    },
    "editType": null,
    "font": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "family": {
          "oneOf": [
            {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "type": "string",
              "default": "\"Open Sans\", verdana, arial, sans-serif",
              "pattern": ".*\\S.*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lineposition": {
          "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(under|over|through)(\\+(under|over|through))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": "none"
        },
        "shadow": {
          "oneOf": [
            {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string",
              "default": "none"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "size": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 1,
              "default": 12
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "oneOf": [
            {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "enum": [
                "normal",
                "italic"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textcase": {
          "oneOf": [
            {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "enum": [
                "normal",
                "word caps",
                "upper",
                "lower"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "variant": {
          "oneOf": [
            {
              "description": "Sets the variant of the font.",
              "enum": [
                "normal",
                "small-caps",
                "all-small-caps",
                "all-petite-caps",
                "petite-caps",
                "unicase"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "weight": {
          "oneOf": [
            {
              "description": "Sets the weight (or boldness) of the font.",
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "geo": {
      "type": "object",
      "properties": {
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coastlinecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coastlinewidth": {
          "oneOf": [
            {
              "description": "Sets the coastline stroke width (in px).",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "countrycolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "countrywidth": {
          "oneOf": [
            {
              "description": "Sets line width (in px) of the country boundaries.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fitbounds": {
          "oneOf": [
            {
              "description": "Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lataxis.range` getting auto-filled. If *locations*, only the trace's visible locations are considered in the `fitbounds` computations. If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to *false*.",
              "enum": [
                false,
                "locations",
                "geojson"
              ],
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "framecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "framewidth": {
          "oneOf": [
            {
              "description": "Sets the stroke width (in px) of the frame.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "lakecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "landcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "oceancolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "resolution": {
          "oneOf": [
            {
              "description": "Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.",
              "enum": [
                110,
                50
              ],
              "default": 110
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "rivercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "riverwidth": {
          "oneOf": [
            {
              "description": "Sets the stroke width (in px) of the rivers.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scope": {
          "oneOf": [
            {
              "description": "Set the scope of the map.",
              "enum": [
                "africa",
                "asia",
                "europe",
                "north america",
                "south america",
                "usa",
                "world"
              ],
              "default": "world"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showcoastlines": {
          "oneOf": [
            {
              "description": "Sets whether or not the coastlines are drawn.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showcountries": {
          "oneOf": [
            {
              "description": "Sets whether or not country boundaries are drawn.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showframe": {
          "oneOf": [
            {
              "description": "Sets whether or not a frame is drawn around the map.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlakes": {
          "oneOf": [
            {
              "description": "Sets whether or not lakes are drawn.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showland": {
          "oneOf": [
            {
              "description": "Sets whether or not land masses are filled in color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showocean": {
          "oneOf": [
            {
              "description": "Sets whether or not oceans are filled in color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showrivers": {
          "oneOf": [
            {
              "description": "Sets whether or not rivers are drawn.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showsubunits": {
          "oneOf": [
            {
              "description": "Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "subunitcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "subunitwidth": {
          "oneOf": [
            {
              "description": "Sets the stroke width (in px) of the subunits boundaries.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes in the view (projection and center). Defaults to `layout.uirevision`."
        },
        "visible": {
          "oneOf": [
            {
              "description": "Sets the default visibility of the base layers.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "grid": {
      "type": "object",
      "properties": {
        "columns": {
          "oneOf": [
            {
              "description": "The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.",
              "type": "integer",
              "minimum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "pattern": {
          "oneOf": [
            {
              "description": "If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: *coupled* gives one x axis per column and one y axis per row. *independent* uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.",
              "enum": [
                "independent",
                "coupled"
              ],
              "default": "coupled"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "roworder": {
          "oneOf": [
            {
              "description": "Is the first row the top or the bottom? Note that columns are always enumerated from left to right.",
              "enum": [
                "top to bottom",
                "bottom to top"
              ],
              "default": "top to bottom"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "rows": {
          "oneOf": [
            {
              "description": "The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.",
              "type": "integer",
              "minimum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "subplots": {
          "type": "object",
          "properties": {
            "items": {
              "oneOf": [
                {
                  "enum": [
                    "/^x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?$/",
                    ""
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "xaxes": {
          "type": "object",
          "properties": {
            "items": {
              "oneOf": [
                {
                  "enum": [
                    "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                    ""
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "xgap": {
          "oneOf": [
            {
              "description": "Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.",
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xside": {
          "oneOf": [
            {
              "description": "Sets where the x axis labels and titles go. *bottom* means the very bottom of the grid. *bottom plot* is the lowest plot that each x axis is used in. *top* and *top plot* are similar.",
              "enum": [
                "bottom",
                "bottom plot",
                "top plot",
                "top"
              ],
              "default": "bottom plot"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yaxes": {
          "type": "object",
          "properties": {
            "items": {
              "oneOf": [
                {
                  "enum": [
                    "/^y([2-9]|[1-9][0-9]+)?( domain)?$/",
                    ""
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "ygap": {
          "oneOf": [
            {
              "description": "Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.",
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yside": {
          "oneOf": [
            {
              "description": "Sets where the y axis labels and titles go. *left* means the very left edge of the grid. *left plot* is the leftmost plot that each y axis is used in. *right* and *right plot* are similar.",
              "enum": [
                "left",
                "left plot",
                "right plot",
                "right"
              ],
              "default": "left plot"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "height": {
      "oneOf": [
        {
          "description": "Sets the plot's height (in px).",
          "type": "number",
          "minimum": 10,
          "default": 450
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hidesources": {
      "oneOf": [
        {
          "description": "Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).",
          "type": "boolean",
          "default": false
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverdistance": {
      "oneOf": [
        {
          "description": "Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.",
          "type": "integer",
          "minimum": -1,
          "default": 20
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverlabel": {
      "type": "object",
      "properties": {
        "align": {
          "oneOf": [
            {
              "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
              "enum": [
                "left",
                "right",
                "auto"
              ],
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "namelength": {
          "oneOf": [
            {
              "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
              "type": "integer",
              "minimum": -1,
              "default": 15
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "hovermode": {
      "oneOf": [
        {
          "description": "Determines the mode of hover interactions. If *closest*, a single hoverlabel will appear for the *closest* point within the `hoverdistance`. If *x* (or *y*), multiple hoverlabels will appear for multiple points at the *closest* x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If *x unified* (or *y unified*), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.",
          "enum": [
            "x",
            "y",
            "closest",
            false,
            "x unified",
            "y unified"
          ],
          "default": "closest"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoversubplots": {
      "oneOf": [
        {
          "description": "Determines expansion of hover effects to other subplots If *single* just the axis pair of the primary point is included without overlaying subplots. If *overlaying* all subplots using the main axis and occupying the same space are included. If *axis*, also include stacked subplots using the same axis when `hovermode` is set to *x*, *x unified*, *y* or *y unified*.",
          "enum": [
            "single",
            "overlaying",
            "axis"
          ],
          "default": "overlaying"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "images": {},
    "legend": {
      "type": "object",
      "properties": {
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "borderwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the border enclosing the legend.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "entrywidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend. Use 0 to size the entry based on the text width, when `entrywidthmode` is set to *pixels*.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "entrywidthmode": {
          "oneOf": [
            {
              "description": "Determines what entrywidth means.",
              "enum": [
                "fraction",
                "pixels"
              ],
              "default": "pixels"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "groupclick": {
          "oneOf": [
            {
              "description": "Determines the behavior on legend group item click. *toggleitem* toggles the visibility of the individual item clicked on the graph. *togglegroup* toggles the visibility of all items in the same legendgroup as the item clicked on the graph.",
              "enum": [
                "toggleitem",
                "togglegroup"
              ],
              "default": "togglegroup"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "indentation": {
          "oneOf": [
            {
              "description": "Sets the indentation (in px) of the legend entries.",
              "type": "number",
              "minimum": -15,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "itemclick": {
          "oneOf": [
            {
              "description": "Determines the behavior on legend item click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item click interactions.",
              "enum": [
                "toggle",
                "toggleothers",
                false
              ],
              "default": "toggle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "itemdoubleclick": {
          "oneOf": [
            {
              "description": "Determines the behavior on legend item double-click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item double-click interactions.",
              "enum": [
                "toggle",
                "toggleothers",
                false
              ],
              "default": "toggleothers"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "itemsizing": {
          "oneOf": [
            {
              "description": "Determines if the legend items symbols scale with their corresponding *trace* attributes or remain *constant* independent of the symbol size on the graph.",
              "enum": [
                "trace",
                "constant"
              ],
              "default": "trace"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "itemwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the legend item symbols (the part other than the title.text).",
              "type": "number",
              "minimum": 30,
              "default": 30
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "maxheight": {
          "oneOf": [
            {
              "description": "Sets the max height (in px) of the legend, or max height ratio (reference height * ratio) if less than one. Default value is: 0.5 for horizontal legends; 1 for vertical legends. The minimum allowed height is 30px. For a ratio of 0.5, the legend will take up to 50% of the reference height before displaying a scrollbar. The reference height is the full layout height except for vertically oriented legends with a `yref` of `\"paper\"`, where the reference height is the plot height.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the legend.",
              "enum": [
                "v",
                "h"
              ],
              "default": "v"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tracegroupgap": {
          "oneOf": [
            {
              "description": "Sets the amount of vertical space (in px) between legend groups.",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "traceorder": {
          "description": "Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "normal"
              ]
            },
            {
              "type": "string",
              "pattern": "^(reversed|grouped)(\\+(reversed|grouped))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`."
        },
        "valign": {
          "oneOf": [
            {
              "description": "Sets the vertical alignment of the symbols with respect to their associated text.",
              "enum": [
                "top",
                "middle",
                "bottom"
              ],
              "default": "middle"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this legend is visible.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x position with respect to `xref` (in normalized coordinates) of the legend. When `xref` is *paper*, defaults to *1.02* for vertical legends and defaults to *0* for horizontal legends. When `xref` is *container*, defaults to *1* for vertical legends and defaults to *0* for horizontal legends. Must be between *0* and *1* if `xref` is *container*. and between *-2* and *3* if `xref` is *paper*.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xanchor": {
          "oneOf": [
            {
              "description": "Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend. Value *auto* anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.",
              "enum": [
                "auto",
                "left",
                "center",
                "right"
              ],
              "default": "left"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xref": {
          "oneOf": [
            {
              "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
              "enum": [
                "container",
                "paper"
              ],
              "default": "paper"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y position with respect to `yref` (in normalized coordinates) of the legend. When `yref` is *paper*, defaults to *1* for vertical legends, defaults to *-0.1* for horizontal legends on graphs w/o range sliders and defaults to *1.1* for horizontal legends on graph with one or multiple range sliders. When `yref` is *container*, defaults to *1*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yanchor": {
          "oneOf": [
            {
              "description": "Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend. Value *auto* anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.",
              "enum": [
                "auto",
                "top",
                "middle",
                "bottom"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yref": {
          "oneOf": [
            {
              "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
              "enum": [
                "container",
                "paper"
              ],
              "default": "paper"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "map": {
      "type": "object",
      "properties": {
        "bearing": {
          "oneOf": [
            {
              "description": "Sets the bearing angle of the map in degrees counter-clockwise from North (map.bearing).",
              "type": "number",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "pitch": {
          "oneOf": [
            {
              "description": "Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map) (map.pitch).",
              "type": "number",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "description": "Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.map.layers`.  These layers can be defined either explicitly as a Map Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes or by using a custom style URL  Map Style objects are of the form described in the MapLibre GL JS documentation available at https://maplibre.org/maplibre-style-spec/  The built-in plotly.js styles objects are: basic, carto-darkmatter, carto-darkmatter-nolabels, carto-positron, carto-positron-nolabels, carto-voyager, carto-voyager-nolabels, dark, light, open-street-map, outdoors, satellite, satellite-streets, streets, white-bg.",
          "default": "basic"
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`."
        },
        "zoom": {
          "oneOf": [
            {
              "description": "Sets the zoom level of the map (map.zoom).",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "mapbox": {
      "type": "object",
      "properties": {
        "accesstoken": {
          "oneOf": [
            {
              "description": "Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.",
              "type": "string",
              "pattern": ".*\\S.*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bearing": {
          "oneOf": [
            {
              "description": "Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).",
              "type": "number",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "pitch": {
          "oneOf": [
            {
              "description": "Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map) (mapbox.pitch).",
              "type": "number",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "description": "Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`.  These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token  Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option.  Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec  The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg  The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets  Mapbox style URLs are of the form: mapbox://mapbox.mapbox-<name>-<version>",
          "default": "basic"
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`."
        },
        "zoom": {
          "oneOf": [
            {
              "description": "Sets the zoom level of the map (mapbox.zoom).",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "margin": {
      "type": "object",
      "properties": {
        "autoexpand": {
          "oneOf": [
            {
              "description": "Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "b": {
          "oneOf": [
            {
              "description": "Sets the bottom margin (in px).",
              "type": "number",
              "minimum": 0,
              "default": 80
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "l": {
          "oneOf": [
            {
              "description": "Sets the left margin (in px).",
              "type": "number",
              "minimum": 0,
              "default": 80
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "pad": {
          "oneOf": [
            {
              "description": "Sets the amount of padding (in px) between the plotting area and the axis lines",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "r": {
          "oneOf": [
            {
              "description": "Sets the right margin (in px).",
              "type": "number",
              "minimum": 0,
              "default": 80
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "t": {
          "oneOf": [
            {
              "description": "Sets the top margin (in px).",
              "type": "number",
              "minimum": 0,
              "default": 100
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "meta": {
      "description": "Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.",
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {},
        {
          "type": "array",
          "items": {}
        }
      ]
    },
    "metasrc": {
      "oneOf": [
        {
          "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "minreducedheight": {
      "oneOf": [
        {
          "description": "Minimum height of the plot with margin.automargin applied (in px)",
          "type": "number",
          "minimum": 2,
          "default": 64
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "minreducedwidth": {
      "oneOf": [
        {
          "description": "Minimum width of the plot with margin.automargin applied (in px)",
          "type": "number",
          "minimum": 2,
          "default": 64
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "modebar": {
      "type": "object",
      "properties": {
        "activecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "add": {
          "description": "Determines which predefined modebar buttons to add. Please note that these buttons will only be shown if they are compatible with all trace types used in a graph. Similar to `config.modeBarButtonsToAdd` option. This may include *v1hovermode*, *hoverclosest*, *hovercompare*, *togglehover*, *togglespikelines*, *drawline*, *drawopenpath*, *drawclosedpath*, *drawcircle*, *drawrect*, *eraseshape*.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "addsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `add`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "orientation": {
          "oneOf": [
            {
              "description": "Sets the orientation of the modebar.",
              "enum": [
                "v",
                "h"
              ],
              "default": "h"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "remove": {
          "description": "Determines which predefined modebar buttons to remove. Similar to `config.modeBarButtonsToRemove` option. This may include *autoScale2d*, *autoscale*, *editInChartStudio*, *editinchartstudio*, *hoverCompareCartesian*, *hovercompare*, *lasso*, *lasso2d*, *orbitRotation*, *orbitrotation*, *pan*, *pan2d*, *pan3d*, *reset*, *resetCameraDefault3d*, *resetCameraLastSave3d*, *resetGeo*, *resetSankeyGroup*, *resetScale2d*, *resetViewMap*, *resetViewMapbox*, *resetViews*, *resetcameradefault*, *resetcameralastsave*, *resetsankeygroup*, *resetscale*, *resetview*, *resetviews*, *select*, *select2d*, *sendDataToCloud*, *senddatatocloud*, *tableRotation*, *tablerotation*, *toImage*, *toggleHover*, *toggleSpikelines*, *togglehover*, *togglespikelines*, *toimage*, *zoom*, *zoom2d*, *zoom3d*, *zoomIn2d*, *zoomInGeo*, *zoomInMap*, *zoomInMapbox*, *zoomOut2d*, *zoomOutGeo*, *zoomOutMap*, *zoomOutMapbox*, *zoomin*, *zoomout*.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "string",
              "default": ""
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "default": ""
              }
            }
          ]
        },
        "removesrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `remove`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes related to the modebar, including `hovermode`, `dragmode`, and `showspikes` at both the root level and inside subplots. Defaults to `layout.uirevision`."
        }
      }
    },
    "newselection": {
      "type": "object",
      "properties": {
        "mode": {
          "oneOf": [
            {
              "description": "Describes how a new selection is created. If `immediate`, a new selection is created after first mouse up. If `gradual`, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.",
              "enum": [
                "immediate",
                "gradual"
              ],
              "default": "immediate"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "newshape": {
      "type": "object",
      "properties": {
        "drawdirection": {
          "oneOf": [
            {
              "description": "When `dragmode` is set to *drawrect*, *drawline* or *drawcircle* this limits the drag to be horizontal, vertical or diagonal. Using *diagonal* there is no limit e.g. in drawing lines in any direction. *ortho* limits the draw to be either horizontal or vertical. *horizontal* allows horizontal extend. *vertical* allows vertical extend.",
              "enum": [
                "ortho",
                "horizontal",
                "vertical",
                "diagonal"
              ],
              "default": "diagonal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fillrule": {
          "oneOf": [
            {
              "description": "Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule",
              "enum": [
                "evenodd",
                "nonzero"
              ],
              "default": "evenodd"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "layer": {
          "oneOf": [
            {
              "description": "Specifies whether new shapes are drawn below gridlines (*below*), between gridlines and traces (*between*) or above traces (*above*).",
              "enum": [
                "below",
                "above",
                "between"
              ],
              "default": "above"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legend": {
          "oneOf": [
            {
              "description": "Sets the reference to a legend to show new shape in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
              "type": "string",
              "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
              "default": "legend"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendgroup": {
          "oneOf": [
            {
              "description": "Sets the legend group for new shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendrank": {
          "oneOf": [
            {
              "description": "Sets the legend rank for new shape. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
              "type": "number",
              "default": 1000
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "legendwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px or fraction) of the legend for new shape.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "name": {
          "oneOf": [
            {
              "description": "Sets new shape name. The name appears as the legend item.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacity": {
          "oneOf": [
            {
              "description": "Sets the opacity of new shapes.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showlegend": {
          "oneOf": [
            {
              "description": "Determines whether or not new shape is shown in the legend.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not new shape is visible. If *legendonly*, the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
              "enum": [
                true,
                false,
                "legendonly"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "paper_bgcolor": {
      "oneOf": [
        {
          "$ref": "#/$defs/color",
          "default": "#444"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "plot_bgcolor": {
      "oneOf": [
        {
          "$ref": "#/$defs/color",
          "default": "#444"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "polar": {
      "type": "object",
      "properties": {
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "gridshape": {
          "oneOf": [
            {
              "description": "Determines if the radial axis grid lines and angular axis line are drawn as *circular* sectors or as *linear* (polygon) sectors. Has an effect only when the angular axis has `type` *category*. Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is *circular* (so that radial axis scale is the same as the data scale).",
              "enum": [
                "circular",
                "linear"
              ],
              "default": "circular"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hole": {
          "oneOf": [
            {
              "description": "Sets the fraction of the radius to cut out of the polar subplot.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sector": {
          "oneOf": [
            {
              "description": "Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with *0* corresponding to rightmost limit of the polar subplot.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                360
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`."
        }
      }
    },
    "scene": {
      "type": "object",
      "properties": {
        "aspectmode": {
          "oneOf": [
            {
              "description": "If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.",
              "enum": [
                "auto",
                "cube",
                "data",
                "manual"
              ],
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dragmode": {
          "oneOf": [
            {
              "description": "Determines the mode of drag interactions for this scene.",
              "enum": [
                "orbit",
                "turntable",
                "zoom",
                "pan",
                false
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hovermode": {
          "oneOf": [
            {
              "description": "Determines the mode of hover interactions for this scene.",
              "enum": [
                "closest",
                false
              ],
              "default": "closest"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`."
        }
      }
    },
    "selectdirection": {
      "oneOf": [
        {
          "description": "When `dragmode` is set to *select*, this limits the selection of the drag to horizontal, vertical or diagonal. *h* only allows horizontal selection, *v* only vertical, *d* only diagonal and *any* sets no limit.",
          "enum": [
            "h",
            "v",
            "d",
            "any"
          ],
          "default": "any"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "selectionrevision": {
      "description": "Controls persistence of user-driven changes in selected points from all traces."
    },
    "selections": {},
    "separators": {
      "oneOf": [
        {
          "description": "Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands. In English locales, dflt is *.,* but other locales may alter this default.",
          "type": "string"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "shapes": {},
    "showlegend": {
      "oneOf": [
        {
          "description": "Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.",
          "type": "boolean"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "sliders": {},
    "smith": {
      "type": "object",
      "properties": {
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "spikedistance": {
      "oneOf": [
        {
          "description": "Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.",
          "type": "integer",
          "minimum": -1,
          "default": -1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "template": {
      "description": "Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace.  Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`."
    },
    "ternary": {
      "type": "object",
      "properties": {
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "sum": {
          "oneOf": [
            {
              "description": "The number each triplet should sum to, and the maximum range of each axis",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes in axis `min` and `title`, if not overridden in the individual axes. Defaults to `layout.uirevision`."
        }
      }
    },
    "title": {
      "type": "object",
      "properties": {
        "automargin": {
          "oneOf": [
            {
              "description": "Determines whether the title can automatically push the figure margins. If `yref='paper'` then the margin will expand to ensure that the title doesn\u2019t overlap with the edges of the container. If `yref='container'` then the margins will ensure that the title doesn\u2019t overlap with the plot area, tick labels, and axis titles. If `automargin=true` and the margins need to be expanded, then y will be set to a default 1 and yanchor will be set to an appropriate default to ensure that minimal margin space is needed. Note that when `yref='paper'`, only 1 or 0 are allowed y values. Invalid values will be reset to the default 1.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "text": {
          "oneOf": [
            {
              "description": "Sets the plot's title.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the x position with respect to `xref` in normalized coordinates from *0* (left) to *1* (right).",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.5
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xanchor": {
          "oneOf": [
            {
              "description": "Sets the title's horizontal alignment with respect to its x position. *left* means that the title starts at x, *right* means that the title ends at x and *center* means that the title's center is at x. *auto* divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.",
              "enum": [
                "auto",
                "left",
                "center",
                "right"
              ],
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "xref": {
          "oneOf": [
            {
              "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
              "enum": [
                "container",
                "paper"
              ],
              "default": "container"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the y position with respect to `yref` in normalized coordinates from *0* (bottom) to *1* (top). *auto* places the baseline of the title onto the vertical center of the top margin.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yanchor": {
          "oneOf": [
            {
              "description": "Sets the title's vertical alignment with respect to its y position. *top* means that the title's cap line is at y, *bottom* means that the title's baseline is at y and *middle* means that the title's midline is at y. *auto* divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.",
              "enum": [
                "auto",
                "top",
                "middle",
                "bottom"
              ],
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "yref": {
          "oneOf": [
            {
              "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
              "enum": [
                "container",
                "paper"
              ],
              "default": "container"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "transition": {
      "type": "object",
      "properties": {
        "duration": {
          "oneOf": [
            {
              "description": "The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.",
              "type": "number",
              "minimum": 0,
              "default": 500
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "easing": {
          "oneOf": [
            {
              "description": "The easing function used for the transition",
              "enum": [
                "linear",
                "quad",
                "cubic",
                "sin",
                "exp",
                "circle",
                "elastic",
                "back",
                "bounce",
                "linear-in",
                "quad-in",
                "cubic-in",
                "sin-in",
                "exp-in",
                "circle-in",
                "elastic-in",
                "back-in",
                "bounce-in",
                "linear-out",
                "quad-out",
                "cubic-out",
                "sin-out",
                "exp-out",
                "circle-out",
                "elastic-out",
                "back-out",
                "bounce-out",
                "linear-in-out",
                "quad-in-out",
                "cubic-in-out",
                "sin-in-out",
                "exp-in-out",
                "circle-in-out",
                "elastic-in-out",
                "back-in-out",
                "bounce-in-out"
              ],
              "default": "cubic-in-out"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ordering": {
          "oneOf": [
            {
              "description": "Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.",
              "enum": [
                "layout first",
                "traces first"
              ],
              "default": "layout first"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "uirevision": {
      "description": "Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision=*time*` and `yaxis.uirevision=*cost*`. Then if only the y data is changed, you can update `yaxis.uirevision=*quantity*` and the y axis range will reset but the x axis range will retain any user-driven zoom."
    },
    "uniformtext": {
      "type": "object",
      "properties": {
        "minsize": {
          "oneOf": [
            {
              "description": "Sets the minimum text size between traces of the same type.",
              "type": "number",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mode": {
          "oneOf": [
            {
              "description": "Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using *hide* option hides the text; and using *show* option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.",
              "enum": [
                false,
                "hide",
                "show"
              ],
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "updatemenus": {},
    "width": {
      "oneOf": [
        {
          "description": "Sets the plot's width (in px).",
          "type": "number",
          "minimum": 10,
          "default": 700
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xaxis": {
      "type": "object",
      "properties": {
        "anchor": {
          "oneOf": [
            {
              "description": "If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.",
              "enum": [
                "free",
                "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "automargin": {
          "description": "Determines whether long tick labels automatically grow the figure margins.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            {
              "type": "string",
              "pattern": "^(height|width|left|right|top|bottom)(\\+(height|width|left|right|top|bottom))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": false
        },
        "autorange": {
          "oneOf": [
            {
              "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.",
              "enum": [
                true,
                false,
                "reversed",
                "min reversed",
                "max reversed",
                "min",
                "max"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autotickangles": {
          "type": "object",
          "properties": {
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "autotypenumbers": {
          "oneOf": [
            {
              "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
              "enum": [
                "convert types",
                "strict"
              ],
              "default": "convert types"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "calendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "categoryarray": {
          "oneOf": [
            {
              "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "categoryarraysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `categoryarray`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "categoryorder": {
          "oneOf": [
            {
              "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.",
              "enum": [
                "trace",
                "category ascending",
                "category descending",
                "array",
                "total ascending",
                "total descending",
                "min ascending",
                "min descending",
                "max ascending",
                "max descending",
                "sum ascending",
                "sum descending",
                "mean ascending",
                "mean descending",
                "geometric mean ascending",
                "geometric mean descending",
                "median ascending",
                "median descending"
              ],
              "default": "trace"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "constrain": {
          "oneOf": [
            {
              "description": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.",
              "enum": [
                "range",
                "domain"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "constraintoward": {
          "oneOf": [
            {
              "description": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.",
              "enum": [
                "left",
                "center",
                "right",
                "top",
                "middle",
                "bottom"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dividercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dividerwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "oneOf": [
            {
              "description": "Sets the domain of this axis (in plot fraction).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                1
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dtick": {
          "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
        },
        "exponentformat": {
          "oneOf": [
            {
              "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
              "enum": [
                "none",
                "e",
                "E",
                "power",
                "SI",
                "B"
              ],
              "default": "B"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fixedrange": {
          "oneOf": [
            {
              "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "gridcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "griddash": {
          "oneOf": [
            {
              "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
              "type": "string",
              "default": "solid"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "gridwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the grid lines.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insiderange": {
          "oneOf": [
            {
              "description": "Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has *inside*. Not implemented for axes with `type` *log*. This would be ignored when `range` is provided.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {}
                ]
              },
              "minItems": 2,
              "maxItems": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelalias": {
          "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
          "default": false
        },
        "layer": {
          "oneOf": [
            {
              "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
              "enum": [
                "above traces",
                "below traces"
              ],
              "default": "above traces"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "linecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "linewidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the axis line.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "matches": {
          "oneOf": [
            {
              "description": "If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.",
              "enum": [
                "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "maxallowed": {
          "description": "Determines the maximum range of this axis."
        },
        "minallowed": {
          "description": "Determines the minimum range of this axis."
        },
        "minexponent": {
          "oneOf": [
            {
              "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
              "type": "number",
              "minimum": 0,
              "default": 3
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mirror": {
          "oneOf": [
            {
              "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
              "enum": [
                true,
                "ticks",
                false,
                "all",
                "allticks"
              ],
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nticks": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "overlaying": {
          "oneOf": [
            {
              "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.",
              "enum": [
                "free",
                "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "position": {
          "oneOf": [
            {
              "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "range": {
          "oneOf": [
            {
              "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {}
                ]
              },
              "minItems": 2,
              "maxItems": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "rangemode": {
          "oneOf": [
            {
              "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.",
              "enum": [
                "normal",
                "tozero",
                "nonnegative"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scaleanchor": {
          "oneOf": [
            {
              "description": "If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: \"x\"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).",
              "enum": [
                "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                "/^y([2-9]|[1-9][0-9]+)?( domain)?$/",
                false
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scaleratio": {
          "oneOf": [
            {
              "description": "If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "separatethousands": {
          "oneOf": [
            {
              "description": "If \"true\", even 4-digit integers are separated",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showdividers": {
          "oneOf": [
            {
              "description": "Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showexponent": {
          "oneOf": [
            {
              "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showgrid": {
          "oneOf": [
            {
              "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showline": {
          "oneOf": [
            {
              "description": "Determines whether or not a line bounding this axis is drawn.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showspikes": {
          "oneOf": [
            {
              "description": "Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showticklabels": {
          "oneOf": [
            {
              "description": "Determines whether or not the tick labels are drawn.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showtickprefix": {
          "oneOf": [
            {
              "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showticksuffix": {
          "oneOf": [
            {
              "description": "Same as `showtickprefix` but for tick suffixes.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "side": {
          "oneOf": [
            {
              "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.",
              "enum": [
                "top",
                "bottom",
                "left",
                "right"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikedash": {
          "oneOf": [
            {
              "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
              "type": "string",
              "default": "dash"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikemode": {
          "oneOf": [
            {
              "description": "Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on",
              "type": "string",
              "pattern": "^(toaxis|across|marker)(\\+(toaxis|across|marker))*$",
              "default": "toaxis"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikesnap": {
          "oneOf": [
            {
              "description": "Determines whether spikelines are stuck to the cursor or to the closest datapoints.",
              "enum": [
                "data",
                "cursor",
                "hovered data"
              ],
              "default": "hovered data"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikethickness": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the zero line.",
              "type": "number",
              "default": 3
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tick0": {
          "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
        },
        "tickangle": {
          "oneOf": [
            {
              "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickformat": {
          "oneOf": [
            {
              "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelindex": {
          "description": "Only for axes with `type` *date* or *linear*. Instead of drawing the major tick label, draw the label for the minor tick that is n positions away from the major tick. E.g. to always draw the label for the minor tick before each major tick, choose `ticklabelindex` -1. This is useful for date axes with `ticklabelmode` *period* if you want to label the period that ends with each major tick instead of the period that begins there.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "integer"
            },
            {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          ]
        },
        "ticklabelindexsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ticklabelindex`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelmode": {
          "oneOf": [
            {
              "description": "Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.",
              "enum": [
                "instant",
                "period"
              ],
              "default": "instant"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabeloverflow": {
          "oneOf": [
            {
              "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.",
              "enum": [
                "allow",
                "hide past div",
                "hide past domain"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelposition": {
          "oneOf": [
            {
              "description": "Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.",
              "enum": [
                "outside",
                "inside",
                "outside top",
                "inside top",
                "outside left",
                "inside left",
                "outside right",
                "inside right",
                "outside bottom",
                "inside bottom"
              ],
              "default": "outside"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelshift": {
          "oneOf": [
            {
              "description": "Shifts the tick labels by the specified number of pixels in parallel to the axis. Positive values move the labels in the positive direction of the axis.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelstandoff": {
          "oneOf": [
            {
              "description": "Sets the standoff distance (in px) between the axis tick labels and their default position. A positive `ticklabelstandoff` moves the labels farther away from the plot area if `ticklabelposition` is *outside*, and deeper into the plot area if `ticklabelposition` is *inside*. A negative `ticklabelstandoff` works in the opposite direction, moving outside ticks towards the plot area and inside ticks towards the outside. If the negative value is large enough, inside ticks can even end up outside and vice versa.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelstep": {
          "oneOf": [
            {
              "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklen": {
          "oneOf": [
            {
              "description": "Sets the tick length (in px).",
              "type": "number",
              "minimum": 0,
              "default": 5
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickmode": {
          "oneOf": [
            {
              "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.",
              "enum": [
                "auto",
                "linear",
                "array",
                "sync"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickprefix": {
          "oneOf": [
            {
              "description": "Sets a tick label prefix.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticks": {
          "oneOf": [
            {
              "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
              "enum": [
                "outside",
                "inside",
                ""
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickson": {
          "oneOf": [
            {
              "description": "Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.",
              "enum": [
                "labels",
                "boundaries"
              ],
              "default": "labels"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticksuffix": {
          "oneOf": [
            {
              "description": "Sets a tick label suffix.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticktext": {
          "oneOf": [
            {
              "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticktextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickvals": {
          "oneOf": [
            {
              "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickvalssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickwidth": {
          "oneOf": [
            {
              "description": "Sets the tick width (in px).",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
              "enum": [
                "-",
                "linear",
                "log",
                "date",
                "category",
                "multicategory"
              ],
              "default": "-"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`."
        },
        "visible": {
          "oneOf": [
            {
              "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zeroline": {
          "oneOf": [
            {
              "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zerolinecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zerolinewidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the zero line.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "yaxis": {
      "type": "object",
      "properties": {
        "anchor": {
          "oneOf": [
            {
              "description": "If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.",
              "enum": [
                "free",
                "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "automargin": {
          "description": "Determines whether long tick labels automatically grow the figure margins.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            {
              "type": "string",
              "pattern": "^(height|width|left|right|top|bottom)(\\+(height|width|left|right|top|bottom))*$"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ],
          "default": false
        },
        "autorange": {
          "oneOf": [
            {
              "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.",
              "enum": [
                true,
                false,
                "reversed",
                "min reversed",
                "max reversed",
                "min",
                "max"
              ],
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autoshift": {
          "oneOf": [
            {
              "description": "Automatically reposition the axis to avoid overlap with other axes with the same `overlaying` value. This repositioning will account for any `shift` amount applied to other axes on the same side with `autoshift` is set to true. Only has an effect if `anchor` is set to *free*.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "autotickangles": {
          "type": "object",
          "properties": {
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "autotypenumbers": {
          "oneOf": [
            {
              "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
              "enum": [
                "convert types",
                "strict"
              ],
              "default": "convert types"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "calendar": {
          "oneOf": [
            {
              "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
              "enum": [
                "chinese",
                "coptic",
                "discworld",
                "ethiopian",
                "gregorian",
                "hebrew",
                "islamic",
                "jalali",
                "julian",
                "mayan",
                "nanakshahi",
                "nepali",
                "persian",
                "taiwan",
                "thai",
                "ummalqura"
              ],
              "default": "gregorian"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "categoryarray": {
          "oneOf": [
            {
              "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "categoryarraysrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `categoryarray`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "categoryorder": {
          "oneOf": [
            {
              "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.",
              "enum": [
                "trace",
                "category ascending",
                "category descending",
                "array",
                "total ascending",
                "total descending",
                "min ascending",
                "min descending",
                "max ascending",
                "max descending",
                "sum ascending",
                "sum descending",
                "mean ascending",
                "mean descending",
                "geometric mean ascending",
                "geometric mean descending",
                "median ascending",
                "median descending"
              ],
              "default": "trace"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "constrain": {
          "oneOf": [
            {
              "description": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.",
              "enum": [
                "range",
                "domain"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "constraintoward": {
          "oneOf": [
            {
              "description": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.",
              "enum": [
                "left",
                "center",
                "right",
                "top",
                "middle",
                "bottom"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dividercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dividerwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "domain": {
          "oneOf": [
            {
              "description": "Sets the domain of this axis (in plot fraction).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                1
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "dtick": {
          "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*"
        },
        "exponentformat": {
          "oneOf": [
            {
              "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
              "enum": [
                "none",
                "e",
                "E",
                "power",
                "SI",
                "B"
              ],
              "default": "B"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "fixedrange": {
          "oneOf": [
            {
              "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "gridcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "griddash": {
          "oneOf": [
            {
              "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
              "type": "string",
              "default": "solid"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "gridwidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the grid lines.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "hoverformat": {
          "oneOf": [
            {
              "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "insiderange": {
          "oneOf": [
            {
              "description": "Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has *inside*. Not implemented for axes with `type` *log*. This would be ignored when `range` is provided.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {}
                ]
              },
              "minItems": 2,
              "maxItems": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "labelalias": {
          "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
          "default": false
        },
        "layer": {
          "oneOf": [
            {
              "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
              "enum": [
                "above traces",
                "below traces"
              ],
              "default": "above traces"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "linecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "linewidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the axis line.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "matches": {
          "oneOf": [
            {
              "description": "If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.",
              "enum": [
                "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "maxallowed": {
          "description": "Determines the maximum range of this axis."
        },
        "minallowed": {
          "description": "Determines the minimum range of this axis."
        },
        "minexponent": {
          "oneOf": [
            {
              "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
              "type": "number",
              "minimum": 0,
              "default": 3
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "mirror": {
          "oneOf": [
            {
              "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
              "enum": [
                true,
                "ticks",
                false,
                "all",
                "allticks"
              ],
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "nticks": {
          "oneOf": [
            {
              "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "overlaying": {
          "oneOf": [
            {
              "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.",
              "enum": [
                "free",
                "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "position": {
          "oneOf": [
            {
              "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.",
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "range": {
          "oneOf": [
            {
              "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {}
                ]
              },
              "minItems": 2,
              "maxItems": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "rangemode": {
          "oneOf": [
            {
              "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.",
              "enum": [
                "normal",
                "tozero",
                "nonnegative"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scaleanchor": {
          "oneOf": [
            {
              "description": "If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: \"x\"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).",
              "enum": [
                "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
                "/^y([2-9]|[1-9][0-9]+)?( domain)?$/",
                false
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "scaleratio": {
          "oneOf": [
            {
              "description": "If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "separatethousands": {
          "oneOf": [
            {
              "description": "If \"true\", even 4-digit integers are separated",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "shift": {
          "oneOf": [
            {
              "description": "Moves the axis a given number of pixels from where it would have been otherwise. Accepts both positive and negative values, which will shift the axis either right or left, respectively. If `autoshift` is set to true, then this defaults to a padding of -3 if `side` is set to *left*. and defaults to +3 if `side` is set to *right*. Defaults to 0 if `autoshift` is set to false. Only has an effect if `anchor` is set to *free*.",
              "type": "number"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showdividers": {
          "oneOf": [
            {
              "description": "Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showexponent": {
          "oneOf": [
            {
              "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showgrid": {
          "oneOf": [
            {
              "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showline": {
          "oneOf": [
            {
              "description": "Determines whether or not a line bounding this axis is drawn.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showspikes": {
          "oneOf": [
            {
              "description": "Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showticklabels": {
          "oneOf": [
            {
              "description": "Determines whether or not the tick labels are drawn.",
              "type": "boolean",
              "default": true
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showtickprefix": {
          "oneOf": [
            {
              "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showticksuffix": {
          "oneOf": [
            {
              "description": "Same as `showtickprefix` but for tick suffixes.",
              "enum": [
                "all",
                "first",
                "last",
                "none"
              ],
              "default": "all"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "side": {
          "oneOf": [
            {
              "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.",
              "enum": [
                "top",
                "bottom",
                "left",
                "right"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikedash": {
          "oneOf": [
            {
              "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
              "type": "string",
              "default": "dash"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikemode": {
          "oneOf": [
            {
              "description": "Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on",
              "type": "string",
              "pattern": "^(toaxis|across|marker)(\\+(toaxis|across|marker))*$",
              "default": "toaxis"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikesnap": {
          "oneOf": [
            {
              "description": "Determines whether spikelines are stuck to the cursor or to the closest datapoints.",
              "enum": [
                "data",
                "cursor",
                "hovered data"
              ],
              "default": "hovered data"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "spikethickness": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the zero line.",
              "type": "number",
              "default": 3
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tick0": {
          "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears."
        },
        "tickangle": {
          "oneOf": [
            {
              "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
              "type": "number",
              "minimum": -180,
              "maximum": 180,
              "default": "auto"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickformat": {
          "oneOf": [
            {
              "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelindex": {
          "description": "Only for axes with `type` *date* or *linear*. Instead of drawing the major tick label, draw the label for the minor tick that is n positions away from the major tick. E.g. to always draw the label for the minor tick before each major tick, choose `ticklabelindex` -1. This is useful for date axes with `ticklabelmode` *period* if you want to label the period that ends with each major tick instead of the period that begins there.",
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "type": "integer"
            },
            {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          ]
        },
        "ticklabelindexsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ticklabelindex`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelmode": {
          "oneOf": [
            {
              "description": "Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.",
              "enum": [
                "instant",
                "period"
              ],
              "default": "instant"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabeloverflow": {
          "oneOf": [
            {
              "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.",
              "enum": [
                "allow",
                "hide past div",
                "hide past domain"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelposition": {
          "oneOf": [
            {
              "description": "Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.",
              "enum": [
                "outside",
                "inside",
                "outside top",
                "inside top",
                "outside left",
                "inside left",
                "outside right",
                "inside right",
                "outside bottom",
                "inside bottom"
              ],
              "default": "outside"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelshift": {
          "oneOf": [
            {
              "description": "Shifts the tick labels by the specified number of pixels in parallel to the axis. Positive values move the labels in the positive direction of the axis.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelstandoff": {
          "oneOf": [
            {
              "description": "Sets the standoff distance (in px) between the axis tick labels and their default position. A positive `ticklabelstandoff` moves the labels farther away from the plot area if `ticklabelposition` is *outside*, and deeper into the plot area if `ticklabelposition` is *inside*. A negative `ticklabelstandoff` works in the opposite direction, moving outside ticks towards the plot area and inside ticks towards the outside. If the negative value is large enough, inside ticks can even end up outside and vice versa.",
              "type": "integer",
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklabelstep": {
          "oneOf": [
            {
              "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticklen": {
          "oneOf": [
            {
              "description": "Sets the tick length (in px).",
              "type": "number",
              "minimum": 0,
              "default": 5
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickmode": {
          "oneOf": [
            {
              "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.",
              "enum": [
                "auto",
                "linear",
                "array",
                "sync"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickprefix": {
          "oneOf": [
            {
              "description": "Sets a tick label prefix.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticks": {
          "oneOf": [
            {
              "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
              "enum": [
                "outside",
                "inside",
                ""
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickson": {
          "oneOf": [
            {
              "description": "Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.",
              "enum": [
                "labels",
                "boundaries"
              ],
              "default": "labels"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticksuffix": {
          "oneOf": [
            {
              "description": "Sets a tick label suffix.",
              "type": "string",
              "default": ""
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticktext": {
          "oneOf": [
            {
              "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "ticktextsrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickvals": {
          "oneOf": [
            {
              "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickvalssrc": {
          "oneOf": [
            {
              "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
              "type": "string"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tickwidth": {
          "oneOf": [
            {
              "description": "Sets the tick width (in px).",
              "type": "number",
              "minimum": 0,
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
              "enum": [
                "-",
                "linear",
                "log",
                "date",
                "category",
                "multicategory"
              ],
              "default": "-"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "uirevision": {
          "description": "Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`."
        },
        "visible": {
          "oneOf": [
            {
              "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zeroline": {
          "oneOf": [
            {
              "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zerolinecolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "zerolinewidth": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the zero line.",
              "type": "number",
              "default": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    }
  }
}