{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a number"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "type": {
      "oneOf": [
        {
          "const": "parcats"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "arrangement": {
      "oneOf": [
        {
          "description": "Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.",
          "enum": [
            "perpendicular",
            "freeform",
            "fixed"
          ],
          "default": "perpendicular"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "bundlecolors": {
      "oneOf": [
        {
          "description": "Sort paths so that like colors are bundled together within each category.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "counts": {
      "description": "The number of observations represented by each state. Defaults to 1 so that each state represents one observation",
      "oneOf": [
        {
          "type": "number",
          "minimum": 0,
          "default": 1
        },
        {
          "type": "array",
          "items": {
            "type": "number",
            "minimum": 0,
            "default": 1
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "countssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `counts`.",
      "type": "string"
    },
    "dimensions": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "properties": {
            "dimension": {
              "type": "object",
              "properties": {
                "categoryarray": {
                  "oneOf": [
                    {
                      "description": "Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "categoryarraysrc": {
                  "description": "Sets the source reference on Chart Studio Cloud for `categoryarray`.",
                  "type": "string"
                },
                "categoryorder": {
                  "oneOf": [
                    {
                      "description": "Specifies the ordering logic for the categories in the dimension. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
                      "enum": [
                        "trace",
                        "category ascending",
                        "category descending",
                        "array"
                      ],
                      "default": "trace"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "displayindex": {
                  "oneOf": [
                    {
                      "description": "The display index of dimension, from left to right, zero indexed, defaults to dimension index.",
                      "type": "integer"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "label": {
                  "description": "The shown name of the dimension.",
                  "type": "string"
                },
                "ticktext": {
                  "oneOf": [
                    {
                      "description": "Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to *array*. Should be an array the same length as `categoryarray` Used with `categoryorder`.",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "ticktextsrc": {
                  "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
                  "type": "string"
                },
                "values": {
                  "oneOf": [
                    {
                      "description": "Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).",
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "number"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "default": []
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "valuessrc": {
                  "description": "Sets the source reference on Chart Studio Cloud for `values`.",
                  "type": "string"
                },
                "visible": {
                  "oneOf": [
                    {
                      "description": "Shows the dimension when set to `true` (the default). Hides the dimension for `false`.",
                      "type": "boolean",
                      "default": true
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "domain": {
      "type": "object",
      "properties": {
        "column": {
          "oneOf": [
            {
              "description": "If there is a layout grid, use the domain for this column in the grid for this parcats trace .",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "row": {
          "oneOf": [
            {
              "description": "If there is a layout grid, use the domain for this row in the grid for this parcats trace .",
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "x": {
          "oneOf": [
            {
              "description": "Sets the horizontal domain of this parcats trace (in plot fraction).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                1
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "y": {
          "oneOf": [
            {
              "description": "Sets the vertical domain of this parcats trace (in plot fraction).",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/query-string"
                  },
                  {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1
                  }
                ]
              },
              "minItems": 2,
              "maxItems": 2,
              "default": [
                0,
                1
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "hoverinfo": {
      "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "all",
            "none",
            "skip"
          ]
        },
        {
          "type": "string",
          "pattern": "^(count|probability)(\\+(count|probability))*$"
        }
      ],
      "default": "all"
    },
    "hoveron": {
      "oneOf": [
        {
          "description": "Sets the hover interaction mode for the parcats diagram. If `category`, hover interaction take place per category. If `color`, hover interactions take place per color per category. If `dimension`, hover interactions take place across all categories per dimension.",
          "enum": [
            "category",
            "color",
            "dimension"
          ],
          "default": "category"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hovertemplate": {
      "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  This value here applies when hovering over dimensions. Note that `*categorycount`, *colorcount* and *bandcolorcount* are only available when `hoveron` contains the *color* flagFinally, the template string has access to variables `count`, `probability`, `category`, `categorycount`, `colorcount` and `bandcolorcount`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
      "type": "string",
      "default": ""
    },
    "labelfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "family": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        },
        "lineposition": {
          "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(under|over|through)(\\+(under|over|through))*$"
            }
          ],
          "default": "none"
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "type": "string",
          "default": "none"
        },
        "size": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "oneOf": [
            {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "enum": [
                "normal",
                "italic"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textcase": {
          "oneOf": [
            {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "enum": [
                "normal",
                "word caps",
                "upper",
                "lower"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "variant": {
          "oneOf": [
            {
              "description": "Sets the variant of the font.",
              "enum": [
                "normal",
                "small-caps",
                "all-small-caps",
                "all-petite-caps",
                "petite-caps",
                "unicase"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "weight": {
          "oneOf": [
            {
              "description": "Sets the weight (or boldness) of the font.",
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "legendgrouptitle": {
      "type": "object",
      "properties": {
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string",
              "default": "none"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the title of the legend group.",
          "type": "string",
          "default": ""
        }
      }
    },
    "legendwidth": {
      "oneOf": [
        {
          "description": "Sets the width (in px or fraction) of the legend for this trace.",
          "type": "number",
          "minimum": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "line": {
      "type": "object",
      "properties": {
        "autocolorscale": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "cauto": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "cmax": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "cmid": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "cmin": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#3D9970"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "#3D9970"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickfont": {
              "type": "object",
              "properties": {
                "color": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/color",
                      "default": "#444"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "family": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                      "type": "string",
                      "pattern": ".*\\S.*$"
                    }
                  ]
                },
                "lineposition": {
                  "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                "shadow": {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                "size": {
                  "oneOf": [
                    {
                      "type": "number",
                      "minimum": 1
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "style": {
                  "oneOf": [
                    {
                      "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                      "enum": [
                        "normal",
                        "italic"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "textcase": {
                  "oneOf": [
                    {
                      "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                      "enum": [
                        "normal",
                        "word caps",
                        "upper",
                        "lower"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "variant": {
                  "oneOf": [
                    {
                      "description": "Sets the variant of the font.",
                      "enum": [
                        "normal",
                        "small-caps",
                        "all-small-caps",
                        "all-petite-caps",
                        "petite-caps",
                        "unicase"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "weight": {
                  "oneOf": [
                    {
                      "description": "Sets the weight (or boldness) of the font.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1000,
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                }
              }
            },
            "tickformat": {
              "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
              "type": "string",
              "default": ""
            },
            "tickformatstops": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "object",
                  "properties": {
                    "tickformatstop": {
                      "type": "object",
                      "properties": {
                        "dtickrange": {
                          "oneOf": [
                            {
                              "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/$defs/query-string"
                                  },
                                  {}
                                ]
                              },
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "$ref": "#/$defs/query-string"
                            }
                          ]
                        },
                        "enabled": {
                          "oneOf": [
                            {
                              "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
                              "type": "boolean",
                              "default": true
                            },
                            {
                              "$ref": "#/$defs/query-string"
                            }
                          ]
                        },
                        "name": {
                          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
                          "type": "string"
                        },
                        "templateitemname": {
                          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
                          "type": "string"
                        },
                        "value": {
                          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                }
              }
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "tickprefix": {
              "description": "Sets a tick label prefix.",
              "type": "string",
              "default": ""
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "description": "Sets a tick label suffix.",
              "type": "string",
              "default": ""
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
              "type": "string"
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
              "type": "string"
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "title": {
              "type": "object",
              "properties": {
                "font": {
                  "type": "object",
                  "properties": {
                    "color": {
                      "oneOf": [
                        {
                          "$ref": "#/$defs/color",
                          "default": "#444"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "family": {
                      "oneOf": [
                        {
                          "$ref": "#/$defs/query-string"
                        },
                        {
                          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                          "type": "string",
                          "pattern": ".*\\S.*$"
                        }
                      ]
                    },
                    "lineposition": {
                      "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "none"
                          ]
                        },
                        {
                          "type": "string",
                          "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                        }
                      ],
                      "default": "none"
                    },
                    "shadow": {
                      "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                      "type": "string",
                      "default": "none"
                    },
                    "size": {
                      "oneOf": [
                        {
                          "type": "number",
                          "minimum": 1
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "style": {
                      "oneOf": [
                        {
                          "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                          "enum": [
                            "normal",
                            "italic"
                          ],
                          "default": "normal"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "textcase": {
                      "oneOf": [
                        {
                          "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                          "enum": [
                            "normal",
                            "word caps",
                            "upper",
                            "lower"
                          ],
                          "default": "normal"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "variant": {
                      "oneOf": [
                        {
                          "description": "Sets the variant of the font.",
                          "enum": [
                            "normal",
                            "small-caps",
                            "all-small-caps",
                            "all-petite-caps",
                            "petite-caps",
                            "unicase"
                          ],
                          "default": "normal"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "weight": {
                      "oneOf": [
                        {
                          "description": "Sets the weight (or boldness) of the font.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 1000,
                          "default": "normal"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    }
                  }
                },
                "side": {
                  "oneOf": [
                    {
                      "description": "Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*.",
                      "enum": [
                        "right",
                        "top",
                        "bottom"
                      ]
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "text": {
                  "description": "Sets the title of the color bar.",
                  "type": "string"
                }
              }
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "colorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `color`.",
          "type": "string"
        },
        "hovertemplate": {
          "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  This value here applies when hovering over lines.Finally, the template string has access to variables `count` and `probability`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
          "type": "string",
          "default": ""
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "shape": {
          "oneOf": [
            {
              "description": "Sets the shape of the paths. If `linear`, paths are composed of straight lines. If `hspline`, paths are composed of horizontal curved splines",
              "enum": [
                "linear",
                "hspline"
              ],
              "default": "linear"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "metasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
      "type": "string"
    },
    "name": {
      "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
      "type": "string"
    },
    "sortpaths": {
      "oneOf": [
        {
          "description": "Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.",
          "enum": [
            "forward",
            "backward"
          ],
          "default": "forward"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "stream": {
      "type": "object",
      "properties": {
        "maxpoints": {
          "oneOf": [
            {
              "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "default": 500
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "token": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        }
      }
    },
    "tickfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "family": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        },
        "lineposition": {
          "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(under|over|through)(\\+(under|over|through))*$"
            }
          ],
          "default": "none"
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "type": "string",
          "default": "auto"
        },
        "size": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "oneOf": [
            {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "enum": [
                "normal",
                "italic"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textcase": {
          "oneOf": [
            {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "enum": [
                "normal",
                "word caps",
                "upper",
                "lower"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "variant": {
          "oneOf": [
            {
              "description": "Sets the variant of the font.",
              "enum": [
                "normal",
                "small-caps",
                "all-small-caps",
                "all-petite-caps",
                "petite-caps",
                "unicase"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "weight": {
          "oneOf": [
            {
              "description": "Sets the weight (or boldness) of the font.",
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "uid": {
      "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
      "type": "string"
    },
    "uirevision": {
      "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
    },
    "visible": {
      "oneOf": [
        {
          "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
          "enum": [
            true,
            false,
            "legendonly"
          ],
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}