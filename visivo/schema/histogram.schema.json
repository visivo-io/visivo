{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://visivo.io/trace-properties/schema",
  "description": "A schema to validate plotly trace properties",
  "$defs": {
    "color": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "^#(?:[0-9a-fA-F]{3}|[0-9a-fA-F]{6})$",
          "description": "Hex color (e.g., #d3d3d3 or #fff)"
        },
        {
          "pattern": "^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$",
          "description": "RGB color (e.g., rgb(255, 0, 0))"
        },
        {
          "pattern": "^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$",
          "description": "RGBA color (e.g., rgba(255, 0, 0, 0.5))"
        },
        {
          "pattern": "^hsl\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSL color (e.g., hsl(0, 100%, 50%))"
        },
        {
          "pattern": "^hsv\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%\\s*,\\s*\\d{1,3}%\\s*\\)$",
          "description": "HSV color (e.g., hsv(0, 100%, 100%))"
        },
        {
          "pattern": "^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$",
          "description": "Named CSS color"
        }
      ]
    },
    "colorscale": {
      "description": "A Plotly colorscale either by name or a custom array of [value, color] pairs.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "Greys",
            "YlGnBu",
            "Greens",
            "YlOrRd",
            "Bluered",
            "RdBu",
            "Reds",
            "Blues",
            "Picnic",
            "Rainbow",
            "Portland",
            "Jet",
            "Hot",
            "Blackbody",
            "Earth",
            "Electric",
            "Viridis",
            "Cividis"
          ],
          "description": "Predefined Plotly colorscale name"
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/color"
                }
              ]
            }
          },
          "description": "Custom colorscale as an array of [value, color] pairs"
        }
      ]
    },
    "query-string": {
      "type": "string",
      "description": "A string that will pull the value from the traces query results.",
      "oneOf": [
        {
          "pattern": "^\\?\\{.*\\}$",
          "description": "String in the format ?{ x } where x can be anything"
        },
        {
          "pattern": "^query\\(.*\\)$",
          "description": "String in the format query( x ) where x can be anything"
        },
        {
          "pattern": "^column\\(.*\\)(?:\\[\\d+\\])?$",
          "description": "String in the format column( x ) or column( x )[n] where x can be anything and n is a number"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "type": {
      "oneOf": [
        {
          "const": "histogram"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "alignmentgroup": {
      "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
      "type": "string",
      "default": ""
    },
    "autobinx": {
      "oneOf": [
        {
          "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.",
          "type": "boolean",
          "default": null
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "autobiny": {
      "oneOf": [
        {
          "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.",
          "type": "boolean",
          "default": null
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "bingroup": {
      "description": "Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same *orientation* under `barmode` *stack*, *relative* and *group* are forced into the same bingroup, Using `bingroup`, traces under `barmode` *overlay* and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d* trace can share the same `bingroup`",
      "type": "string",
      "default": ""
    },
    "cliponaxis": {
      "oneOf": [
        {
          "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "constraintext": {
      "oneOf": [
        {
          "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
          "enum": [
            "inside",
            "outside",
            "both",
            "none"
          ],
          "default": "both"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "cumulative": {
      "type": "object",
      "properties": {
        "currentbin": {
          "oneOf": [
            {
              "description": "Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. *include* is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. *exclude* makes the opposite half-bin bias, and *half* removes it.",
              "enum": [
                "include",
                "exclude",
                "half"
              ],
              "default": "include"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "direction": {
          "oneOf": [
            {
              "description": "Only applies if cumulative is enabled. If *increasing* (default) we sum all prior bins, so the result increases from left to right. If *decreasing* we sum later bins so the result decreases from left to right.",
              "enum": [
                "increasing",
                "decreasing"
              ],
              "default": "increasing"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "enabled": {
          "oneOf": [
            {
              "description": "If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the *density* `histnorm` settings behave the same as their equivalents without *density*: ** and *density* both rise to the number of data points, and *probability* and *probability density* both rise to the number of sample points.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "customdata": {
      "oneOf": [
        {
          "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "customdatasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `customdata`.",
      "type": "string"
    },
    "error_x": {
      "type": "object",
      "properties": {
        "array": {
          "oneOf": [
            {
              "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrayminus": {
          "oneOf": [
            {
              "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrayminussrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
          "type": "string"
        },
        "arraysrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `array`.",
          "type": "string"
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "copy_ystyle": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "symmetric": {
          "oneOf": [
            {
              "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "thickness": {
          "oneOf": [
            {
              "description": "Sets the thickness (in px) of the error bars.",
              "type": "number",
              "minimum": 0,
              "default": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "traceref": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tracerefminus": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
              "enum": [
                "percent",
                "constant",
                "sqrt",
                "data"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "value": {
          "oneOf": [
            {
              "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valueminus": {
          "oneOf": [
            {
              "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this set of error bars is visible.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "error_y": {
      "type": "object",
      "properties": {
        "array": {
          "oneOf": [
            {
              "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrayminus": {
          "oneOf": [
            {
              "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "arrayminussrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `arrayminus`.",
          "type": "string"
        },
        "arraysrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `array`.",
          "type": "string"
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "symmetric": {
          "oneOf": [
            {
              "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "thickness": {
          "oneOf": [
            {
              "description": "Sets the thickness (in px) of the error bars.",
              "type": "number",
              "minimum": 0,
              "default": 2
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "traceref": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "tracerefminus": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "type": {
          "oneOf": [
            {
              "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
              "enum": [
                "percent",
                "constant",
                "sqrt",
                "data"
              ]
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "value": {
          "oneOf": [
            {
              "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "valueminus": {
          "oneOf": [
            {
              "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
              "type": "number",
              "minimum": 0,
              "default": 10
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "visible": {
          "oneOf": [
            {
              "description": "Determines whether or not this set of error bars is visible.",
              "type": "boolean"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "width": {
          "oneOf": [
            {
              "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
              "type": "number",
              "minimum": 0
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "histfunc": {
      "oneOf": [
        {
          "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
          "enum": [
            "count",
            "sum",
            "avg",
            "min",
            "max"
          ],
          "default": "count"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "histnorm": {
      "oneOf": [
        {
          "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
          "enum": [
            "",
            "percent",
            "probability",
            "density",
            "probability density"
          ],
          "default": ""
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverinfo": {
      "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
      "oneOf": [
        {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all",
                "none",
                "skip"
              ]
            },
            {
              "type": "string",
              "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
            }
          ],
          "default": "all"
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "all",
                  "none",
                  "skip"
                ]
              },
              {
                "type": "string",
                "pattern": "^(x|y|z|text|name)(\\+(x|y|z|text|name))*$"
              }
            ],
            "default": "all"
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "hoverinfosrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `hoverinfo`.",
      "type": "string"
    },
    "hoverlabel": {
      "type": "object",
      "properties": {
        "align": {
          "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
          "oneOf": [
            {
              "enum": [
                "left",
                "right",
                "auto"
              ],
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "left",
                  "right",
                  "auto"
                ],
                "default": "auto"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "alignsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `align`.",
          "type": "string"
        },
        "bgcolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "auto"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bgcolorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
          "type": "string"
        },
        "bordercolor": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "auto"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "bordercolorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `bordercolor`.",
          "type": "string"
        },
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "auto"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "auto"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "colorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            "family": {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "oneOf": [
                {
                  "type": "string",
                  "pattern": ".*\\S.*$"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "pattern": ".*\\S.*$"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "familysrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `family`.",
              "type": "string"
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "none"
                        ]
                      },
                      {
                        "type": "string",
                        "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                      }
                    ],
                    "default": "none"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "linepositionsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `lineposition`.",
              "type": "string"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "oneOf": [
                {
                  "type": "string",
                  "default": "none"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "default": "none"
                  }
                }
              ]
            },
            "shadowsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `shadow`.",
              "type": "string"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 1
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            "style": {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "oneOf": [
                {
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "italic"
                    ],
                    "default": "normal"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "stylesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `style`.",
              "type": "string"
            },
            "textcase": {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "oneOf": [
                {
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "word caps",
                      "upper",
                      "lower"
                    ],
                    "default": "normal"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcasesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `textcase`.",
              "type": "string"
            },
            "variant": {
              "description": "Sets the variant of the font.",
              "oneOf": [
                {
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "normal",
                      "small-caps",
                      "all-small-caps",
                      "all-petite-caps",
                      "petite-caps",
                      "unicase"
                    ],
                    "default": "normal"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variantsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `variant`.",
              "type": "string"
            },
            "weight": {
              "description": "Sets the weight (or boldness) of the font.",
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": "normal"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weightsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `weight`.",
              "type": "string"
            }
          }
        },
        "namelength": {
          "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
          "oneOf": [
            {
              "type": "integer",
              "minimum": -1,
              "default": 15
            },
            {
              "type": "array",
              "items": {
                "type": "integer",
                "minimum": -1,
                "default": 15
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "namelengthsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `namelength`.",
          "type": "string"
        }
      }
    },
    "hovertemplate": {
      "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `binNumber` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
      "oneOf": [
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "hovertemplatesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `hovertemplate`.",
      "type": "string"
    },
    "hovertext": {
      "description": "Same as `text`.",
      "oneOf": [
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "hovertextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `hovertext`.",
      "type": "string"
    },
    "ids": {
      "oneOf": [
        {
          "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "idssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `ids`.",
      "type": "string"
    },
    "insidetextanchor": {
      "oneOf": [
        {
          "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
          "enum": [
            "end",
            "middle",
            "start"
          ],
          "default": "end"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "insidetextfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "family": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        },
        "lineposition": {
          "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(under|over|through)(\\+(under|over|through))*$"
            }
          ],
          "default": "none"
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "type": "string",
          "default": "none"
        },
        "size": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "oneOf": [
            {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "enum": [
                "normal",
                "italic"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textcase": {
          "oneOf": [
            {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "enum": [
                "normal",
                "word caps",
                "upper",
                "lower"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "variant": {
          "oneOf": [
            {
              "description": "Sets the variant of the font.",
              "enum": [
                "normal",
                "small-caps",
                "all-small-caps",
                "all-petite-caps",
                "petite-caps",
                "unicase"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "weight": {
          "oneOf": [
            {
              "description": "Sets the weight (or boldness) of the font.",
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "legend": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "description": "Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.",
          "type": "string",
          "pattern": "^legend([2-9]|[1-9][0-9]+)?$",
          "default": "legend"
        }
      ]
    },
    "legendgroup": {
      "description": "Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.",
      "type": "string",
      "default": ""
    },
    "legendgrouptitle": {
      "type": "object",
      "properties": {
        "font": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "family": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                  "type": "string",
                  "pattern": ".*\\S.*$"
                }
              ]
            },
            "lineposition": {
              "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "none"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                }
              ],
              "default": "none"
            },
            "shadow": {
              "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
              "type": "string",
              "default": "none"
            },
            "size": {
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "style": {
              "oneOf": [
                {
                  "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                  "enum": [
                    "normal",
                    "italic"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "textcase": {
              "oneOf": [
                {
                  "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                  "enum": [
                    "normal",
                    "word caps",
                    "upper",
                    "lower"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "variant": {
              "oneOf": [
                {
                  "description": "Sets the variant of the font.",
                  "enum": [
                    "normal",
                    "small-caps",
                    "all-small-caps",
                    "all-petite-caps",
                    "petite-caps",
                    "unicase"
                  ],
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "weight": {
              "oneOf": [
                {
                  "description": "Sets the weight (or boldness) of the font.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 1000,
                  "default": "normal"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "text": {
          "description": "Sets the title of the legend group.",
          "type": "string",
          "default": ""
        }
      }
    },
    "legendrank": {
      "oneOf": [
        {
          "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.",
          "type": "number",
          "default": 1000
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "legendwidth": {
      "oneOf": [
        {
          "description": "Sets the width (in px or fraction) of the legend for this trace.",
          "type": "number",
          "minimum": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "marker": {
      "type": "object",
      "properties": {
        "autocolorscale": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "cauto": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "cmax": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "cmid": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "cmin": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "auto"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/color",
                "default": "auto"
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "coloraxis": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
              "type": "string",
              "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
              "default": null
            }
          ]
        },
        "colorbar": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bordercolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "borderwidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) or the border enclosing this color bar.",
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "dtick": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "exponentformat": {
              "oneOf": [
                {
                  "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
                  "enum": [
                    "none",
                    "e",
                    "E",
                    "power",
                    "SI",
                    "B"
                  ],
                  "default": "B"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "labelalias": {
              "description": "Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.",
              "default": false
            },
            "len": {
              "oneOf": [
                {
                  "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "lenmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "fraction"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "minexponent": {
              "oneOf": [
                {
                  "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
                  "type": "number",
                  "minimum": 0,
                  "default": 3
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "nticks": {
              "oneOf": [
                {
                  "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "orientation": {
              "oneOf": [
                {
                  "description": "Sets the orientation of the colorbar.",
                  "enum": [
                    "h",
                    "v"
                  ],
                  "default": "v"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinecolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "outlinewidth": {
              "oneOf": [
                {
                  "description": "Sets the width (in px) of the axis line.",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "separatethousands": {
              "oneOf": [
                {
                  "description": "If \"true\", even 4-digit integers are separated",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showexponent": {
              "oneOf": [
                {
                  "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticklabels": {
              "oneOf": [
                {
                  "description": "Determines whether or not the tick labels are drawn.",
                  "type": "boolean",
                  "default": true
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showtickprefix": {
              "oneOf": [
                {
                  "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "showticksuffix": {
              "oneOf": [
                {
                  "description": "Same as `showtickprefix` but for tick suffixes.",
                  "enum": [
                    "all",
                    "first",
                    "last",
                    "none"
                  ],
                  "default": "all"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thickness": {
              "oneOf": [
                {
                  "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
                  "type": "number",
                  "minimum": 0,
                  "default": 30
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "thicknessmode": {
              "oneOf": [
                {
                  "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
                  "enum": [
                    "fraction",
                    "pixels"
                  ],
                  "default": "pixels"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tick0": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "tickangle": {
              "oneOf": [
                {
                  "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180,
                  "default": "auto"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickfont": {
              "type": "object",
              "properties": {
                "color": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/color",
                      "default": "#444"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "family": {
                  "oneOf": [
                    {
                      "$ref": "#/$defs/query-string"
                    },
                    {
                      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                      "type": "string",
                      "pattern": ".*\\S.*$"
                    }
                  ]
                },
                "lineposition": {
                  "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
                  "oneOf": [
                    {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    {
                      "type": "string",
                      "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                    }
                  ],
                  "default": "none"
                },
                "shadow": {
                  "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                  "type": "string",
                  "default": "none"
                },
                "size": {
                  "oneOf": [
                    {
                      "type": "number",
                      "minimum": 1
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "style": {
                  "oneOf": [
                    {
                      "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                      "enum": [
                        "normal",
                        "italic"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "textcase": {
                  "oneOf": [
                    {
                      "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                      "enum": [
                        "normal",
                        "word caps",
                        "upper",
                        "lower"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "variant": {
                  "oneOf": [
                    {
                      "description": "Sets the variant of the font.",
                      "enum": [
                        "normal",
                        "small-caps",
                        "all-small-caps",
                        "all-petite-caps",
                        "petite-caps",
                        "unicase"
                      ],
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "weight": {
                  "oneOf": [
                    {
                      "description": "Sets the weight (or boldness) of the font.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 1000,
                      "default": "normal"
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                }
              }
            },
            "tickformat": {
              "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
              "type": "string",
              "default": ""
            },
            "tickformatstops": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "object",
                  "properties": {
                    "tickformatstop": {
                      "type": "object",
                      "properties": {
                        "dtickrange": {
                          "oneOf": [
                            {
                              "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/$defs/query-string"
                                  },
                                  {}
                                ]
                              },
                              "minItems": 2,
                              "maxItems": 2
                            },
                            {
                              "$ref": "#/$defs/query-string"
                            }
                          ]
                        },
                        "enabled": {
                          "oneOf": [
                            {
                              "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
                              "type": "boolean",
                              "default": true
                            },
                            {
                              "$ref": "#/$defs/query-string"
                            }
                          ]
                        },
                        "name": {
                          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
                          "type": "string"
                        },
                        "templateitemname": {
                          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
                          "type": "string"
                        },
                        "value": {
                          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
                          "type": "string",
                          "default": ""
                        }
                      }
                    }
                  }
                }
              }
            },
            "ticklabeloverflow": {
              "oneOf": [
                {
                  "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
                  "enum": [
                    "allow",
                    "hide past div",
                    "hide past domain"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelposition": {
              "oneOf": [
                {
                  "description": "Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.",
                  "enum": [
                    "outside",
                    "inside",
                    "outside top",
                    "inside top",
                    "outside left",
                    "inside left",
                    "outside right",
                    "inside right",
                    "outside bottom",
                    "inside bottom"
                  ],
                  "default": "outside"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklabelstep": {
              "oneOf": [
                {
                  "description": "Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.",
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticklen": {
              "oneOf": [
                {
                  "description": "Sets the tick length (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 5
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickmode": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "tickprefix": {
              "description": "Sets a tick label prefix.",
              "type": "string",
              "default": ""
            },
            "ticks": {
              "oneOf": [
                {
                  "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
                  "enum": [
                    "outside",
                    "inside",
                    ""
                  ],
                  "default": ""
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticksuffix": {
              "description": "Sets a tick label suffix.",
              "type": "string",
              "default": ""
            },
            "ticktext": {
              "oneOf": [
                {
                  "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ticktextsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `ticktext`.",
              "type": "string"
            },
            "tickvals": {
              "oneOf": [
                {
                  "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "tickvalssrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `tickvals`.",
              "type": "string"
            },
            "tickwidth": {
              "oneOf": [
                {
                  "description": "Sets the tick width (in px).",
                  "type": "number",
                  "minimum": 0,
                  "default": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "title": {
              "type": "object",
              "properties": {
                "font": {
                  "type": "object",
                  "properties": {
                    "color": {
                      "oneOf": [
                        {
                          "$ref": "#/$defs/color",
                          "default": "#444"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "family": {
                      "oneOf": [
                        {
                          "$ref": "#/$defs/query-string"
                        },
                        {
                          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
                          "type": "string",
                          "pattern": ".*\\S.*$"
                        }
                      ]
                    },
                    "lineposition": {
                      "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
                      "oneOf": [
                        {
                          "type": "string",
                          "enum": [
                            "none"
                          ]
                        },
                        {
                          "type": "string",
                          "pattern": "^(under|over|through)(\\+(under|over|through))*$"
                        }
                      ],
                      "default": "none"
                    },
                    "shadow": {
                      "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
                      "type": "string",
                      "default": "none"
                    },
                    "size": {
                      "oneOf": [
                        {
                          "type": "number",
                          "minimum": 1
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "style": {
                      "oneOf": [
                        {
                          "description": "Sets whether a font should be styled with a normal or italic face from its family.",
                          "enum": [
                            "normal",
                            "italic"
                          ],
                          "default": "normal"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "textcase": {
                      "oneOf": [
                        {
                          "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
                          "enum": [
                            "normal",
                            "word caps",
                            "upper",
                            "lower"
                          ],
                          "default": "normal"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "variant": {
                      "oneOf": [
                        {
                          "description": "Sets the variant of the font.",
                          "enum": [
                            "normal",
                            "small-caps",
                            "all-small-caps",
                            "all-petite-caps",
                            "petite-caps",
                            "unicase"
                          ],
                          "default": "normal"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    },
                    "weight": {
                      "oneOf": [
                        {
                          "description": "Sets the weight (or boldness) of the font.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 1000,
                          "default": "normal"
                        },
                        {
                          "$ref": "#/$defs/query-string"
                        }
                      ]
                    }
                  }
                },
                "side": {
                  "oneOf": [
                    {
                      "description": "Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*.",
                      "enum": [
                        "right",
                        "top",
                        "bottom"
                      ]
                    },
                    {
                      "$ref": "#/$defs/query-string"
                    }
                  ]
                },
                "text": {
                  "description": "Sets the title of the color bar.",
                  "type": "string"
                }
              }
            },
            "x": {
              "oneOf": [
                {
                  "description": "Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.",
                  "enum": [
                    "left",
                    "center",
                    "right"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xpad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the x direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "xref": {
              "oneOf": [
                {
                  "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "y": {
              "oneOf": [
                {
                  "description": "Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.",
                  "type": "number"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yanchor": {
              "oneOf": [
                {
                  "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.",
                  "enum": [
                    "top",
                    "middle",
                    "bottom"
                  ]
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "ypad": {
              "oneOf": [
                {
                  "description": "Sets the amount of padding (in px) along the y direction.",
                  "type": "number",
                  "minimum": 0,
                  "default": 10
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "yref": {
              "oneOf": [
                {
                  "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
                  "enum": [
                    "container",
                    "paper"
                  ],
                  "default": "paper"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "colorscale": {
          "type": "object",
          "properties": {
            "impliedEdits": {}
          }
        },
        "colorsrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `color`.",
          "type": "string"
        },
        "cornerradius": {
          "description": "Sets the rounding of corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %). Defaults to `layout.barcornerradius`. In stack or relative barmode, the first trace to set cornerradius is used for the whole stack."
        },
        "line": {
          "type": "object",
          "properties": {
            "autocolorscale": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "cauto": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "cmax": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "cmid": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "cmin": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "coloraxis": {
              "oneOf": [
                {
                  "$ref": "#/$defs/query-string"
                },
                {
                  "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
                  "type": "string",
                  "pattern": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
                  "default": null
                }
              ]
            },
            "colorscale": {
              "type": "object",
              "properties": {
                "impliedEdits": {}
              }
            },
            "colorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `color`.",
              "type": "string"
            },
            "reversescale": {
              "oneOf": [
                {
                  "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
                  "type": "boolean",
                  "default": false
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "width": {
              "description": "Sets the width (in px) of the lines bounding the marker points.",
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 0
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "widthsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `width`.",
              "type": "string"
            }
          }
        },
        "opacity": {
          "description": "Sets the opacity of the bars.",
          "oneOf": [
            {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 1
            },
            {
              "type": "array",
              "items": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "default": 1
              }
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "opacitysrc": {
          "description": "Sets the source reference on Chart Studio Cloud for `opacity`.",
          "type": "string"
        },
        "pattern": {
          "type": "object",
          "properties": {
            "bgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "bgcolorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `bgcolor`.",
              "type": "string"
            },
            "fgcolor": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/color",
                    "default": "#444"
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fgcolorsrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `fgcolor`.",
              "type": "string"
            },
            "fgopacity": {
              "oneOf": [
                {
                  "description": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "fillmode": {
              "oneOf": [
                {
                  "description": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.",
                  "enum": [
                    "replace",
                    "overlay"
                  ],
                  "default": "replace"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shape": {
              "description": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.",
              "oneOf": [
                {
                  "enum": [
                    "",
                    "/",
                    "\\",
                    "x",
                    "-",
                    "|",
                    "+",
                    "."
                  ],
                  "default": ""
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "",
                      "/",
                      "\\",
                      "x",
                      "-",
                      "|",
                      "+",
                      "."
                    ],
                    "default": ""
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "shapesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `shape`.",
              "type": "string"
            },
            "size": {
              "description": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.",
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "default": 8
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "default": 8
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "sizesrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `size`.",
              "type": "string"
            },
            "solidity": {
              "description": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.",
              "oneOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.3
                },
                {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 0.3
                  }
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "soliditysrc": {
              "description": "Sets the source reference on Chart Studio Cloud for `solidity`.",
              "type": "string"
            }
          }
        },
        "reversescale": {
          "oneOf": [
            {
              "description": "Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "showscale": {
          "oneOf": [
            {
              "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.",
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "metasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `meta`.",
      "type": "string"
    },
    "name": {
      "description": "Sets the trace name. The trace name appears as the legend item and on hover.",
      "type": "string"
    },
    "nbinsx": {
      "oneOf": [
        {
          "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.",
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "nbinsy": {
      "oneOf": [
        {
          "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.",
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "offsetgroup": {
      "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
      "type": "string",
      "default": ""
    },
    "opacity": {
      "oneOf": [
        {
          "description": "Sets the opacity of the trace.",
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "default": 1
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "orientation": {
      "oneOf": [
        {
          "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
          "enum": [
            "v",
            "h"
          ]
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "outsidetextfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "family": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        },
        "lineposition": {
          "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(under|over|through)(\\+(under|over|through))*$"
            }
          ],
          "default": "none"
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "type": "string",
          "default": "none"
        },
        "size": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "oneOf": [
            {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "enum": [
                "normal",
                "italic"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textcase": {
          "oneOf": [
            {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "enum": [
                "normal",
                "word caps",
                "upper",
                "lower"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "variant": {
          "oneOf": [
            {
              "description": "Sets the variant of the font.",
              "enum": [
                "normal",
                "small-caps",
                "all-small-caps",
                "all-petite-caps",
                "petite-caps",
                "unicase"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "weight": {
          "oneOf": [
            {
              "description": "Sets the weight (or boldness) of the font.",
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "selected": {
      "type": "object",
      "properties": {
        "marker": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "oneOf": [
                {
                  "description": "Sets the marker opacity of selected points.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        }
      }
    },
    "selectedpoints": {
      "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect."
    },
    "showlegend": {
      "oneOf": [
        {
          "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
          "type": "boolean",
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "stream": {
      "type": "object",
      "properties": {
        "maxpoints": {
          "oneOf": [
            {
              "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "default": 500
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "token": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        }
      }
    },
    "text": {
      "description": "Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.",
      "oneOf": [
        {
          "type": "string",
          "default": ""
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "default": ""
          }
        }
      ]
    },
    "textangle": {
      "oneOf": [
        {
          "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
          "type": "number",
          "minimum": -180,
          "maximum": 180,
          "default": "auto"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "textfont": {
      "type": "object",
      "properties": {
        "color": {
          "oneOf": [
            {
              "$ref": "#/$defs/color",
              "default": "#444"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "family": {
          "oneOf": [
            {
              "$ref": "#/$defs/query-string"
            },
            {
              "description": "HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.",
              "type": "string",
              "pattern": ".*\\S.*$"
            }
          ]
        },
        "lineposition": {
          "description": "Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "string",
              "pattern": "^(under|over|through)(\\+(under|over|through))*$"
            }
          ],
          "default": "none"
        },
        "shadow": {
          "description": "Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.",
          "type": "string",
          "default": "none"
        },
        "size": {
          "oneOf": [
            {
              "type": "number",
              "minimum": 1
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "style": {
          "oneOf": [
            {
              "description": "Sets whether a font should be styled with a normal or italic face from its family.",
              "enum": [
                "normal",
                "italic"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "textcase": {
          "oneOf": [
            {
              "description": "Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.",
              "enum": [
                "normal",
                "word caps",
                "upper",
                "lower"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "variant": {
          "oneOf": [
            {
              "description": "Sets the variant of the font.",
              "enum": [
                "normal",
                "small-caps",
                "all-small-caps",
                "all-petite-caps",
                "petite-caps",
                "unicase"
              ],
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        },
        "weight": {
          "oneOf": [
            {
              "description": "Sets the weight (or boldness) of the font.",
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": "normal"
            },
            {
              "$ref": "#/$defs/query-string"
            }
          ]
        }
      }
    },
    "textposition": {
      "oneOf": [
        {
          "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If *none*, no text appears.",
          "enum": [
            "inside",
            "outside",
            "auto",
            "none"
          ],
          "default": "auto"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "textsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `text`.",
      "type": "string"
    },
    "texttemplate": {
      "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label` and `value`.",
      "type": "string",
      "default": ""
    },
    "uid": {
      "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
      "type": "string"
    },
    "uirevision": {
      "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves."
    },
    "unselected": {
      "type": "object",
      "properties": {
        "marker": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            },
            "opacity": {
              "oneOf": [
                {
                  "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        },
        "textfont": {
          "type": "object",
          "properties": {
            "color": {
              "oneOf": [
                {
                  "$ref": "#/$defs/color",
                  "default": "#444"
                },
                {
                  "$ref": "#/$defs/query-string"
                }
              ]
            }
          }
        }
      }
    },
    "visible": {
      "oneOf": [
        {
          "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
          "enum": [
            true,
            false,
            "legendonly"
          ],
          "default": true
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "x": {
      "oneOf": [
        {
          "description": "Sets the sample data to be binned on the x axis.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xaxis": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
          "type": "string",
          "pattern": "^x([2-9]|[1-9][0-9]+)?$",
          "default": "x"
        }
      ]
    },
    "xbins": {
      "type": "object",
      "properties": {
        "end": {
          "description": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers."
        },
        "size": {
          "description": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above."
        },
        "start": {
          "description": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins."
        }
      }
    },
    "xcalendar": {
      "oneOf": [
        {
          "description": "Sets the calendar system to use with `x` date data.",
          "enum": [
            "chinese",
            "coptic",
            "discworld",
            "ethiopian",
            "gregorian",
            "hebrew",
            "islamic",
            "jalali",
            "julian",
            "mayan",
            "nanakshahi",
            "nepali",
            "persian",
            "taiwan",
            "thai",
            "ummalqura"
          ],
          "default": "gregorian"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "xhoverformat": {
      "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
      "type": "string",
      "default": ""
    },
    "xsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `x`.",
      "type": "string"
    },
    "y": {
      "oneOf": [
        {
          "description": "Sets the sample data to be binned on the y axis.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "yaxis": {
      "oneOf": [
        {
          "$ref": "#/$defs/query-string"
        },
        {
          "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
          "type": "string",
          "pattern": "^y([2-9]|[1-9][0-9]+)?$",
          "default": "y"
        }
      ]
    },
    "ybins": {
      "type": "object",
      "properties": {
        "end": {
          "description": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers."
        },
        "size": {
          "description": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above."
        },
        "start": {
          "description": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins."
        }
      }
    },
    "ycalendar": {
      "oneOf": [
        {
          "description": "Sets the calendar system to use with `y` date data.",
          "enum": [
            "chinese",
            "coptic",
            "discworld",
            "ethiopian",
            "gregorian",
            "hebrew",
            "islamic",
            "jalali",
            "julian",
            "mayan",
            "nanakshahi",
            "nepali",
            "persian",
            "taiwan",
            "thai",
            "ummalqura"
          ],
          "default": "gregorian"
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    },
    "yhoverformat": {
      "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
      "type": "string",
      "default": ""
    },
    "ysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for `y`.",
      "type": "string"
    },
    "zorder": {
      "oneOf": [
        {
          "description": "Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.",
          "type": "integer",
          "default": 0
        },
        {
          "$ref": "#/$defs/query-string"
        }
      ]
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}