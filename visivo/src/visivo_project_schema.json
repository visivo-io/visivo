{"$defs": {"AggregationEnum": {"description": "The options for aggregating table columns. Details on the calculations below:<br>\n\n    **count** - Finds the number of rows in a group<br>\n\n    **extent** - Finds the minimum and maximum values of a group of rows<br>\n\n    **max** - Finds the maximum value of a group of rows<br>\n\n    **mean** - Finds the average value of a group of rows<br>\n\n    **median** - Finds the median value of a group of rows<br>\n\n    **min** - Finds the minimum value of a group of rows<br>\n\n    **sum** - sums the values of a group of rows<br>\n\n    **uniqueCount** - Finds the number of unique values of a group of rows<br>\n\n    **unique** - Finds the unique values of a group of rows", "enum": ["count", "extent", "max", "mean", "median", "min", "sum", "uniqueCount", "unique"], "title": "AggregationEnum", "type": "string"}, "Alert": {"additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "if_": {"default": null, "description": "A EvalString that must evaluate to true for the alert to fire", "title": "If ", "type": "string"}, "destinations": {"default": [], "items": {"discriminator": {"mapping": {"console": "#/$defs/ConsoleDestination", "email": "#/$defs/EmailDestination", "slack": "#/$defs/SlackDestination"}, "propertyName": "type"}, "oneOf": [{"$ref": "#/$defs/SlackDestination"}, {"$ref": "#/$defs/EmailDestination"}, {"$ref": "#/$defs/ConsoleDestination"}]}, "title": "Destinations", "type": "array"}}, "title": "Alert", "type": "object"}, "Attachment": {"additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "schema_name": {"default": "Name of the schema to attach the source under.", "title": "Schema Name", "type": "string"}, "source": {"$ref": "#/$defs/SqliteSource", "default": null, "description": "Local SQLite database source to attach in the connection that will be available in the base SQL query."}}, "title": "Attachment", "type": "object"}, "BigQuerySource": {"additionalProperties": false, "description": "BigQuerySources hold the connection information to Google BigQuery instances.\n\n!!! info BigQuery Authentication\n    You can authenticate BigQuery in one of two ways:\n     1. Pass a base64 encoded service account key to the `credentials_base64` field.\n     2. Set the absolute file path to the credentials file in a environment variable named `GOOGLE_APPLICATION_CREDENTIALS`.\n\n    === Base64 Encoded Credentials\n        Using encoding the service key json credential file to base64 can be a useful way to authenticate BigQuery\n        without logging into Google Cloud Console each time and makes it easier to manage credentials in CI/CD pipelines.\n\n        However utilizing base64 encoding requires a few extra steps:\n\n        1. Create a Google Cloud Service Account\n            1. Go to the [Google Cloud Console](https://console.cloud.google.com)\n            2. Select your project\n            3. Navigate to IAM & Admin > Service Accounts\n            4. Click Create Service Account\n            5. Give it a name and description\n            6. Grant it the BigQuery Admin role (or more restrictive custom role)\n            7. Click Done\n        2. Create and download credentials\n            1. Find your service account in the list\n            2. Click the three dots menu > Manage keys\n            3. Click Add Key > Create new key\n            4. Choose JSON format\n            5. Click Create - this downloads your credentials file\n        3. Convert credentials to base64\n            ```bash\n            # On Linux/Mac\n            python -m base64 < credentials.json > encoded.txt\n\n            # On Windows PowerShell\n            [Convert]::ToBase64String([System.IO.File]::ReadAllBytes(credentials.json)) > encoded.txt\n            ```\n        4. Use the contents of encoded.txt as your credentials_base64 value. You can store the single line key in your untracked env file and use the `{% raw %}{{ env_var('VAR_NAME') }}{% endraw %}` syntax to reference the environment variable in your Visivo config.\n\n    === `GOOGLE_APPLICATION_CREDENTIALS` Environment Variable\n        If you use gcloud locally you probably have this environment variable configured already.\n\n        Run `echo $GOOGLE_APPLICATION_CREDENTIALS` in your terminal. If it returns your crendetials then\n        you're all set. and can configure a BigQuerySource without the `credentials_base64` field.\n\n        If you don't have the environment variable, follow these steps:\n\n        1. Create a Google Cloud Service Account\n            1. Go to the [Google Cloud Console](https://console.cloud.google.com)\n            2. Select your project\n            3. Navigate to IAM & Admin > Service Accounts\n            4. Click Create Service Account\n            5. Give it a name and description\n            6. Grant it the BigQuery Admin role (or more restrictive custom role)\n            7. Click Done\n        2. Create and download credentials\n            1. Find your service account in the list\n            2. Click the three dots menu > Manage keys\n            3. Click Add Key > Create new key\n            4. Choose JSON format\n            5. Click Create - this downloads your credentials file\n        3. Set the environment variable\n            You can set the environment variable in your shell profile file.\n            ```bash\n            export GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/credentials.json\n            ```\n            or in your untracked .env file.\n            ```\n            GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/credentials.json\n            ```\n        This method is easier to manage and does not require any extra steps to authenticate.\n\n    The service account needs at minimum the BigQuery User role to execute queries.\n    For more restricted access, you can create a custom role with just the required permissions:\n\n    - bigquery.jobs.create\n    - bigquery.tables.get\n    - bigquery.tables.getData\n    - bigquery.tables.list\n\n!!! example\n\n    === Simple\n\n        ``` yaml\n            sources:\n              - name: bigquery_source\n                type: bigquery\n                project: my-project-id\n                database: my_dataset\n                credentials_base64: {% raw %}{{ env_var('BIGQUERY_BASE64_ENCODED_CREDENTIALS') }}{% endraw %}\n        ```\n\nNote: Recommended environment variable use is covered in the [sources overview.](/topics/sources/)", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "host": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The host url of the database.", "title": "Host"}, "port": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "description": "The port of the database.", "title": "Port"}, "database": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The default BigQuery dataset to use for queries.", "title": "Database"}, "username": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Username for the database.", "title": "Username"}, "password": {"anyOf": [{"format": "password", "type": "string", "writeOnly": true}, {"type": "null"}], "default": null, "description": "Password corresponding to the username.", "title": "Password"}, "db_schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The schema that the Visivo project will use in queries.", "title": "Db Schema"}, "after_connect": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "After Connect"}, "project": {"description": "The Google Cloud project ID that contains your BigQuery dataset.", "title": "Project", "type": "string"}, "credentials_base64": {"anyOf": [{"format": "password", "type": "string", "writeOnly": true}, {"type": "null"}], "default": null, "description": "The Google Cloud service account credentials JSON string base64 encoded. Turn your JSON into a base64 string in the command line with `python -m base64 < credentials.json > encoded.txt`. Not required if GOOGLE_APPLICATION_CREDENTIALS environment variable is set. ", "title": "Credentials Base64"}, "type": {"const": "bigquery", "enum": ["bigquery"], "title": "Type", "type": "string"}, "connection_pool_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 8, "description": "The pool size that is used for this connection.", "title": "Connection Pool Size"}}, "required": ["project", "type"], "title": "BigQuerySource", "type": "object"}, "Chart": {"additionalProperties": false, "description": "## Overview\nCharts enable you to combine one or more [traces](../Trace/) with [layout](./Layout/) configurations _(titles, axis labels, ect.)_.\n\n!!! tip\n\n    You can add traces of **different types** to a chart. For example, you may want to display an [`indicator`](../Trace/Props/Indicator/)\n    on top of a [`bar`](../Trace/Props/Bar/) to show how what the bars add up to.\n\nYou can also configure interactivity in your charts by setting up a  [`selector`](../Selector/).\n\n## Common Configurations\n\n### Single Trace\n\nThis is the most common and simplest chart setup. You will use this when you want to display a single trace.\n!!! example Single Trace\n\n    ??? note Code\n\n        ``` yaml\n        models:\n          - name: Array of Numbers\n            args: [curl, -s, https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/y_values.csv]\n\n        traces:\n          - name: Simple Scatter\n            model: ref(Array of Numbers)\n            props:\n              type: scatter\n              x: ?{ ln(numbers_column)}\n              y: ?{numbers_column}\n              mode: markers\n              marker:\n                size: ?{ abs(sin(exp(numbers_column) - 5)*100) }\n                opacity: ?{ abs(cos(exp(numbers_column) - 5)*100)/100 }\n            filters:\n              - ?{ numbers_column < 400 }\n            order_by:\n              - ?{numbers_column}\n\n        charts:\n          - name: Single Trace Chart\n            traces:\n              - ref(Simple Scatter)\n            layout:\n              title:\n                text: Single Trace\n        ```\n    ![](../../../assets/example-charts/single-trace.png)\n### Duel Axis\nWhen you want to display two different types of data on the same chart, duel axis can come in handy.\n!!! tip\n\n    You can actually create a third, and fourth axis ([see plotly docs](https://plotly.com/javascript/multiple-axes/#multiple-y-axes)), however, we do not recommended using more than two yaxes.\n\nHere's a working example that you can copy and paste into your project:\n!!! example Duel Y Axes\n\n    ??? note Code\n\n        ``` yaml\n        models:\n          - name: Series of Numbers\n            args: [curl, -s, https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/y_values.csv]\n\n        traces:\n          - name: Yaxis Trace\n            model: ref(Series of Numbers)\n            props:\n              type: bar\n              y: ?{numbers_column}\n              marker:\n                color: '#713B57'\n                opacity: .7\n            order_by:\n              - ?{numbers_column}\n\n          - name: Yaxis2 Trace\n            model: ref(Series of Numbers)\n            props:\n              type: scatter\n              y: ?{ (500 -  numbers_column) }\n              yaxis: 'y2'\n              line:\n                shape: spline\n                smoothing: .1\n                color: orange\n\n            order_by:\n              - ?{numbers_column}\n\n        charts:\n          - name: Duel Axis\n            traces:\n              - ref(Yaxis2 Trace)\n              - ref(Yaxis Trace)\n            layout:\n              title:\n                text: Dual Axis\n              legend:\n                orientation: h\n              yaxis:\n                title:\n                  text: yaxis title\n                  font:\n                    size: 18\n                    color: '#713B57'\n              yaxis2:\n                title:\n                  text: yaxis2 title\n                  font:\n                    size: 18\n                    color: orange\n                side: right\n                overlaying: 'y'\n                anchor: 'y'\n                showgrid: false\n\n        ```\n    ![](../../../assets/example-charts/duel-axis.png)\n\n### Position Traces with Domains\n\nYou can use domains to position traces on your chart. This is useful when you want to display multiple traces on your chart.\nThe `domain` attribute in the trace props enables you to position your traces relative to 0,0 coordinates of the chart.\n\nHere's some working examples that you can copy and paste into your project:\n!!! example Trend Line + Multiple Indicators\n\n    ??? note Code\n\n        ``` yaml\n        models:\n          - name: Numbers From Remote CSV\n            args: [curl, -s, https://raw.githubusercontent.com/visivo-io/data/refs/heads/main/y_values.csv]\n\n        traces:\n          - name: Line Trace\n            model: ref(Numbers From Remote CSV)\n            props:\n              type: scatter\n              y: ?{numbers_column}\n              line:\n                shape: spline\n                color: orange\n\n          - name: Average Value\n            model: ref(Numbers From Remote CSV)\n            columns:\n              avg_numbers_column: avg(numbers_column)\n            props:\n              type: indicator\n              value: column(avg_numbers_column)[0]\n              number:\n                font:\n                  size: 35\n                suffix:  avg\n              domain:\n                y: [0, .7]\n                x: [.5, 1]\n\n          - name: Total Value\n            model: ref(Numbers From Remote CSV)\n            columns:\n              sum_numbers_column: sum(numbers_column)\n            props:\n              type: indicator\n              value: column(sum_numbers_column)[0]\n              number:\n                font:\n                  size: 35\n                suffix:  sum\n              domain:\n                y: [.5, 1]\n                x: [.2, .5]\n\n        charts:\n          - name: Big Number Over Line Chart\n            traces:\n              - ref(Average Value)\n              - ref(Total Value)\n              - ref(Line Trace)\n            layout:\n              title:\n                text: Indicator + Scatter Plot\n        ```\n    ![](../../../assets/example-charts/position-traces-with-domains.png)", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "selector": {"anyOf": [{"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/Selector"}]}, {"type": "null"}], "default": null, "description": "The selector for the choosing which trace data is shown.", "title": "Selector"}, "traces": {"default": [], "description": "A list of trace either written in line in the chart called using the ref() function.", "items": {"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/Trace"}]}, "title": "Traces", "type": "array"}, "layout": {"anyOf": [{"$ref": "#/$defs/Layout"}, {"type": "null"}], "default": null, "description": "A layout configuration that must adhere to the layout.schema.json file."}}, "title": "Chart", "type": "object"}, "ConsoleDestination": {"additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "called": {"default": false, "title": "Called", "type": "boolean"}, "message": {"default": "Console Destination Run", "title": "Message", "type": "string"}, "type": {"const": "console", "enum": ["console"], "title": "Type", "type": "string"}}, "required": ["type"], "title": "ConsoleDestination", "type": "object"}, "CsvScriptModel": {"additionalProperties": false, "description": "CSV Script Models are a type of model that executes a command with a given set of args.\nThis command needs to return a well formatted :fontawesome-solid-file-csv: with a header row to stdout.\n\nVisivo will be able to access the generate file as a model by storing a duckdb file in the source directory.\n\n!!! example {% raw %}\n\n    === Echo\n\n        Echoing all of your data is probably not a very practical example, but it does nicely demonstrate how the feature works!\n        ``` yaml\n        models:\n          - name: csv\n            table_name: csv\n            args:\n                - echo\n                - |\n                  x,y\n                  1,9\n                  2,1\n                  3,2\n                  4,3\n                  5,5\n                  6,8\n        ```\n\n    === Python Script\n\n        In this example we'll use python to generate a csv of processes running on your machine and make that csv available to Visivo as\n        a model for analysis.\n        ``` python title=created_processes_csv.py\n        import subprocess\n        import csv\n        import sys\n\n        # Define the CSV file to write\n        csv_file = data/processes.csv\n\n        # Execute the 'ps aux' command\n        result = subprocess.run([ps, aux], stdout=subprocess.PIPE, text=True)\n\n        # Split the output into lines\n        lines = result.stdout.strip().split(/n)\n\n        # Write CSV to stdout\n        writer = csv.writer(sys.stdout)\n        writer.writerow(\n            [USER,PID,%CPU,%MEM,VSZ,RSS,TTY,STAT,START,TIME,COMMAND]\n        )  # Header\n\n        for line in lines[1:]:  # Skip the header line from the ps output\n            row = line.split(None, 10)  # Split on whitespace, but only for the first 10 columns\n            writer.writerow(row)\n        ```\n        With your script ready to go, all you have to do is convert `python create_processes_csv.py` into the args list format in a model.\n        ``` yaml\n        models:\n          - name: processes\n            table_name: processes\n            args:\n              - python\n              - create_processes_csv.py\n        ```{% endraw %}\n\n    === CSV File\n\n        One of the best use cases for this type of model is to store a static csv in your project and cat it into a model.\n        This great because it's simple and allows you to version control your csv data.\n        ``` csv title=file.csv\n        columns,go,up,here\n        1,text,more text,6\n        2,stuff,more stuff,7\n        ```\n        Then just `cat` the csv file in a model.\n        ``` yaml\n        models:\n          - name: file_model\n            table_name: file_model\n            args:\n              - cat\n              - file.csv\n        ```\n\nThe args are python subprocess list args and you can read their source [documentation here](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.args).", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"description": "The unique name of the object across the entire project.", "title": "Name", "type": "string"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "table_name": {"default": "model", "description": "The name to give the resulting models table", "pattern": "[a-zA-Z0-9_]", "title": "Table Name", "type": "string"}, "args": {"description": "An array of the variables that build your command to run.", "items": {"type": "string"}, "title": "Args", "type": "array"}}, "required": ["name", "args"], "title": "CsvScriptModel", "type": "object"}, "Dashboard": {"additionalProperties": false, "description": "Dashboards are lists of [rows](./Row/) that enable you to build your dashboard grid.\n\n!!! tip\n\n    By leveraging [`visivo serve`](./../../../cli/#serve) while building you can quickly optimize your layout. Simply re-size your row heights and item widths, save the file and quickly see the new layout of your dashboard on localhost:8000.\n\nWithin the [rows](./Row/) you are able to organize and display `charts`, `tables`, `selectors` and `markdown` from your project as [items](./Row/Item/).\n\n<div class=grid markdown>\n\n![](../../../../assets/dashboard_layout.png)\n\n!!! note\n\n    ``` yaml title=visivo.project.yml\n    dashboards:\n      - name: Layout Example\n        rows:\n          - height: medium\n            items: #item.width default is 1\n              - chart: ...\n              - chart: ...\n              - chart: ...\n          - height: large\n            items:\n              - width: 2\n                table: ...\n              - width: 1\n                markdown: ...\n          - height: small\n            items:\n              - width: 2\n                selector: ...\n              - chart: ...\n              - chart: ...\n              - width: 2\n                chart: ...\n    ```\n\n</div>\n\nAbove you can see how changing the row heights and item widths impacts the layout of the dashboard.\n\n!!! example\n\n    `row.height` defaults to `medium` and `item.width` defaults to `1`. Specifying those fields are optional if you want to use the default values\n    ``` yaml\n    dashboards:\n      - name: any-name-you-want  #unique name of your dashboard\n        rows:\n          - height: medium\n            items:\n              - width: 2  #widths are evaluated relative to other items in the row\n                table: ref(a-table-name)\n              - width 1  #this chart will be 1/3 of the row\n                chart: ref(a-chart-name)\n          - height: small\n            items:\n              - markdown: # Some inline **markdown**\n              - chart: ref(another-chart)\n              - width: 2\n                chart: ref(a-third-chart)\n    ```", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"description": "The unique name of the dashboard across the entire project", "title": "Name", "type": "string"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "level": {"anyOf": [{"type": "integer"}, {"type": "string"}, {"type": "null"}], "default": null, "description": "The importance level of the dashboard (either an index number or level title)", "title": "Level"}, "tags": {"description": "A list of tags associated with the dashboard", "items": {"type": "string"}, "title": "Tags", "type": "array"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A description of the dashboard's purpose and contents", "title": "Description"}, "type": {"const": "internal", "default": "internal", "description": "The type of dashboard (always 'internal')", "enum": ["internal"], "title": "Type", "type": "string"}, "rows": {"default": [], "description": "A list of `Row` objects", "items": {"$ref": "#/$defs/Row"}, "title": "Rows", "type": "array"}}, "required": ["name"], "title": "Dashboard", "type": "object"}, "Dbt": {"description": "Configuration for pulling models and sources from a dbt project.\n\nThe integration will create models and sources from the dbt project and store them in the output directory.\n\nIt will pull all the targets defined in the profiles.yml file as sources.\nEach of these sources will be named in the format prefix + dbt_profile + dbt_target.\n\nThen it will create each of the dbt models as Visivo models pointing to the default profile and target.\nThese models will be named in the format prefix + dbt_model.\n\nUsing all the default values:\n``` yaml\ndbt:\n  enabled: true\n```\n\nOr specify the input and/or output file and locations:\n\n``` yaml\ndbt:\n  output_file: includes/dbt.yml\n  dbt_project_yml_location: dbt\n  profiles_yml_location: dbt\n```", "properties": {"enabled": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": true, "description": "Whether to enable the dbt phase.  Defaults to true.", "title": "Enabled"}, "output_file": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The file to store the dbt models and sources relative to the working directory.  Defaults to the '$output_directory/dbt.yml'. It is useful to store the file in a different location so it can be checked into source control.", "title": "Output File"}, "dbt_project_yml_location": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Location for the dbt_project.yml file relative to the working directory.  Defaults to the current working directory.", "title": "Dbt Project Yml Location"}, "profiles_yml_location": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Location for the profiles.yml file relative to the working directory.  Defaults to the current working directory.", "title": "Profiles Yml Location"}, "prefix": {"default": "", "description": "Prefix for the dbt models and sources. Defaults to no prefix. You may want to add one if the dbt model names are in conflict with other models in your project.", "title": "Prefix", "type": "string"}}, "title": "Dbt", "type": "object"}, "Defaults": {"additionalProperties": false, "properties": {"alert_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The name of an alert defined elsewhere in the Visivo project.", "title": "Alert Name"}, "source_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The name of a source defined elsewhere in the Visivo project.", "title": "Source Name"}, "threads": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 8, "description": "The number of threads to use when running queries.", "title": "Threads"}, "thumbnail_mode": {"default": "missing", "description": "Mode for thumbnail generation: 'none' to disable, 'missing' to generate only missing thumbnails, 'all' to generate all thumbnails", "enum": ["none", "missing", "all"], "title": "Thumbnail Mode", "type": "string"}, "levels": {"description": "Enables you to customize the project level view of your dashboards. Ordered list of dashboard levels with titles and descriptions", "examples": [{"description": "The most important dashboards and metrics for the organization", "title": "Overview"}, {"description": "The most important dashboards & metrics for a department", "title": "Department"}], "items": {"$ref": "#/$defs/Level"}, "title": "Levels", "type": "array"}}, "title": "Defaults", "type": "object"}, "DuckdbAttachment": {"additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "schema_name": {"default": "Name of the schema to attach the source under.", "title": "Schema Name", "type": "string"}, "source": {"$ref": "#/$defs/DuckdbSource", "default": null, "description": "Local Duckdb database source to attach in the connection that will be available in the base SQL query."}}, "title": "DuckdbAttachment", "type": "object"}, "DuckdbSource": {"additionalProperties": false, "description": "DuckdbSources hold the connection information to DuckDB data sources.\n\n!!! example\n\n    === Simple\n\n        ``` yaml\n            sources:\n              - name: duckdb_source\n                type: duckdb\n                database: local/file/database.db\n                connection_pool_size: 2\n        ```\n\n!!! note\n\n    Recommended environment variable use is covered in the [sources overview.](/topics/sources/)", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "host": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The host url of the database.", "title": "Host"}, "port": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "description": "The port of the database.", "title": "Port"}, "database": {"description": "The database that the Visivo project will use in queries.", "title": "Database", "type": "string"}, "username": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Username for the database.", "title": "Username"}, "password": {"anyOf": [{"format": "password", "type": "string", "writeOnly": true}, {"type": "null"}], "default": null, "description": "Password corresponding to the username.", "title": "Password"}, "db_schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The schema that the Visivo project will use in queries.", "title": "Db Schema"}, "type": {"const": "duckdb", "enum": ["duckdb"], "title": "Type", "type": "string"}, "connection_pool_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 1, "description": "The pool size that is used for this connection.", "title": "Connection Pool Size"}, "attach": {"anyOf": [{"items": {"$ref": "#/$defs/DuckdbAttachment"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of other local Duckdb database sources to attach in the connection that will be available in the base SQL query.", "title": "Attach"}}, "required": ["database", "type"], "title": "DuckdbSource", "type": "object"}, "EmailDestination": {"additionalProperties": false, "description": "You can configure email destinations for any SMTP provider. Here's an example of this configuration looks in your yaml file:\n``` yaml\ndestinations:\n  - name: email-destination #any unique name of your choosing\n    type: email\n    subject: [ALERT] Your Visivo Tests Have Failed #can be any message you want\n    to: someone@your_company.com\n    port: 2525 #is this port by default\n    host: your_company_email_server.com\n    username: someones_username\n    password: {% raw %}{{ env_var('EMAIL_PASSWORD')}}{% endraw %} #We'd recommend using environment variables here for security\n\n```", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "type": {"const": "email", "default": null, "description": "The type of alert destination.", "enum": ["email"], "title": "Type", "type": "string"}, "subject": {"default": "Visivo Destination", "description": "Subject of the alert email.", "title": "Subject", "type": "string"}, "to": {"default": null, "description": "The email to send the alert to.", "title": "To", "type": "string"}, "port": {"default": 2525, "description": "The port of the email server that the destination is connecting to.", "title": "Port", "type": "integer"}, "host": {"default": null, "description": "The host of the email server that the destination is connecting to.", "title": "Host", "type": "string"}, "username": {"default": null, "description": "The username for authenticating the email server.", "title": "Username", "type": "string"}, "password": {"default": null, "description": "The password for authenticating the email server.", "title": "Password", "type": "string"}}, "title": "EmailDestination", "type": "object"}, "ExternalDashboard": {"additionalProperties": false, "description": "Represents an external dashboard that links to another system or URL", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"description": "The unique name of the dashboard across the entire project", "title": "Name", "type": "string"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "level": {"anyOf": [{"type": "integer"}, {"type": "string"}, {"type": "null"}], "default": null, "description": "The importance level of the dashboard (either an index number or level title)", "title": "Level"}, "tags": {"description": "A list of tags associated with the dashboard", "items": {"type": "string"}, "title": "Tags", "type": "array"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A description of the dashboard's purpose and contents", "title": "Description"}, "type": {"const": "external", "default": "external", "description": "The type of dashboard (always 'external')", "enum": ["external"], "title": "Type", "type": "string"}, "href": {"description": "URL to the external dashboard", "format": "uri", "maxLength": 2083, "minLength": 1, "title": "Href", "type": "string"}}, "required": ["name", "href"], "title": "ExternalDashboard", "type": "object"}, "HeightEnum": {"enum": ["compact", "xsmall", "small", "medium", "large", "xlarge", "xxlarge"], "title": "HeightEnum", "type": "string"}, "Include": {"additionalProperties": false, "description": "Include's can be used to break apart a project file with references to other files. This includes files from remote github repositories.\n\n[Read more about includes here ](including.md)", "properties": {"path": {"default": null, "description": "The path or git reference to external yml files to include in this project", "title": "Path", "type": "string"}}, "title": "Include", "type": "object"}, "Item": {"additionalProperties": false, "description": "The Item houses a single chart, table, selector or markdown object.\n\nIt also informs the width that the chart, table or markdown should occupy within a row. Widths are evaluated for each item in a row relative to all of the other items in the row.\n\nIn the example below, the markdown would take up 1/4th of the row and would be positioned on the left edge. The table would also take up 1/4th of the page and would sit to the right of the markdown. The chart would take up 1/2 of the page and would touch the right edge of the row.\n\n``` yaml\nitems:\n  - width: 1\n    markdown: # Some inline **markdown**\n  - width: 1\n    table: ref(table-name)\n  - width: 2\n    chart: ref(chart-name)\n  - width: 1\n    selector: ref(selector-name)\n```\n## Markdown\nYou can use markdown to add formatted text to your dashboard. Visivo markdown supports [CommonMark](https://commonmark.org/help/) and [GitHub Flavored Markdown](https://github.github.com/gfm/). You can also\nrender raw HTML within your markdown.\n\nTo control the alignment of markdown content, you can use the `align` and `justify` properties.\n=== Horizontal Alignment (align)\n    Controls how text aligns horizontally within the container:\n\n    `align: left` (default)\n    ```\n    [Header     ]\n    [Paragraph  ]\n    [List       ]\n    ```\n\n    `align: center`\n    ```\n    [  Header   ]\n    [ Paragraph ]\n    [   List    ]\n    ```\n\n    `align: right`\n    ```\n    [     Header]\n    [  Paragraph]\n    [      List]\n    ```\n\n=== Vertical Distribution (justify)\n    Controls how content blocks are distributed vertically in fixed-height containers:\n\n    `justify: start` (default)\n    ```\n    [Header     ]\n    [Paragraph  ]\n    [List       ]\n    [           ]\n    [           ]\n    ```\n\n    `justify: center`\n    ```\n    [           ]\n    [Header     ]\n    [Paragraph  ]\n    [List       ]\n    [           ]\n    ```\n\n    `justify: between`\n    ```\n    [Header     ]\n    [           ]\n    [Paragraph  ]\n    [           ]\n    [List       ]\n    ```\n\n    `justify: around`\n    ```\n    [           ]\n    [Header     ]\n    [           ]\n    [Paragraph  ]\n    [           ]\n    [List       ]\n    [           ]\n    ```\n\n    `justify: evenly`\n    ```\n    [           ]\n    [Header     ]\n    [Paragraph  ]\n    [List       ]\n    [           ]\n    ```\n\n    `justify: end`\n    ```\n    [           ]\n    [           ]\n    [Header     ]\n    [Paragraph  ]\n    [List       ]\n    ```", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "width": {"default": 1, "description": "The width of the Item determines is evaluated relative to the other items in a row.", "title": "Width", "type": "integer"}, "markdown": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Markdown text to include in the dashboard.", "title": "Markdown"}, "align": {"anyOf": [{"enum": ["left", "center", "right"], "type": "string"}, {"type": "null"}], "default": null, "description": "Alignment of markdown content. Only valid when markdown is set. Options are 'left', 'center', or 'right'.", "title": "Align"}, "justify": {"anyOf": [{"enum": ["start", "end", "center", "between", "around", "evenly"], "type": "string"}, {"type": "null"}], "default": null, "description": "Justification of markdown content within its container. Options are 'start', 'end', 'center', 'between', 'around', or 'evenly'.", "title": "Justify"}, "chart": {"anyOf": [{"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/Chart"}]}, {"type": "null"}], "default": null, "description": "A chart object defined inline or a ref() to a chart.", "title": "Chart"}, "table": {"anyOf": [{"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/Table"}]}, {"type": "null"}], "default": null, "description": "A Table object defined inline or a ref() to a table", "title": "Table"}, "selector": {"anyOf": [{"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/Selector"}]}, {"type": "null"}], "default": null, "description": "A Selector object defined inline or a ref() to a selector", "title": "Selector"}}, "title": "Item", "type": "object"}, "Layout": {"additionalProperties": true, "properties": {}, "title": "Layout", "type": "object"}, "Level": {"description": "Represents a dashboard level with title and description", "properties": {"title": {"description": "Display title for this level", "title": "Title", "type": "string"}, "description": {"description": "Description of this level's purpose", "title": "Description", "type": "string"}}, "required": ["title", "description"], "title": "Level", "type": "object"}, "LocalMergeModel": {"additionalProperties": false, "description": "Local Merge Models are models that allow you to merge data from multiple other models locally.\n\n!!! note\n\n    Any joining is done in a local DuckDB database. While more efficient than SQLite,\n    it's still primarily designed for medium-sized datasets.\n\n!!! example {% raw %}\n\n    === Internal join External\n\n        Here is an example of merging two models that are defined in your project. One that is external and one that is internal.\n        ``` yaml\n        models:\n          - name: local_merge\n            models:\n                - ref(first_domain_model)\n                - ref(external_data_model)\n            sql: SELECT * FROM first_domain_model.model AS fdm JOIN external_data_model.model AS edm ON fdm.external_id = edm.id\n        ```\n\n{% endraw %}", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "sql": {"description": "The sql used to generate your base data", "title": "Sql", "type": "string"}, "models": {"description": "A model object defined inline or a ref() to a model.", "items": {"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/Model"}]}, "title": "Models", "type": "array"}}, "required": ["sql", "models"], "title": "LocalMergeModel", "type": "object"}, "Model": {"additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}}, "title": "Model", "type": "object"}, "MysqlSource": {"additionalProperties": false, "description": "MysqlSources hold the connection information to MySQL data sources.\n\n!!! example\n\n    === Simple\n\n        ``` yaml\n            sources:\n              - name: mysql_source\n                type: mysql\n                database: database\n                username: {% raw %}{{ env_var('MYSQL_USER') }}{% endraw %}\n                password: {% raw %}{{ env_var('MYSQL_PASSWORD') }}{% endraw %}\n                connection_pool_size: 2\n        ```\n\n!!! note\n\n    Recommended environment variable use is covered in the [sources overview.](/topics/sources/)", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "host": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The host url of the database.", "title": "Host"}, "port": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "description": "The port of the database.", "title": "Port"}, "database": {"description": "The database that the Visivo project will use in queries.", "title": "Database", "type": "string"}, "username": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Username for the database.", "title": "Username"}, "password": {"anyOf": [{"format": "password", "type": "string", "writeOnly": true}, {"type": "null"}], "default": null, "description": "Password corresponding to the username.", "title": "Password"}, "db_schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The schema that the Visivo project will use in queries.", "title": "Db Schema"}, "after_connect": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "After Connect"}, "type": {"const": "mysql", "enum": ["mysql"], "title": "Type", "type": "string"}, "connection_pool_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 1, "description": "The pool size that is used for this connection.", "title": "Connection Pool Size"}}, "required": ["database", "type"], "title": "MysqlSource", "type": "object"}, "OnFailureEnum": {"enum": ["exit", "continue"], "title": "OnFailureEnum", "type": "string"}, "PostgresqlSource": {"additionalProperties": false, "description": "PostgresqlSources hold the connection information to PostgreSQL data sources.\n\n!!! example\n\n    === Simple\n\n        ``` yaml\n            sources:\n              - name: postgresql_source\n                type: postgresql\n                database: database\n                username: {% raw %}{{ env_var('PG_USER') }}{% endraw %}\n                password: {% raw %}{{ env_var('PG_PASSWORD') }}{% endraw %}\n                connection_pool_size: 2\n        ```\n\n!!! note\n\n    Recommended environment variable use is covered in the [sources overview.](/topics/sources/)", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "host": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The host url of the database.", "title": "Host"}, "port": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "description": "The port of the database.", "title": "Port"}, "database": {"description": "The database that the Visivo project will use in queries.", "title": "Database", "type": "string"}, "username": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Username for the database.", "title": "Username"}, "password": {"anyOf": [{"format": "password", "type": "string", "writeOnly": true}, {"type": "null"}], "default": null, "description": "Password corresponding to the username.", "title": "Password"}, "db_schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The schema that the Visivo project will use in queries.", "title": "Db Schema"}, "after_connect": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "After Connect"}, "type": {"const": "postgresql", "enum": ["postgresql"], "title": "Type", "type": "string"}, "connection_pool_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 1, "description": "The pool size that is used for this connection.", "title": "Connection Pool Size"}}, "required": ["database", "type"], "title": "PostgresqlSource", "type": "object"}, "Row": {"additionalProperties": false, "description": "Rows are the horizontal component of the dashboard grid and house 1 to many [Items](./Item/).\n\n!!! tip\n    You can set the height of a row using the `height` attribute on a row\n\n    ??? information Row Height Options in Pixels\n\n        | Height | Pixels |\n        |------------|-------|\n        | compact | wrapped |\n        | xsmall | 128 |\n        | small | 256 |\n        | medium | 396 |\n        | large | 512 |\n        | xlarge | 768 |\n        | xxlarge | 1024 |", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "height": {"$ref": "#/$defs/HeightEnum", "default": "medium", "description": "Sets the height of the row."}, "items": {"default": null, "description": "A list of items containing tables, charts or markdown. Items are placed in the row in the order that they are listed from left to right.", "items": {"$ref": "#/$defs/Item"}, "title": "Items", "type": "array"}}, "title": "Row", "type": "object"}, "RowsPerPageEnum": {"enum": [3, 5, 15, 25, 50, 100, 500, 1000], "title": "RowsPerPageEnum", "type": "integer"}, "Selector": {"description": "Selectors enable you to toggle between multiple different traces in your chart.\n\n!!! tip\n    Selectors can also be used to add interactivity between charts different tables. You can read more about using [selectors to add interactivity here](../../../topics/interactivity).\n\nYou can configure selectors to be single select or multi-select. Single select is great if you only want to show a single trace at a time on the chart while the multi-select can be really useful for providing filtering capabilities.\n\n### Example\nHere's how you might use selectors to create interactivity between two different charts.\n``` yaml\ncharts:\n    - name: Chart One\n      selector:\n          name: Common Selector\n          type: single\n          ...\n    - name: Chart Two\n      selector: ref(Common Selector)\n      ...\n```", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "type": {"$ref": "#/$defs/SelectorType", "default": "multiple", "description": "Single or multiple selector"}, "options": {"default": [], "description": "Optional set of traces, items, or rows to create the choices list", "items": {"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}]}, "title": "Options", "type": "array"}}, "title": "Selector", "type": "object"}, "SelectorType": {"enum": ["single", "multiple"], "title": "SelectorType", "type": "string"}, "SlackDestination": {"additionalProperties": false, "description": "You can configure slack alerts by setting up an incoming message slack webhook. Once you do that, the set up in Visivo is super simple:\n``` yaml\nalerts:\n  - name: slack-destination #any name you choose\n    type: slack\n    webhook_url: {% raw %}{{ env_var(SLACK_WEBHOOK)}}{% endraw %}\n```", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "webhook_url": {"default": null, "description": "An incoming message slack webhook url. You can set one of those up by following <a href='https://api.slack.com/messaging/webhooks'>these instructions</a>.", "title": "Webhook Url", "type": "string"}, "type": {"const": "slack", "description": "The type of Destination Destination. Needs to be `slack` to configure a slack destination", "enum": ["slack"], "title": "Type", "type": "string"}}, "required": ["type"], "title": "SlackDestination", "type": "object"}, "SnowflakeSource": {"additionalProperties": false, "description": "SnowflakeSources hold the connection information to Snowflake data sources.\n\n!!! example\n\n    === Simple\n\n        ``` yaml\n            sources:\n              - name: snowflake_source\n                type: snowflake\n                database: DEV\n                warehouse: DEV\n                account: ab12345.us-west-1.aws\n                db_schema: DEFAULT\n                username: {% raw %}{{ env_var('SNOWFLAKE_USER') }}{% endraw %}\n                password: {% raw %}{{ env_var('SNOWFLAKE_PASSWORD') }}{% endraw %}\n        ```\n\n    === Key Authentication\n\n        ``` yaml\n            sources:\n              - name: snowflake_source\n                type: snowflake\n                database: DEV\n                warehouse: DEV\n                account: ab12345.us-west-1.aws\n                db_schema: DEFAULT\n                username: {% raw %}{{ env_var('SNOWFLAKE_USER') }}{% endraw %}\n                private_key_path: /path/to/rsa_key.p8\n                private_key_passphrase: {% raw %}{{ env_var('DB_PRIVATE_KEY_PASSPHRASE') }}{% endraw %}\n        ```\n\nNote: Recommended environment variable use is covered in the [sources overview.](/topics/sources/)", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "host": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The host url of the database.", "title": "Host"}, "port": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "description": "The port of the database.", "title": "Port"}, "database": {"description": "The database that the Visivo project will use in queries.", "title": "Database", "type": "string"}, "username": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Username for the database.", "title": "Username"}, "password": {"anyOf": [{"format": "password", "type": "string", "writeOnly": true}, {"type": "null"}], "default": null, "description": "Password corresponding to the username.", "title": "Password"}, "db_schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The schema that the Visivo project will use in queries.", "title": "Db Schema"}, "after_connect": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "After Connect"}, "account": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The snowflake account url. Here's how you find this: [snowflake docs](https://docs.snowflake.com/en/user-guide/admin-account-identifier).", "title": "Account"}, "warehouse": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The compute warehouse that you want queries from your Visivo project to leverage.", "title": "Warehouse"}, "role": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The access role that you want to use when running queries.", "title": "Role"}, "timezone": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The timezone that you want to use by default when running queries.", "title": "Timezone"}, "private_key_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Path to the private key file (.p8) for key pair authentication. If provided, password will be ignored.", "title": "Private Key Path"}, "private_key_passphrase": {"anyOf": [{"format": "password", "type": "string", "writeOnly": true}, {"type": "null"}], "default": null, "description": "Passphrase for the private key file if it is encrypted.", "title": "Private Key Passphrase"}, "type": {"const": "snowflake", "enum": ["snowflake"], "title": "Type", "type": "string"}, "connection_pool_size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": 8, "description": "The pool size that is used for this connection.", "title": "Connection Pool Size"}}, "required": ["database", "type"], "title": "SnowflakeSource", "type": "object"}, "SqlModel": {"additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "sql": {"default": null, "description": "The sql used to generate your base data", "title": "Sql", "type": "string"}, "source": {"anyOf": [{"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/SqliteSource"}, {"$ref": "#/$defs/PostgresqlSource"}, {"$ref": "#/$defs/MysqlSource"}, {"$ref": "#/$defs/SnowflakeSource"}, {"$ref": "#/$defs/BigQuerySource"}]}, {"type": "null"}], "default": null, "description": "A source object defined inline or a ref() to a chart. Override the defaults.source_name", "title": "Source"}}, "title": "SqlModel", "type": "object"}, "SqliteSource": {"additionalProperties": false, "description": "SqliteSources hold the connection information to SQLite data sources.\n\n!!! example {% raw %}\n\n    === Simple\n\n        ``` yaml\n        sources:\n          - name: sqlite_source\n            database: local/file/local.db\n            type: sqlite\n        ```\n\n    === Additional Attached\n        Attaching other SQLite databases allows you to join models between databases.\n\n        ``` yaml\n        sources:\n          - name: sqlite_source\n            database: local/file/local.db\n            type: sqlite\n            attach:\n              - schema_name: static\n                name: static_source\n                database: local/static/file/local.db\n                type: sqlite\n        ```\n\n        The above source can be then used in a model and the sql for that model might look similar to: `SELECT * FROM local AS l JOIN static.data AS sd ON l.static_id=sd.id`\n{% endraw %}\n\n!!! note\n\n    Recommended environment variable use is covered in the [sources overview.](/topics/sources/)", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "host": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The host url of the database.", "title": "Host"}, "port": {"anyOf": [{"type": "integer"}, {"type": "null"}], "default": null, "description": "The port of the database.", "title": "Port"}, "database": {"description": "The database that the Visivo project will use in queries.", "title": "Database", "type": "string"}, "username": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "Username for the database.", "title": "Username"}, "password": {"anyOf": [{"format": "password", "type": "string", "writeOnly": true}, {"type": "null"}], "default": null, "description": "Password corresponding to the username.", "title": "Password"}, "db_schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The schema that the Visivo project will use in queries.", "title": "Db Schema"}, "after_connect": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "After Connect"}, "type": {"const": "sqlite", "enum": ["sqlite"], "title": "Type", "type": "string"}, "attach": {"anyOf": [{"items": {"$ref": "#/$defs/Attachment"}, "type": "array"}, {"type": "null"}], "default": null, "description": "List of other local SQLite database sources to attach in the connection that will be available in the base SQL query.", "title": "Attach"}}, "required": ["database", "type"], "title": "SqliteSource", "type": "object"}, "Table": {"additionalProperties": false, "description": "Tables enable you to quickly represent trace data in a tabular format.\n\nSince tables sit on top of trace data, the steps to create a table from scratch are as follows:\n\n1. Create a model.\n1. Create a trace with columns or props that references your model.\n1. Create a table that references the trace. Within the table.columns block you will need to explicitly state the trace columns and header names that you want to include.\n\n### Example\n``` yaml\nmodels:\n  - name: table-model\n    sql: |\n        select\n            project_name,\n            project_created_at,\n            cli_version,\n            stage_name,\n            account_name,\n            stage_archived\n        FROM visivo_project\ntraces:\n  - name: pre-table-trace\n    model: ref(table-model)\n    columns:\n        project_name: project_name\n        project_created_at: project_created_at::varchar\n        cli_version: cli_version\n        stage_name: stage_name\n        account_name: account_name\n        stage_archived: stage_archived::varchar\n    props:\n        type: scatter\n        x: column(project_created_at)\n        y: column(project_name)\ntables:\n  - name: latest-projects-table\n    traces:\n      - ref(pre-table-trace)\n    column_defs:\n      - trace_name: pre-table-trace\n        columns:\n        - header: Project Name\n          key: columns.project_name\n        - header: Project Created At\n          key: columns.project_created_at\n        - header: Project Json\n          key: columns.project_json\n        - header: CLI Version\n          key: columns.cli_version\n        - header: Stage Name\n          key: columns.stage_name\n          aggregation: uniqueCount\n        - header: Account Name\n          key: columns.account_name\n        - header: Account Name\n          key: columns.stage_archived\n```\nTables are built on the [material react table framework](https://www.material-react-table.com/).", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "selector": {"anyOf": [{"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/Selector"}]}, {"type": "null"}], "default": null, "description": "The selector for the choosing which trace data is shown.", "title": "Selector"}, "traces": {"default": [], "description": "A ref() to a trace or trace defined in line.  Data for the table will come from the trace.", "items": {"oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/Trace"}]}, "title": "Traces", "type": "array"}, "column_defs": {"anyOf": [{"items": {"$ref": "#/$defs/TableColumnDefinition"}, "type": "array"}, {"type": "null"}], "default": null, "description": "A list of column definitions. These definitions define the columns for a given trace included in this table.", "title": "Column Defs"}, "rows_per_page": {"$ref": "#/$defs/RowsPerPageEnum", "default": 50, "description": "The number of rows to show per page. Default is 50 rows"}}, "title": "Table", "type": "object"}, "TableColumn": {"additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "header": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The display name of the column. Defaults to readable key name.", "title": "Header"}, "key": {"default": null, "description": "The key to the data that will pull back the value.", "title": "Key", "type": "string"}, "aggregation": {"anyOf": [{"$ref": "#/$defs/AggregationEnum"}, {"type": "null"}], "default": null, "description": "The aggregate function that will apply to the column when a user groups the table by a different column. Defaults to none."}, "markdown": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "default": false, "description": "If true, the column content will be rendered as markdown. Defaults to false.", "title": "Markdown"}}, "title": "TableColumn", "type": "object"}, "TableColumnDefinition": {"additionalProperties": false, "description": "Table columns allow you to display a subset of the available trace data.", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "trace_name": {"default": null, "description": "The name of the trace that the column defs apply to.", "title": "Trace Name", "type": "string"}, "columns": {"description": "A list of column definitions that contain `header` and `key`. `header` is the title of the column in the table. `key` is the path to the array property you want to include.  For example 'props.x' or 'columns.x_data'.", "items": {"$ref": "#/$defs/TableColumn"}, "title": "Columns", "type": "array"}}, "required": ["columns"], "title": "TableColumnDefinition", "type": "object"}, "Test": {"additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "if_": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "If "}, "on_failure": {"$ref": "#/$defs/OnFailureEnum", "default": "exit"}, "assertions": {"default": null, "items": {"type": "string"}, "title": "Assertions", "type": "array"}}, "title": "Test", "type": "object"}, "Trace": {"additionalProperties": false, "description": "The Trace is one of the most important objects within a Visivo Project. You can think of a trace as a single series on a chart (ie. one line, a sequence of bars, a big number ect.).\n{% raw %}\n!!! example\n    `Total Revenue by Week` would be a trace. Once you define this metric in a single trace in your project, you can add it to as many charts as you want. This is especially powerful since charts are able to join disparate axis automatically. Meaning you can define a trace for `Revenue Per Week` and then define another trace for `Revenue per Day` and include both of those traces on the same chart with no extra configuration needed.\n\nThis approach has a few key advantages:\n\n* **Modularity**: Traces can appear on multiple charts & tables.\n* **Single Source of Truth**: Traces are a single source of truth.\n* **Testable**: You can write  general & fast tests to ensure that trace data is correct.\n\n## Cohorts\nTo easily cut a trace into multiple cohorts you can use the `cohort_on` attribute.\n!!! example\n    To represent `Revenue Per Week by Account Executive`. You can use the `cohort_on` attribute to split out data into different series within a single trace.\n    ``` yaml\n    traces:\n      - name: rev-per-week-by-account-executive\n        cohort_on: account_executive_name\n        model: ref(orders)\n        columns:\n          week: date_trunc('week', order_date)\n          orders: count(*)\n        props:\n          type: bar\n          x: column(week)\n          y: column(orders)\n    ```\n\nTraces are also where you define how you want to represent your data visually. Since Visivo leverages plotly for charting, you can set up a number of unique and useful trace types that are also highly customizable. See types below.\n\n## Example\n```  yaml\ntraces:\n  - name: crypto ohlc\n    model:\n      sql: 'SELECT * finance_data_atlas.FINANCE.CMCCD2019'\n    source_name: remote-snowflake\n    cohort_on: ?{ Cryptocurrency Name }\n    props:\n      type: ohlc\n      x: ?{ date_trunc('week', Date)::date::varchar }\n      close: ?{ max_by(Value, Date) }\n      high: ?{ max(Value) }\n      low: ?{ min(Value) }\n      open: ?{ min_by(Value, Date) }\n      increasing:\n        line:\n          color: 'green'\n      decreasing:\n        line:\n          color: 'red'\n      xaxis: 'x'\n      yaxis: 'y'\n    filters:\n    - ?{Date >= '2015-01-01'}\n    - ?{ Cryptocurrency Name in ('Bitcoin (btc)', 'Ethereum (eth)', 'Dogecoin (doge)') }\n    - ?{ Measure Name = 'Price, USD' }\n```\n{% endraw %}", "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"description": "The unique name of the object across the entire project.", "title": "Name", "type": "string"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "model": {"description": "The model or model ref that Visivo should use to build the trace.", "oneOf": [{"pattern": "^ref\\(\\s*([a-zA-Z0-9\\s'\\\\-_]+)\\)$", "type": "string"}, {"type": "string"}, {"$ref": "#/$defs/SqlModel"}, {"$ref": "#/$defs/CsvScriptModel"}, {"$ref": "#/$defs/LocalMergeModel"}], "title": "Model"}, "cohort_on": {"anyOf": [{"oneOf": [{"type": "string"}]}, {"type": "null"}], "default": null, "description": "`cohort_on` enables splitting the trace out into different series or cohorts. The column or query referenced here will be used to cut the resulting trace.", "title": "Cohort On"}, "order_by": {"anyOf": [{"items": {"oneOf": [{"type": "string"}]}, "type": "array"}, {"type": "null"}], "default": null, "description": "Takes a `column()` or `?{}` reference. Orders the dataset so that information is presented in the correct order when the trace is added to a chart. Order by query statements support using `asc` and `desc`.", "title": "Order By"}, "filters": {"anyOf": [{"items": {"oneOf": [{"type": "string"}]}, "type": "array"}, {"type": "null"}], "default": null, "description": "A list of `column()` or `?{}` functions that evaluate to `true` or `false`. Can include aggregations in the sql statement.", "title": "Filters"}, "tests": {"anyOf": [{"items": {"$ref": "#/$defs/Test"}, "type": "array"}, {"type": "null"}], "default": null, "description": "A list of tests to run against the trace data. Enables making assertions about the nullability of data and relationships between data.", "title": "Tests"}, "columns": {"anyOf": [{"$ref": "#/$defs/TraceColumns"}, {"type": "null"}], "default": null, "description": "Place where you can define named sql select statements. Once they are defined here they can be referenced in the trace props or in tables built on the trace."}, "props": {"$ref": "#/$defs/TraceProps", "default": null, "description": "Trace props are the properties that are used to configure the trace."}}, "required": ["name", "model"], "title": "Trace", "type": "object"}, "TraceColumns": {"additionalProperties": true, "description": "Trace Columns enable you to reuse query elements as columns throughout multiple different areas within the trace.\n!!! tip\n\n    Using Trace Columns can help reduce copy and paste code!\n\nTrace Columns perform the same basic service that the `?{}` function does- allowing you to define sql select statements.\n\n!!! example {% raw %}\n\n    === With Inline `?{}` Function\n\n        ``` yaml\n        - name: Simple Line\n          model: ref(test-table)\n          props:\n            type: bar\n            x: ?{ x }\n            y: ?{ y }\n            marker:\n              color: ?{ case when x >= 5 then '#713B57' else 'grey' end }\n              line:\n                color: ?{ case when x >= 5 then '#713B57' else 'grey' end }\n            pattern:\n              shape: ?{ case when x = 5 then '/' when x = 6 THEN 'x' else '' end }\n            line:\n              width: ?{ case when x in (5,6) then 2.5 else null end }\n        ```\n\n    === With Trace Columns\n\n        ``` yaml\n        - name: Simple Line\n          model: ref(test-table)\n          columns:\n            x_data: ?{ x }\n            y_data: ?{ y }\n            color: ?{ case when x >= 5 then '#713B57' else 'grey' end }\n            shape: ?{ case when x = 5 then '/' when x = 6 THEN 'x' else '' end }\n            width: ?{ case when x in (5,6) then 2.5 else null end }\n          props:\n            type: bar\n            x: ${ columns.x_data }\n            y: ${ columns.y_data }\n            marker:\n              color: ${ columns.color }\n              line:\n                color: ${ columns.color }\n            pattern:\n              shape: ${ columns.shape }\n            line:\n              width: ${ columns.width }\n        ```\n{% endraw %}\n\n## Slicing & Indexing Column Arrays\nTrace Columns support slicing and indexing, enabling you to pull out sub-arrays or specific values from a given column array.\n\n### Indexing\nSome trace configurations require numbers or strings as inputs. For example indicator traces require a single number to represent as the\nbig value in the card. Since the `?{}` and `column()` functions always return arrays, indexing allows you to grab a single value\nfrom the array to use in configurations that require a single value.\n\nYou can index columns by using the following syntax:\n``` yaml\ncolumn(column_name)[index]\n```\nThe `index` is a zero-based index that represents the position in the array you want to pull out. Negative indexes are also supported,\nallowing you to count from the end of the array. The last value in the array is represented by -1, the second to last by -2, and so on.\n\n!!! example\n\n    A great example of a situation where you would want to use Column indexing are indicator traces.\n    ``` yaml\n    - name: Indicator Trace\n      model: ref(csv)\n      columns:\n        x_data: ?{ x }\n        y_data: ?{ y }\n      props:\n        type: indicator\n        mode: number+delta\n        value: ?{ columns.y_data[0] }\n        number:\n          prefix: $\n        delta:\n          position: top\n          reference: ?{ columns.y_data[1] }\n    ```\n    In the trace above `column(y_data)[0]` is pulling the first item in the array as the value and comparing its delta to the second item in the column y_data array.\n\n### Slicing\nSlicing allows you to pull out a sub-array from a given column array. This is useful when you only want to use a portion of the array in\na given configuration, but don't want to filter the whole trace.\n\nYou can slice columns by using the following syntax:\n``` yaml\ncolumn(column_name)[start:stop]\n```\nThe `start` and `stop` values are zero-based indexes that represent the start and end of the slice you want to pull out.\nNegative indexes are also supported, allowing you to count from the end of the array. The last value in the array is represented\nby -1, the second to last by -2, and so on.\n\nIf you omit the stop value, the slice will continue to the end of the array. If you omit the start value, the slice will start at\nthe beginning of the array.\n\n!!! example\n\n    Surface plots can be a really useful place to utilize slicing.\n    ``` yaml\n    - name: Surface Trace\n      model: ${ ref(csv) }\n      columns:\n        x_data: ?{ x }\n        y_data: ?{ y }\n      props:\n        type: surface\n        z:\n          - ${ columns.x_data }\n          - ${ columns.x_data[0:5] }\n          - ${ columns.x_data[5:10] }\n          - ${ columns.y_data }\n          - ${ columns.y_data[0:5] }\n          - ${ columns.y_data[5:10] }\n    ```\n    The trace above is creating a surface plot with lines on the plane of different lengths that represent different portions\n    of the x_data and y_data arrays.", "properties": {}, "title": "TraceColumns", "type": "object"}, "TraceProps": {"additionalProperties": true, "properties": {"type": {"$ref": "#/$defs/TraceType", "description": "Type of the trace"}}, "required": ["type"], "title": "TraceProps", "type": "object"}, "TraceType": {"enum": ["bar", "barpolar", "box", "candlestick", "carpet", "choropleth", "choroplethmap", "choroplethmapbox", "cone", "contour", "contourcarpet", "densitymap", "densitymapbox", "funnel", "funnelarea", "heatmap", "histogram", "histogram2d", "histogram2dcontour", "icicle", "image", "indicator", "isosurface", "mesh3d", "ohlc", "parcats", "parcoords", "pie", "sankey", "scatter", "scatter3d", "scattercarpet", "scattergeo", "scattergl", "scattermap", "scattermapbox", "scatterpolar", "scatterpolargl", "scattersmith", "scatterternary", "splom", "streamtube", "sunburst", "surface", "treemap", "violin", "volume", "waterfall"], "title": "TraceType", "type": "string"}}, "additionalProperties": false, "properties": {"path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "A unique path to this object", "title": "Path"}, "name": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The unique name of the object across the entire project.", "title": "Name"}, "file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "description": "The path to the file that contains the object definition.", "title": "File Path"}, "defaults": {"anyOf": [{"$ref": "#/$defs/Defaults"}, {"type": "null"}], "default": null}, "dbt": {"anyOf": [{"$ref": "#/$defs/Dbt"}, {"type": "null"}], "default": null}, "project_file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": null, "title": "Project File Path"}, "cli_version": {"anyOf": [{"type": "string"}, {"type": "null"}], "default": "1.0.59", "description": "The version of the CLI that created the project.", "title": "Cli Version"}, "includes": {"default": [], "items": {"$ref": "#/$defs/Include"}, "title": "Includes", "type": "array"}, "destinations": {"default": [], "items": {"discriminator": {"mapping": {"console": "#/$defs/ConsoleDestination", "email": "#/$defs/EmailDestination", "slack": "#/$defs/SlackDestination"}, "propertyName": "type"}, "oneOf": [{"$ref": "#/$defs/SlackDestination"}, {"$ref": "#/$defs/EmailDestination"}, {"$ref": "#/$defs/ConsoleDestination"}]}, "title": "Destinations", "type": "array"}, "alerts": {"default": [], "items": {"$ref": "#/$defs/Alert"}, "title": "Alerts", "type": "array"}, "sources": {"default": [], "description": "A list of source objects.", "items": {"oneOf": [{"$ref": "#/$defs/SqliteSource"}, {"$ref": "#/$defs/PostgresqlSource"}, {"$ref": "#/$defs/MysqlSource"}, {"$ref": "#/$defs/SnowflakeSource"}, {"$ref": "#/$defs/BigQuerySource"}, {"$ref": "#/$defs/DuckdbSource"}]}, "title": "Sources", "type": "array"}, "models": {"default": [], "items": {"oneOf": [{"$ref": "#/$defs/SqlModel"}, {"$ref": "#/$defs/CsvScriptModel"}, {"$ref": "#/$defs/LocalMergeModel"}]}, "title": "Models", "type": "array"}, "traces": {"default": [], "items": {"$ref": "#/$defs/Trace"}, "title": "Traces", "type": "array"}, "tables": {"default": [], "items": {"$ref": "#/$defs/Table"}, "title": "Tables", "type": "array"}, "charts": {"default": [], "items": {"$ref": "#/$defs/Chart"}, "title": "Charts", "type": "array"}, "selectors": {"default": [], "items": {"$ref": "#/$defs/Selector"}, "title": "Selectors", "type": "array"}, "dashboards": {"default": [], "items": {"oneOf": [{"$ref": "#/$defs/Dashboard"}, {"$ref": "#/$defs/ExternalDashboard"}]}, "title": "Dashboards", "type": "array"}}, "title": "Project", "type": "object", "$schema": "https://json-schema.org/draft/2020-12/schema"}